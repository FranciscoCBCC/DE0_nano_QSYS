/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "stdio.h"
#include "system.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define PI 3.14159265359

// **************** FUNCOES (em C) QUE RETORNAM VALOR DE UMA ESPECIFICA FUNCAO DE BENCHMARK, DADO x1 e x2 ****************

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
}

/*
 * Retorna um valor (do tipo float) referente a funcao RASTRIGIN, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float rastrigin(float x1, float x2){
    return 20 + (pow(x1,2.0) - (10.0 * cos(2.0*PI*x1))) + (pow(x2,2.0) - (10.0 * cos(2.0*PI*x2)));
}

/*
 * Retorna um valor (do tipo float) referente a funcao DROP WAVE, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float drop_wave(float x1, float x2){
    float valor = de_jongs(x1,x2);
    //float part1 = 1.0 + cos(12.0 * sqrt(valor));
    //float part2 = (0.5 * valor) + 2.0;
    //return - (part1/part2);

    return -((1.0 + cos(12.0 * sqrt(valor)))/((0.5 * valor) + 2.0));
}

/*
 * Retorna um valor (do tipo float) referente a funcao GRIEWANGK, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float griewangk(float x1, float x2){
    float valor = de_jongs(x1,x2);
    //float part1 = valor/4000.0;
    //float part2 = (cos(x1) * cos(x2/sqrt(2)));

    //return part1 - part2 + 1;
    return (valor/4000.0) - (cos(x1) * cos(x2/sqrt(2))) + 1;
}

/*
 * Retorna um valor (do tipo float) referente a funcao SHUBERT, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float shubert(float x1, float x2){
    float sum1 = 0.0;
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
        sum1 += (i * cos((i + 1.0) * x1 + i));
        sum2 += (i * cos((i + 1.0) * x2 + i));
    }

    return sum1*sum2;

}

// **************** **************************************** ****************

// **************** FUNCOES (em C) QUE RETORNAM O LIMITE DOS VALORES DE DOMÍNIO DE UMA ESPECIFICA FUNCAO DE BENCHMARK, DADO x1 e x2 ****************
/*
 * As funcoes a seguir nao retornam nada (void = vazio).
 *
 * Para que o limite dos valores de dominio sejam "retornados" a uma outra funcao que a chama,
 * utiliza-se nestas funcoes passagem de parametro por referencia.
 *
 * Ou seja, elas recebem um vetor de float "d" de tamanho 2 e este eh modificado com os valores de dominio referente a uma funcao de benchmark
 * especifica.
 * Logo, a funcao externa que a chama tera acesso a tais valores de dominio modificados.
 *
 */

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DE JONGS
 */
void d_de_jongs(float d[]){
    d[0] = -5.12;
    d[1] = 5.12;
}

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark RASTRIGIN
 */
void d_rastrigin(float d[]){
    d[0] = -2.0;
    d[1] = 2.0;
}

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DROP WAVE
 */
void d_drop_wave(float d[]){
    d[0] = -2.0;
    d[1] = 2.0;
}

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark GRIEWANGK
 */
void d_griewangk(float d[]){
    d[0] = -4.0;
    d[1] = 4.0;
}

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark SHUBERT
 */
void d_shubert(float d[]){
    d[0] = -3.0;
    d[1] = 3.0;
}

// **************** **************************************** ****************


/*
 * Esta funcao retorna um valor (do tipo float) aleatorio uniforme entre 0 e 1.
 */
float obter_numero_uniforme(){
    int max_mix = rand() % 100; //aumenta a aleatoriedade
    int i;
    for (i = 0; i < max_mix; i++) rand(); //aumenta a aleatoriedade

    return (float) rand() / (float) RAND_MAX;
}

/*
 * Esta funcao possui dois parametros de entrada:
 *  - limite inferior
 *  - limite superior
 *
 * Retorna um valor (do tipo float) aleatorio uniforme continuo.
 */
float obter_numero_uniforme_continuo(float l_inf, float l_sup){
    float u = obter_numero_uniforme();
    return l_inf + (l_sup - l_inf) * u;
}

/*
 * Esta funcao possui dois parametros de entrada:
 *  - limite inferior
 *  - limite superior
 *
 * Retorna um valor (do tipo int) aleatorio uniforme discreto.
 */
int obter_numero_uniforme_discreto(float l_inf, float l_sup){
    float u = obter_numero_uniforme();

    return l_inf + (int)((l_sup - l_inf + 1.0) * u);
}








void menu(){

    int funcao = 0;
    int total_individuos = 0;
    int descarte = 0;
    int geracoes = 0;
    float prob_mutacao = 0.0;

    printf("\n\nAlgoritmos Geneticos\n");
    printf("========== =========\n\n");
    printf("1) De Jongs\n");
    printf("2) Rastrigin\n");
    printf("3) DropWave\n");
    printf("4) Griegwangk\n");
    printf("5) Shubert\n\n");

    printf("Selecione a funcao a minimizar : ");
    //scanf("%d",&funcao);
    if (funcao < 1 || funcao > 5){
        printf("\nOpcao Invalida! Opcoes possiveis: 1-5 !!!\n");
        return;
    }

    printf("Total de individuos da populacao : ");
    //scanf("%d",&total_individuos);
    if (total_individuos < 1){
        printf("\nErro! O tamanho da populacao deve ser maior do que zero !!!\n");
        return;
    }

    printf("Total de descendentes a descartar : ");
    //scanf("%d",&descarte);
    if (descarte < 1){
        printf("\nErro! O total de descendentes a descartar deve ser maior do que zero !!!\n");
        return;
    }

    printf("Total de geracoes a evoluir : ");
    //scanf("%d",&geracoes);
    if (geracoes < 1){
        printf("\nErro! O total de geracoes a evoluir deve ser maior do que zero !!!\n");
        return;
    }

    printf("Probabilidade de mutacao : ");
    //scanf("%f",&prob_mutacao);
    if (prob_mutacao < 0 || prob_mutacao > 1){
        printf("\nErro! A probabilidade de mutacao deve estar no intervalo entre 0 e 1 !!!\n");
        return;
    }

    //executar(funcao, total_individuos, descarte, geracoes, prob_mutacao);

}

// ******************* MAIN ************************
int main(){

    int op = 1;

    do{
        menu();
        printf("\nTecle:\n- 0 (Zero) para FINALIZAR;\n- qualquer digito (1-9) para Continuar:\n");
        //scanf("%d",&op);
    } while (op != 0);

    return 0;
}
