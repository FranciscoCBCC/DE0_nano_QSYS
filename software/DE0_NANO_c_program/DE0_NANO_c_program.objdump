
DE0_NANO_c_program.elf:     file format elf32-littlenios2
DE0_NANO_c_program.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00000b5c memsz 0x00000b5c flags r-x
    LOAD off    0x00001b7c vaddr 0x00020b7c paddr 0x00020c6c align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001d5c vaddr 0x00020d5c paddr 0x00020d5c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00001c6c  2**0
                  CONTENTS
  2 .text         00000b4c  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00020b6c  00020b6c  00001b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00020b7c  00020c6c  00001b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00020d5c  00020d5c  00001d5c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00020d6c  00020d6c  00001c6c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000270  00000000  00000000  00001c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000343d  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000122a  00000000  00000000  0000533d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000147d  00000000  00000000  00006567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000384  00000000  00000000  000079e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ee3  00000000  00000000  00007d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001188  00000000  00000000  00008c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00009dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  00009de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000aff8  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000affb  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b007  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b008  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000b009  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000b01f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0000b02a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0000b032  2**0
                  CONTENTS, READONLY
 26 .jdi          00003f24  00000000  00000000  0000b05a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002b709  00000000  00000000  0000ef7e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
00020b6c l    d  .rodata	00000000 .rodata
00020b7c l    d  .rwdata	00000000 .rwdata
00020d5c l    d  .bss	00000000 .bss
00020d6c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE0_NANO_c_program_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020104 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00020b7c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00020820 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00020a6c g     F .text	0000002c alt_main
00020c6c g       *ABS*	00000000 __flash_rwdata_start
000200b8 g     F .text	0000004c printf
00020b64 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00020d5c g     O .bss	00000004 errno
00020d64 g     O .bss	00000004 alt_argv
00028c5c g       *ABS*	00000000 _gp
0002007c g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002093c g     F .text	00000008 .hidden __udivsi3
00020c5c g     O .rwdata	00000004 _global_impure_ptr
00020d6c g       *ABS*	00000000 __bss_end
00020b5c g     F .text	00000004 alt_dcache_flush_all
00020c6c g       *ABS*	00000000 __ram_rwdata_end
00020a98 g     F .text	0000006c write
00020b7c g       *ABS*	00000000 __ram_rodata_end
00020c64 g     O .rwdata	00000004 jtag_uart_0
00020944 g     F .text	00000008 .hidden __umodsi3
00020d6c g       *ABS*	00000000 end
00028c00 g       *ABS*	00000000 __alt_stack_pointer
00020b28 g     F .text	00000034 altera_avalon_jtag_uart_write
00020170 g     F .text	0000056c ___vfprintf_internal_r
00020020 g     F .text	0000003c _start
00020b24 g     F .text	00000004 alt_sys_init
0002094c g     F .text	00000028 .hidden __mulsi3
00020b7c g       *ABS*	00000000 __ram_rwdata_start
00020b6c g       *ABS*	00000000 __ram_rodata_start
00020d6c g       *ABS*	00000000 __alt_stack_base
00020700 g     F .text	000000ac __sfvwrite_small_dev
00020d5c g       *ABS*	00000000 __bss_start
0002005c g     F .text	00000020 main
00020d60 g     O .bss	00000004 alt_envp
00020c68 g     O .rwdata	00000004 alt_errno
0002088c g     F .text	00000054 .hidden __divsi3
00020b6c g       *ABS*	00000000 __flash_rodata_start
00020b04 g     F .text	00000020 alt_irq_init
000207c8 g     F .text	00000058 _write_r
00020c60 g     O .rwdata	00000004 _impure_ptr
00020d68 g     O .bss	00000004 alt_argc
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020c6c g       *ABS*	00000000 _edata
00020d6c g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
000208e0 g     F .text	0000005c .hidden __modsi3
00028c00 g       *ABS*	00000000 __alt_data_end
0002000c g       .entry	00000000 _exit
000207ac g     F .text	0000001c strlen
00020b60 g     F .text	00000004 alt_icache_flush_all
000206dc g     F .text	00000024 __vfprintf_internal
00020974 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dee30014 	ori	sp,sp,35840
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a31714 	ori	gp,gp,35932
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	10835714 	ori	r2,r2,3420

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18c35b14 	ori	r3,r3,3436

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_gp+0xffff73e8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00209740 	call	20974 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	0020a6c0 	call	20a6c <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <_gp+0xffff73fc>

0002005c <main>:
	int i = 0;

	for(i=0; i<1000000000; i++){
		a=+i;
	}
	printf("Resultado: %d", a);
   2005c:	010000b4 	movhi	r4,2
   20060:	014ee6f4 	movhi	r5,15259

#include "stdio.h"
#include "system.h"

int main()
{ 
   20064:	deffff04 	addi	sp,sp,-4
	int i = 0;

	for(i=0; i<1000000000; i++){
		a=+i;
	}
	printf("Resultado: %d", a);
   20068:	2102db04 	addi	r4,r4,2924
   2006c:	29727fc4 	addi	r5,r5,-13825

#include "stdio.h"
#include "system.h"

int main()
{ 
   20070:	dfc00015 	stw	ra,0(sp)
	int i = 0;

	for(i=0; i<1000000000; i++){
		a=+i;
	}
	printf("Resultado: %d", a);
   20074:	00200b80 	call	200b8 <printf>


  /* Event loop never exits. */
  while (1);
   20078:	003fff06 	br	20078 <_gp+0xffff741c>

0002007c <_printf_r>:
   2007c:	defffd04 	addi	sp,sp,-12
   20080:	dfc00015 	stw	ra,0(sp)
   20084:	d9800115 	stw	r6,4(sp)
   20088:	d9c00215 	stw	r7,8(sp)
   2008c:	20c00217 	ldw	r3,8(r4)
   20090:	280d883a 	mov	r6,r5
   20094:	014000b4 	movhi	r5,2
   20098:	2941c004 	addi	r5,r5,1792
   2009c:	19400115 	stw	r5,4(r3)
   200a0:	21400217 	ldw	r5,8(r4)
   200a4:	d9c00104 	addi	r7,sp,4
   200a8:	00201700 	call	20170 <___vfprintf_internal_r>
   200ac:	dfc00017 	ldw	ra,0(sp)
   200b0:	dec00304 	addi	sp,sp,12
   200b4:	f800283a 	ret

000200b8 <printf>:
   200b8:	defffc04 	addi	sp,sp,-16
   200bc:	dfc00015 	stw	ra,0(sp)
   200c0:	d9400115 	stw	r5,4(sp)
   200c4:	d9800215 	stw	r6,8(sp)
   200c8:	d9c00315 	stw	r7,12(sp)
   200cc:	008000b4 	movhi	r2,2
   200d0:	10831804 	addi	r2,r2,3168
   200d4:	10800017 	ldw	r2,0(r2)
   200d8:	200b883a 	mov	r5,r4
   200dc:	010000b4 	movhi	r4,2
   200e0:	10c00217 	ldw	r3,8(r2)
   200e4:	2101c004 	addi	r4,r4,1792
   200e8:	d9800104 	addi	r6,sp,4
   200ec:	19000115 	stw	r4,4(r3)
   200f0:	11000217 	ldw	r4,8(r2)
   200f4:	00206dc0 	call	206dc <__vfprintf_internal>
   200f8:	dfc00017 	ldw	ra,0(sp)
   200fc:	dec00404 	addi	sp,sp,16
   20100:	f800283a 	ret

00020104 <print_repeat>:
   20104:	defffb04 	addi	sp,sp,-20
   20108:	dc800315 	stw	r18,12(sp)
   2010c:	dc400215 	stw	r17,8(sp)
   20110:	dc000115 	stw	r16,4(sp)
   20114:	dfc00415 	stw	ra,16(sp)
   20118:	2025883a 	mov	r18,r4
   2011c:	2823883a 	mov	r17,r5
   20120:	d9800005 	stb	r6,0(sp)
   20124:	3821883a 	mov	r16,r7
   20128:	04000a0e 	bge	zero,r16,20154 <print_repeat+0x50>
   2012c:	88800117 	ldw	r2,4(r17)
   20130:	9009883a 	mov	r4,r18
   20134:	880b883a 	mov	r5,r17
   20138:	d80d883a 	mov	r6,sp
   2013c:	01c00044 	movi	r7,1
   20140:	103ee83a 	callr	r2
   20144:	843fffc4 	addi	r16,r16,-1
   20148:	103ff726 	beq	r2,zero,20128 <_gp+0xffff74cc>
   2014c:	00bfffc4 	movi	r2,-1
   20150:	00000106 	br	20158 <print_repeat+0x54>
   20154:	0005883a 	mov	r2,zero
   20158:	dfc00417 	ldw	ra,16(sp)
   2015c:	dc800317 	ldw	r18,12(sp)
   20160:	dc400217 	ldw	r17,8(sp)
   20164:	dc000117 	ldw	r16,4(sp)
   20168:	dec00504 	addi	sp,sp,20
   2016c:	f800283a 	ret

00020170 <___vfprintf_internal_r>:
   20170:	deffe304 	addi	sp,sp,-116
   20174:	d8c00804 	addi	r3,sp,32
   20178:	df001b15 	stw	fp,108(sp)
   2017c:	ddc01a15 	stw	r23,104(sp)
   20180:	dd801915 	stw	r22,100(sp)
   20184:	dd401815 	stw	r21,96(sp)
   20188:	dd001715 	stw	r20,92(sp)
   2018c:	dcc01615 	stw	r19,88(sp)
   20190:	dc801515 	stw	r18,84(sp)
   20194:	dc401415 	stw	r17,80(sp)
   20198:	dc001315 	stw	r16,76(sp)
   2019c:	dfc01c15 	stw	ra,112(sp)
   201a0:	2029883a 	mov	r20,r4
   201a4:	2823883a 	mov	r17,r5
   201a8:	3839883a 	mov	fp,r7
   201ac:	d9800f15 	stw	r6,60(sp)
   201b0:	0021883a 	mov	r16,zero
   201b4:	d8000e15 	stw	zero,56(sp)
   201b8:	002f883a 	mov	r23,zero
   201bc:	002b883a 	mov	r21,zero
   201c0:	0027883a 	mov	r19,zero
   201c4:	0025883a 	mov	r18,zero
   201c8:	d8000c15 	stw	zero,48(sp)
   201cc:	d8000b15 	stw	zero,44(sp)
   201d0:	002d883a 	mov	r22,zero
   201d4:	d8c00915 	stw	r3,36(sp)
   201d8:	d8c00f17 	ldw	r3,60(sp)
   201dc:	19000003 	ldbu	r4,0(r3)
   201e0:	20803fcc 	andi	r2,r4,255
   201e4:	1080201c 	xori	r2,r2,128
   201e8:	10bfe004 	addi	r2,r2,-128
   201ec:	10012e26 	beq	r2,zero,206a8 <___vfprintf_internal_r+0x538>
   201f0:	01400044 	movi	r5,1
   201f4:	b1401426 	beq	r22,r5,20248 <___vfprintf_internal_r+0xd8>
   201f8:	2d800216 	blt	r5,r22,20204 <___vfprintf_internal_r+0x94>
   201fc:	b0000626 	beq	r22,zero,20218 <___vfprintf_internal_r+0xa8>
   20200:	00012506 	br	20698 <___vfprintf_internal_r+0x528>
   20204:	01400084 	movi	r5,2
   20208:	b1401d26 	beq	r22,r5,20280 <___vfprintf_internal_r+0x110>
   2020c:	014000c4 	movi	r5,3
   20210:	b1402b26 	beq	r22,r5,202c0 <___vfprintf_internal_r+0x150>
   20214:	00012006 	br	20698 <___vfprintf_internal_r+0x528>
   20218:	01400944 	movi	r5,37
   2021c:	11410d26 	beq	r2,r5,20654 <___vfprintf_internal_r+0x4e4>
   20220:	88800117 	ldw	r2,4(r17)
   20224:	d9000005 	stb	r4,0(sp)
   20228:	880b883a 	mov	r5,r17
   2022c:	a009883a 	mov	r4,r20
   20230:	d80d883a 	mov	r6,sp
   20234:	01c00044 	movi	r7,1
   20238:	103ee83a 	callr	r2
   2023c:	1000e81e 	bne	r2,zero,205e0 <___vfprintf_internal_r+0x470>
   20240:	84000044 	addi	r16,r16,1
   20244:	00011406 	br	20698 <___vfprintf_internal_r+0x528>
   20248:	01400c04 	movi	r5,48
   2024c:	11410a26 	beq	r2,r5,20678 <___vfprintf_internal_r+0x508>
   20250:	01400944 	movi	r5,37
   20254:	11400a1e 	bne	r2,r5,20280 <___vfprintf_internal_r+0x110>
   20258:	d8800005 	stb	r2,0(sp)
   2025c:	88800117 	ldw	r2,4(r17)
   20260:	a009883a 	mov	r4,r20
   20264:	880b883a 	mov	r5,r17
   20268:	d80d883a 	mov	r6,sp
   2026c:	b00f883a 	mov	r7,r22
   20270:	103ee83a 	callr	r2
   20274:	1000da1e 	bne	r2,zero,205e0 <___vfprintf_internal_r+0x470>
   20278:	84000044 	addi	r16,r16,1
   2027c:	00010506 	br	20694 <___vfprintf_internal_r+0x524>
   20280:	25bff404 	addi	r22,r4,-48
   20284:	b5803fcc 	andi	r22,r22,255
   20288:	00c00244 	movi	r3,9
   2028c:	1d800936 	bltu	r3,r22,202b4 <___vfprintf_internal_r+0x144>
   20290:	00bfffc4 	movi	r2,-1
   20294:	90800426 	beq	r18,r2,202a8 <___vfprintf_internal_r+0x138>
   20298:	9009883a 	mov	r4,r18
   2029c:	01400284 	movi	r5,10
   202a0:	002094c0 	call	2094c <__mulsi3>
   202a4:	00000106 	br	202ac <___vfprintf_internal_r+0x13c>
   202a8:	0005883a 	mov	r2,zero
   202ac:	15a5883a 	add	r18,r2,r22
   202b0:	0000f206 	br	2067c <___vfprintf_internal_r+0x50c>
   202b4:	01400b84 	movi	r5,46
   202b8:	1140f426 	beq	r2,r5,2068c <___vfprintf_internal_r+0x51c>
   202bc:	05800084 	movi	r22,2
   202c0:	213ff404 	addi	r4,r4,-48
   202c4:	20c03fcc 	andi	r3,r4,255
   202c8:	01000244 	movi	r4,9
   202cc:	20c00b36 	bltu	r4,r3,202fc <___vfprintf_internal_r+0x18c>
   202d0:	00bfffc4 	movi	r2,-1
   202d4:	98800626 	beq	r19,r2,202f0 <___vfprintf_internal_r+0x180>
   202d8:	9809883a 	mov	r4,r19
   202dc:	01400284 	movi	r5,10
   202e0:	d8c01115 	stw	r3,68(sp)
   202e4:	002094c0 	call	2094c <__mulsi3>
   202e8:	d8c01117 	ldw	r3,68(sp)
   202ec:	00000106 	br	202f4 <___vfprintf_internal_r+0x184>
   202f0:	0005883a 	mov	r2,zero
   202f4:	10e7883a 	add	r19,r2,r3
   202f8:	0000e706 	br	20698 <___vfprintf_internal_r+0x528>
   202fc:	01401b04 	movi	r5,108
   20300:	1140e026 	beq	r2,r5,20684 <___vfprintf_internal_r+0x514>
   20304:	013fffc4 	movi	r4,-1
   20308:	99000226 	beq	r19,r4,20314 <___vfprintf_internal_r+0x1a4>
   2030c:	d8000b15 	stw	zero,44(sp)
   20310:	00000106 	br	20318 <___vfprintf_internal_r+0x1a8>
   20314:	04c00044 	movi	r19,1
   20318:	01001a44 	movi	r4,105
   2031c:	11001626 	beq	r2,r4,20378 <___vfprintf_internal_r+0x208>
   20320:	20800916 	blt	r4,r2,20348 <___vfprintf_internal_r+0x1d8>
   20324:	010018c4 	movi	r4,99
   20328:	11009626 	beq	r2,r4,20584 <___vfprintf_internal_r+0x414>
   2032c:	01001904 	movi	r4,100
   20330:	11001126 	beq	r2,r4,20378 <___vfprintf_internal_r+0x208>
   20334:	01001604 	movi	r4,88
   20338:	1100d61e 	bne	r2,r4,20694 <___vfprintf_internal_r+0x524>
   2033c:	00c00044 	movi	r3,1
   20340:	d8c00e15 	stw	r3,56(sp)
   20344:	00001406 	br	20398 <___vfprintf_internal_r+0x228>
   20348:	01001cc4 	movi	r4,115
   2034c:	1100a626 	beq	r2,r4,205e8 <___vfprintf_internal_r+0x478>
   20350:	20800416 	blt	r4,r2,20364 <___vfprintf_internal_r+0x1f4>
   20354:	01001bc4 	movi	r4,111
   20358:	1100ce1e 	bne	r2,r4,20694 <___vfprintf_internal_r+0x524>
   2035c:	05400204 	movi	r21,8
   20360:	00000e06 	br	2039c <___vfprintf_internal_r+0x22c>
   20364:	01001d44 	movi	r4,117
   20368:	11000c26 	beq	r2,r4,2039c <___vfprintf_internal_r+0x22c>
   2036c:	01001e04 	movi	r4,120
   20370:	11000926 	beq	r2,r4,20398 <___vfprintf_internal_r+0x228>
   20374:	0000c706 	br	20694 <___vfprintf_internal_r+0x524>
   20378:	e0800104 	addi	r2,fp,4
   2037c:	b8000726 	beq	r23,zero,2039c <___vfprintf_internal_r+0x22c>
   20380:	d8800d15 	stw	r2,52(sp)
   20384:	e7000017 	ldw	fp,0(fp)
   20388:	e000080e 	bge	fp,zero,203ac <___vfprintf_internal_r+0x23c>
   2038c:	0739c83a 	sub	fp,zero,fp
   20390:	02000044 	movi	r8,1
   20394:	00000606 	br	203b0 <___vfprintf_internal_r+0x240>
   20398:	05400404 	movi	r21,16
   2039c:	e0c00104 	addi	r3,fp,4
   203a0:	d8c00d15 	stw	r3,52(sp)
   203a4:	e7000017 	ldw	fp,0(fp)
   203a8:	002f883a 	mov	r23,zero
   203ac:	0011883a 	mov	r8,zero
   203b0:	002d883a 	mov	r22,zero
   203b4:	dd87883a 	add	r3,sp,r22
   203b8:	e0001a26 	beq	fp,zero,20424 <___vfprintf_internal_r+0x2b4>
   203bc:	e009883a 	mov	r4,fp
   203c0:	a80b883a 	mov	r5,r21
   203c4:	d8c01115 	stw	r3,68(sp)
   203c8:	da001215 	stw	r8,72(sp)
   203cc:	002093c0 	call	2093c <__udivsi3>
   203d0:	a809883a 	mov	r4,r21
   203d4:	100b883a 	mov	r5,r2
   203d8:	d8801015 	stw	r2,64(sp)
   203dc:	002094c0 	call	2094c <__mulsi3>
   203e0:	e085c83a 	sub	r2,fp,r2
   203e4:	01000244 	movi	r4,9
   203e8:	d8c01117 	ldw	r3,68(sp)
   203ec:	d9801017 	ldw	r6,64(sp)
   203f0:	da001217 	ldw	r8,72(sp)
   203f4:	20800216 	blt	r4,r2,20400 <___vfprintf_internal_r+0x290>
   203f8:	17000c04 	addi	fp,r2,48
   203fc:	00000506 	br	20414 <___vfprintf_internal_r+0x2a4>
   20400:	d9400e17 	ldw	r5,56(sp)
   20404:	28000226 	beq	r5,zero,20410 <___vfprintf_internal_r+0x2a0>
   20408:	17000dc4 	addi	fp,r2,55
   2040c:	00000106 	br	20414 <___vfprintf_internal_r+0x2a4>
   20410:	170015c4 	addi	fp,r2,87
   20414:	1f000005 	stb	fp,0(r3)
   20418:	b5800044 	addi	r22,r22,1
   2041c:	3039883a 	mov	fp,r6
   20420:	003fe406 	br	203b4 <_gp+0xffff7758>
   20424:	1ec5c83a 	sub	r2,r3,sp
   20428:	d8800a15 	stw	r2,40(sp)
   2042c:	9885c83a 	sub	r2,r19,r2
   20430:	1839883a 	mov	fp,r3
   20434:	00800e0e 	bge	zero,r2,20470 <___vfprintf_internal_r+0x300>
   20438:	182d883a 	mov	r22,r3
   2043c:	1885883a 	add	r2,r3,r2
   20440:	01000c04 	movi	r4,48
   20444:	d9400917 	ldw	r5,36(sp)
   20448:	b007883a 	mov	r3,r22
   2044c:	b140052e 	bgeu	r22,r5,20464 <___vfprintf_internal_r+0x2f4>
   20450:	b5800044 	addi	r22,r22,1
   20454:	19000005 	stb	r4,0(r3)
   20458:	b039883a 	mov	fp,r22
   2045c:	b0bff91e 	bne	r22,r2,20444 <_gp+0xffff77e8>
   20460:	00000106 	br	20468 <___vfprintf_internal_r+0x2f8>
   20464:	b039883a 	mov	fp,r22
   20468:	b6edc83a 	sub	r22,r22,sp
   2046c:	dd800a15 	stw	r22,40(sp)
   20470:	d8800a17 	ldw	r2,40(sp)
   20474:	1207883a 	add	r3,r2,r8
   20478:	90edc83a 	sub	r22,r18,r3
   2047c:	d8c00b17 	ldw	r3,44(sp)
   20480:	18001726 	beq	r3,zero,204e0 <___vfprintf_internal_r+0x370>
   20484:	40000a26 	beq	r8,zero,204b0 <___vfprintf_internal_r+0x340>
   20488:	00800b44 	movi	r2,45
   2048c:	d8800805 	stb	r2,32(sp)
   20490:	88800117 	ldw	r2,4(r17)
   20494:	a009883a 	mov	r4,r20
   20498:	880b883a 	mov	r5,r17
   2049c:	d9800804 	addi	r6,sp,32
   204a0:	01c00044 	movi	r7,1
   204a4:	103ee83a 	callr	r2
   204a8:	10004d1e 	bne	r2,zero,205e0 <___vfprintf_internal_r+0x470>
   204ac:	84000044 	addi	r16,r16,1
   204b0:	0580070e 	bge	zero,r22,204d0 <___vfprintf_internal_r+0x360>
   204b4:	a009883a 	mov	r4,r20
   204b8:	880b883a 	mov	r5,r17
   204bc:	01800c04 	movi	r6,48
   204c0:	b00f883a 	mov	r7,r22
   204c4:	00201040 	call	20104 <print_repeat>
   204c8:	1000451e 	bne	r2,zero,205e0 <___vfprintf_internal_r+0x470>
   204cc:	85a1883a 	add	r16,r16,r22
   204d0:	d9000a17 	ldw	r4,40(sp)
   204d4:	e007883a 	mov	r3,fp
   204d8:	272dc83a 	sub	r22,r4,fp
   204dc:	00002206 	br	20568 <___vfprintf_internal_r+0x3f8>
   204e0:	0580090e 	bge	zero,r22,20508 <___vfprintf_internal_r+0x398>
   204e4:	a009883a 	mov	r4,r20
   204e8:	880b883a 	mov	r5,r17
   204ec:	01800804 	movi	r6,32
   204f0:	b00f883a 	mov	r7,r22
   204f4:	da001215 	stw	r8,72(sp)
   204f8:	00201040 	call	20104 <print_repeat>
   204fc:	da001217 	ldw	r8,72(sp)
   20500:	1000371e 	bne	r2,zero,205e0 <___vfprintf_internal_r+0x470>
   20504:	85a1883a 	add	r16,r16,r22
   20508:	403ff126 	beq	r8,zero,204d0 <_gp+0xffff7874>
   2050c:	00800b44 	movi	r2,45
   20510:	d8800805 	stb	r2,32(sp)
   20514:	88800117 	ldw	r2,4(r17)
   20518:	a009883a 	mov	r4,r20
   2051c:	880b883a 	mov	r5,r17
   20520:	d9800804 	addi	r6,sp,32
   20524:	01c00044 	movi	r7,1
   20528:	103ee83a 	callr	r2
   2052c:	10002c1e 	bne	r2,zero,205e0 <___vfprintf_internal_r+0x470>
   20530:	84000044 	addi	r16,r16,1
   20534:	003fe606 	br	204d0 <_gp+0xffff7874>
   20538:	18ffffc4 	addi	r3,r3,-1
   2053c:	18800003 	ldbu	r2,0(r3)
   20540:	a009883a 	mov	r4,r20
   20544:	d8c01115 	stw	r3,68(sp)
   20548:	d8800805 	stb	r2,32(sp)
   2054c:	88800117 	ldw	r2,4(r17)
   20550:	880b883a 	mov	r5,r17
   20554:	d9800804 	addi	r6,sp,32
   20558:	01c00044 	movi	r7,1
   2055c:	103ee83a 	callr	r2
   20560:	d8c01117 	ldw	r3,68(sp)
   20564:	10001e1e 	bne	r2,zero,205e0 <___vfprintf_internal_r+0x470>
   20568:	80c5c83a 	sub	r2,r16,r3
   2056c:	1d89883a 	add	r4,r3,r22
   20570:	e085883a 	add	r2,fp,r2
   20574:	013ff016 	blt	zero,r4,20538 <_gp+0xffff78dc>
   20578:	1021883a 	mov	r16,r2
   2057c:	df000d17 	ldw	fp,52(sp)
   20580:	00004406 	br	20694 <___vfprintf_internal_r+0x524>
   20584:	01000044 	movi	r4,1
   20588:	2480080e 	bge	r4,r18,205ac <___vfprintf_internal_r+0x43c>
   2058c:	95bfffc4 	addi	r22,r18,-1
   20590:	a009883a 	mov	r4,r20
   20594:	880b883a 	mov	r5,r17
   20598:	01800804 	movi	r6,32
   2059c:	b00f883a 	mov	r7,r22
   205a0:	00201040 	call	20104 <print_repeat>
   205a4:	10000e1e 	bne	r2,zero,205e0 <___vfprintf_internal_r+0x470>
   205a8:	85a1883a 	add	r16,r16,r22
   205ac:	e0800017 	ldw	r2,0(fp)
   205b0:	a009883a 	mov	r4,r20
   205b4:	880b883a 	mov	r5,r17
   205b8:	d8800005 	stb	r2,0(sp)
   205bc:	88800117 	ldw	r2,4(r17)
   205c0:	d80d883a 	mov	r6,sp
   205c4:	01c00044 	movi	r7,1
   205c8:	e5800104 	addi	r22,fp,4
   205cc:	103ee83a 	callr	r2
   205d0:	1000031e 	bne	r2,zero,205e0 <___vfprintf_internal_r+0x470>
   205d4:	84000044 	addi	r16,r16,1
   205d8:	b039883a 	mov	fp,r22
   205dc:	00002d06 	br	20694 <___vfprintf_internal_r+0x524>
   205e0:	00bfffc4 	movi	r2,-1
   205e4:	00003106 	br	206ac <___vfprintf_internal_r+0x53c>
   205e8:	e5800017 	ldw	r22,0(fp)
   205ec:	e0c00104 	addi	r3,fp,4
   205f0:	d8c00a15 	stw	r3,40(sp)
   205f4:	b009883a 	mov	r4,r22
   205f8:	00207ac0 	call	207ac <strlen>
   205fc:	9091c83a 	sub	r8,r18,r2
   20600:	1039883a 	mov	fp,r2
   20604:	0200090e 	bge	zero,r8,2062c <___vfprintf_internal_r+0x4bc>
   20608:	400f883a 	mov	r7,r8
   2060c:	a009883a 	mov	r4,r20
   20610:	880b883a 	mov	r5,r17
   20614:	01800804 	movi	r6,32
   20618:	da001215 	stw	r8,72(sp)
   2061c:	00201040 	call	20104 <print_repeat>
   20620:	da001217 	ldw	r8,72(sp)
   20624:	103fee1e 	bne	r2,zero,205e0 <_gp+0xffff7984>
   20628:	8221883a 	add	r16,r16,r8
   2062c:	88800117 	ldw	r2,4(r17)
   20630:	a009883a 	mov	r4,r20
   20634:	880b883a 	mov	r5,r17
   20638:	b00d883a 	mov	r6,r22
   2063c:	e00f883a 	mov	r7,fp
   20640:	103ee83a 	callr	r2
   20644:	103fe61e 	bne	r2,zero,205e0 <_gp+0xffff7984>
   20648:	8721883a 	add	r16,r16,fp
   2064c:	df000a17 	ldw	fp,40(sp)
   20650:	00001006 	br	20694 <___vfprintf_internal_r+0x524>
   20654:	05c00044 	movi	r23,1
   20658:	04ffffc4 	movi	r19,-1
   2065c:	d8000e15 	stw	zero,56(sp)
   20660:	05400284 	movi	r21,10
   20664:	9825883a 	mov	r18,r19
   20668:	d8000c15 	stw	zero,48(sp)
   2066c:	d8000b15 	stw	zero,44(sp)
   20670:	b82d883a 	mov	r22,r23
   20674:	00000806 	br	20698 <___vfprintf_internal_r+0x528>
   20678:	dd800b15 	stw	r22,44(sp)
   2067c:	05800084 	movi	r22,2
   20680:	00000506 	br	20698 <___vfprintf_internal_r+0x528>
   20684:	00c00044 	movi	r3,1
   20688:	d8c00c15 	stw	r3,48(sp)
   2068c:	058000c4 	movi	r22,3
   20690:	00000106 	br	20698 <___vfprintf_internal_r+0x528>
   20694:	002d883a 	mov	r22,zero
   20698:	d8c00f17 	ldw	r3,60(sp)
   2069c:	18c00044 	addi	r3,r3,1
   206a0:	d8c00f15 	stw	r3,60(sp)
   206a4:	003ecc06 	br	201d8 <_gp+0xffff757c>
   206a8:	8005883a 	mov	r2,r16
   206ac:	dfc01c17 	ldw	ra,112(sp)
   206b0:	df001b17 	ldw	fp,108(sp)
   206b4:	ddc01a17 	ldw	r23,104(sp)
   206b8:	dd801917 	ldw	r22,100(sp)
   206bc:	dd401817 	ldw	r21,96(sp)
   206c0:	dd001717 	ldw	r20,92(sp)
   206c4:	dcc01617 	ldw	r19,88(sp)
   206c8:	dc801517 	ldw	r18,84(sp)
   206cc:	dc401417 	ldw	r17,80(sp)
   206d0:	dc001317 	ldw	r16,76(sp)
   206d4:	dec01d04 	addi	sp,sp,116
   206d8:	f800283a 	ret

000206dc <__vfprintf_internal>:
   206dc:	2007883a 	mov	r3,r4
   206e0:	010000b4 	movhi	r4,2
   206e4:	21031804 	addi	r4,r4,3168
   206e8:	21000017 	ldw	r4,0(r4)
   206ec:	2805883a 	mov	r2,r5
   206f0:	300f883a 	mov	r7,r6
   206f4:	180b883a 	mov	r5,r3
   206f8:	100d883a 	mov	r6,r2
   206fc:	00201701 	jmpi	20170 <___vfprintf_internal_r>

00020700 <__sfvwrite_small_dev>:
   20700:	2880000b 	ldhu	r2,0(r5)
   20704:	defffa04 	addi	sp,sp,-24
   20708:	dc000015 	stw	r16,0(sp)
   2070c:	dfc00515 	stw	ra,20(sp)
   20710:	dd000415 	stw	r20,16(sp)
   20714:	dcc00315 	stw	r19,12(sp)
   20718:	dc800215 	stw	r18,8(sp)
   2071c:	dc400115 	stw	r17,4(sp)
   20720:	1080020c 	andi	r2,r2,8
   20724:	2821883a 	mov	r16,r5
   20728:	10001726 	beq	r2,zero,20788 <__sfvwrite_small_dev+0x88>
   2072c:	2880008f 	ldh	r2,2(r5)
   20730:	10001216 	blt	r2,zero,2077c <__sfvwrite_small_dev+0x7c>
   20734:	2027883a 	mov	r19,r4
   20738:	3025883a 	mov	r18,r6
   2073c:	3823883a 	mov	r17,r7
   20740:	05010004 	movi	r20,1024
   20744:	04400b0e 	bge	zero,r17,20774 <__sfvwrite_small_dev+0x74>
   20748:	8140008f 	ldh	r5,2(r16)
   2074c:	880f883a 	mov	r7,r17
   20750:	a440010e 	bge	r20,r17,20758 <__sfvwrite_small_dev+0x58>
   20754:	01c10004 	movi	r7,1024
   20758:	9809883a 	mov	r4,r19
   2075c:	900d883a 	mov	r6,r18
   20760:	00207c80 	call	207c8 <_write_r>
   20764:	0080050e 	bge	zero,r2,2077c <__sfvwrite_small_dev+0x7c>
   20768:	88a3c83a 	sub	r17,r17,r2
   2076c:	90a5883a 	add	r18,r18,r2
   20770:	003ff406 	br	20744 <_gp+0xffff7ae8>
   20774:	0005883a 	mov	r2,zero
   20778:	00000406 	br	2078c <__sfvwrite_small_dev+0x8c>
   2077c:	8080000b 	ldhu	r2,0(r16)
   20780:	10801014 	ori	r2,r2,64
   20784:	8080000d 	sth	r2,0(r16)
   20788:	00bfffc4 	movi	r2,-1
   2078c:	dfc00517 	ldw	ra,20(sp)
   20790:	dd000417 	ldw	r20,16(sp)
   20794:	dcc00317 	ldw	r19,12(sp)
   20798:	dc800217 	ldw	r18,8(sp)
   2079c:	dc400117 	ldw	r17,4(sp)
   207a0:	dc000017 	ldw	r16,0(sp)
   207a4:	dec00604 	addi	sp,sp,24
   207a8:	f800283a 	ret

000207ac <strlen>:
   207ac:	2005883a 	mov	r2,r4
   207b0:	10c00007 	ldb	r3,0(r2)
   207b4:	18000226 	beq	r3,zero,207c0 <strlen+0x14>
   207b8:	10800044 	addi	r2,r2,1
   207bc:	003ffc06 	br	207b0 <_gp+0xffff7b54>
   207c0:	1105c83a 	sub	r2,r2,r4
   207c4:	f800283a 	ret

000207c8 <_write_r>:
   207c8:	defffd04 	addi	sp,sp,-12
   207cc:	dc000015 	stw	r16,0(sp)
   207d0:	040000b4 	movhi	r16,2
   207d4:	dc400115 	stw	r17,4(sp)
   207d8:	84035704 	addi	r16,r16,3420
   207dc:	2023883a 	mov	r17,r4
   207e0:	2809883a 	mov	r4,r5
   207e4:	300b883a 	mov	r5,r6
   207e8:	380d883a 	mov	r6,r7
   207ec:	dfc00215 	stw	ra,8(sp)
   207f0:	80000015 	stw	zero,0(r16)
   207f4:	0020a980 	call	20a98 <write>
   207f8:	00ffffc4 	movi	r3,-1
   207fc:	10c0031e 	bne	r2,r3,2080c <_write_r+0x44>
   20800:	80c00017 	ldw	r3,0(r16)
   20804:	18000126 	beq	r3,zero,2080c <_write_r+0x44>
   20808:	88c00015 	stw	r3,0(r17)
   2080c:	dfc00217 	ldw	ra,8(sp)
   20810:	dc400117 	ldw	r17,4(sp)
   20814:	dc000017 	ldw	r16,0(sp)
   20818:	dec00304 	addi	sp,sp,12
   2081c:	f800283a 	ret

00020820 <udivmodsi4>:
   20820:	2900182e 	bgeu	r5,r4,20884 <udivmodsi4+0x64>
   20824:	28001716 	blt	r5,zero,20884 <udivmodsi4+0x64>
   20828:	00800804 	movi	r2,32
   2082c:	00c00044 	movi	r3,1
   20830:	00000206 	br	2083c <udivmodsi4+0x1c>
   20834:	10001126 	beq	r2,zero,2087c <udivmodsi4+0x5c>
   20838:	28000516 	blt	r5,zero,20850 <udivmodsi4+0x30>
   2083c:	294b883a 	add	r5,r5,r5
   20840:	10bfffc4 	addi	r2,r2,-1
   20844:	18c7883a 	add	r3,r3,r3
   20848:	293ffa36 	bltu	r5,r4,20834 <_gp+0xffff7bd8>
   2084c:	18000b26 	beq	r3,zero,2087c <udivmodsi4+0x5c>
   20850:	0005883a 	mov	r2,zero
   20854:	21400236 	bltu	r4,r5,20860 <udivmodsi4+0x40>
   20858:	2149c83a 	sub	r4,r4,r5
   2085c:	10c4b03a 	or	r2,r2,r3
   20860:	1806d07a 	srli	r3,r3,1
   20864:	280ad07a 	srli	r5,r5,1
   20868:	183ffa1e 	bne	r3,zero,20854 <_gp+0xffff7bf8>
   2086c:	3000011e 	bne	r6,zero,20874 <udivmodsi4+0x54>
   20870:	f800283a 	ret
   20874:	2005883a 	mov	r2,r4
   20878:	f800283a 	ret
   2087c:	0005883a 	mov	r2,zero
   20880:	003ffa06 	br	2086c <_gp+0xffff7c10>
   20884:	00c00044 	movi	r3,1
   20888:	003ff106 	br	20850 <_gp+0xffff7bf4>

0002088c <__divsi3>:
   2088c:	defffe04 	addi	sp,sp,-8
   20890:	dfc00115 	stw	ra,4(sp)
   20894:	dc000015 	stw	r16,0(sp)
   20898:	20000b16 	blt	r4,zero,208c8 <__divsi3+0x3c>
   2089c:	0021883a 	mov	r16,zero
   208a0:	28000c16 	blt	r5,zero,208d4 <__divsi3+0x48>
   208a4:	000d883a 	mov	r6,zero
   208a8:	00208200 	call	20820 <udivmodsi4>
   208ac:	0407c83a 	sub	r3,zero,r16
   208b0:	1884f03a 	xor	r2,r3,r2
   208b4:	1405883a 	add	r2,r2,r16
   208b8:	dfc00117 	ldw	ra,4(sp)
   208bc:	dc000017 	ldw	r16,0(sp)
   208c0:	dec00204 	addi	sp,sp,8
   208c4:	f800283a 	ret
   208c8:	0109c83a 	sub	r4,zero,r4
   208cc:	04000044 	movi	r16,1
   208d0:	283ff40e 	bge	r5,zero,208a4 <_gp+0xffff7c48>
   208d4:	014bc83a 	sub	r5,zero,r5
   208d8:	8400005c 	xori	r16,r16,1
   208dc:	003ff106 	br	208a4 <_gp+0xffff7c48>

000208e0 <__modsi3>:
   208e0:	defffd04 	addi	sp,sp,-12
   208e4:	dfc00215 	stw	ra,8(sp)
   208e8:	dc400115 	stw	r17,4(sp)
   208ec:	dc000015 	stw	r16,0(sp)
   208f0:	20000c16 	blt	r4,zero,20924 <__modsi3+0x44>
   208f4:	0023883a 	mov	r17,zero
   208f8:	0021883a 	mov	r16,zero
   208fc:	28000d16 	blt	r5,zero,20934 <__modsi3+0x54>
   20900:	01800044 	movi	r6,1
   20904:	00208200 	call	20820 <udivmodsi4>
   20908:	1404f03a 	xor	r2,r2,r16
   2090c:	8885883a 	add	r2,r17,r2
   20910:	dfc00217 	ldw	ra,8(sp)
   20914:	dc400117 	ldw	r17,4(sp)
   20918:	dc000017 	ldw	r16,0(sp)
   2091c:	dec00304 	addi	sp,sp,12
   20920:	f800283a 	ret
   20924:	0109c83a 	sub	r4,zero,r4
   20928:	04400044 	movi	r17,1
   2092c:	043fffc4 	movi	r16,-1
   20930:	283ff30e 	bge	r5,zero,20900 <_gp+0xffff7ca4>
   20934:	014bc83a 	sub	r5,zero,r5
   20938:	003ff106 	br	20900 <_gp+0xffff7ca4>

0002093c <__udivsi3>:
   2093c:	000d883a 	mov	r6,zero
   20940:	00208201 	jmpi	20820 <udivmodsi4>

00020944 <__umodsi3>:
   20944:	01800044 	movi	r6,1
   20948:	00208201 	jmpi	20820 <udivmodsi4>

0002094c <__mulsi3>:
   2094c:	0005883a 	mov	r2,zero
   20950:	20000726 	beq	r4,zero,20970 <__mulsi3+0x24>
   20954:	20c0004c 	andi	r3,r4,1
   20958:	2008d07a 	srli	r4,r4,1
   2095c:	18000126 	beq	r3,zero,20964 <__mulsi3+0x18>
   20960:	1145883a 	add	r2,r2,r5
   20964:	294b883a 	add	r5,r5,r5
   20968:	203ffa1e 	bne	r4,zero,20954 <_gp+0xffff7cf8>
   2096c:	f800283a 	ret
   20970:	f800283a 	ret

00020974 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20974:	deffff04 	addi	sp,sp,-4
   20978:	010000b4 	movhi	r4,2
   2097c:	014000b4 	movhi	r5,2
   20980:	dfc00015 	stw	ra,0(sp)
   20984:	2102df04 	addi	r4,r4,2940
   20988:	29431b04 	addi	r5,r5,3180

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   2098c:	2140061e 	bne	r4,r5,209a8 <alt_load+0x34>
   20990:	010000b4 	movhi	r4,2
   20994:	014000b4 	movhi	r5,2
   20998:	21000804 	addi	r4,r4,32
   2099c:	29400804 	addi	r5,r5,32
   209a0:	2140141e 	bne	r4,r5,209f4 <alt_load+0x80>
   209a4:	00000d06 	br	209dc <alt_load+0x68>
   209a8:	00c000b4 	movhi	r3,2
   209ac:	18c31b04 	addi	r3,r3,3180
   209b0:	00bfff04 	movi	r2,-4
   209b4:	1907c83a 	sub	r3,r3,r4
   209b8:	1886703a 	and	r3,r3,r2
   209bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   209c0:	10fff326 	beq	r2,r3,20990 <_gp+0xffff7d34>
   209c4:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
   209c8:	39c00017 	ldw	r7,0(r7)
   209cc:	110d883a 	add	r6,r2,r4
   209d0:	10800104 	addi	r2,r2,4
   209d4:	31c00015 	stw	r7,0(r6)
   209d8:	003ff906 	br	209c0 <_gp+0xffff7d64>
   209dc:	010000b4 	movhi	r4,2
   209e0:	014000b4 	movhi	r5,2
   209e4:	2102db04 	addi	r4,r4,2924
   209e8:	2942db04 	addi	r5,r5,2924

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   209ec:	2140121e 	bne	r4,r5,20a38 <alt_load+0xc4>
   209f0:	00000d06 	br	20a28 <alt_load+0xb4>
   209f4:	00c000b4 	movhi	r3,2
   209f8:	18c00804 	addi	r3,r3,32
   209fc:	00bfff04 	movi	r2,-4
   20a00:	1907c83a 	sub	r3,r3,r4
   20a04:	1886703a 	and	r3,r3,r2
   20a08:	0005883a 	mov	r2,zero
  {
    while( to != end )
   20a0c:	10fff326 	beq	r2,r3,209dc <_gp+0xffff7d80>
   20a10:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
   20a14:	39c00017 	ldw	r7,0(r7)
   20a18:	110d883a 	add	r6,r2,r4
   20a1c:	10800104 	addi	r2,r2,4
   20a20:	31c00015 	stw	r7,0(r6)
   20a24:	003ff906 	br	20a0c <_gp+0xffff7db0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20a28:	0020b5c0 	call	20b5c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   20a2c:	dfc00017 	ldw	ra,0(sp)
   20a30:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   20a34:	0020b601 	jmpi	20b60 <alt_icache_flush_all>
   20a38:	00c000b4 	movhi	r3,2
   20a3c:	18c2df04 	addi	r3,r3,2940
   20a40:	00bfff04 	movi	r2,-4
   20a44:	1907c83a 	sub	r3,r3,r4
   20a48:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20a4c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   20a50:	10fff526 	beq	r2,r3,20a28 <_gp+0xffff7dcc>
   20a54:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
   20a58:	39c00017 	ldw	r7,0(r7)
   20a5c:	110d883a 	add	r6,r2,r4
   20a60:	10800104 	addi	r2,r2,4
   20a64:	31c00015 	stw	r7,0(r6)
   20a68:	003ff906 	br	20a50 <_gp+0xffff7df4>

00020a6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20a6c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20a70:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20a74:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20a78:	0020b040 	call	20b04 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20a7c:	0020b240 	call	20b24 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   20a80:	d1204317 	ldw	r4,-32500(gp)
   20a84:	d1604217 	ldw	r5,-32504(gp)
   20a88:	d1a04117 	ldw	r6,-32508(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   20a8c:	dfc00017 	ldw	ra,0(sp)
   20a90:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   20a94:	002005c1 	jmpi	2005c <main>

00020a98 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   20a98:	00800044 	movi	r2,1
   20a9c:	20800226 	beq	r4,r2,20aa8 <write+0x10>
   20aa0:	00800084 	movi	r2,2
   20aa4:	2080041e 	bne	r4,r2,20ab8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   20aa8:	010000b4 	movhi	r4,2
   20aac:	21031904 	addi	r4,r4,3172
   20ab0:	000f883a 	mov	r7,zero
   20ab4:	0020b281 	jmpi	20b28 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   20ab8:	008000b4 	movhi	r2,2
   20abc:	10831a04 	addi	r2,r2,3176
   20ac0:	10800017 	ldw	r2,0(r2)
   20ac4:	10000926 	beq	r2,zero,20aec <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   20ac8:	deffff04 	addi	sp,sp,-4
   20acc:	dfc00015 	stw	ra,0(sp)
   20ad0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   20ad4:	00c01444 	movi	r3,81
   20ad8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   20adc:	00bfffc4 	movi	r2,-1
   20ae0:	dfc00017 	ldw	ra,0(sp)
   20ae4:	dec00104 	addi	sp,sp,4
   20ae8:	f800283a 	ret
   20aec:	008000b4 	movhi	r2,2
   20af0:	10835704 	addi	r2,r2,3420
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   20af4:	00c01444 	movi	r3,81
   20af8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   20afc:	00bfffc4 	movi	r2,-1
   20b00:	f800283a 	ret

00020b04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20b04:	deffff04 	addi	sp,sp,-4
   20b08:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   20b0c:	0020b640 	call	20b64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20b10:	00800044 	movi	r2,1
   20b14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20b18:	dfc00017 	ldw	ra,0(sp)
   20b1c:	dec00104 	addi	sp,sp,4
   20b20:	f800283a 	ret

00020b24 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20b24:	f800283a 	ret

00020b28 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   20b28:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20b2c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   20b30:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   20b34:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   20b38:	2980072e 	bgeu	r5,r6,20b58 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   20b3c:	38c00037 	ldwio	r3,0(r7)
   20b40:	18ffffec 	andhi	r3,r3,65535
   20b44:	183ffc26 	beq	r3,zero,20b38 <_gp+0xffff7edc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   20b48:	28c00007 	ldb	r3,0(r5)
   20b4c:	20c00035 	stwio	r3,0(r4)
   20b50:	29400044 	addi	r5,r5,1
   20b54:	003ff806 	br	20b38 <_gp+0xffff7edc>

  return count;
}
   20b58:	f800283a 	ret

00020b5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   20b5c:	f800283a 	ret

00020b60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   20b60:	f800283a 	ret

00020b64 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   20b64:	000170fa 	wrctl	ienable,zero
   20b68:	f800283a 	ret
