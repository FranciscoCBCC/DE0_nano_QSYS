
DE0_NANO_PROGRAM.elf:     file format elf32-littlenios2
DE0_NANO_PROGRAM.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0200022c

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00005568 memsz 0x00005568 flags r-x
    LOAD off    0x00006588 vaddr 0x02005588 paddr 0x02006ff4 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008a60 vaddr 0x02008a60 paddr 0x02008a60 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000530c  0200022c  0200022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  02005538  02005538  00006538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  02005588  02006ff4  00006588  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  02008a60  02008a60  00008a60  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  02008bb4  02008bb4  00007ff4  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04010000  04010000  00007ff4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007ff4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000958  00000000  00000000  00008018  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00015fd3  00000000  00000000  00008970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005d8d  00000000  00000000  0001e943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000065e8  00000000  00000000  000246d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000014c0  00000000  00000000  0002acb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002656  00000000  00000000  0002c178  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000044ae  00000000  00000000  0002e7ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00032c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000328  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00035483  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00035486  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00035492  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00035493  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00035494  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0003549f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000354aa  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  000354b5  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000028  00000000  00000000  000354bd  2**0
                  CONTENTS, READONLY
 27 .jdi          00003f24  00000000  00000000  000354e5  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00033010  00000000  00000000  00039409  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
0200022c l    d  .text	00000000 .text
02005538 l    d  .rodata	00000000 .rodata
02005588 l    d  .rwdata	00000000 .rwdata
02008a60 l    d  .bss	00000000 .bss
02008bb4 l    d  .sdram_0	00000000 .sdram_0
04010000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE0_NANO_PROGRAM_bsp//obj/HAL/src/crt0.o
02000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
02005588 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02001d44 l     F .text	00000008 __fp_lock
02001d4c l     F .text	00000008 __fp_unlock
02001d60 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
02002de4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02002f0c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02002f38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02003040 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200313c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02003220 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02003404 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02006fe4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02003688 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
020037d8 l     F .text	00000038 alt_dev_reg
02005f5c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02003ab0 l     F .text	00000204 altera_avalon_jtag_uart_irq
02003cb4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02004430 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
020048c8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02004a20 l     F .text	00000050 alt_get_errno
02004a70 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
02008a88 g     O .bss	00000004 alt_instruction_exception_handler
02002cb0 g     F .text	00000054 _isatty_r
0200334c g     F .text	00000078 alt_main
0200029c g     F .text	000000b8 _puts_r
02008ab4 g     O .bss	00000100 alt_irq
02002d04 g     F .text	0000005c _lseek_r
02006ff4 g       *ABS*	00000000 __flash_rwdata_start
02008bb4 g       *ABS*	00000000 __alt_heap_start
02002a30 g     F .text	0000005c __sseek
020020a8 g     F .text	00000010 __sinit
02001f00 g     F .text	00000078 __sfmoreglue
020033e4 g     F .text	00000020 __malloc_unlock
0200126c g     F .text	0000015c memmove
02002090 g     F .text	00000018 _cleanup
02004e60 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02002c58 g     F .text	00000058 _fstat_r
02008a6c g     O .bss	00000004 errno
020029ac g     F .text	00000008 __seofread
02008a74 g     O .bss	00000004 alt_argv
0200efbc g       *ABS*	00000000 _gp
02005ddc g     O .rwdata	00000180 alt_fd_list
02004e80 g     F .text	00000090 alt_find_dev
02001134 g     F .text	00000138 memcpy
02001d54 g     F .text	0000000c _cleanup_r
020049a8 g     F .text	00000078 alt_io_redirect
02005538 g       *ABS*	00000000 __DTOR_END__
02000354 g     F .text	00000014 puts
020050f8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02003eb0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
02003090 g     F .text	000000ac isatty
02008a68 g     O .bss	00000004 __malloc_top_pad
02000400 g     F .text	000004a4 __sfvwrite_r
02001968 g     F .text	00000054 _sbrk_r
02002d60 g     F .text	0000005c _read_r
02006fdc g     O .rwdata	00000004 alt_max_fd
02002b44 g     F .text	00000100 _fclose_r
02001d14 g     F .text	00000030 fflush
02008a64 g     O .bss	00000004 __malloc_max_sbrked_mem
02003270 g     F .text	000000dc lseek
02006fbc g     O .rwdata	00000004 _global_impure_ptr
020013c8 g     F .text	000005a0 _realloc_r
02008bb4 g       *ABS*	00000000 __bss_end
020047d8 g     F .text	000000f0 alt_iic_isr_register
02004d5c g     F .text	00000104 alt_tick
020020c8 g     F .text	00000018 __fp_lock_all
0200478c g     F .text	0000004c alt_ic_irq_enabled
02004cc4 g     F .text	00000098 alt_alarm_stop
02008a7c g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d0 alt_irq_handler
02005db4 g     O .rwdata	00000028 alt_dev_null
02004414 g     F .text	0000001c alt_dcache_flush_all
02006ff4 g       *ABS*	00000000 __ram_rwdata_end
02006fd4 g     O .rwdata	00000008 alt_dev_list
020036d8 g     F .text	00000100 write
02005588 g       *ABS*	00000000 __ram_rodata_end
02002f88 g     F .text	000000b8 fstat
02008bb4 g       *ABS*	00000000 end
020039ec g     F .text	000000c4 altera_avalon_jtag_uart_init
020001cc g     F .exceptions	00000060 alt_instruction_exception_entry
02005538 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
020040bc g     F .text	00000218 altera_avalon_jtag_uart_write
020020b8 g     F .text	00000004 __sfp_lock_acquire
0200104c g     F .text	000000e8 memchr
0200221c g     F .text	000002f0 _free_r
02005370 g     F .text	00000194 __call_exitprocs
02006fc4 g     O .rwdata	00000004 __malloc_sbrk_base
0200022c g     F .text	0000003c _start
02008a80 g     O .bss	00000004 _alt_tick_rate
02008a84 g     O .bss	00000004 _alt_nticks
02003454 g     F .text	00000104 read
02003844 g     F .text	00000044 alt_sys_init
0200525c g     F .text	00000114 __register_exitproc
02003d5c g     F .text	00000068 altera_avalon_jtag_uart_close
02002dbc g     F .text	00000028 .hidden __mulsi3
02005588 g       *ABS*	00000000 __ram_rwdata_start
02005538 g       *ABS*	00000000 __ram_rodata_start
02008a8c g     O .bss	00000028 __malloc_current_mallinfo
02003888 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02005024 g     F .text	000000d4 alt_get_fd
02002af0 g     F .text	00000054 _close_r
020051e0 g     F .text	0000007c memcmp
02003948 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02008bb4 g       *ABS*	00000000 __alt_stack_base
02003998 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
020019bc g     F .text	00000130 __swsetup_r
02001f78 g     F .text	00000118 __sfp
020059ac g     O .rwdata	00000408 __malloc_av_
020020c4 g     F .text	00000004 __sinit_lock_release
02002958 g     F .text	00000054 __sread
02004f10 g     F .text	00000114 alt_find_file
02004480 g     F .text	000000a4 alt_dev_llist_insert
020033c4 g     F .text	00000020 __malloc_lock
020035d8 g     F .text	000000b0 sbrk
02001aec g     F .text	00000228 _fflush_r
02008a60 g       *ABS*	00000000 __bss_start
02002834 g     F .text	00000124 memset
02000268 g     F .text	00000034 main
02008a78 g     O .bss	00000004 alt_envp
02008a60 g     O .bss	00000004 __malloc_max_total_mem
020038e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02002a8c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02002c44 g     F .text	00000014 fclose
020008a4 g     F .text	000007a8 _malloc_r
02006fe0 g     O .rwdata	00000004 alt_errno
0200250c g     F .text	000000b8 _fwalk
020020f8 g     F .text	00000124 _malloc_trim_r
02005538 g       *ABS*	00000000 __CTOR_END__
02005538 g       *ABS*	00000000 __flash_rodata_start
02005538 g       *ABS*	00000000 __DTOR_LIST__
02003810 g     F .text	00000034 alt_irq_init
02003558 g     F .text	00000080 alt_release_fd
02005194 g     F .text	00000014 atexit
02002a94 g     F .text	0000005c _write_r
02006fc0 g     O .rwdata	00000004 _impure_ptr
02008a70 g     O .bss	00000004 alt_argc
02004580 g     F .text	0000005c _do_dtors
02000000 g       *ABS*	00000000 __alt_mem_sdram_0
02000020 g       .exceptions	00000000 alt_irq_entry
020020e0 g     F .text	00000018 __fp_unlock_all
02006fcc g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
020045f8 g     F .text	00000050 alt_ic_isr_register
02006ff4 g       *ABS*	00000000 _edata
02008bb4 g       *ABS*	00000000 _end
0200022c g       *ABS*	00000000 __ram_exceptions_end
02003dc4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
020046e8 g     F .text	000000a4 alt_ic_irq_disable
020029b4 g     F .text	0000007c __swrite
02006fc8 g     O .rwdata	00000004 __malloc_trim_threshold
020051a8 g     F .text	00000038 exit
020025c4 g     F .text	000000b8 _fwalk_reent
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
020020bc g     F .text	00000004 __sfp_lock_release
02005504 g     F .text	00000034 _exit
020042d4 g     F .text	00000140 alt_alarm_start
0200267c g     F .text	000001b8 __smakebuf_r
02000368 g     F .text	00000098 strlen
02004b64 g     F .text	00000160 open
020045dc g     F .text	0000001c alt_icache_flush_all
02006fe8 g     O .rwdata	00000004 alt_priority_mask
02004648 g     F .text	000000a0 alt_ic_irq_enable
02006fec g     O .rwdata	00000008 alt_alarm_list
02004524 g     F .text	0000005c _do_ctors
02002e34 g     F .text	000000d8 close
020031a0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
020020c0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408b14 	ori	at,at,556
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001cc0 	call	20001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00808074 	movhi	r2,513
 2000140:	10a2ad04 	addi	r2,r2,-30028
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00808074 	movhi	r2,513
 2000158:	10a2ad04 	addi	r2,r2,-30028
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <__alt_mem_onchip_memory2_0+0xfdff012c>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <__alt_mem_onchip_memory2_0+0xfdff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	e037883a 	mov	sp,fp
 20001bc:	dfc00117 	ldw	ra,4(sp)
 20001c0:	df000017 	ldw	fp,0(sp)
 20001c4:	dec00204 	addi	sp,sp,8
 20001c8:	f800283a 	ret

020001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001cc:	defffb04 	addi	sp,sp,-20
 20001d0:	dfc00415 	stw	ra,16(sp)
 20001d4:	df000315 	stw	fp,12(sp)
 20001d8:	df000304 	addi	fp,sp,12
 20001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e0:	00bfffc4 	movi	r2,-1
 20001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001ec:	d0a6b317 	ldw	r2,-25908(gp)
 20001f0:	10000726 	beq	r2,zero,2000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f4:	d0a6b317 	ldw	r2,-25908(gp)
 20001f8:	e0fffd17 	ldw	r3,-12(fp)
 20001fc:	1809883a 	mov	r4,r3
 2000200:	e17fff17 	ldw	r5,-4(fp)
 2000204:	e1bffe17 	ldw	r6,-8(fp)
 2000208:	103ee83a 	callr	r2
 200020c:	00000206 	br	2000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000214:	0005883a 	mov	r2,zero
}
 2000218:	e037883a 	mov	sp,fp
 200021c:	dfc00117 	ldw	ra,4(sp)
 2000220:	df000017 	ldw	fp,0(sp)
 2000224:	dec00204 	addi	sp,sp,8
 2000228:	f800283a 	ret

Disassembly of section .text:

0200022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 200022c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000234:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 2000238:	d6bbef14 	ori	gp,gp,61372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 200023c:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000240:	10a29814 	ori	r2,r2,35424

    movhi r3, %hi(__bss_end)
 2000244:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 2000248:	18e2ed14 	ori	r3,r3,35764

    beq r2, r3, 1f
 200024c:	10c00326 	beq	r2,r3,200025c <_start+0x30>

0:
    stw zero, (r2)
 2000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000258:	10fffd36 	bltu	r2,r3,2000250 <__alt_mem_onchip_memory2_0+0xfdff0250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 200025c:	20031a00 	call	20031a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000260:	200334c0 	call	200334c <alt_main>

02000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000264:	003fff06 	br	2000264 <__alt_mem_onchip_memory2_0+0xfdff0264>

02000268 <main>:
 */

#include <stdio.h>

int main()
{
 2000268:	defffe04 	addi	sp,sp,-8
 200026c:	dfc00115 	stw	ra,4(sp)
 2000270:	df000015 	stw	fp,0(sp)
 2000274:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 2000278:	01008034 	movhi	r4,512
 200027c:	21154e04 	addi	r4,r4,21816
 2000280:	20003540 	call	2000354 <puts>

  return 0;
 2000284:	0005883a 	mov	r2,zero
}
 2000288:	e037883a 	mov	sp,fp
 200028c:	dfc00117 	ldw	ra,4(sp)
 2000290:	df000017 	ldw	fp,0(sp)
 2000294:	dec00204 	addi	sp,sp,8
 2000298:	f800283a 	ret

0200029c <_puts_r>:
 200029c:	defff604 	addi	sp,sp,-40
 20002a0:	dc000715 	stw	r16,28(sp)
 20002a4:	2021883a 	mov	r16,r4
 20002a8:	2809883a 	mov	r4,r5
 20002ac:	dc400815 	stw	r17,32(sp)
 20002b0:	dfc00915 	stw	ra,36(sp)
 20002b4:	2823883a 	mov	r17,r5
 20002b8:	20003680 	call	2000368 <strlen>
 20002bc:	00c08034 	movhi	r3,512
 20002c0:	18dbf004 	addi	r3,r3,28608
 20002c4:	18c00017 	ldw	r3,0(r3)
 20002c8:	11000044 	addi	r4,r2,1
 20002cc:	d8800115 	stw	r2,4(sp)
 20002d0:	18c00217 	ldw	r3,8(r3)
 20002d4:	01408034 	movhi	r5,512
 20002d8:	29555304 	addi	r5,r5,21836
 20002dc:	1880030b 	ldhu	r2,12(r3)
 20002e0:	d9400215 	stw	r5,8(sp)
 20002e4:	d9000615 	stw	r4,24(sp)
 20002e8:	01400044 	movi	r5,1
 20002ec:	01000084 	movi	r4,2
 20002f0:	d9000515 	stw	r4,20(sp)
 20002f4:	dc400015 	stw	r17,0(sp)
 20002f8:	d9400315 	stw	r5,12(sp)
 20002fc:	dec00415 	stw	sp,16(sp)
 2000300:	1108000c 	andi	r4,r2,8192
 2000304:	2000061e 	bne	r4,zero,2000320 <_puts_r+0x84>
 2000308:	19401917 	ldw	r5,100(r3)
 200030c:	0137ffc4 	movi	r4,-8193
 2000310:	10880014 	ori	r2,r2,8192
 2000314:	2908703a 	and	r4,r5,r4
 2000318:	1880030d 	sth	r2,12(r3)
 200031c:	19001915 	stw	r4,100(r3)
 2000320:	81400217 	ldw	r5,8(r16)
 2000324:	8009883a 	mov	r4,r16
 2000328:	d9800404 	addi	r6,sp,16
 200032c:	20004000 	call	2000400 <__sfvwrite_r>
 2000330:	1000061e 	bne	r2,zero,200034c <_puts_r+0xb0>
 2000334:	00800284 	movi	r2,10
 2000338:	dfc00917 	ldw	ra,36(sp)
 200033c:	dc400817 	ldw	r17,32(sp)
 2000340:	dc000717 	ldw	r16,28(sp)
 2000344:	dec00a04 	addi	sp,sp,40
 2000348:	f800283a 	ret
 200034c:	00bfffc4 	movi	r2,-1
 2000350:	003ff906 	br	2000338 <__alt_mem_onchip_memory2_0+0xfdff0338>

02000354 <puts>:
 2000354:	00808034 	movhi	r2,512
 2000358:	109bf004 	addi	r2,r2,28608
 200035c:	200b883a 	mov	r5,r4
 2000360:	11000017 	ldw	r4,0(r2)
 2000364:	200029c1 	jmpi	200029c <_puts_r>

02000368 <strlen>:
 2000368:	208000cc 	andi	r2,r4,3
 200036c:	10002026 	beq	r2,zero,20003f0 <strlen+0x88>
 2000370:	20800007 	ldb	r2,0(r4)
 2000374:	10002026 	beq	r2,zero,20003f8 <strlen+0x90>
 2000378:	2005883a 	mov	r2,r4
 200037c:	00000206 	br	2000388 <strlen+0x20>
 2000380:	10c00007 	ldb	r3,0(r2)
 2000384:	18001826 	beq	r3,zero,20003e8 <strlen+0x80>
 2000388:	10800044 	addi	r2,r2,1
 200038c:	10c000cc 	andi	r3,r2,3
 2000390:	183ffb1e 	bne	r3,zero,2000380 <__alt_mem_onchip_memory2_0+0xfdff0380>
 2000394:	10c00017 	ldw	r3,0(r2)
 2000398:	01ffbff4 	movhi	r7,65279
 200039c:	39ffbfc4 	addi	r7,r7,-257
 20003a0:	00ca303a 	nor	r5,zero,r3
 20003a4:	01a02074 	movhi	r6,32897
 20003a8:	19c7883a 	add	r3,r3,r7
 20003ac:	31a02004 	addi	r6,r6,-32640
 20003b0:	1946703a 	and	r3,r3,r5
 20003b4:	1986703a 	and	r3,r3,r6
 20003b8:	1800091e 	bne	r3,zero,20003e0 <strlen+0x78>
 20003bc:	10800104 	addi	r2,r2,4
 20003c0:	10c00017 	ldw	r3,0(r2)
 20003c4:	19cb883a 	add	r5,r3,r7
 20003c8:	00c6303a 	nor	r3,zero,r3
 20003cc:	28c6703a 	and	r3,r5,r3
 20003d0:	1986703a 	and	r3,r3,r6
 20003d4:	183ff926 	beq	r3,zero,20003bc <__alt_mem_onchip_memory2_0+0xfdff03bc>
 20003d8:	00000106 	br	20003e0 <strlen+0x78>
 20003dc:	10800044 	addi	r2,r2,1
 20003e0:	10c00007 	ldb	r3,0(r2)
 20003e4:	183ffd1e 	bne	r3,zero,20003dc <__alt_mem_onchip_memory2_0+0xfdff03dc>
 20003e8:	1105c83a 	sub	r2,r2,r4
 20003ec:	f800283a 	ret
 20003f0:	2005883a 	mov	r2,r4
 20003f4:	003fe706 	br	2000394 <__alt_mem_onchip_memory2_0+0xfdff0394>
 20003f8:	0005883a 	mov	r2,zero
 20003fc:	f800283a 	ret

02000400 <__sfvwrite_r>:
 2000400:	30800217 	ldw	r2,8(r6)
 2000404:	10004526 	beq	r2,zero,200051c <__sfvwrite_r+0x11c>
 2000408:	28c0030b 	ldhu	r3,12(r5)
 200040c:	defff404 	addi	sp,sp,-48
 2000410:	dd400715 	stw	r21,28(sp)
 2000414:	dcc00515 	stw	r19,20(sp)
 2000418:	dc000215 	stw	r16,8(sp)
 200041c:	dfc00b15 	stw	ra,44(sp)
 2000420:	df000a15 	stw	fp,40(sp)
 2000424:	ddc00915 	stw	r23,36(sp)
 2000428:	dd800815 	stw	r22,32(sp)
 200042c:	dd000615 	stw	r20,24(sp)
 2000430:	dc800415 	stw	r18,16(sp)
 2000434:	dc400315 	stw	r17,12(sp)
 2000438:	1880020c 	andi	r2,r3,8
 200043c:	2821883a 	mov	r16,r5
 2000440:	202b883a 	mov	r21,r4
 2000444:	3027883a 	mov	r19,r6
 2000448:	10002526 	beq	r2,zero,20004e0 <__sfvwrite_r+0xe0>
 200044c:	28800417 	ldw	r2,16(r5)
 2000450:	10002326 	beq	r2,zero,20004e0 <__sfvwrite_r+0xe0>
 2000454:	1880008c 	andi	r2,r3,2
 2000458:	9c400017 	ldw	r17,0(r19)
 200045c:	10003126 	beq	r2,zero,2000524 <__sfvwrite_r+0x124>
 2000460:	0029883a 	mov	r20,zero
 2000464:	0025883a 	mov	r18,zero
 2000468:	05810004 	movi	r22,1024
 200046c:	a00d883a 	mov	r6,r20
 2000470:	a809883a 	mov	r4,r21
 2000474:	90002526 	beq	r18,zero,200050c <__sfvwrite_r+0x10c>
 2000478:	900f883a 	mov	r7,r18
 200047c:	81400717 	ldw	r5,28(r16)
 2000480:	b480012e 	bgeu	r22,r18,2000488 <__sfvwrite_r+0x88>
 2000484:	01c10004 	movi	r7,1024
 2000488:	80800917 	ldw	r2,36(r16)
 200048c:	103ee83a 	callr	r2
 2000490:	0080510e 	bge	zero,r2,20005d8 <__sfvwrite_r+0x1d8>
 2000494:	98c00217 	ldw	r3,8(r19)
 2000498:	a0a9883a 	add	r20,r20,r2
 200049c:	90a5c83a 	sub	r18,r18,r2
 20004a0:	1885c83a 	sub	r2,r3,r2
 20004a4:	98800215 	stw	r2,8(r19)
 20004a8:	103ff01e 	bne	r2,zero,200046c <__alt_mem_onchip_memory2_0+0xfdff046c>
 20004ac:	0005883a 	mov	r2,zero
 20004b0:	dfc00b17 	ldw	ra,44(sp)
 20004b4:	df000a17 	ldw	fp,40(sp)
 20004b8:	ddc00917 	ldw	r23,36(sp)
 20004bc:	dd800817 	ldw	r22,32(sp)
 20004c0:	dd400717 	ldw	r21,28(sp)
 20004c4:	dd000617 	ldw	r20,24(sp)
 20004c8:	dcc00517 	ldw	r19,20(sp)
 20004cc:	dc800417 	ldw	r18,16(sp)
 20004d0:	dc400317 	ldw	r17,12(sp)
 20004d4:	dc000217 	ldw	r16,8(sp)
 20004d8:	dec00c04 	addi	sp,sp,48
 20004dc:	f800283a 	ret
 20004e0:	a809883a 	mov	r4,r21
 20004e4:	800b883a 	mov	r5,r16
 20004e8:	20019bc0 	call	20019bc <__swsetup_r>
 20004ec:	80c0030b 	ldhu	r3,12(r16)
 20004f0:	103fd826 	beq	r2,zero,2000454 <__alt_mem_onchip_memory2_0+0xfdff0454>
 20004f4:	18c01014 	ori	r3,r3,64
 20004f8:	80c0030d 	sth	r3,12(r16)
 20004fc:	00c00244 	movi	r3,9
 2000500:	00bfffc4 	movi	r2,-1
 2000504:	a8c00015 	stw	r3,0(r21)
 2000508:	003fe906 	br	20004b0 <__alt_mem_onchip_memory2_0+0xfdff04b0>
 200050c:	8d000017 	ldw	r20,0(r17)
 2000510:	8c800117 	ldw	r18,4(r17)
 2000514:	8c400204 	addi	r17,r17,8
 2000518:	003fd406 	br	200046c <__alt_mem_onchip_memory2_0+0xfdff046c>
 200051c:	0005883a 	mov	r2,zero
 2000520:	f800283a 	ret
 2000524:	1880004c 	andi	r2,r3,1
 2000528:	1000301e 	bne	r2,zero,20005ec <__sfvwrite_r+0x1ec>
 200052c:	002f883a 	mov	r23,zero
 2000530:	0025883a 	mov	r18,zero
 2000534:	90001c26 	beq	r18,zero,20005a8 <__sfvwrite_r+0x1a8>
 2000538:	1880800c 	andi	r2,r3,512
 200053c:	85000217 	ldw	r20,8(r16)
 2000540:	10006c26 	beq	r2,zero,20006f4 <__sfvwrite_r+0x2f4>
 2000544:	a02d883a 	mov	r22,r20
 2000548:	95008536 	bltu	r18,r20,2000760 <__sfvwrite_r+0x360>
 200054c:	1881200c 	andi	r2,r3,1152
 2000550:	10009d1e 	bne	r2,zero,20007c8 <__sfvwrite_r+0x3c8>
 2000554:	81000017 	ldw	r4,0(r16)
 2000558:	a039883a 	mov	fp,r20
 200055c:	9029883a 	mov	r20,r18
 2000560:	b80b883a 	mov	r5,r23
 2000564:	b00d883a 	mov	r6,r22
 2000568:	200126c0 	call	200126c <memmove>
 200056c:	80c00217 	ldw	r3,8(r16)
 2000570:	81000017 	ldw	r4,0(r16)
 2000574:	9005883a 	mov	r2,r18
 2000578:	1f39c83a 	sub	fp,r3,fp
 200057c:	258f883a 	add	r7,r4,r22
 2000580:	87000215 	stw	fp,8(r16)
 2000584:	81c00015 	stw	r7,0(r16)
 2000588:	98c00217 	ldw	r3,8(r19)
 200058c:	b8af883a 	add	r23,r23,r2
 2000590:	90a5c83a 	sub	r18,r18,r2
 2000594:	1d05c83a 	sub	r2,r3,r20
 2000598:	98800215 	stw	r2,8(r19)
 200059c:	103fc326 	beq	r2,zero,20004ac <__alt_mem_onchip_memory2_0+0xfdff04ac>
 20005a0:	80c0030b 	ldhu	r3,12(r16)
 20005a4:	903fe41e 	bne	r18,zero,2000538 <__alt_mem_onchip_memory2_0+0xfdff0538>
 20005a8:	8dc00017 	ldw	r23,0(r17)
 20005ac:	8c800117 	ldw	r18,4(r17)
 20005b0:	8c400204 	addi	r17,r17,8
 20005b4:	003fdf06 	br	2000534 <__alt_mem_onchip_memory2_0+0xfdff0534>
 20005b8:	20013c80 	call	20013c8 <_realloc_r>
 20005bc:	102d883a 	mov	r22,r2
 20005c0:	1000a01e 	bne	r2,zero,2000844 <__sfvwrite_r+0x444>
 20005c4:	81400417 	ldw	r5,16(r16)
 20005c8:	a809883a 	mov	r4,r21
 20005cc:	200221c0 	call	200221c <_free_r>
 20005d0:	00800304 	movi	r2,12
 20005d4:	a8800015 	stw	r2,0(r21)
 20005d8:	80c0030b 	ldhu	r3,12(r16)
 20005dc:	00bfffc4 	movi	r2,-1
 20005e0:	18c01014 	ori	r3,r3,64
 20005e4:	80c0030d 	sth	r3,12(r16)
 20005e8:	003fb106 	br	20004b0 <__alt_mem_onchip_memory2_0+0xfdff04b0>
 20005ec:	0029883a 	mov	r20,zero
 20005f0:	0011883a 	mov	r8,zero
 20005f4:	0039883a 	mov	fp,zero
 20005f8:	0025883a 	mov	r18,zero
 20005fc:	90001f26 	beq	r18,zero,200067c <__sfvwrite_r+0x27c>
 2000600:	40006826 	beq	r8,zero,20007a4 <__sfvwrite_r+0x3a4>
 2000604:	a02f883a 	mov	r23,r20
 2000608:	9500012e 	bgeu	r18,r20,2000610 <__sfvwrite_r+0x210>
 200060c:	902f883a 	mov	r23,r18
 2000610:	81000017 	ldw	r4,0(r16)
 2000614:	80800417 	ldw	r2,16(r16)
 2000618:	b82d883a 	mov	r22,r23
 200061c:	81800217 	ldw	r6,8(r16)
 2000620:	81c00517 	ldw	r7,20(r16)
 2000624:	1100022e 	bgeu	r2,r4,2000630 <__sfvwrite_r+0x230>
 2000628:	31c7883a 	add	r3,r6,r7
 200062c:	1dc01816 	blt	r3,r23,2000690 <__sfvwrite_r+0x290>
 2000630:	b9c03f16 	blt	r23,r7,2000730 <__sfvwrite_r+0x330>
 2000634:	80800917 	ldw	r2,36(r16)
 2000638:	81400717 	ldw	r5,28(r16)
 200063c:	a809883a 	mov	r4,r21
 2000640:	da000115 	stw	r8,4(sp)
 2000644:	e00d883a 	mov	r6,fp
 2000648:	103ee83a 	callr	r2
 200064c:	102d883a 	mov	r22,r2
 2000650:	da000117 	ldw	r8,4(sp)
 2000654:	00bfe00e 	bge	zero,r2,20005d8 <__alt_mem_onchip_memory2_0+0xfdff05d8>
 2000658:	a5a9c83a 	sub	r20,r20,r22
 200065c:	a0001f26 	beq	r20,zero,20006dc <__sfvwrite_r+0x2dc>
 2000660:	98800217 	ldw	r2,8(r19)
 2000664:	e5b9883a 	add	fp,fp,r22
 2000668:	95a5c83a 	sub	r18,r18,r22
 200066c:	15adc83a 	sub	r22,r2,r22
 2000670:	9d800215 	stw	r22,8(r19)
 2000674:	b03f8d26 	beq	r22,zero,20004ac <__alt_mem_onchip_memory2_0+0xfdff04ac>
 2000678:	903fe11e 	bne	r18,zero,2000600 <__alt_mem_onchip_memory2_0+0xfdff0600>
 200067c:	8f000017 	ldw	fp,0(r17)
 2000680:	8c800117 	ldw	r18,4(r17)
 2000684:	0011883a 	mov	r8,zero
 2000688:	8c400204 	addi	r17,r17,8
 200068c:	003fdb06 	br	20005fc <__alt_mem_onchip_memory2_0+0xfdff05fc>
 2000690:	180d883a 	mov	r6,r3
 2000694:	e00b883a 	mov	r5,fp
 2000698:	da000115 	stw	r8,4(sp)
 200069c:	d8c00015 	stw	r3,0(sp)
 20006a0:	200126c0 	call	200126c <memmove>
 20006a4:	d8c00017 	ldw	r3,0(sp)
 20006a8:	80800017 	ldw	r2,0(r16)
 20006ac:	a809883a 	mov	r4,r21
 20006b0:	800b883a 	mov	r5,r16
 20006b4:	10c5883a 	add	r2,r2,r3
 20006b8:	80800015 	stw	r2,0(r16)
 20006bc:	d8c00015 	stw	r3,0(sp)
 20006c0:	2001aec0 	call	2001aec <_fflush_r>
 20006c4:	d8c00017 	ldw	r3,0(sp)
 20006c8:	da000117 	ldw	r8,4(sp)
 20006cc:	103fc21e 	bne	r2,zero,20005d8 <__alt_mem_onchip_memory2_0+0xfdff05d8>
 20006d0:	182d883a 	mov	r22,r3
 20006d4:	a5a9c83a 	sub	r20,r20,r22
 20006d8:	a03fe11e 	bne	r20,zero,2000660 <__alt_mem_onchip_memory2_0+0xfdff0660>
 20006dc:	a809883a 	mov	r4,r21
 20006e0:	800b883a 	mov	r5,r16
 20006e4:	2001aec0 	call	2001aec <_fflush_r>
 20006e8:	103fbb1e 	bne	r2,zero,20005d8 <__alt_mem_onchip_memory2_0+0xfdff05d8>
 20006ec:	0011883a 	mov	r8,zero
 20006f0:	003fdb06 	br	2000660 <__alt_mem_onchip_memory2_0+0xfdff0660>
 20006f4:	81000017 	ldw	r4,0(r16)
 20006f8:	80800417 	ldw	r2,16(r16)
 20006fc:	1100012e 	bgeu	r2,r4,2000704 <__sfvwrite_r+0x304>
 2000700:	a4805a36 	bltu	r20,r18,200086c <__sfvwrite_r+0x46c>
 2000704:	81c00517 	ldw	r7,20(r16)
 2000708:	91c01a36 	bltu	r18,r7,2000774 <__sfvwrite_r+0x374>
 200070c:	80800917 	ldw	r2,36(r16)
 2000710:	81400717 	ldw	r5,28(r16)
 2000714:	a809883a 	mov	r4,r21
 2000718:	b80d883a 	mov	r6,r23
 200071c:	103ee83a 	callr	r2
 2000720:	1029883a 	mov	r20,r2
 2000724:	00bfac0e 	bge	zero,r2,20005d8 <__alt_mem_onchip_memory2_0+0xfdff05d8>
 2000728:	a005883a 	mov	r2,r20
 200072c:	003f9606 	br	2000588 <__alt_mem_onchip_memory2_0+0xfdff0588>
 2000730:	b80d883a 	mov	r6,r23
 2000734:	e00b883a 	mov	r5,fp
 2000738:	da000115 	stw	r8,4(sp)
 200073c:	200126c0 	call	200126c <memmove>
 2000740:	80800217 	ldw	r2,8(r16)
 2000744:	80c00017 	ldw	r3,0(r16)
 2000748:	da000117 	ldw	r8,4(sp)
 200074c:	15c5c83a 	sub	r2,r2,r23
 2000750:	1def883a 	add	r23,r3,r23
 2000754:	80800215 	stw	r2,8(r16)
 2000758:	85c00015 	stw	r23,0(r16)
 200075c:	003fbe06 	br	2000658 <__alt_mem_onchip_memory2_0+0xfdff0658>
 2000760:	81000017 	ldw	r4,0(r16)
 2000764:	9039883a 	mov	fp,r18
 2000768:	9029883a 	mov	r20,r18
 200076c:	902d883a 	mov	r22,r18
 2000770:	003f7b06 	br	2000560 <__alt_mem_onchip_memory2_0+0xfdff0560>
 2000774:	b80b883a 	mov	r5,r23
 2000778:	900d883a 	mov	r6,r18
 200077c:	200126c0 	call	200126c <memmove>
 2000780:	80c00217 	ldw	r3,8(r16)
 2000784:	80800017 	ldw	r2,0(r16)
 2000788:	9029883a 	mov	r20,r18
 200078c:	1c87c83a 	sub	r3,r3,r18
 2000790:	1485883a 	add	r2,r2,r18
 2000794:	80800015 	stw	r2,0(r16)
 2000798:	80c00215 	stw	r3,8(r16)
 200079c:	9005883a 	mov	r2,r18
 20007a0:	003f7906 	br	2000588 <__alt_mem_onchip_memory2_0+0xfdff0588>
 20007a4:	e009883a 	mov	r4,fp
 20007a8:	01400284 	movi	r5,10
 20007ac:	900d883a 	mov	r6,r18
 20007b0:	200104c0 	call	200104c <memchr>
 20007b4:	10003826 	beq	r2,zero,2000898 <__sfvwrite_r+0x498>
 20007b8:	10800044 	addi	r2,r2,1
 20007bc:	1729c83a 	sub	r20,r2,fp
 20007c0:	02000044 	movi	r8,1
 20007c4:	003f8f06 	br	2000604 <__alt_mem_onchip_memory2_0+0xfdff0604>
 20007c8:	80800517 	ldw	r2,20(r16)
 20007cc:	81400417 	ldw	r5,16(r16)
 20007d0:	87000017 	ldw	fp,0(r16)
 20007d4:	10a9883a 	add	r20,r2,r2
 20007d8:	a085883a 	add	r2,r20,r2
 20007dc:	1028d7fa 	srli	r20,r2,31
 20007e0:	e179c83a 	sub	fp,fp,r5
 20007e4:	e1000044 	addi	r4,fp,1
 20007e8:	a085883a 	add	r2,r20,r2
 20007ec:	1029d07a 	srai	r20,r2,1
 20007f0:	2485883a 	add	r2,r4,r18
 20007f4:	a00d883a 	mov	r6,r20
 20007f8:	a080022e 	bgeu	r20,r2,2000804 <__sfvwrite_r+0x404>
 20007fc:	1029883a 	mov	r20,r2
 2000800:	100d883a 	mov	r6,r2
 2000804:	18c1000c 	andi	r3,r3,1024
 2000808:	a809883a 	mov	r4,r21
 200080c:	183f6a26 	beq	r3,zero,20005b8 <__alt_mem_onchip_memory2_0+0xfdff05b8>
 2000810:	300b883a 	mov	r5,r6
 2000814:	20008a40 	call	20008a4 <_malloc_r>
 2000818:	102d883a 	mov	r22,r2
 200081c:	103f6c26 	beq	r2,zero,20005d0 <__alt_mem_onchip_memory2_0+0xfdff05d0>
 2000820:	81400417 	ldw	r5,16(r16)
 2000824:	1009883a 	mov	r4,r2
 2000828:	e00d883a 	mov	r6,fp
 200082c:	20011340 	call	2001134 <memcpy>
 2000830:	8080030b 	ldhu	r2,12(r16)
 2000834:	00fedfc4 	movi	r3,-1153
 2000838:	10c4703a 	and	r2,r2,r3
 200083c:	10802014 	ori	r2,r2,128
 2000840:	8080030d 	sth	r2,12(r16)
 2000844:	b709883a 	add	r4,r22,fp
 2000848:	a707c83a 	sub	r3,r20,fp
 200084c:	85800415 	stw	r22,16(r16)
 2000850:	85000515 	stw	r20,20(r16)
 2000854:	81000015 	stw	r4,0(r16)
 2000858:	9039883a 	mov	fp,r18
 200085c:	80c00215 	stw	r3,8(r16)
 2000860:	9029883a 	mov	r20,r18
 2000864:	902d883a 	mov	r22,r18
 2000868:	003f3d06 	br	2000560 <__alt_mem_onchip_memory2_0+0xfdff0560>
 200086c:	b80b883a 	mov	r5,r23
 2000870:	a00d883a 	mov	r6,r20
 2000874:	200126c0 	call	200126c <memmove>
 2000878:	80800017 	ldw	r2,0(r16)
 200087c:	a809883a 	mov	r4,r21
 2000880:	800b883a 	mov	r5,r16
 2000884:	1505883a 	add	r2,r2,r20
 2000888:	80800015 	stw	r2,0(r16)
 200088c:	2001aec0 	call	2001aec <_fflush_r>
 2000890:	103fa526 	beq	r2,zero,2000728 <__alt_mem_onchip_memory2_0+0xfdff0728>
 2000894:	003f5006 	br	20005d8 <__alt_mem_onchip_memory2_0+0xfdff05d8>
 2000898:	95000044 	addi	r20,r18,1
 200089c:	02000044 	movi	r8,1
 20008a0:	003f5806 	br	2000604 <__alt_mem_onchip_memory2_0+0xfdff0604>

020008a4 <_malloc_r>:
 20008a4:	defff504 	addi	sp,sp,-44
 20008a8:	dc800315 	stw	r18,12(sp)
 20008ac:	dfc00a15 	stw	ra,40(sp)
 20008b0:	df000915 	stw	fp,36(sp)
 20008b4:	ddc00815 	stw	r23,32(sp)
 20008b8:	dd800715 	stw	r22,28(sp)
 20008bc:	dd400615 	stw	r21,24(sp)
 20008c0:	dd000515 	stw	r20,20(sp)
 20008c4:	dcc00415 	stw	r19,16(sp)
 20008c8:	dc400215 	stw	r17,8(sp)
 20008cc:	dc000115 	stw	r16,4(sp)
 20008d0:	288002c4 	addi	r2,r5,11
 20008d4:	00c00584 	movi	r3,22
 20008d8:	2025883a 	mov	r18,r4
 20008dc:	18802a2e 	bgeu	r3,r2,2000988 <_malloc_r+0xe4>
 20008e0:	047ffe04 	movi	r17,-8
 20008e4:	1462703a 	and	r17,r2,r17
 20008e8:	88009e16 	blt	r17,zero,2000b64 <_malloc_r+0x2c0>
 20008ec:	89409d36 	bltu	r17,r5,2000b64 <_malloc_r+0x2c0>
 20008f0:	20033c40 	call	20033c4 <__malloc_lock>
 20008f4:	00807dc4 	movi	r2,503
 20008f8:	14402736 	bltu	r2,r17,2000998 <_malloc_r+0xf4>
 20008fc:	8806d0fa 	srli	r3,r17,3
 2000900:	04c08034 	movhi	r19,512
 2000904:	9cd66b04 	addi	r19,r19,22956
 2000908:	18c5883a 	add	r2,r3,r3
 200090c:	1085883a 	add	r2,r2,r2
 2000910:	1085883a 	add	r2,r2,r2
 2000914:	9885883a 	add	r2,r19,r2
 2000918:	14000317 	ldw	r16,12(r2)
 200091c:	80814a26 	beq	r16,r2,2000e48 <_malloc_r+0x5a4>
 2000920:	80c00117 	ldw	r3,4(r16)
 2000924:	81000317 	ldw	r4,12(r16)
 2000928:	00bfff04 	movi	r2,-4
 200092c:	1884703a 	and	r2,r3,r2
 2000930:	81400217 	ldw	r5,8(r16)
 2000934:	8085883a 	add	r2,r16,r2
 2000938:	10c00117 	ldw	r3,4(r2)
 200093c:	29000315 	stw	r4,12(r5)
 2000940:	21400215 	stw	r5,8(r4)
 2000944:	18c00054 	ori	r3,r3,1
 2000948:	10c00115 	stw	r3,4(r2)
 200094c:	9009883a 	mov	r4,r18
 2000950:	20033e40 	call	20033e4 <__malloc_unlock>
 2000954:	80800204 	addi	r2,r16,8
 2000958:	dfc00a17 	ldw	ra,40(sp)
 200095c:	df000917 	ldw	fp,36(sp)
 2000960:	ddc00817 	ldw	r23,32(sp)
 2000964:	dd800717 	ldw	r22,28(sp)
 2000968:	dd400617 	ldw	r21,24(sp)
 200096c:	dd000517 	ldw	r20,20(sp)
 2000970:	dcc00417 	ldw	r19,16(sp)
 2000974:	dc800317 	ldw	r18,12(sp)
 2000978:	dc400217 	ldw	r17,8(sp)
 200097c:	dc000117 	ldw	r16,4(sp)
 2000980:	dec00b04 	addi	sp,sp,44
 2000984:	f800283a 	ret
 2000988:	04400404 	movi	r17,16
 200098c:	89407536 	bltu	r17,r5,2000b64 <_malloc_r+0x2c0>
 2000990:	20033c40 	call	20033c4 <__malloc_lock>
 2000994:	003fd906 	br	20008fc <__alt_mem_onchip_memory2_0+0xfdff08fc>
 2000998:	8806d27a 	srli	r3,r17,9
 200099c:	18007526 	beq	r3,zero,2000b74 <_malloc_r+0x2d0>
 20009a0:	00800104 	movi	r2,4
 20009a4:	10c0ef36 	bltu	r2,r3,2000d64 <_malloc_r+0x4c0>
 20009a8:	8806d1ba 	srli	r3,r17,6
 20009ac:	19c00e04 	addi	r7,r3,56
 20009b0:	39cb883a 	add	r5,r7,r7
 20009b4:	04c08034 	movhi	r19,512
 20009b8:	294b883a 	add	r5,r5,r5
 20009bc:	9cd66b04 	addi	r19,r19,22956
 20009c0:	294b883a 	add	r5,r5,r5
 20009c4:	994b883a 	add	r5,r19,r5
 20009c8:	2c000317 	ldw	r16,12(r5)
 20009cc:	2c000e26 	beq	r5,r16,2000a08 <_malloc_r+0x164>
 20009d0:	80800117 	ldw	r2,4(r16)
 20009d4:	01bfff04 	movi	r6,-4
 20009d8:	010003c4 	movi	r4,15
 20009dc:	1184703a 	and	r2,r2,r6
 20009e0:	1447c83a 	sub	r3,r2,r17
 20009e4:	20c00716 	blt	r4,r3,2000a04 <_malloc_r+0x160>
 20009e8:	1800650e 	bge	r3,zero,2000b80 <_malloc_r+0x2dc>
 20009ec:	84000317 	ldw	r16,12(r16)
 20009f0:	2c000526 	beq	r5,r16,2000a08 <_malloc_r+0x164>
 20009f4:	80800117 	ldw	r2,4(r16)
 20009f8:	1184703a 	and	r2,r2,r6
 20009fc:	1447c83a 	sub	r3,r2,r17
 2000a00:	20fff90e 	bge	r4,r3,20009e8 <__alt_mem_onchip_memory2_0+0xfdff09e8>
 2000a04:	39ffffc4 	addi	r7,r7,-1
 2000a08:	38c00044 	addi	r3,r7,1
 2000a0c:	01808034 	movhi	r6,512
 2000a10:	9c000417 	ldw	r16,16(r19)
 2000a14:	31966b04 	addi	r6,r6,22956
 2000a18:	32400204 	addi	r9,r6,8
 2000a1c:	82410326 	beq	r16,r9,2000e2c <_malloc_r+0x588>
 2000a20:	81000117 	ldw	r4,4(r16)
 2000a24:	00bfff04 	movi	r2,-4
 2000a28:	208e703a 	and	r7,r4,r2
 2000a2c:	3c45c83a 	sub	r2,r7,r17
 2000a30:	010003c4 	movi	r4,15
 2000a34:	2080ee16 	blt	r4,r2,2000df0 <_malloc_r+0x54c>
 2000a38:	32400515 	stw	r9,20(r6)
 2000a3c:	32400415 	stw	r9,16(r6)
 2000a40:	1000510e 	bge	r2,zero,2000b88 <_malloc_r+0x2e4>
 2000a44:	00807fc4 	movi	r2,511
 2000a48:	11c0ce36 	bltu	r2,r7,2000d84 <_malloc_r+0x4e0>
 2000a4c:	3808d0fa 	srli	r4,r7,3
 2000a50:	01c00044 	movi	r7,1
 2000a54:	30800117 	ldw	r2,4(r6)
 2000a58:	210b883a 	add	r5,r4,r4
 2000a5c:	294b883a 	add	r5,r5,r5
 2000a60:	2009d0ba 	srai	r4,r4,2
 2000a64:	294b883a 	add	r5,r5,r5
 2000a68:	298b883a 	add	r5,r5,r6
 2000a6c:	2a000217 	ldw	r8,8(r5)
 2000a70:	3908983a 	sll	r4,r7,r4
 2000a74:	81400315 	stw	r5,12(r16)
 2000a78:	82000215 	stw	r8,8(r16)
 2000a7c:	2088b03a 	or	r4,r4,r2
 2000a80:	2c000215 	stw	r16,8(r5)
 2000a84:	31000115 	stw	r4,4(r6)
 2000a88:	44000315 	stw	r16,12(r8)
 2000a8c:	1805d0ba 	srai	r2,r3,2
 2000a90:	01400044 	movi	r5,1
 2000a94:	288a983a 	sll	r5,r5,r2
 2000a98:	21404336 	bltu	r4,r5,2000ba8 <_malloc_r+0x304>
 2000a9c:	2144703a 	and	r2,r4,r5
 2000aa0:	10000a1e 	bne	r2,zero,2000acc <_malloc_r+0x228>
 2000aa4:	00bfff04 	movi	r2,-4
 2000aa8:	294b883a 	add	r5,r5,r5
 2000aac:	1886703a 	and	r3,r3,r2
 2000ab0:	2144703a 	and	r2,r4,r5
 2000ab4:	18c00104 	addi	r3,r3,4
 2000ab8:	1000041e 	bne	r2,zero,2000acc <_malloc_r+0x228>
 2000abc:	294b883a 	add	r5,r5,r5
 2000ac0:	2144703a 	and	r2,r4,r5
 2000ac4:	18c00104 	addi	r3,r3,4
 2000ac8:	103ffc26 	beq	r2,zero,2000abc <__alt_mem_onchip_memory2_0+0xfdff0abc>
 2000acc:	023fff04 	movi	r8,-4
 2000ad0:	01c003c4 	movi	r7,15
 2000ad4:	18c5883a 	add	r2,r3,r3
 2000ad8:	1085883a 	add	r2,r2,r2
 2000adc:	1085883a 	add	r2,r2,r2
 2000ae0:	9895883a 	add	r10,r19,r2
 2000ae4:	52c00304 	addi	r11,r10,12
 2000ae8:	1819883a 	mov	r12,r3
 2000aec:	5c000017 	ldw	r16,0(r11)
 2000af0:	59bffd04 	addi	r6,r11,-12
 2000af4:	8180041e 	bne	r16,r6,2000b08 <_malloc_r+0x264>
 2000af8:	0000ce06 	br	2000e34 <_malloc_r+0x590>
 2000afc:	2000d70e 	bge	r4,zero,2000e5c <_malloc_r+0x5b8>
 2000b00:	84000317 	ldw	r16,12(r16)
 2000b04:	8180cb26 	beq	r16,r6,2000e34 <_malloc_r+0x590>
 2000b08:	80800117 	ldw	r2,4(r16)
 2000b0c:	1204703a 	and	r2,r2,r8
 2000b10:	1449c83a 	sub	r4,r2,r17
 2000b14:	393ff90e 	bge	r7,r4,2000afc <__alt_mem_onchip_memory2_0+0xfdff0afc>
 2000b18:	80800317 	ldw	r2,12(r16)
 2000b1c:	80c00217 	ldw	r3,8(r16)
 2000b20:	89400054 	ori	r5,r17,1
 2000b24:	81400115 	stw	r5,4(r16)
 2000b28:	18800315 	stw	r2,12(r3)
 2000b2c:	10c00215 	stw	r3,8(r2)
 2000b30:	8463883a 	add	r17,r16,r17
 2000b34:	9c400515 	stw	r17,20(r19)
 2000b38:	9c400415 	stw	r17,16(r19)
 2000b3c:	20800054 	ori	r2,r4,1
 2000b40:	88800115 	stw	r2,4(r17)
 2000b44:	8a400315 	stw	r9,12(r17)
 2000b48:	8a400215 	stw	r9,8(r17)
 2000b4c:	8923883a 	add	r17,r17,r4
 2000b50:	89000015 	stw	r4,0(r17)
 2000b54:	9009883a 	mov	r4,r18
 2000b58:	20033e40 	call	20033e4 <__malloc_unlock>
 2000b5c:	80800204 	addi	r2,r16,8
 2000b60:	003f7d06 	br	2000958 <__alt_mem_onchip_memory2_0+0xfdff0958>
 2000b64:	00800304 	movi	r2,12
 2000b68:	90800015 	stw	r2,0(r18)
 2000b6c:	0005883a 	mov	r2,zero
 2000b70:	003f7906 	br	2000958 <__alt_mem_onchip_memory2_0+0xfdff0958>
 2000b74:	01401f84 	movi	r5,126
 2000b78:	01c00fc4 	movi	r7,63
 2000b7c:	003f8d06 	br	20009b4 <__alt_mem_onchip_memory2_0+0xfdff09b4>
 2000b80:	81000317 	ldw	r4,12(r16)
 2000b84:	003f6a06 	br	2000930 <__alt_mem_onchip_memory2_0+0xfdff0930>
 2000b88:	81c5883a 	add	r2,r16,r7
 2000b8c:	10c00117 	ldw	r3,4(r2)
 2000b90:	9009883a 	mov	r4,r18
 2000b94:	18c00054 	ori	r3,r3,1
 2000b98:	10c00115 	stw	r3,4(r2)
 2000b9c:	20033e40 	call	20033e4 <__malloc_unlock>
 2000ba0:	80800204 	addi	r2,r16,8
 2000ba4:	003f6c06 	br	2000958 <__alt_mem_onchip_memory2_0+0xfdff0958>
 2000ba8:	9c000217 	ldw	r16,8(r19)
 2000bac:	00bfff04 	movi	r2,-4
 2000bb0:	85800117 	ldw	r22,4(r16)
 2000bb4:	b0ac703a 	and	r22,r22,r2
 2000bb8:	b4400336 	bltu	r22,r17,2000bc8 <_malloc_r+0x324>
 2000bbc:	b445c83a 	sub	r2,r22,r17
 2000bc0:	00c003c4 	movi	r3,15
 2000bc4:	18805d16 	blt	r3,r2,2000d3c <_malloc_r+0x498>
 2000bc8:	05c08034 	movhi	r23,512
 2000bcc:	00808074 	movhi	r2,513
 2000bd0:	bddbf104 	addi	r23,r23,28612
 2000bd4:	10a29a04 	addi	r2,r2,-30104
 2000bd8:	15400017 	ldw	r21,0(r2)
 2000bdc:	b9000017 	ldw	r4,0(r23)
 2000be0:	00ffffc4 	movi	r3,-1
 2000be4:	858d883a 	add	r6,r16,r22
 2000be8:	8d6b883a 	add	r21,r17,r21
 2000bec:	20c0e426 	beq	r4,r3,2000f80 <_malloc_r+0x6dc>
 2000bf0:	ad4403c4 	addi	r21,r21,4111
 2000bf4:	00fc0004 	movi	r3,-4096
 2000bf8:	a8ea703a 	and	r21,r21,r3
 2000bfc:	9009883a 	mov	r4,r18
 2000c00:	a80b883a 	mov	r5,r21
 2000c04:	d9800015 	stw	r6,0(sp)
 2000c08:	20019680 	call	2001968 <_sbrk_r>
 2000c0c:	00ffffc4 	movi	r3,-1
 2000c10:	1029883a 	mov	r20,r2
 2000c14:	d9800017 	ldw	r6,0(sp)
 2000c18:	10c0a426 	beq	r2,r3,2000eac <_malloc_r+0x608>
 2000c1c:	1180a236 	bltu	r2,r6,2000ea8 <_malloc_r+0x604>
 2000c20:	07008074 	movhi	fp,513
 2000c24:	e722a304 	addi	fp,fp,-30068
 2000c28:	e0c00017 	ldw	r3,0(fp)
 2000c2c:	a8c7883a 	add	r3,r21,r3
 2000c30:	e0c00015 	stw	r3,0(fp)
 2000c34:	3500da26 	beq	r6,r20,2000fa0 <_malloc_r+0x6fc>
 2000c38:	b9000017 	ldw	r4,0(r23)
 2000c3c:	00bfffc4 	movi	r2,-1
 2000c40:	2080e426 	beq	r4,r2,2000fd4 <_malloc_r+0x730>
 2000c44:	a185c83a 	sub	r2,r20,r6
 2000c48:	1885883a 	add	r2,r3,r2
 2000c4c:	e0800015 	stw	r2,0(fp)
 2000c50:	a0c001cc 	andi	r3,r20,7
 2000c54:	1800b526 	beq	r3,zero,2000f2c <_malloc_r+0x688>
 2000c58:	a0e9c83a 	sub	r20,r20,r3
 2000c5c:	00840204 	movi	r2,4104
 2000c60:	a5000204 	addi	r20,r20,8
 2000c64:	10c7c83a 	sub	r3,r2,r3
 2000c68:	a545883a 	add	r2,r20,r21
 2000c6c:	1083ffcc 	andi	r2,r2,4095
 2000c70:	18abc83a 	sub	r21,r3,r2
 2000c74:	9009883a 	mov	r4,r18
 2000c78:	a80b883a 	mov	r5,r21
 2000c7c:	20019680 	call	2001968 <_sbrk_r>
 2000c80:	00ffffc4 	movi	r3,-1
 2000c84:	10c0d026 	beq	r2,r3,2000fc8 <_malloc_r+0x724>
 2000c88:	1507c83a 	sub	r3,r2,r20
 2000c8c:	a8c7883a 	add	r3,r21,r3
 2000c90:	18c00054 	ori	r3,r3,1
 2000c94:	e0800017 	ldw	r2,0(fp)
 2000c98:	9d000215 	stw	r20,8(r19)
 2000c9c:	a0c00115 	stw	r3,4(r20)
 2000ca0:	a887883a 	add	r3,r21,r2
 2000ca4:	e0c00015 	stw	r3,0(fp)
 2000ca8:	84c00e26 	beq	r16,r19,2000ce4 <_malloc_r+0x440>
 2000cac:	018003c4 	movi	r6,15
 2000cb0:	3580a02e 	bgeu	r6,r22,2000f34 <_malloc_r+0x690>
 2000cb4:	81400117 	ldw	r5,4(r16)
 2000cb8:	013ffe04 	movi	r4,-8
 2000cbc:	b0bffd04 	addi	r2,r22,-12
 2000cc0:	1104703a 	and	r2,r2,r4
 2000cc4:	2900004c 	andi	r4,r5,1
 2000cc8:	1108b03a 	or	r4,r2,r4
 2000ccc:	81000115 	stw	r4,4(r16)
 2000cd0:	01400144 	movi	r5,5
 2000cd4:	8089883a 	add	r4,r16,r2
 2000cd8:	21400115 	stw	r5,4(r4)
 2000cdc:	21400215 	stw	r5,8(r4)
 2000ce0:	3080c036 	bltu	r6,r2,2000fe4 <_malloc_r+0x740>
 2000ce4:	00808074 	movhi	r2,513
 2000ce8:	10a29904 	addi	r2,r2,-30108
 2000cec:	11000017 	ldw	r4,0(r2)
 2000cf0:	20c0012e 	bgeu	r4,r3,2000cf8 <_malloc_r+0x454>
 2000cf4:	10c00015 	stw	r3,0(r2)
 2000cf8:	00808074 	movhi	r2,513
 2000cfc:	10a29804 	addi	r2,r2,-30112
 2000d00:	11000017 	ldw	r4,0(r2)
 2000d04:	9c000217 	ldw	r16,8(r19)
 2000d08:	20c0012e 	bgeu	r4,r3,2000d10 <_malloc_r+0x46c>
 2000d0c:	10c00015 	stw	r3,0(r2)
 2000d10:	80c00117 	ldw	r3,4(r16)
 2000d14:	00bfff04 	movi	r2,-4
 2000d18:	1886703a 	and	r3,r3,r2
 2000d1c:	1c45c83a 	sub	r2,r3,r17
 2000d20:	1c400236 	bltu	r3,r17,2000d2c <_malloc_r+0x488>
 2000d24:	00c003c4 	movi	r3,15
 2000d28:	18800416 	blt	r3,r2,2000d3c <_malloc_r+0x498>
 2000d2c:	9009883a 	mov	r4,r18
 2000d30:	20033e40 	call	20033e4 <__malloc_unlock>
 2000d34:	0005883a 	mov	r2,zero
 2000d38:	003f0706 	br	2000958 <__alt_mem_onchip_memory2_0+0xfdff0958>
 2000d3c:	88c00054 	ori	r3,r17,1
 2000d40:	80c00115 	stw	r3,4(r16)
 2000d44:	8463883a 	add	r17,r16,r17
 2000d48:	10800054 	ori	r2,r2,1
 2000d4c:	9c400215 	stw	r17,8(r19)
 2000d50:	88800115 	stw	r2,4(r17)
 2000d54:	9009883a 	mov	r4,r18
 2000d58:	20033e40 	call	20033e4 <__malloc_unlock>
 2000d5c:	80800204 	addi	r2,r16,8
 2000d60:	003efd06 	br	2000958 <__alt_mem_onchip_memory2_0+0xfdff0958>
 2000d64:	00800504 	movi	r2,20
 2000d68:	10c0482e 	bgeu	r2,r3,2000e8c <_malloc_r+0x5e8>
 2000d6c:	00801504 	movi	r2,84
 2000d70:	10c06836 	bltu	r2,r3,2000f14 <_malloc_r+0x670>
 2000d74:	8806d33a 	srli	r3,r17,12
 2000d78:	19c01b84 	addi	r7,r3,110
 2000d7c:	39cb883a 	add	r5,r7,r7
 2000d80:	003f0c06 	br	20009b4 <__alt_mem_onchip_memory2_0+0xfdff09b4>
 2000d84:	3804d27a 	srli	r2,r7,9
 2000d88:	01000104 	movi	r4,4
 2000d8c:	2080422e 	bgeu	r4,r2,2000e98 <_malloc_r+0x5f4>
 2000d90:	01000504 	movi	r4,20
 2000d94:	20807c36 	bltu	r4,r2,2000f88 <_malloc_r+0x6e4>
 2000d98:	110016c4 	addi	r4,r2,91
 2000d9c:	210b883a 	add	r5,r4,r4
 2000da0:	294b883a 	add	r5,r5,r5
 2000da4:	294b883a 	add	r5,r5,r5
 2000da8:	994b883a 	add	r5,r19,r5
 2000dac:	28800217 	ldw	r2,8(r5)
 2000db0:	02008034 	movhi	r8,512
 2000db4:	42166b04 	addi	r8,r8,22956
 2000db8:	11406326 	beq	r2,r5,2000f48 <_malloc_r+0x6a4>
 2000dbc:	01bfff04 	movi	r6,-4
 2000dc0:	11000117 	ldw	r4,4(r2)
 2000dc4:	2188703a 	and	r4,r4,r6
 2000dc8:	3900022e 	bgeu	r7,r4,2000dd4 <_malloc_r+0x530>
 2000dcc:	10800217 	ldw	r2,8(r2)
 2000dd0:	28bffb1e 	bne	r5,r2,2000dc0 <__alt_mem_onchip_memory2_0+0xfdff0dc0>
 2000dd4:	11800317 	ldw	r6,12(r2)
 2000dd8:	99000117 	ldw	r4,4(r19)
 2000ddc:	81800315 	stw	r6,12(r16)
 2000de0:	80800215 	stw	r2,8(r16)
 2000de4:	34000215 	stw	r16,8(r6)
 2000de8:	14000315 	stw	r16,12(r2)
 2000dec:	003f2706 	br	2000a8c <__alt_mem_onchip_memory2_0+0xfdff0a8c>
 2000df0:	88c00054 	ori	r3,r17,1
 2000df4:	80c00115 	stw	r3,4(r16)
 2000df8:	8463883a 	add	r17,r16,r17
 2000dfc:	34400515 	stw	r17,20(r6)
 2000e00:	34400415 	stw	r17,16(r6)
 2000e04:	10c00054 	ori	r3,r2,1
 2000e08:	8a400315 	stw	r9,12(r17)
 2000e0c:	8a400215 	stw	r9,8(r17)
 2000e10:	88c00115 	stw	r3,4(r17)
 2000e14:	88a3883a 	add	r17,r17,r2
 2000e18:	88800015 	stw	r2,0(r17)
 2000e1c:	9009883a 	mov	r4,r18
 2000e20:	20033e40 	call	20033e4 <__malloc_unlock>
 2000e24:	80800204 	addi	r2,r16,8
 2000e28:	003ecb06 	br	2000958 <__alt_mem_onchip_memory2_0+0xfdff0958>
 2000e2c:	31000117 	ldw	r4,4(r6)
 2000e30:	003f1606 	br	2000a8c <__alt_mem_onchip_memory2_0+0xfdff0a8c>
 2000e34:	63000044 	addi	r12,r12,1
 2000e38:	608000cc 	andi	r2,r12,3
 2000e3c:	5ac00204 	addi	r11,r11,8
 2000e40:	103f2a1e 	bne	r2,zero,2000aec <__alt_mem_onchip_memory2_0+0xfdff0aec>
 2000e44:	00002106 	br	2000ecc <_malloc_r+0x628>
 2000e48:	80800204 	addi	r2,r16,8
 2000e4c:	84000517 	ldw	r16,20(r16)
 2000e50:	143eb31e 	bne	r2,r16,2000920 <__alt_mem_onchip_memory2_0+0xfdff0920>
 2000e54:	18c00084 	addi	r3,r3,2
 2000e58:	003eec06 	br	2000a0c <__alt_mem_onchip_memory2_0+0xfdff0a0c>
 2000e5c:	8085883a 	add	r2,r16,r2
 2000e60:	10c00117 	ldw	r3,4(r2)
 2000e64:	81000317 	ldw	r4,12(r16)
 2000e68:	81400217 	ldw	r5,8(r16)
 2000e6c:	18c00054 	ori	r3,r3,1
 2000e70:	10c00115 	stw	r3,4(r2)
 2000e74:	29000315 	stw	r4,12(r5)
 2000e78:	21400215 	stw	r5,8(r4)
 2000e7c:	9009883a 	mov	r4,r18
 2000e80:	20033e40 	call	20033e4 <__malloc_unlock>
 2000e84:	80800204 	addi	r2,r16,8
 2000e88:	003eb306 	br	2000958 <__alt_mem_onchip_memory2_0+0xfdff0958>
 2000e8c:	19c016c4 	addi	r7,r3,91
 2000e90:	39cb883a 	add	r5,r7,r7
 2000e94:	003ec706 	br	20009b4 <__alt_mem_onchip_memory2_0+0xfdff09b4>
 2000e98:	3804d1ba 	srli	r2,r7,6
 2000e9c:	11000e04 	addi	r4,r2,56
 2000ea0:	210b883a 	add	r5,r4,r4
 2000ea4:	003fbe06 	br	2000da0 <__alt_mem_onchip_memory2_0+0xfdff0da0>
 2000ea8:	84ff5d26 	beq	r16,r19,2000c20 <__alt_mem_onchip_memory2_0+0xfdff0c20>
 2000eac:	9c000217 	ldw	r16,8(r19)
 2000eb0:	00bfff04 	movi	r2,-4
 2000eb4:	80c00117 	ldw	r3,4(r16)
 2000eb8:	1886703a 	and	r3,r3,r2
 2000ebc:	003f9706 	br	2000d1c <__alt_mem_onchip_memory2_0+0xfdff0d1c>
 2000ec0:	52800017 	ldw	r10,0(r10)
 2000ec4:	18ffffc4 	addi	r3,r3,-1
 2000ec8:	50805c1e 	bne	r10,r2,200103c <_malloc_r+0x798>
 2000ecc:	190000cc 	andi	r4,r3,3
 2000ed0:	50bffe04 	addi	r2,r10,-8
 2000ed4:	203ffa1e 	bne	r4,zero,2000ec0 <__alt_mem_onchip_memory2_0+0xfdff0ec0>
 2000ed8:	98800117 	ldw	r2,4(r19)
 2000edc:	0146303a 	nor	r3,zero,r5
 2000ee0:	1884703a 	and	r2,r3,r2
 2000ee4:	98800115 	stw	r2,4(r19)
 2000ee8:	294b883a 	add	r5,r5,r5
 2000eec:	117f2e36 	bltu	r2,r5,2000ba8 <__alt_mem_onchip_memory2_0+0xfdff0ba8>
 2000ef0:	283f2d26 	beq	r5,zero,2000ba8 <__alt_mem_onchip_memory2_0+0xfdff0ba8>
 2000ef4:	1146703a 	and	r3,r2,r5
 2000ef8:	1800521e 	bne	r3,zero,2001044 <_malloc_r+0x7a0>
 2000efc:	6007883a 	mov	r3,r12
 2000f00:	294b883a 	add	r5,r5,r5
 2000f04:	1148703a 	and	r4,r2,r5
 2000f08:	18c00104 	addi	r3,r3,4
 2000f0c:	203ffc26 	beq	r4,zero,2000f00 <__alt_mem_onchip_memory2_0+0xfdff0f00>
 2000f10:	003ef006 	br	2000ad4 <__alt_mem_onchip_memory2_0+0xfdff0ad4>
 2000f14:	00805504 	movi	r2,340
 2000f18:	10c01336 	bltu	r2,r3,2000f68 <_malloc_r+0x6c4>
 2000f1c:	8806d3fa 	srli	r3,r17,15
 2000f20:	19c01dc4 	addi	r7,r3,119
 2000f24:	39cb883a 	add	r5,r7,r7
 2000f28:	003ea206 	br	20009b4 <__alt_mem_onchip_memory2_0+0xfdff09b4>
 2000f2c:	00c40004 	movi	r3,4096
 2000f30:	003f4d06 	br	2000c68 <__alt_mem_onchip_memory2_0+0xfdff0c68>
 2000f34:	00800044 	movi	r2,1
 2000f38:	a0800115 	stw	r2,4(r20)
 2000f3c:	a021883a 	mov	r16,r20
 2000f40:	0007883a 	mov	r3,zero
 2000f44:	003f7506 	br	2000d1c <__alt_mem_onchip_memory2_0+0xfdff0d1c>
 2000f48:	200bd0ba 	srai	r5,r4,2
 2000f4c:	01800044 	movi	r6,1
 2000f50:	41000117 	ldw	r4,4(r8)
 2000f54:	314a983a 	sll	r5,r6,r5
 2000f58:	100d883a 	mov	r6,r2
 2000f5c:	2908b03a 	or	r4,r5,r4
 2000f60:	41000115 	stw	r4,4(r8)
 2000f64:	003f9d06 	br	2000ddc <__alt_mem_onchip_memory2_0+0xfdff0ddc>
 2000f68:	00815504 	movi	r2,1364
 2000f6c:	10c01336 	bltu	r2,r3,2000fbc <_malloc_r+0x718>
 2000f70:	8806d4ba 	srli	r3,r17,18
 2000f74:	19c01f04 	addi	r7,r3,124
 2000f78:	39cb883a 	add	r5,r7,r7
 2000f7c:	003e8d06 	br	20009b4 <__alt_mem_onchip_memory2_0+0xfdff09b4>
 2000f80:	ad400404 	addi	r21,r21,16
 2000f84:	003f1d06 	br	2000bfc <__alt_mem_onchip_memory2_0+0xfdff0bfc>
 2000f88:	01001504 	movi	r4,84
 2000f8c:	20801c36 	bltu	r4,r2,2001000 <_malloc_r+0x75c>
 2000f90:	3804d33a 	srli	r2,r7,12
 2000f94:	11001b84 	addi	r4,r2,110
 2000f98:	210b883a 	add	r5,r4,r4
 2000f9c:	003f8006 	br	2000da0 <__alt_mem_onchip_memory2_0+0xfdff0da0>
 2000fa0:	3083ffcc 	andi	r2,r6,4095
 2000fa4:	103f241e 	bne	r2,zero,2000c38 <__alt_mem_onchip_memory2_0+0xfdff0c38>
 2000fa8:	99000217 	ldw	r4,8(r19)
 2000fac:	ad85883a 	add	r2,r21,r22
 2000fb0:	10800054 	ori	r2,r2,1
 2000fb4:	20800115 	stw	r2,4(r4)
 2000fb8:	003f4a06 	br	2000ce4 <__alt_mem_onchip_memory2_0+0xfdff0ce4>
 2000fbc:	01403f04 	movi	r5,252
 2000fc0:	01c01f84 	movi	r7,126
 2000fc4:	003e7b06 	br	20009b4 <__alt_mem_onchip_memory2_0+0xfdff09b4>
 2000fc8:	00c00044 	movi	r3,1
 2000fcc:	002b883a 	mov	r21,zero
 2000fd0:	003f3006 	br	2000c94 <__alt_mem_onchip_memory2_0+0xfdff0c94>
 2000fd4:	00808034 	movhi	r2,512
 2000fd8:	109bf104 	addi	r2,r2,28612
 2000fdc:	15000015 	stw	r20,0(r2)
 2000fe0:	003f1b06 	br	2000c50 <__alt_mem_onchip_memory2_0+0xfdff0c50>
 2000fe4:	9009883a 	mov	r4,r18
 2000fe8:	81400204 	addi	r5,r16,8
 2000fec:	200221c0 	call	200221c <_free_r>
 2000ff0:	00808074 	movhi	r2,513
 2000ff4:	10a2a304 	addi	r2,r2,-30068
 2000ff8:	10c00017 	ldw	r3,0(r2)
 2000ffc:	003f3906 	br	2000ce4 <__alt_mem_onchip_memory2_0+0xfdff0ce4>
 2001000:	01005504 	movi	r4,340
 2001004:	20800436 	bltu	r4,r2,2001018 <_malloc_r+0x774>
 2001008:	3804d3fa 	srli	r2,r7,15
 200100c:	11001dc4 	addi	r4,r2,119
 2001010:	210b883a 	add	r5,r4,r4
 2001014:	003f6206 	br	2000da0 <__alt_mem_onchip_memory2_0+0xfdff0da0>
 2001018:	01015504 	movi	r4,1364
 200101c:	20800436 	bltu	r4,r2,2001030 <_malloc_r+0x78c>
 2001020:	3804d4ba 	srli	r2,r7,18
 2001024:	11001f04 	addi	r4,r2,124
 2001028:	210b883a 	add	r5,r4,r4
 200102c:	003f5c06 	br	2000da0 <__alt_mem_onchip_memory2_0+0xfdff0da0>
 2001030:	01403f04 	movi	r5,252
 2001034:	01001f84 	movi	r4,126
 2001038:	003f5906 	br	2000da0 <__alt_mem_onchip_memory2_0+0xfdff0da0>
 200103c:	98800117 	ldw	r2,4(r19)
 2001040:	003fa906 	br	2000ee8 <__alt_mem_onchip_memory2_0+0xfdff0ee8>
 2001044:	6007883a 	mov	r3,r12
 2001048:	003ea206 	br	2000ad4 <__alt_mem_onchip_memory2_0+0xfdff0ad4>

0200104c <memchr>:
 200104c:	208000cc 	andi	r2,r4,3
 2001050:	280f883a 	mov	r7,r5
 2001054:	10003526 	beq	r2,zero,200112c <memchr+0xe0>
 2001058:	30bfffc4 	addi	r2,r6,-1
 200105c:	30001b26 	beq	r6,zero,20010cc <memchr+0x80>
 2001060:	21800003 	ldbu	r6,0(r4)
 2001064:	28c03fcc 	andi	r3,r5,255
 2001068:	30c01a26 	beq	r6,r3,20010d4 <memchr+0x88>
 200106c:	180d883a 	mov	r6,r3
 2001070:	00000406 	br	2001084 <memchr+0x38>
 2001074:	10001526 	beq	r2,zero,20010cc <memchr+0x80>
 2001078:	20c00003 	ldbu	r3,0(r4)
 200107c:	10bfffc4 	addi	r2,r2,-1
 2001080:	19801426 	beq	r3,r6,20010d4 <memchr+0x88>
 2001084:	21000044 	addi	r4,r4,1
 2001088:	20c000cc 	andi	r3,r4,3
 200108c:	183ff91e 	bne	r3,zero,2001074 <__alt_mem_onchip_memory2_0+0xfdff1074>
 2001090:	024000c4 	movi	r9,3
 2001094:	48801136 	bltu	r9,r2,20010dc <memchr+0x90>
 2001098:	10000c26 	beq	r2,zero,20010cc <memchr+0x80>
 200109c:	20c00003 	ldbu	r3,0(r4)
 20010a0:	29403fcc 	andi	r5,r5,255
 20010a4:	19400b26 	beq	r3,r5,20010d4 <memchr+0x88>
 20010a8:	20c00044 	addi	r3,r4,1
 20010ac:	2085883a 	add	r2,r4,r2
 20010b0:	39803fcc 	andi	r6,r7,255
 20010b4:	00000306 	br	20010c4 <memchr+0x78>
 20010b8:	18c00044 	addi	r3,r3,1
 20010bc:	197fffc3 	ldbu	r5,-1(r3)
 20010c0:	29800426 	beq	r5,r6,20010d4 <memchr+0x88>
 20010c4:	1809883a 	mov	r4,r3
 20010c8:	18bffb1e 	bne	r3,r2,20010b8 <__alt_mem_onchip_memory2_0+0xfdff10b8>
 20010cc:	0005883a 	mov	r2,zero
 20010d0:	f800283a 	ret
 20010d4:	2005883a 	mov	r2,r4
 20010d8:	f800283a 	ret
 20010dc:	28c03fcc 	andi	r3,r5,255
 20010e0:	1810923a 	slli	r8,r3,8
 20010e4:	02ffbff4 	movhi	r11,65279
 20010e8:	02a02074 	movhi	r10,32897
 20010ec:	40c6b03a 	or	r3,r8,r3
 20010f0:	1810943a 	slli	r8,r3,16
 20010f4:	5affbfc4 	addi	r11,r11,-257
 20010f8:	52a02004 	addi	r10,r10,-32640
 20010fc:	40d0b03a 	or	r8,r8,r3
 2001100:	20c00017 	ldw	r3,0(r4)
 2001104:	40c6f03a 	xor	r3,r8,r3
 2001108:	1acd883a 	add	r6,r3,r11
 200110c:	00c6303a 	nor	r3,zero,r3
 2001110:	30c6703a 	and	r3,r6,r3
 2001114:	1a86703a 	and	r3,r3,r10
 2001118:	183fdf1e 	bne	r3,zero,2001098 <__alt_mem_onchip_memory2_0+0xfdff1098>
 200111c:	10bfff04 	addi	r2,r2,-4
 2001120:	21000104 	addi	r4,r4,4
 2001124:	48bff636 	bltu	r9,r2,2001100 <__alt_mem_onchip_memory2_0+0xfdff1100>
 2001128:	003fdb06 	br	2001098 <__alt_mem_onchip_memory2_0+0xfdff1098>
 200112c:	3005883a 	mov	r2,r6
 2001130:	003fd706 	br	2001090 <__alt_mem_onchip_memory2_0+0xfdff1090>

02001134 <memcpy>:
 2001134:	deffff04 	addi	sp,sp,-4
 2001138:	dc000015 	stw	r16,0(sp)
 200113c:	00c003c4 	movi	r3,15
 2001140:	2005883a 	mov	r2,r4
 2001144:	1980432e 	bgeu	r3,r6,2001254 <memcpy+0x120>
 2001148:	2146b03a 	or	r3,r4,r5
 200114c:	18c000cc 	andi	r3,r3,3
 2001150:	1800421e 	bne	r3,zero,200125c <memcpy+0x128>
 2001154:	343ffc04 	addi	r16,r6,-16
 2001158:	8020d13a 	srli	r16,r16,4
 200115c:	28c00104 	addi	r3,r5,4
 2001160:	23400104 	addi	r13,r4,4
 2001164:	801e913a 	slli	r15,r16,4
 2001168:	2b000204 	addi	r12,r5,8
 200116c:	22c00204 	addi	r11,r4,8
 2001170:	7bc00504 	addi	r15,r15,20
 2001174:	2a800304 	addi	r10,r5,12
 2001178:	22400304 	addi	r9,r4,12
 200117c:	2bdf883a 	add	r15,r5,r15
 2001180:	2811883a 	mov	r8,r5
 2001184:	200f883a 	mov	r7,r4
 2001188:	41000017 	ldw	r4,0(r8)
 200118c:	39c00404 	addi	r7,r7,16
 2001190:	18c00404 	addi	r3,r3,16
 2001194:	393ffc15 	stw	r4,-16(r7)
 2001198:	1bbffc17 	ldw	r14,-16(r3)
 200119c:	6b400404 	addi	r13,r13,16
 20011a0:	5ac00404 	addi	r11,r11,16
 20011a4:	6bbffc15 	stw	r14,-16(r13)
 20011a8:	63800017 	ldw	r14,0(r12)
 20011ac:	4a400404 	addi	r9,r9,16
 20011b0:	42000404 	addi	r8,r8,16
 20011b4:	5bbffc15 	stw	r14,-16(r11)
 20011b8:	53800017 	ldw	r14,0(r10)
 20011bc:	63000404 	addi	r12,r12,16
 20011c0:	52800404 	addi	r10,r10,16
 20011c4:	4bbffc15 	stw	r14,-16(r9)
 20011c8:	1bffef1e 	bne	r3,r15,2001188 <__alt_mem_onchip_memory2_0+0xfdff1188>
 20011cc:	81c00044 	addi	r7,r16,1
 20011d0:	380e913a 	slli	r7,r7,4
 20011d4:	310003cc 	andi	r4,r6,15
 20011d8:	02c000c4 	movi	r11,3
 20011dc:	11c7883a 	add	r3,r2,r7
 20011e0:	29cb883a 	add	r5,r5,r7
 20011e4:	59001f2e 	bgeu	r11,r4,2001264 <memcpy+0x130>
 20011e8:	1813883a 	mov	r9,r3
 20011ec:	2811883a 	mov	r8,r5
 20011f0:	200f883a 	mov	r7,r4
 20011f4:	42800017 	ldw	r10,0(r8)
 20011f8:	4a400104 	addi	r9,r9,4
 20011fc:	39ffff04 	addi	r7,r7,-4
 2001200:	4abfff15 	stw	r10,-4(r9)
 2001204:	42000104 	addi	r8,r8,4
 2001208:	59fffa36 	bltu	r11,r7,20011f4 <__alt_mem_onchip_memory2_0+0xfdff11f4>
 200120c:	213fff04 	addi	r4,r4,-4
 2001210:	2008d0ba 	srli	r4,r4,2
 2001214:	318000cc 	andi	r6,r6,3
 2001218:	21000044 	addi	r4,r4,1
 200121c:	2109883a 	add	r4,r4,r4
 2001220:	2109883a 	add	r4,r4,r4
 2001224:	1907883a 	add	r3,r3,r4
 2001228:	290b883a 	add	r5,r5,r4
 200122c:	30000626 	beq	r6,zero,2001248 <memcpy+0x114>
 2001230:	198d883a 	add	r6,r3,r6
 2001234:	29c00003 	ldbu	r7,0(r5)
 2001238:	18c00044 	addi	r3,r3,1
 200123c:	29400044 	addi	r5,r5,1
 2001240:	19ffffc5 	stb	r7,-1(r3)
 2001244:	19bffb1e 	bne	r3,r6,2001234 <__alt_mem_onchip_memory2_0+0xfdff1234>
 2001248:	dc000017 	ldw	r16,0(sp)
 200124c:	dec00104 	addi	sp,sp,4
 2001250:	f800283a 	ret
 2001254:	2007883a 	mov	r3,r4
 2001258:	003ff406 	br	200122c <__alt_mem_onchip_memory2_0+0xfdff122c>
 200125c:	2007883a 	mov	r3,r4
 2001260:	003ff306 	br	2001230 <__alt_mem_onchip_memory2_0+0xfdff1230>
 2001264:	200d883a 	mov	r6,r4
 2001268:	003ff006 	br	200122c <__alt_mem_onchip_memory2_0+0xfdff122c>

0200126c <memmove>:
 200126c:	2005883a 	mov	r2,r4
 2001270:	29000b2e 	bgeu	r5,r4,20012a0 <memmove+0x34>
 2001274:	298f883a 	add	r7,r5,r6
 2001278:	21c0092e 	bgeu	r4,r7,20012a0 <memmove+0x34>
 200127c:	2187883a 	add	r3,r4,r6
 2001280:	198bc83a 	sub	r5,r3,r6
 2001284:	30004b26 	beq	r6,zero,20013b4 <memmove+0x148>
 2001288:	39ffffc4 	addi	r7,r7,-1
 200128c:	39000003 	ldbu	r4,0(r7)
 2001290:	18ffffc4 	addi	r3,r3,-1
 2001294:	19000005 	stb	r4,0(r3)
 2001298:	197ffb1e 	bne	r3,r5,2001288 <__alt_mem_onchip_memory2_0+0xfdff1288>
 200129c:	f800283a 	ret
 20012a0:	00c003c4 	movi	r3,15
 20012a4:	1980412e 	bgeu	r3,r6,20013ac <memmove+0x140>
 20012a8:	1146b03a 	or	r3,r2,r5
 20012ac:	18c000cc 	andi	r3,r3,3
 20012b0:	1800411e 	bne	r3,zero,20013b8 <memmove+0x14c>
 20012b4:	33fffc04 	addi	r15,r6,-16
 20012b8:	781ed13a 	srli	r15,r15,4
 20012bc:	28c00104 	addi	r3,r5,4
 20012c0:	13400104 	addi	r13,r2,4
 20012c4:	781c913a 	slli	r14,r15,4
 20012c8:	2b000204 	addi	r12,r5,8
 20012cc:	12c00204 	addi	r11,r2,8
 20012d0:	73800504 	addi	r14,r14,20
 20012d4:	2a800304 	addi	r10,r5,12
 20012d8:	12400304 	addi	r9,r2,12
 20012dc:	2b9d883a 	add	r14,r5,r14
 20012e0:	2811883a 	mov	r8,r5
 20012e4:	100f883a 	mov	r7,r2
 20012e8:	41000017 	ldw	r4,0(r8)
 20012ec:	39c00404 	addi	r7,r7,16
 20012f0:	18c00404 	addi	r3,r3,16
 20012f4:	393ffc15 	stw	r4,-16(r7)
 20012f8:	193ffc17 	ldw	r4,-16(r3)
 20012fc:	6b400404 	addi	r13,r13,16
 2001300:	5ac00404 	addi	r11,r11,16
 2001304:	693ffc15 	stw	r4,-16(r13)
 2001308:	61000017 	ldw	r4,0(r12)
 200130c:	4a400404 	addi	r9,r9,16
 2001310:	42000404 	addi	r8,r8,16
 2001314:	593ffc15 	stw	r4,-16(r11)
 2001318:	51000017 	ldw	r4,0(r10)
 200131c:	63000404 	addi	r12,r12,16
 2001320:	52800404 	addi	r10,r10,16
 2001324:	493ffc15 	stw	r4,-16(r9)
 2001328:	1bbfef1e 	bne	r3,r14,20012e8 <__alt_mem_onchip_memory2_0+0xfdff12e8>
 200132c:	79000044 	addi	r4,r15,1
 2001330:	2008913a 	slli	r4,r4,4
 2001334:	328003cc 	andi	r10,r6,15
 2001338:	02c000c4 	movi	r11,3
 200133c:	1107883a 	add	r3,r2,r4
 2001340:	290b883a 	add	r5,r5,r4
 2001344:	5a801e2e 	bgeu	r11,r10,20013c0 <memmove+0x154>
 2001348:	1813883a 	mov	r9,r3
 200134c:	2811883a 	mov	r8,r5
 2001350:	500f883a 	mov	r7,r10
 2001354:	41000017 	ldw	r4,0(r8)
 2001358:	4a400104 	addi	r9,r9,4
 200135c:	39ffff04 	addi	r7,r7,-4
 2001360:	493fff15 	stw	r4,-4(r9)
 2001364:	42000104 	addi	r8,r8,4
 2001368:	59fffa36 	bltu	r11,r7,2001354 <__alt_mem_onchip_memory2_0+0xfdff1354>
 200136c:	513fff04 	addi	r4,r10,-4
 2001370:	2008d0ba 	srli	r4,r4,2
 2001374:	318000cc 	andi	r6,r6,3
 2001378:	21000044 	addi	r4,r4,1
 200137c:	2109883a 	add	r4,r4,r4
 2001380:	2109883a 	add	r4,r4,r4
 2001384:	1907883a 	add	r3,r3,r4
 2001388:	290b883a 	add	r5,r5,r4
 200138c:	30000926 	beq	r6,zero,20013b4 <memmove+0x148>
 2001390:	198d883a 	add	r6,r3,r6
 2001394:	29c00003 	ldbu	r7,0(r5)
 2001398:	18c00044 	addi	r3,r3,1
 200139c:	29400044 	addi	r5,r5,1
 20013a0:	19ffffc5 	stb	r7,-1(r3)
 20013a4:	19bffb1e 	bne	r3,r6,2001394 <__alt_mem_onchip_memory2_0+0xfdff1394>
 20013a8:	f800283a 	ret
 20013ac:	1007883a 	mov	r3,r2
 20013b0:	003ff606 	br	200138c <__alt_mem_onchip_memory2_0+0xfdff138c>
 20013b4:	f800283a 	ret
 20013b8:	1007883a 	mov	r3,r2
 20013bc:	003ff406 	br	2001390 <__alt_mem_onchip_memory2_0+0xfdff1390>
 20013c0:	500d883a 	mov	r6,r10
 20013c4:	003ff106 	br	200138c <__alt_mem_onchip_memory2_0+0xfdff138c>

020013c8 <_realloc_r>:
 20013c8:	defff604 	addi	sp,sp,-40
 20013cc:	dcc00315 	stw	r19,12(sp)
 20013d0:	dc400115 	stw	r17,4(sp)
 20013d4:	dfc00915 	stw	ra,36(sp)
 20013d8:	df000815 	stw	fp,32(sp)
 20013dc:	ddc00715 	stw	r23,28(sp)
 20013e0:	dd800615 	stw	r22,24(sp)
 20013e4:	dd400515 	stw	r21,20(sp)
 20013e8:	dd000415 	stw	r20,16(sp)
 20013ec:	dc800215 	stw	r18,8(sp)
 20013f0:	dc000015 	stw	r16,0(sp)
 20013f4:	2827883a 	mov	r19,r5
 20013f8:	3023883a 	mov	r17,r6
 20013fc:	2800bf26 	beq	r5,zero,20016fc <_realloc_r+0x334>
 2001400:	2025883a 	mov	r18,r4
 2001404:	20033c40 	call	20033c4 <__malloc_lock>
 2001408:	98ffff17 	ldw	r3,-4(r19)
 200140c:	01bfff04 	movi	r6,-4
 2001410:	890002c4 	addi	r4,r17,11
 2001414:	01c00584 	movi	r7,22
 2001418:	9d7ffe04 	addi	r21,r19,-8
 200141c:	19a0703a 	and	r16,r3,r6
 2001420:	39003f2e 	bgeu	r7,r4,2001520 <_realloc_r+0x158>
 2001424:	053ffe04 	movi	r20,-8
 2001428:	2528703a 	and	r20,r4,r20
 200142c:	a00f883a 	mov	r7,r20
 2001430:	a0008216 	blt	r20,zero,200163c <_realloc_r+0x274>
 2001434:	a4408136 	bltu	r20,r17,200163c <_realloc_r+0x274>
 2001438:	81c03c0e 	bge	r16,r7,200152c <_realloc_r+0x164>
 200143c:	07008034 	movhi	fp,512
 2001440:	e7166b04 	addi	fp,fp,22956
 2001444:	e1000217 	ldw	r4,8(fp)
 2001448:	ac05883a 	add	r2,r21,r16
 200144c:	2080bf26 	beq	r4,r2,200174c <_realloc_r+0x384>
 2001450:	11000117 	ldw	r4,4(r2)
 2001454:	023fff84 	movi	r8,-2
 2001458:	2210703a 	and	r8,r4,r8
 200145c:	1211883a 	add	r8,r2,r8
 2001460:	41400117 	ldw	r5,4(r8)
 2001464:	2940004c 	andi	r5,r5,1
 2001468:	28004a1e 	bne	r5,zero,2001594 <_realloc_r+0x1cc>
 200146c:	017fff04 	movi	r5,-4
 2001470:	2148703a 	and	r4,r4,r5
 2001474:	2409883a 	add	r4,r4,r16
 2001478:	21c0ad0e 	bge	r4,r7,2001730 <_realloc_r+0x368>
 200147c:	18c0004c 	andi	r3,r3,1
 2001480:	18007f1e 	bne	r3,zero,2001680 <_realloc_r+0x2b8>
 2001484:	9dfffe17 	ldw	r23,-8(r19)
 2001488:	adefc83a 	sub	r23,r21,r23
 200148c:	bd800117 	ldw	r22,4(r23)
 2001490:	b14a703a 	and	r5,r22,r5
 2001494:	216d883a 	add	r22,r4,r5
 2001498:	b1c04516 	blt	r22,r7,20015b0 <_realloc_r+0x1e8>
 200149c:	10c00317 	ldw	r3,12(r2)
 20014a0:	10800217 	ldw	r2,8(r2)
 20014a4:	81bfff04 	addi	r6,r16,-4
 20014a8:	bc400204 	addi	r17,r23,8
 20014ac:	10c00315 	stw	r3,12(r2)
 20014b0:	18800215 	stw	r2,8(r3)
 20014b4:	b9400217 	ldw	r5,8(r23)
 20014b8:	b8c00317 	ldw	r3,12(r23)
 20014bc:	00800904 	movi	r2,36
 20014c0:	28c00315 	stw	r3,12(r5)
 20014c4:	19400215 	stw	r5,8(r3)
 20014c8:	1180ef36 	bltu	r2,r6,2001888 <_realloc_r+0x4c0>
 20014cc:	008004c4 	movi	r2,19
 20014d0:	1180da2e 	bgeu	r2,r6,200183c <_realloc_r+0x474>
 20014d4:	98800017 	ldw	r2,0(r19)
 20014d8:	b8800215 	stw	r2,8(r23)
 20014dc:	98800117 	ldw	r2,4(r19)
 20014e0:	b8800315 	stw	r2,12(r23)
 20014e4:	008006c4 	movi	r2,27
 20014e8:	1180fc2e 	bgeu	r2,r6,20018dc <_realloc_r+0x514>
 20014ec:	98800217 	ldw	r2,8(r19)
 20014f0:	b8800415 	stw	r2,16(r23)
 20014f4:	98800317 	ldw	r2,12(r19)
 20014f8:	b8800515 	stw	r2,20(r23)
 20014fc:	00800904 	movi	r2,36
 2001500:	3080421e 	bne	r6,r2,200160c <_realloc_r+0x244>
 2001504:	98800417 	ldw	r2,16(r19)
 2001508:	9cc00604 	addi	r19,r19,24
 200150c:	b8c00804 	addi	r3,r23,32
 2001510:	b8800615 	stw	r2,24(r23)
 2001514:	98bfff17 	ldw	r2,-4(r19)
 2001518:	b8800715 	stw	r2,28(r23)
 200151c:	00003d06 	br	2001614 <_realloc_r+0x24c>
 2001520:	01c00404 	movi	r7,16
 2001524:	3829883a 	mov	r20,r7
 2001528:	003fc206 	br	2001434 <__alt_mem_onchip_memory2_0+0xfdff1434>
 200152c:	9823883a 	mov	r17,r19
 2001530:	850fc83a 	sub	r7,r16,r20
 2001534:	008003c4 	movi	r2,15
 2001538:	18c0004c 	andi	r3,r3,1
 200153c:	11c04336 	bltu	r2,r7,200164c <_realloc_r+0x284>
 2001540:	1c06b03a 	or	r3,r3,r16
 2001544:	a8c00115 	stw	r3,4(r21)
 2001548:	ac21883a 	add	r16,r21,r16
 200154c:	80c00117 	ldw	r3,4(r16)
 2001550:	18c00054 	ori	r3,r3,1
 2001554:	80c00115 	stw	r3,4(r16)
 2001558:	9009883a 	mov	r4,r18
 200155c:	20033e40 	call	20033e4 <__malloc_unlock>
 2001560:	8805883a 	mov	r2,r17
 2001564:	dfc00917 	ldw	ra,36(sp)
 2001568:	df000817 	ldw	fp,32(sp)
 200156c:	ddc00717 	ldw	r23,28(sp)
 2001570:	dd800617 	ldw	r22,24(sp)
 2001574:	dd400517 	ldw	r21,20(sp)
 2001578:	dd000417 	ldw	r20,16(sp)
 200157c:	dcc00317 	ldw	r19,12(sp)
 2001580:	dc800217 	ldw	r18,8(sp)
 2001584:	dc400117 	ldw	r17,4(sp)
 2001588:	dc000017 	ldw	r16,0(sp)
 200158c:	dec00a04 	addi	sp,sp,40
 2001590:	f800283a 	ret
 2001594:	18c0004c 	andi	r3,r3,1
 2001598:	1800391e 	bne	r3,zero,2001680 <_realloc_r+0x2b8>
 200159c:	9dfffe17 	ldw	r23,-8(r19)
 20015a0:	00bfff04 	movi	r2,-4
 20015a4:	adefc83a 	sub	r23,r21,r23
 20015a8:	b9400117 	ldw	r5,4(r23)
 20015ac:	288a703a 	and	r5,r5,r2
 20015b0:	2c2d883a 	add	r22,r5,r16
 20015b4:	b1c03216 	blt	r22,r7,2001680 <_realloc_r+0x2b8>
 20015b8:	b8800317 	ldw	r2,12(r23)
 20015bc:	b8c00217 	ldw	r3,8(r23)
 20015c0:	81bfff04 	addi	r6,r16,-4
 20015c4:	01000904 	movi	r4,36
 20015c8:	18800315 	stw	r2,12(r3)
 20015cc:	10c00215 	stw	r3,8(r2)
 20015d0:	bc400204 	addi	r17,r23,8
 20015d4:	2180ac36 	bltu	r4,r6,2001888 <_realloc_r+0x4c0>
 20015d8:	008004c4 	movi	r2,19
 20015dc:	1180972e 	bgeu	r2,r6,200183c <_realloc_r+0x474>
 20015e0:	98800017 	ldw	r2,0(r19)
 20015e4:	b8800215 	stw	r2,8(r23)
 20015e8:	98800117 	ldw	r2,4(r19)
 20015ec:	b8800315 	stw	r2,12(r23)
 20015f0:	008006c4 	movi	r2,27
 20015f4:	1180b92e 	bgeu	r2,r6,20018dc <_realloc_r+0x514>
 20015f8:	98800217 	ldw	r2,8(r19)
 20015fc:	b8800415 	stw	r2,16(r23)
 2001600:	98800317 	ldw	r2,12(r19)
 2001604:	b8800515 	stw	r2,20(r23)
 2001608:	313fbe26 	beq	r6,r4,2001504 <__alt_mem_onchip_memory2_0+0xfdff1504>
 200160c:	b8c00604 	addi	r3,r23,24
 2001610:	9cc00404 	addi	r19,r19,16
 2001614:	98800017 	ldw	r2,0(r19)
 2001618:	b021883a 	mov	r16,r22
 200161c:	b82b883a 	mov	r21,r23
 2001620:	18800015 	stw	r2,0(r3)
 2001624:	98800117 	ldw	r2,4(r19)
 2001628:	18800115 	stw	r2,4(r3)
 200162c:	98800217 	ldw	r2,8(r19)
 2001630:	18800215 	stw	r2,8(r3)
 2001634:	b8c00117 	ldw	r3,4(r23)
 2001638:	003fbd06 	br	2001530 <__alt_mem_onchip_memory2_0+0xfdff1530>
 200163c:	00800304 	movi	r2,12
 2001640:	90800015 	stw	r2,0(r18)
 2001644:	0005883a 	mov	r2,zero
 2001648:	003fc606 	br	2001564 <__alt_mem_onchip_memory2_0+0xfdff1564>
 200164c:	1d06b03a 	or	r3,r3,r20
 2001650:	ad0b883a 	add	r5,r21,r20
 2001654:	a8c00115 	stw	r3,4(r21)
 2001658:	38800054 	ori	r2,r7,1
 200165c:	28800115 	stw	r2,4(r5)
 2001660:	29cf883a 	add	r7,r5,r7
 2001664:	38800117 	ldw	r2,4(r7)
 2001668:	9009883a 	mov	r4,r18
 200166c:	29400204 	addi	r5,r5,8
 2001670:	10800054 	ori	r2,r2,1
 2001674:	38800115 	stw	r2,4(r7)
 2001678:	200221c0 	call	200221c <_free_r>
 200167c:	003fb606 	br	2001558 <__alt_mem_onchip_memory2_0+0xfdff1558>
 2001680:	880b883a 	mov	r5,r17
 2001684:	9009883a 	mov	r4,r18
 2001688:	20008a40 	call	20008a4 <_malloc_r>
 200168c:	1023883a 	mov	r17,r2
 2001690:	1000aa26 	beq	r2,zero,200193c <_realloc_r+0x574>
 2001694:	98ffff17 	ldw	r3,-4(r19)
 2001698:	113ffe04 	addi	r4,r2,-8
 200169c:	00bfff84 	movi	r2,-2
 20016a0:	1884703a 	and	r2,r3,r2
 20016a4:	a885883a 	add	r2,r21,r2
 20016a8:	20808626 	beq	r4,r2,20018c4 <_realloc_r+0x4fc>
 20016ac:	81bfff04 	addi	r6,r16,-4
 20016b0:	00800904 	movi	r2,36
 20016b4:	11807036 	bltu	r2,r6,2001878 <_realloc_r+0x4b0>
 20016b8:	00c004c4 	movi	r3,19
 20016bc:	19805636 	bltu	r3,r6,2001818 <_realloc_r+0x450>
 20016c0:	8805883a 	mov	r2,r17
 20016c4:	9807883a 	mov	r3,r19
 20016c8:	19000017 	ldw	r4,0(r3)
 20016cc:	11000015 	stw	r4,0(r2)
 20016d0:	19000117 	ldw	r4,4(r3)
 20016d4:	11000115 	stw	r4,4(r2)
 20016d8:	18c00217 	ldw	r3,8(r3)
 20016dc:	10c00215 	stw	r3,8(r2)
 20016e0:	980b883a 	mov	r5,r19
 20016e4:	9009883a 	mov	r4,r18
 20016e8:	200221c0 	call	200221c <_free_r>
 20016ec:	9009883a 	mov	r4,r18
 20016f0:	20033e40 	call	20033e4 <__malloc_unlock>
 20016f4:	8805883a 	mov	r2,r17
 20016f8:	003f9a06 	br	2001564 <__alt_mem_onchip_memory2_0+0xfdff1564>
 20016fc:	300b883a 	mov	r5,r6
 2001700:	dfc00917 	ldw	ra,36(sp)
 2001704:	df000817 	ldw	fp,32(sp)
 2001708:	ddc00717 	ldw	r23,28(sp)
 200170c:	dd800617 	ldw	r22,24(sp)
 2001710:	dd400517 	ldw	r21,20(sp)
 2001714:	dd000417 	ldw	r20,16(sp)
 2001718:	dcc00317 	ldw	r19,12(sp)
 200171c:	dc800217 	ldw	r18,8(sp)
 2001720:	dc400117 	ldw	r17,4(sp)
 2001724:	dc000017 	ldw	r16,0(sp)
 2001728:	dec00a04 	addi	sp,sp,40
 200172c:	20008a41 	jmpi	20008a4 <_malloc_r>
 2001730:	11400317 	ldw	r5,12(r2)
 2001734:	10800217 	ldw	r2,8(r2)
 2001738:	9823883a 	mov	r17,r19
 200173c:	2021883a 	mov	r16,r4
 2001740:	11400315 	stw	r5,12(r2)
 2001744:	28800215 	stw	r2,8(r5)
 2001748:	003f7906 	br	2001530 <__alt_mem_onchip_memory2_0+0xfdff1530>
 200174c:	21000117 	ldw	r4,4(r4)
 2001750:	00bfff04 	movi	r2,-4
 2001754:	a1800404 	addi	r6,r20,16
 2001758:	2088703a 	and	r4,r4,r2
 200175c:	2409883a 	add	r4,r4,r16
 2001760:	2180380e 	bge	r4,r6,2001844 <_realloc_r+0x47c>
 2001764:	18c0004c 	andi	r3,r3,1
 2001768:	183fc51e 	bne	r3,zero,2001680 <__alt_mem_onchip_memory2_0+0xfdff1680>
 200176c:	9dfffe17 	ldw	r23,-8(r19)
 2001770:	adefc83a 	sub	r23,r21,r23
 2001774:	b9400117 	ldw	r5,4(r23)
 2001778:	288a703a 	and	r5,r5,r2
 200177c:	216d883a 	add	r22,r4,r5
 2001780:	b1bf8b16 	blt	r22,r6,20015b0 <__alt_mem_onchip_memory2_0+0xfdff15b0>
 2001784:	b8800317 	ldw	r2,12(r23)
 2001788:	b8c00217 	ldw	r3,8(r23)
 200178c:	81bfff04 	addi	r6,r16,-4
 2001790:	01000904 	movi	r4,36
 2001794:	18800315 	stw	r2,12(r3)
 2001798:	10c00215 	stw	r3,8(r2)
 200179c:	bc400204 	addi	r17,r23,8
 20017a0:	21805a36 	bltu	r4,r6,200190c <_realloc_r+0x544>
 20017a4:	008004c4 	movi	r2,19
 20017a8:	1180562e 	bgeu	r2,r6,2001904 <_realloc_r+0x53c>
 20017ac:	98800017 	ldw	r2,0(r19)
 20017b0:	b8800215 	stw	r2,8(r23)
 20017b4:	98800117 	ldw	r2,4(r19)
 20017b8:	b8800315 	stw	r2,12(r23)
 20017bc:	008006c4 	movi	r2,27
 20017c0:	11805636 	bltu	r2,r6,200191c <_realloc_r+0x554>
 20017c4:	b8800404 	addi	r2,r23,16
 20017c8:	9cc00204 	addi	r19,r19,8
 20017cc:	98c00017 	ldw	r3,0(r19)
 20017d0:	10c00015 	stw	r3,0(r2)
 20017d4:	98c00117 	ldw	r3,4(r19)
 20017d8:	10c00115 	stw	r3,4(r2)
 20017dc:	98c00217 	ldw	r3,8(r19)
 20017e0:	10c00215 	stw	r3,8(r2)
 20017e4:	bd07883a 	add	r3,r23,r20
 20017e8:	b505c83a 	sub	r2,r22,r20
 20017ec:	e0c00215 	stw	r3,8(fp)
 20017f0:	10800054 	ori	r2,r2,1
 20017f4:	18800115 	stw	r2,4(r3)
 20017f8:	b8800117 	ldw	r2,4(r23)
 20017fc:	9009883a 	mov	r4,r18
 2001800:	1080004c 	andi	r2,r2,1
 2001804:	a0a8b03a 	or	r20,r20,r2
 2001808:	bd000115 	stw	r20,4(r23)
 200180c:	20033e40 	call	20033e4 <__malloc_unlock>
 2001810:	8805883a 	mov	r2,r17
 2001814:	003f5306 	br	2001564 <__alt_mem_onchip_memory2_0+0xfdff1564>
 2001818:	98c00017 	ldw	r3,0(r19)
 200181c:	88c00015 	stw	r3,0(r17)
 2001820:	98c00117 	ldw	r3,4(r19)
 2001824:	88c00115 	stw	r3,4(r17)
 2001828:	00c006c4 	movi	r3,27
 200182c:	19801d36 	bltu	r3,r6,20018a4 <_realloc_r+0x4dc>
 2001830:	88800204 	addi	r2,r17,8
 2001834:	98c00204 	addi	r3,r19,8
 2001838:	003fa306 	br	20016c8 <__alt_mem_onchip_memory2_0+0xfdff16c8>
 200183c:	8807883a 	mov	r3,r17
 2001840:	003f7406 	br	2001614 <__alt_mem_onchip_memory2_0+0xfdff1614>
 2001844:	ad2b883a 	add	r21,r21,r20
 2001848:	2505c83a 	sub	r2,r4,r20
 200184c:	e5400215 	stw	r21,8(fp)
 2001850:	10800054 	ori	r2,r2,1
 2001854:	a8800115 	stw	r2,4(r21)
 2001858:	98bfff17 	ldw	r2,-4(r19)
 200185c:	9009883a 	mov	r4,r18
 2001860:	1080004c 	andi	r2,r2,1
 2001864:	a0a8b03a 	or	r20,r20,r2
 2001868:	9d3fff15 	stw	r20,-4(r19)
 200186c:	20033e40 	call	20033e4 <__malloc_unlock>
 2001870:	9805883a 	mov	r2,r19
 2001874:	003f3b06 	br	2001564 <__alt_mem_onchip_memory2_0+0xfdff1564>
 2001878:	8809883a 	mov	r4,r17
 200187c:	980b883a 	mov	r5,r19
 2001880:	200126c0 	call	200126c <memmove>
 2001884:	003f9606 	br	20016e0 <__alt_mem_onchip_memory2_0+0xfdff16e0>
 2001888:	8809883a 	mov	r4,r17
 200188c:	980b883a 	mov	r5,r19
 2001890:	200126c0 	call	200126c <memmove>
 2001894:	b8c00117 	ldw	r3,4(r23)
 2001898:	b021883a 	mov	r16,r22
 200189c:	b82b883a 	mov	r21,r23
 20018a0:	003f2306 	br	2001530 <__alt_mem_onchip_memory2_0+0xfdff1530>
 20018a4:	98c00217 	ldw	r3,8(r19)
 20018a8:	88c00215 	stw	r3,8(r17)
 20018ac:	98c00317 	ldw	r3,12(r19)
 20018b0:	88c00315 	stw	r3,12(r17)
 20018b4:	30800c26 	beq	r6,r2,20018e8 <_realloc_r+0x520>
 20018b8:	88800404 	addi	r2,r17,16
 20018bc:	98c00404 	addi	r3,r19,16
 20018c0:	003f8106 	br	20016c8 <__alt_mem_onchip_memory2_0+0xfdff16c8>
 20018c4:	893fff17 	ldw	r4,-4(r17)
 20018c8:	00bfff04 	movi	r2,-4
 20018cc:	9823883a 	mov	r17,r19
 20018d0:	2084703a 	and	r2,r4,r2
 20018d4:	80a1883a 	add	r16,r16,r2
 20018d8:	003f1506 	br	2001530 <__alt_mem_onchip_memory2_0+0xfdff1530>
 20018dc:	b8c00404 	addi	r3,r23,16
 20018e0:	9cc00204 	addi	r19,r19,8
 20018e4:	003f4b06 	br	2001614 <__alt_mem_onchip_memory2_0+0xfdff1614>
 20018e8:	99000417 	ldw	r4,16(r19)
 20018ec:	88800604 	addi	r2,r17,24
 20018f0:	98c00604 	addi	r3,r19,24
 20018f4:	89000415 	stw	r4,16(r17)
 20018f8:	99000517 	ldw	r4,20(r19)
 20018fc:	89000515 	stw	r4,20(r17)
 2001900:	003f7106 	br	20016c8 <__alt_mem_onchip_memory2_0+0xfdff16c8>
 2001904:	8805883a 	mov	r2,r17
 2001908:	003fb006 	br	20017cc <__alt_mem_onchip_memory2_0+0xfdff17cc>
 200190c:	8809883a 	mov	r4,r17
 2001910:	980b883a 	mov	r5,r19
 2001914:	200126c0 	call	200126c <memmove>
 2001918:	003fb206 	br	20017e4 <__alt_mem_onchip_memory2_0+0xfdff17e4>
 200191c:	98800217 	ldw	r2,8(r19)
 2001920:	b8800415 	stw	r2,16(r23)
 2001924:	98800317 	ldw	r2,12(r19)
 2001928:	b8800515 	stw	r2,20(r23)
 200192c:	31000726 	beq	r6,r4,200194c <_realloc_r+0x584>
 2001930:	b8800604 	addi	r2,r23,24
 2001934:	9cc00404 	addi	r19,r19,16
 2001938:	003fa406 	br	20017cc <__alt_mem_onchip_memory2_0+0xfdff17cc>
 200193c:	9009883a 	mov	r4,r18
 2001940:	20033e40 	call	20033e4 <__malloc_unlock>
 2001944:	0005883a 	mov	r2,zero
 2001948:	003f0606 	br	2001564 <__alt_mem_onchip_memory2_0+0xfdff1564>
 200194c:	98c00417 	ldw	r3,16(r19)
 2001950:	9cc00604 	addi	r19,r19,24
 2001954:	b8800804 	addi	r2,r23,32
 2001958:	b8c00615 	stw	r3,24(r23)
 200195c:	98ffff17 	ldw	r3,-4(r19)
 2001960:	b8c00715 	stw	r3,28(r23)
 2001964:	003f9906 	br	20017cc <__alt_mem_onchip_memory2_0+0xfdff17cc>

02001968 <_sbrk_r>:
 2001968:	defffd04 	addi	sp,sp,-12
 200196c:	dc000015 	stw	r16,0(sp)
 2001970:	04008074 	movhi	r16,513
 2001974:	dc400115 	stw	r17,4(sp)
 2001978:	84229b04 	addi	r16,r16,-30100
 200197c:	2023883a 	mov	r17,r4
 2001980:	2809883a 	mov	r4,r5
 2001984:	dfc00215 	stw	ra,8(sp)
 2001988:	80000015 	stw	zero,0(r16)
 200198c:	20035d80 	call	20035d8 <sbrk>
 2001990:	00ffffc4 	movi	r3,-1
 2001994:	10c00526 	beq	r2,r3,20019ac <_sbrk_r+0x44>
 2001998:	dfc00217 	ldw	ra,8(sp)
 200199c:	dc400117 	ldw	r17,4(sp)
 20019a0:	dc000017 	ldw	r16,0(sp)
 20019a4:	dec00304 	addi	sp,sp,12
 20019a8:	f800283a 	ret
 20019ac:	80c00017 	ldw	r3,0(r16)
 20019b0:	183ff926 	beq	r3,zero,2001998 <__alt_mem_onchip_memory2_0+0xfdff1998>
 20019b4:	88c00015 	stw	r3,0(r17)
 20019b8:	003ff706 	br	2001998 <__alt_mem_onchip_memory2_0+0xfdff1998>

020019bc <__swsetup_r>:
 20019bc:	00808034 	movhi	r2,512
 20019c0:	defffd04 	addi	sp,sp,-12
 20019c4:	109bf004 	addi	r2,r2,28608
 20019c8:	dc400115 	stw	r17,4(sp)
 20019cc:	2023883a 	mov	r17,r4
 20019d0:	11000017 	ldw	r4,0(r2)
 20019d4:	dc000015 	stw	r16,0(sp)
 20019d8:	dfc00215 	stw	ra,8(sp)
 20019dc:	2821883a 	mov	r16,r5
 20019e0:	20000226 	beq	r4,zero,20019ec <__swsetup_r+0x30>
 20019e4:	20c00e17 	ldw	r3,56(r4)
 20019e8:	18002e26 	beq	r3,zero,2001aa4 <__swsetup_r+0xe8>
 20019ec:	8080030b 	ldhu	r2,12(r16)
 20019f0:	10c0020c 	andi	r3,r2,8
 20019f4:	100d883a 	mov	r6,r2
 20019f8:	18000f26 	beq	r3,zero,2001a38 <__swsetup_r+0x7c>
 20019fc:	80c00417 	ldw	r3,16(r16)
 2001a00:	18001526 	beq	r3,zero,2001a58 <__swsetup_r+0x9c>
 2001a04:	1100004c 	andi	r4,r2,1
 2001a08:	20001c1e 	bne	r4,zero,2001a7c <__swsetup_r+0xc0>
 2001a0c:	1080008c 	andi	r2,r2,2
 2001a10:	1000261e 	bne	r2,zero,2001aac <__swsetup_r+0xf0>
 2001a14:	80800517 	ldw	r2,20(r16)
 2001a18:	80800215 	stw	r2,8(r16)
 2001a1c:	18001c26 	beq	r3,zero,2001a90 <__swsetup_r+0xd4>
 2001a20:	0005883a 	mov	r2,zero
 2001a24:	dfc00217 	ldw	ra,8(sp)
 2001a28:	dc400117 	ldw	r17,4(sp)
 2001a2c:	dc000017 	ldw	r16,0(sp)
 2001a30:	dec00304 	addi	sp,sp,12
 2001a34:	f800283a 	ret
 2001a38:	3080040c 	andi	r2,r6,16
 2001a3c:	10001726 	beq	r2,zero,2001a9c <__swsetup_r+0xe0>
 2001a40:	3080010c 	andi	r2,r6,4
 2001a44:	10001b1e 	bne	r2,zero,2001ab4 <__swsetup_r+0xf8>
 2001a48:	80c00417 	ldw	r3,16(r16)
 2001a4c:	30800214 	ori	r2,r6,8
 2001a50:	8080030d 	sth	r2,12(r16)
 2001a54:	183feb1e 	bne	r3,zero,2001a04 <__alt_mem_onchip_memory2_0+0xfdff1a04>
 2001a58:	1140a00c 	andi	r5,r2,640
 2001a5c:	01008004 	movi	r4,512
 2001a60:	293fe826 	beq	r5,r4,2001a04 <__alt_mem_onchip_memory2_0+0xfdff1a04>
 2001a64:	8809883a 	mov	r4,r17
 2001a68:	800b883a 	mov	r5,r16
 2001a6c:	200267c0 	call	200267c <__smakebuf_r>
 2001a70:	8080030b 	ldhu	r2,12(r16)
 2001a74:	80c00417 	ldw	r3,16(r16)
 2001a78:	003fe206 	br	2001a04 <__alt_mem_onchip_memory2_0+0xfdff1a04>
 2001a7c:	80800517 	ldw	r2,20(r16)
 2001a80:	80000215 	stw	zero,8(r16)
 2001a84:	0085c83a 	sub	r2,zero,r2
 2001a88:	80800615 	stw	r2,24(r16)
 2001a8c:	183fe41e 	bne	r3,zero,2001a20 <__alt_mem_onchip_memory2_0+0xfdff1a20>
 2001a90:	8080030b 	ldhu	r2,12(r16)
 2001a94:	1080200c 	andi	r2,r2,128
 2001a98:	103fe226 	beq	r2,zero,2001a24 <__alt_mem_onchip_memory2_0+0xfdff1a24>
 2001a9c:	00bfffc4 	movi	r2,-1
 2001aa0:	003fe006 	br	2001a24 <__alt_mem_onchip_memory2_0+0xfdff1a24>
 2001aa4:	20020a80 	call	20020a8 <__sinit>
 2001aa8:	003fd006 	br	20019ec <__alt_mem_onchip_memory2_0+0xfdff19ec>
 2001aac:	0005883a 	mov	r2,zero
 2001ab0:	003fd906 	br	2001a18 <__alt_mem_onchip_memory2_0+0xfdff1a18>
 2001ab4:	81400c17 	ldw	r5,48(r16)
 2001ab8:	28000626 	beq	r5,zero,2001ad4 <__swsetup_r+0x118>
 2001abc:	80801004 	addi	r2,r16,64
 2001ac0:	28800326 	beq	r5,r2,2001ad0 <__swsetup_r+0x114>
 2001ac4:	8809883a 	mov	r4,r17
 2001ac8:	200221c0 	call	200221c <_free_r>
 2001acc:	8180030b 	ldhu	r6,12(r16)
 2001ad0:	80000c15 	stw	zero,48(r16)
 2001ad4:	80c00417 	ldw	r3,16(r16)
 2001ad8:	00bff6c4 	movi	r2,-37
 2001adc:	118c703a 	and	r6,r2,r6
 2001ae0:	80000115 	stw	zero,4(r16)
 2001ae4:	80c00015 	stw	r3,0(r16)
 2001ae8:	003fd806 	br	2001a4c <__alt_mem_onchip_memory2_0+0xfdff1a4c>

02001aec <_fflush_r>:
 2001aec:	defffb04 	addi	sp,sp,-20
 2001af0:	dcc00315 	stw	r19,12(sp)
 2001af4:	dc000015 	stw	r16,0(sp)
 2001af8:	dfc00415 	stw	ra,16(sp)
 2001afc:	dc800215 	stw	r18,8(sp)
 2001b00:	dc400115 	stw	r17,4(sp)
 2001b04:	2027883a 	mov	r19,r4
 2001b08:	2821883a 	mov	r16,r5
 2001b0c:	20000226 	beq	r4,zero,2001b18 <_fflush_r+0x2c>
 2001b10:	20800e17 	ldw	r2,56(r4)
 2001b14:	10005326 	beq	r2,zero,2001c64 <_fflush_r+0x178>
 2001b18:	8080030b 	ldhu	r2,12(r16)
 2001b1c:	10ffffcc 	andi	r3,r2,65535
 2001b20:	18e0001c 	xori	r3,r3,32768
 2001b24:	18e00004 	addi	r3,r3,-32768
 2001b28:	18002c26 	beq	r3,zero,2001bdc <_fflush_r+0xf0>
 2001b2c:	10c0020c 	andi	r3,r2,8
 2001b30:	1800321e 	bne	r3,zero,2001bfc <_fflush_r+0x110>
 2001b34:	80c00117 	ldw	r3,4(r16)
 2001b38:	10820014 	ori	r2,r2,2048
 2001b3c:	8080030d 	sth	r2,12(r16)
 2001b40:	00c0570e 	bge	zero,r3,2001ca0 <_fflush_r+0x1b4>
 2001b44:	82000a17 	ldw	r8,40(r16)
 2001b48:	40002426 	beq	r8,zero,2001bdc <_fflush_r+0xf0>
 2001b4c:	9c400017 	ldw	r17,0(r19)
 2001b50:	10c4000c 	andi	r3,r2,4096
 2001b54:	98000015 	stw	zero,0(r19)
 2001b58:	18004626 	beq	r3,zero,2001c74 <_fflush_r+0x188>
 2001b5c:	81801417 	ldw	r6,80(r16)
 2001b60:	10c0010c 	andi	r3,r2,4
 2001b64:	18000626 	beq	r3,zero,2001b80 <_fflush_r+0x94>
 2001b68:	80c00117 	ldw	r3,4(r16)
 2001b6c:	80800c17 	ldw	r2,48(r16)
 2001b70:	30cdc83a 	sub	r6,r6,r3
 2001b74:	10000226 	beq	r2,zero,2001b80 <_fflush_r+0x94>
 2001b78:	80800f17 	ldw	r2,60(r16)
 2001b7c:	308dc83a 	sub	r6,r6,r2
 2001b80:	81400717 	ldw	r5,28(r16)
 2001b84:	9809883a 	mov	r4,r19
 2001b88:	000f883a 	mov	r7,zero
 2001b8c:	403ee83a 	callr	r8
 2001b90:	00ffffc4 	movi	r3,-1
 2001b94:	10c04526 	beq	r2,r3,2001cac <_fflush_r+0x1c0>
 2001b98:	80c0030b 	ldhu	r3,12(r16)
 2001b9c:	81000417 	ldw	r4,16(r16)
 2001ba0:	80000115 	stw	zero,4(r16)
 2001ba4:	197dffcc 	andi	r5,r3,63487
 2001ba8:	8140030d 	sth	r5,12(r16)
 2001bac:	81000015 	stw	r4,0(r16)
 2001bb0:	18c4000c 	andi	r3,r3,4096
 2001bb4:	18000126 	beq	r3,zero,2001bbc <_fflush_r+0xd0>
 2001bb8:	80801415 	stw	r2,80(r16)
 2001bbc:	81400c17 	ldw	r5,48(r16)
 2001bc0:	9c400015 	stw	r17,0(r19)
 2001bc4:	28000526 	beq	r5,zero,2001bdc <_fflush_r+0xf0>
 2001bc8:	80801004 	addi	r2,r16,64
 2001bcc:	28800226 	beq	r5,r2,2001bd8 <_fflush_r+0xec>
 2001bd0:	9809883a 	mov	r4,r19
 2001bd4:	200221c0 	call	200221c <_free_r>
 2001bd8:	80000c15 	stw	zero,48(r16)
 2001bdc:	0005883a 	mov	r2,zero
 2001be0:	dfc00417 	ldw	ra,16(sp)
 2001be4:	dcc00317 	ldw	r19,12(sp)
 2001be8:	dc800217 	ldw	r18,8(sp)
 2001bec:	dc400117 	ldw	r17,4(sp)
 2001bf0:	dc000017 	ldw	r16,0(sp)
 2001bf4:	dec00504 	addi	sp,sp,20
 2001bf8:	f800283a 	ret
 2001bfc:	84800417 	ldw	r18,16(r16)
 2001c00:	903ff626 	beq	r18,zero,2001bdc <__alt_mem_onchip_memory2_0+0xfdff1bdc>
 2001c04:	84400017 	ldw	r17,0(r16)
 2001c08:	108000cc 	andi	r2,r2,3
 2001c0c:	84800015 	stw	r18,0(r16)
 2001c10:	8ca3c83a 	sub	r17,r17,r18
 2001c14:	10001526 	beq	r2,zero,2001c6c <_fflush_r+0x180>
 2001c18:	0005883a 	mov	r2,zero
 2001c1c:	80800215 	stw	r2,8(r16)
 2001c20:	04400316 	blt	zero,r17,2001c30 <_fflush_r+0x144>
 2001c24:	003fed06 	br	2001bdc <__alt_mem_onchip_memory2_0+0xfdff1bdc>
 2001c28:	90a5883a 	add	r18,r18,r2
 2001c2c:	047feb0e 	bge	zero,r17,2001bdc <__alt_mem_onchip_memory2_0+0xfdff1bdc>
 2001c30:	80800917 	ldw	r2,36(r16)
 2001c34:	81400717 	ldw	r5,28(r16)
 2001c38:	880f883a 	mov	r7,r17
 2001c3c:	900d883a 	mov	r6,r18
 2001c40:	9809883a 	mov	r4,r19
 2001c44:	103ee83a 	callr	r2
 2001c48:	88a3c83a 	sub	r17,r17,r2
 2001c4c:	00bff616 	blt	zero,r2,2001c28 <__alt_mem_onchip_memory2_0+0xfdff1c28>
 2001c50:	80c0030b 	ldhu	r3,12(r16)
 2001c54:	00bfffc4 	movi	r2,-1
 2001c58:	18c01014 	ori	r3,r3,64
 2001c5c:	80c0030d 	sth	r3,12(r16)
 2001c60:	003fdf06 	br	2001be0 <__alt_mem_onchip_memory2_0+0xfdff1be0>
 2001c64:	20020a80 	call	20020a8 <__sinit>
 2001c68:	003fab06 	br	2001b18 <__alt_mem_onchip_memory2_0+0xfdff1b18>
 2001c6c:	80800517 	ldw	r2,20(r16)
 2001c70:	003fea06 	br	2001c1c <__alt_mem_onchip_memory2_0+0xfdff1c1c>
 2001c74:	81400717 	ldw	r5,28(r16)
 2001c78:	000d883a 	mov	r6,zero
 2001c7c:	9809883a 	mov	r4,r19
 2001c80:	01c00044 	movi	r7,1
 2001c84:	403ee83a 	callr	r8
 2001c88:	100d883a 	mov	r6,r2
 2001c8c:	00bfffc4 	movi	r2,-1
 2001c90:	30801326 	beq	r6,r2,2001ce0 <_fflush_r+0x1f4>
 2001c94:	8080030b 	ldhu	r2,12(r16)
 2001c98:	82000a17 	ldw	r8,40(r16)
 2001c9c:	003fb006 	br	2001b60 <__alt_mem_onchip_memory2_0+0xfdff1b60>
 2001ca0:	80c00f17 	ldw	r3,60(r16)
 2001ca4:	00ffa716 	blt	zero,r3,2001b44 <__alt_mem_onchip_memory2_0+0xfdff1b44>
 2001ca8:	003fcc06 	br	2001bdc <__alt_mem_onchip_memory2_0+0xfdff1bdc>
 2001cac:	98c00017 	ldw	r3,0(r19)
 2001cb0:	183fb926 	beq	r3,zero,2001b98 <__alt_mem_onchip_memory2_0+0xfdff1b98>
 2001cb4:	01000744 	movi	r4,29
 2001cb8:	19000226 	beq	r3,r4,2001cc4 <_fflush_r+0x1d8>
 2001cbc:	01000584 	movi	r4,22
 2001cc0:	1900101e 	bne	r3,r4,2001d04 <_fflush_r+0x218>
 2001cc4:	8080030b 	ldhu	r2,12(r16)
 2001cc8:	80c00417 	ldw	r3,16(r16)
 2001ccc:	80000115 	stw	zero,4(r16)
 2001cd0:	10bdffcc 	andi	r2,r2,63487
 2001cd4:	8080030d 	sth	r2,12(r16)
 2001cd8:	80c00015 	stw	r3,0(r16)
 2001cdc:	003fb706 	br	2001bbc <__alt_mem_onchip_memory2_0+0xfdff1bbc>
 2001ce0:	98800017 	ldw	r2,0(r19)
 2001ce4:	103feb26 	beq	r2,zero,2001c94 <__alt_mem_onchip_memory2_0+0xfdff1c94>
 2001ce8:	00c00744 	movi	r3,29
 2001cec:	10c00226 	beq	r2,r3,2001cf8 <_fflush_r+0x20c>
 2001cf0:	00c00584 	movi	r3,22
 2001cf4:	10ffd61e 	bne	r2,r3,2001c50 <__alt_mem_onchip_memory2_0+0xfdff1c50>
 2001cf8:	9c400015 	stw	r17,0(r19)
 2001cfc:	0005883a 	mov	r2,zero
 2001d00:	003fb706 	br	2001be0 <__alt_mem_onchip_memory2_0+0xfdff1be0>
 2001d04:	80c0030b 	ldhu	r3,12(r16)
 2001d08:	18c01014 	ori	r3,r3,64
 2001d0c:	80c0030d 	sth	r3,12(r16)
 2001d10:	003fb306 	br	2001be0 <__alt_mem_onchip_memory2_0+0xfdff1be0>

02001d14 <fflush>:
 2001d14:	20000526 	beq	r4,zero,2001d2c <fflush+0x18>
 2001d18:	00808034 	movhi	r2,512
 2001d1c:	109bf004 	addi	r2,r2,28608
 2001d20:	200b883a 	mov	r5,r4
 2001d24:	11000017 	ldw	r4,0(r2)
 2001d28:	2001aec1 	jmpi	2001aec <_fflush_r>
 2001d2c:	00808034 	movhi	r2,512
 2001d30:	109bef04 	addi	r2,r2,28604
 2001d34:	11000017 	ldw	r4,0(r2)
 2001d38:	01408034 	movhi	r5,512
 2001d3c:	2946bb04 	addi	r5,r5,6892
 2001d40:	20025c41 	jmpi	20025c4 <_fwalk_reent>

02001d44 <__fp_lock>:
 2001d44:	0005883a 	mov	r2,zero
 2001d48:	f800283a 	ret

02001d4c <__fp_unlock>:
 2001d4c:	0005883a 	mov	r2,zero
 2001d50:	f800283a 	ret

02001d54 <_cleanup_r>:
 2001d54:	01408034 	movhi	r5,512
 2001d58:	294b1104 	addi	r5,r5,11332
 2001d5c:	200250c1 	jmpi	200250c <_fwalk>

02001d60 <__sinit.part.1>:
 2001d60:	defff604 	addi	sp,sp,-40
 2001d64:	00c08034 	movhi	r3,512
 2001d68:	dfc00915 	stw	ra,36(sp)
 2001d6c:	df000815 	stw	fp,32(sp)
 2001d70:	ddc00715 	stw	r23,28(sp)
 2001d74:	dd800615 	stw	r22,24(sp)
 2001d78:	dd400515 	stw	r21,20(sp)
 2001d7c:	dd000415 	stw	r20,16(sp)
 2001d80:	dcc00315 	stw	r19,12(sp)
 2001d84:	dc800215 	stw	r18,8(sp)
 2001d88:	dc400115 	stw	r17,4(sp)
 2001d8c:	dc000015 	stw	r16,0(sp)
 2001d90:	18c75504 	addi	r3,r3,7508
 2001d94:	24000117 	ldw	r16,4(r4)
 2001d98:	20c00f15 	stw	r3,60(r4)
 2001d9c:	07000044 	movi	fp,1
 2001da0:	00c000c4 	movi	r3,3
 2001da4:	2080bb04 	addi	r2,r4,748
 2001da8:	20c0b915 	stw	r3,740(r4)
 2001dac:	27000e15 	stw	fp,56(r4)
 2001db0:	2080ba15 	stw	r2,744(r4)
 2001db4:	2000b815 	stw	zero,736(r4)
 2001db8:	05c00204 	movi	r23,8
 2001dbc:	00800104 	movi	r2,4
 2001dc0:	2025883a 	mov	r18,r4
 2001dc4:	b80d883a 	mov	r6,r23
 2001dc8:	81001704 	addi	r4,r16,92
 2001dcc:	000b883a 	mov	r5,zero
 2001dd0:	80000015 	stw	zero,0(r16)
 2001dd4:	80000115 	stw	zero,4(r16)
 2001dd8:	80000215 	stw	zero,8(r16)
 2001ddc:	8080030d 	sth	r2,12(r16)
 2001de0:	80001915 	stw	zero,100(r16)
 2001de4:	8000038d 	sth	zero,14(r16)
 2001de8:	80000415 	stw	zero,16(r16)
 2001dec:	80000515 	stw	zero,20(r16)
 2001df0:	80000615 	stw	zero,24(r16)
 2001df4:	20028340 	call	2002834 <memset>
 2001df8:	05808034 	movhi	r22,512
 2001dfc:	94400217 	ldw	r17,8(r18)
 2001e00:	05408034 	movhi	r21,512
 2001e04:	05008034 	movhi	r20,512
 2001e08:	04c08034 	movhi	r19,512
 2001e0c:	b58a5604 	addi	r22,r22,10584
 2001e10:	ad4a6d04 	addi	r21,r21,10676
 2001e14:	a50a8c04 	addi	r20,r20,10800
 2001e18:	9ccaa304 	addi	r19,r19,10892
 2001e1c:	85800815 	stw	r22,32(r16)
 2001e20:	85400915 	stw	r21,36(r16)
 2001e24:	85000a15 	stw	r20,40(r16)
 2001e28:	84c00b15 	stw	r19,44(r16)
 2001e2c:	84000715 	stw	r16,28(r16)
 2001e30:	00800284 	movi	r2,10
 2001e34:	89001704 	addi	r4,r17,92
 2001e38:	b80d883a 	mov	r6,r23
 2001e3c:	000b883a 	mov	r5,zero
 2001e40:	88000015 	stw	zero,0(r17)
 2001e44:	88000115 	stw	zero,4(r17)
 2001e48:	88000215 	stw	zero,8(r17)
 2001e4c:	8880030d 	sth	r2,12(r17)
 2001e50:	88001915 	stw	zero,100(r17)
 2001e54:	8f00038d 	sth	fp,14(r17)
 2001e58:	88000415 	stw	zero,16(r17)
 2001e5c:	88000515 	stw	zero,20(r17)
 2001e60:	88000615 	stw	zero,24(r17)
 2001e64:	20028340 	call	2002834 <memset>
 2001e68:	94000317 	ldw	r16,12(r18)
 2001e6c:	00800484 	movi	r2,18
 2001e70:	8c400715 	stw	r17,28(r17)
 2001e74:	8d800815 	stw	r22,32(r17)
 2001e78:	8d400915 	stw	r21,36(r17)
 2001e7c:	8d000a15 	stw	r20,40(r17)
 2001e80:	8cc00b15 	stw	r19,44(r17)
 2001e84:	8080030d 	sth	r2,12(r16)
 2001e88:	00800084 	movi	r2,2
 2001e8c:	80000015 	stw	zero,0(r16)
 2001e90:	80000115 	stw	zero,4(r16)
 2001e94:	80000215 	stw	zero,8(r16)
 2001e98:	80001915 	stw	zero,100(r16)
 2001e9c:	8080038d 	sth	r2,14(r16)
 2001ea0:	80000415 	stw	zero,16(r16)
 2001ea4:	80000515 	stw	zero,20(r16)
 2001ea8:	80000615 	stw	zero,24(r16)
 2001eac:	81001704 	addi	r4,r16,92
 2001eb0:	000b883a 	mov	r5,zero
 2001eb4:	b80d883a 	mov	r6,r23
 2001eb8:	20028340 	call	2002834 <memset>
 2001ebc:	84000715 	stw	r16,28(r16)
 2001ec0:	85800815 	stw	r22,32(r16)
 2001ec4:	85400915 	stw	r21,36(r16)
 2001ec8:	85000a15 	stw	r20,40(r16)
 2001ecc:	84c00b15 	stw	r19,44(r16)
 2001ed0:	dfc00917 	ldw	ra,36(sp)
 2001ed4:	df000817 	ldw	fp,32(sp)
 2001ed8:	ddc00717 	ldw	r23,28(sp)
 2001edc:	dd800617 	ldw	r22,24(sp)
 2001ee0:	dd400517 	ldw	r21,20(sp)
 2001ee4:	dd000417 	ldw	r20,16(sp)
 2001ee8:	dcc00317 	ldw	r19,12(sp)
 2001eec:	dc800217 	ldw	r18,8(sp)
 2001ef0:	dc400117 	ldw	r17,4(sp)
 2001ef4:	dc000017 	ldw	r16,0(sp)
 2001ef8:	dec00a04 	addi	sp,sp,40
 2001efc:	f800283a 	ret

02001f00 <__sfmoreglue>:
 2001f00:	defffc04 	addi	sp,sp,-16
 2001f04:	dc800215 	stw	r18,8(sp)
 2001f08:	2825883a 	mov	r18,r5
 2001f0c:	dc000015 	stw	r16,0(sp)
 2001f10:	01401a04 	movi	r5,104
 2001f14:	2021883a 	mov	r16,r4
 2001f18:	9009883a 	mov	r4,r18
 2001f1c:	dfc00315 	stw	ra,12(sp)
 2001f20:	dc400115 	stw	r17,4(sp)
 2001f24:	2002dbc0 	call	2002dbc <__mulsi3>
 2001f28:	8009883a 	mov	r4,r16
 2001f2c:	11400304 	addi	r5,r2,12
 2001f30:	1023883a 	mov	r17,r2
 2001f34:	20008a40 	call	20008a4 <_malloc_r>
 2001f38:	1021883a 	mov	r16,r2
 2001f3c:	10000726 	beq	r2,zero,2001f5c <__sfmoreglue+0x5c>
 2001f40:	11000304 	addi	r4,r2,12
 2001f44:	10000015 	stw	zero,0(r2)
 2001f48:	14800115 	stw	r18,4(r2)
 2001f4c:	11000215 	stw	r4,8(r2)
 2001f50:	000b883a 	mov	r5,zero
 2001f54:	880d883a 	mov	r6,r17
 2001f58:	20028340 	call	2002834 <memset>
 2001f5c:	8005883a 	mov	r2,r16
 2001f60:	dfc00317 	ldw	ra,12(sp)
 2001f64:	dc800217 	ldw	r18,8(sp)
 2001f68:	dc400117 	ldw	r17,4(sp)
 2001f6c:	dc000017 	ldw	r16,0(sp)
 2001f70:	dec00404 	addi	sp,sp,16
 2001f74:	f800283a 	ret

02001f78 <__sfp>:
 2001f78:	00808034 	movhi	r2,512
 2001f7c:	defffb04 	addi	sp,sp,-20
 2001f80:	109bef04 	addi	r2,r2,28604
 2001f84:	dc800215 	stw	r18,8(sp)
 2001f88:	14800017 	ldw	r18,0(r2)
 2001f8c:	dcc00315 	stw	r19,12(sp)
 2001f90:	dfc00415 	stw	ra,16(sp)
 2001f94:	90800e17 	ldw	r2,56(r18)
 2001f98:	dc400115 	stw	r17,4(sp)
 2001f9c:	dc000015 	stw	r16,0(sp)
 2001fa0:	2027883a 	mov	r19,r4
 2001fa4:	1000021e 	bne	r2,zero,2001fb0 <__sfp+0x38>
 2001fa8:	9009883a 	mov	r4,r18
 2001fac:	2001d600 	call	2001d60 <__sinit.part.1>
 2001fb0:	9480b804 	addi	r18,r18,736
 2001fb4:	047fffc4 	movi	r17,-1
 2001fb8:	91400117 	ldw	r5,4(r18)
 2001fbc:	94000217 	ldw	r16,8(r18)
 2001fc0:	297fffc4 	addi	r5,r5,-1
 2001fc4:	28000a16 	blt	r5,zero,2001ff0 <__sfp+0x78>
 2001fc8:	8080030f 	ldh	r2,12(r16)
 2001fcc:	10000c26 	beq	r2,zero,2002000 <__sfp+0x88>
 2001fd0:	80c01d04 	addi	r3,r16,116
 2001fd4:	00000206 	br	2001fe0 <__sfp+0x68>
 2001fd8:	18bfe60f 	ldh	r2,-104(r3)
 2001fdc:	10000826 	beq	r2,zero,2002000 <__sfp+0x88>
 2001fe0:	297fffc4 	addi	r5,r5,-1
 2001fe4:	1c3ffd04 	addi	r16,r3,-12
 2001fe8:	18c01a04 	addi	r3,r3,104
 2001fec:	2c7ffa1e 	bne	r5,r17,2001fd8 <__alt_mem_onchip_memory2_0+0xfdff1fd8>
 2001ff0:	90800017 	ldw	r2,0(r18)
 2001ff4:	10001d26 	beq	r2,zero,200206c <__sfp+0xf4>
 2001ff8:	1025883a 	mov	r18,r2
 2001ffc:	003fee06 	br	2001fb8 <__alt_mem_onchip_memory2_0+0xfdff1fb8>
 2002000:	00bfffc4 	movi	r2,-1
 2002004:	8080038d 	sth	r2,14(r16)
 2002008:	00800044 	movi	r2,1
 200200c:	8080030d 	sth	r2,12(r16)
 2002010:	80001915 	stw	zero,100(r16)
 2002014:	80000015 	stw	zero,0(r16)
 2002018:	80000215 	stw	zero,8(r16)
 200201c:	80000115 	stw	zero,4(r16)
 2002020:	80000415 	stw	zero,16(r16)
 2002024:	80000515 	stw	zero,20(r16)
 2002028:	80000615 	stw	zero,24(r16)
 200202c:	81001704 	addi	r4,r16,92
 2002030:	000b883a 	mov	r5,zero
 2002034:	01800204 	movi	r6,8
 2002038:	20028340 	call	2002834 <memset>
 200203c:	8005883a 	mov	r2,r16
 2002040:	80000c15 	stw	zero,48(r16)
 2002044:	80000d15 	stw	zero,52(r16)
 2002048:	80001115 	stw	zero,68(r16)
 200204c:	80001215 	stw	zero,72(r16)
 2002050:	dfc00417 	ldw	ra,16(sp)
 2002054:	dcc00317 	ldw	r19,12(sp)
 2002058:	dc800217 	ldw	r18,8(sp)
 200205c:	dc400117 	ldw	r17,4(sp)
 2002060:	dc000017 	ldw	r16,0(sp)
 2002064:	dec00504 	addi	sp,sp,20
 2002068:	f800283a 	ret
 200206c:	9809883a 	mov	r4,r19
 2002070:	01400104 	movi	r5,4
 2002074:	2001f000 	call	2001f00 <__sfmoreglue>
 2002078:	90800015 	stw	r2,0(r18)
 200207c:	103fde1e 	bne	r2,zero,2001ff8 <__alt_mem_onchip_memory2_0+0xfdff1ff8>
 2002080:	00800304 	movi	r2,12
 2002084:	98800015 	stw	r2,0(r19)
 2002088:	0005883a 	mov	r2,zero
 200208c:	003ff006 	br	2002050 <__alt_mem_onchip_memory2_0+0xfdff2050>

02002090 <_cleanup>:
 2002090:	00808034 	movhi	r2,512
 2002094:	109bef04 	addi	r2,r2,28604
 2002098:	11000017 	ldw	r4,0(r2)
 200209c:	01408034 	movhi	r5,512
 20020a0:	294b1104 	addi	r5,r5,11332
 20020a4:	200250c1 	jmpi	200250c <_fwalk>

020020a8 <__sinit>:
 20020a8:	20800e17 	ldw	r2,56(r4)
 20020ac:	10000126 	beq	r2,zero,20020b4 <__sinit+0xc>
 20020b0:	f800283a 	ret
 20020b4:	2001d601 	jmpi	2001d60 <__sinit.part.1>

020020b8 <__sfp_lock_acquire>:
 20020b8:	f800283a 	ret

020020bc <__sfp_lock_release>:
 20020bc:	f800283a 	ret

020020c0 <__sinit_lock_acquire>:
 20020c0:	f800283a 	ret

020020c4 <__sinit_lock_release>:
 20020c4:	f800283a 	ret

020020c8 <__fp_lock_all>:
 20020c8:	00808034 	movhi	r2,512
 20020cc:	109bf004 	addi	r2,r2,28608
 20020d0:	11000017 	ldw	r4,0(r2)
 20020d4:	01408034 	movhi	r5,512
 20020d8:	29475104 	addi	r5,r5,7492
 20020dc:	200250c1 	jmpi	200250c <_fwalk>

020020e0 <__fp_unlock_all>:
 20020e0:	00808034 	movhi	r2,512
 20020e4:	109bf004 	addi	r2,r2,28608
 20020e8:	11000017 	ldw	r4,0(r2)
 20020ec:	01408034 	movhi	r5,512
 20020f0:	29475304 	addi	r5,r5,7500
 20020f4:	200250c1 	jmpi	200250c <_fwalk>

020020f8 <_malloc_trim_r>:
 20020f8:	defffb04 	addi	sp,sp,-20
 20020fc:	dcc00315 	stw	r19,12(sp)
 2002100:	04c08034 	movhi	r19,512
 2002104:	dc800215 	stw	r18,8(sp)
 2002108:	dc400115 	stw	r17,4(sp)
 200210c:	dc000015 	stw	r16,0(sp)
 2002110:	dfc00415 	stw	ra,16(sp)
 2002114:	2821883a 	mov	r16,r5
 2002118:	9cd66b04 	addi	r19,r19,22956
 200211c:	2025883a 	mov	r18,r4
 2002120:	20033c40 	call	20033c4 <__malloc_lock>
 2002124:	98800217 	ldw	r2,8(r19)
 2002128:	14400117 	ldw	r17,4(r2)
 200212c:	00bfff04 	movi	r2,-4
 2002130:	88a2703a 	and	r17,r17,r2
 2002134:	8c21c83a 	sub	r16,r17,r16
 2002138:	8403fbc4 	addi	r16,r16,4079
 200213c:	8020d33a 	srli	r16,r16,12
 2002140:	0083ffc4 	movi	r2,4095
 2002144:	843fffc4 	addi	r16,r16,-1
 2002148:	8020933a 	slli	r16,r16,12
 200214c:	1400060e 	bge	r2,r16,2002168 <_malloc_trim_r+0x70>
 2002150:	9009883a 	mov	r4,r18
 2002154:	000b883a 	mov	r5,zero
 2002158:	20019680 	call	2001968 <_sbrk_r>
 200215c:	98c00217 	ldw	r3,8(r19)
 2002160:	1c47883a 	add	r3,r3,r17
 2002164:	10c00a26 	beq	r2,r3,2002190 <_malloc_trim_r+0x98>
 2002168:	9009883a 	mov	r4,r18
 200216c:	20033e40 	call	20033e4 <__malloc_unlock>
 2002170:	0005883a 	mov	r2,zero
 2002174:	dfc00417 	ldw	ra,16(sp)
 2002178:	dcc00317 	ldw	r19,12(sp)
 200217c:	dc800217 	ldw	r18,8(sp)
 2002180:	dc400117 	ldw	r17,4(sp)
 2002184:	dc000017 	ldw	r16,0(sp)
 2002188:	dec00504 	addi	sp,sp,20
 200218c:	f800283a 	ret
 2002190:	9009883a 	mov	r4,r18
 2002194:	040bc83a 	sub	r5,zero,r16
 2002198:	20019680 	call	2001968 <_sbrk_r>
 200219c:	00ffffc4 	movi	r3,-1
 20021a0:	10c00d26 	beq	r2,r3,20021d8 <_malloc_trim_r+0xe0>
 20021a4:	00c08074 	movhi	r3,513
 20021a8:	18e2a304 	addi	r3,r3,-30068
 20021ac:	18800017 	ldw	r2,0(r3)
 20021b0:	99000217 	ldw	r4,8(r19)
 20021b4:	8c23c83a 	sub	r17,r17,r16
 20021b8:	8c400054 	ori	r17,r17,1
 20021bc:	1421c83a 	sub	r16,r2,r16
 20021c0:	24400115 	stw	r17,4(r4)
 20021c4:	9009883a 	mov	r4,r18
 20021c8:	1c000015 	stw	r16,0(r3)
 20021cc:	20033e40 	call	20033e4 <__malloc_unlock>
 20021d0:	00800044 	movi	r2,1
 20021d4:	003fe706 	br	2002174 <__alt_mem_onchip_memory2_0+0xfdff2174>
 20021d8:	9009883a 	mov	r4,r18
 20021dc:	000b883a 	mov	r5,zero
 20021e0:	20019680 	call	2001968 <_sbrk_r>
 20021e4:	99000217 	ldw	r4,8(r19)
 20021e8:	014003c4 	movi	r5,15
 20021ec:	1107c83a 	sub	r3,r2,r4
 20021f0:	28ffdd0e 	bge	r5,r3,2002168 <__alt_mem_onchip_memory2_0+0xfdff2168>
 20021f4:	01408034 	movhi	r5,512
 20021f8:	295bf104 	addi	r5,r5,28612
 20021fc:	29400017 	ldw	r5,0(r5)
 2002200:	18c00054 	ori	r3,r3,1
 2002204:	20c00115 	stw	r3,4(r4)
 2002208:	00c08074 	movhi	r3,513
 200220c:	1145c83a 	sub	r2,r2,r5
 2002210:	18e2a304 	addi	r3,r3,-30068
 2002214:	18800015 	stw	r2,0(r3)
 2002218:	003fd306 	br	2002168 <__alt_mem_onchip_memory2_0+0xfdff2168>

0200221c <_free_r>:
 200221c:	28004c26 	beq	r5,zero,2002350 <_free_r+0x134>
 2002220:	defffd04 	addi	sp,sp,-12
 2002224:	dc400115 	stw	r17,4(sp)
 2002228:	dc000015 	stw	r16,0(sp)
 200222c:	2023883a 	mov	r17,r4
 2002230:	2821883a 	mov	r16,r5
 2002234:	dfc00215 	stw	ra,8(sp)
 2002238:	20033c40 	call	20033c4 <__malloc_lock>
 200223c:	813fff17 	ldw	r4,-4(r16)
 2002240:	00bfff84 	movi	r2,-2
 2002244:	02408034 	movhi	r9,512
 2002248:	81bffe04 	addi	r6,r16,-8
 200224c:	2084703a 	and	r2,r4,r2
 2002250:	4a566b04 	addi	r9,r9,22956
 2002254:	308b883a 	add	r5,r6,r2
 2002258:	2a000117 	ldw	r8,4(r5)
 200225c:	49c00217 	ldw	r7,8(r9)
 2002260:	00ffff04 	movi	r3,-4
 2002264:	40c6703a 	and	r3,r8,r3
 2002268:	39405326 	beq	r7,r5,20023b8 <_free_r+0x19c>
 200226c:	28c00115 	stw	r3,4(r5)
 2002270:	2100004c 	andi	r4,r4,1
 2002274:	2000091e 	bne	r4,zero,200229c <_free_r+0x80>
 2002278:	81fffe17 	ldw	r7,-8(r16)
 200227c:	4a000204 	addi	r8,r9,8
 2002280:	31cdc83a 	sub	r6,r6,r7
 2002284:	31000217 	ldw	r4,8(r6)
 2002288:	11c5883a 	add	r2,r2,r7
 200228c:	22006126 	beq	r4,r8,2002414 <_free_r+0x1f8>
 2002290:	31c00317 	ldw	r7,12(r6)
 2002294:	21c00315 	stw	r7,12(r4)
 2002298:	39000215 	stw	r4,8(r7)
 200229c:	28c9883a 	add	r4,r5,r3
 20022a0:	21c00117 	ldw	r7,4(r4)
 20022a4:	39c0004c 	andi	r7,r7,1
 20022a8:	38000d1e 	bne	r7,zero,20022e0 <_free_r+0xc4>
 20022ac:	29000217 	ldw	r4,8(r5)
 20022b0:	10c5883a 	add	r2,r2,r3
 20022b4:	00c08034 	movhi	r3,512
 20022b8:	18d66d04 	addi	r3,r3,22964
 20022bc:	20c07526 	beq	r4,r3,2002494 <_free_r+0x278>
 20022c0:	29c00317 	ldw	r7,12(r5)
 20022c4:	11400054 	ori	r5,r2,1
 20022c8:	3087883a 	add	r3,r6,r2
 20022cc:	21c00315 	stw	r7,12(r4)
 20022d0:	39000215 	stw	r4,8(r7)
 20022d4:	31400115 	stw	r5,4(r6)
 20022d8:	18800015 	stw	r2,0(r3)
 20022dc:	00000406 	br	20022f0 <_free_r+0xd4>
 20022e0:	10c00054 	ori	r3,r2,1
 20022e4:	30c00115 	stw	r3,4(r6)
 20022e8:	3087883a 	add	r3,r6,r2
 20022ec:	18800015 	stw	r2,0(r3)
 20022f0:	00c07fc4 	movi	r3,511
 20022f4:	18801736 	bltu	r3,r2,2002354 <_free_r+0x138>
 20022f8:	1004d0fa 	srli	r2,r2,3
 20022fc:	01400044 	movi	r5,1
 2002300:	49000117 	ldw	r4,4(r9)
 2002304:	1087883a 	add	r3,r2,r2
 2002308:	18c7883a 	add	r3,r3,r3
 200230c:	1005d0ba 	srai	r2,r2,2
 2002310:	18c7883a 	add	r3,r3,r3
 2002314:	1a47883a 	add	r3,r3,r9
 2002318:	19c00217 	ldw	r7,8(r3)
 200231c:	2884983a 	sll	r2,r5,r2
 2002320:	30c00315 	stw	r3,12(r6)
 2002324:	31c00215 	stw	r7,8(r6)
 2002328:	1104b03a 	or	r2,r2,r4
 200232c:	19800215 	stw	r6,8(r3)
 2002330:	48800115 	stw	r2,4(r9)
 2002334:	39800315 	stw	r6,12(r7)
 2002338:	8809883a 	mov	r4,r17
 200233c:	dfc00217 	ldw	ra,8(sp)
 2002340:	dc400117 	ldw	r17,4(sp)
 2002344:	dc000017 	ldw	r16,0(sp)
 2002348:	dec00304 	addi	sp,sp,12
 200234c:	20033e41 	jmpi	20033e4 <__malloc_unlock>
 2002350:	f800283a 	ret
 2002354:	1006d27a 	srli	r3,r2,9
 2002358:	01000104 	movi	r4,4
 200235c:	20c04036 	bltu	r4,r3,2002460 <_free_r+0x244>
 2002360:	1006d1ba 	srli	r3,r2,6
 2002364:	19400e04 	addi	r5,r3,56
 2002368:	2947883a 	add	r3,r5,r5
 200236c:	18c7883a 	add	r3,r3,r3
 2002370:	18c7883a 	add	r3,r3,r3
 2002374:	1a49883a 	add	r4,r3,r9
 2002378:	20c00217 	ldw	r3,8(r4)
 200237c:	01c08034 	movhi	r7,512
 2002380:	39d66b04 	addi	r7,r7,22956
 2002384:	19003b26 	beq	r3,r4,2002474 <_free_r+0x258>
 2002388:	01ffff04 	movi	r7,-4
 200238c:	19400117 	ldw	r5,4(r3)
 2002390:	29ca703a 	and	r5,r5,r7
 2002394:	1140022e 	bgeu	r2,r5,20023a0 <_free_r+0x184>
 2002398:	18c00217 	ldw	r3,8(r3)
 200239c:	20fffb1e 	bne	r4,r3,200238c <__alt_mem_onchip_memory2_0+0xfdff238c>
 20023a0:	18800317 	ldw	r2,12(r3)
 20023a4:	30800315 	stw	r2,12(r6)
 20023a8:	30c00215 	stw	r3,8(r6)
 20023ac:	11800215 	stw	r6,8(r2)
 20023b0:	19800315 	stw	r6,12(r3)
 20023b4:	003fe006 	br	2002338 <__alt_mem_onchip_memory2_0+0xfdff2338>
 20023b8:	2100004c 	andi	r4,r4,1
 20023bc:	1885883a 	add	r2,r3,r2
 20023c0:	2000071e 	bne	r4,zero,20023e0 <_free_r+0x1c4>
 20023c4:	817ffe17 	ldw	r5,-8(r16)
 20023c8:	314dc83a 	sub	r6,r6,r5
 20023cc:	30c00317 	ldw	r3,12(r6)
 20023d0:	31000217 	ldw	r4,8(r6)
 20023d4:	1145883a 	add	r2,r2,r5
 20023d8:	20c00315 	stw	r3,12(r4)
 20023dc:	19000215 	stw	r4,8(r3)
 20023e0:	10c00054 	ori	r3,r2,1
 20023e4:	30c00115 	stw	r3,4(r6)
 20023e8:	00c08034 	movhi	r3,512
 20023ec:	18dbf204 	addi	r3,r3,28616
 20023f0:	18c00017 	ldw	r3,0(r3)
 20023f4:	49800215 	stw	r6,8(r9)
 20023f8:	10ffcf36 	bltu	r2,r3,2002338 <__alt_mem_onchip_memory2_0+0xfdff2338>
 20023fc:	00808074 	movhi	r2,513
 2002400:	10a29a04 	addi	r2,r2,-30104
 2002404:	11400017 	ldw	r5,0(r2)
 2002408:	8809883a 	mov	r4,r17
 200240c:	20020f80 	call	20020f8 <_malloc_trim_r>
 2002410:	003fc906 	br	2002338 <__alt_mem_onchip_memory2_0+0xfdff2338>
 2002414:	28c9883a 	add	r4,r5,r3
 2002418:	21000117 	ldw	r4,4(r4)
 200241c:	2100004c 	andi	r4,r4,1
 2002420:	20000a1e 	bne	r4,zero,200244c <_free_r+0x230>
 2002424:	29000317 	ldw	r4,12(r5)
 2002428:	29400217 	ldw	r5,8(r5)
 200242c:	10c5883a 	add	r2,r2,r3
 2002430:	10c00054 	ori	r3,r2,1
 2002434:	29000315 	stw	r4,12(r5)
 2002438:	21400215 	stw	r5,8(r4)
 200243c:	30c00115 	stw	r3,4(r6)
 2002440:	308d883a 	add	r6,r6,r2
 2002444:	30800015 	stw	r2,0(r6)
 2002448:	003fbb06 	br	2002338 <__alt_mem_onchip_memory2_0+0xfdff2338>
 200244c:	10c00054 	ori	r3,r2,1
 2002450:	30c00115 	stw	r3,4(r6)
 2002454:	308d883a 	add	r6,r6,r2
 2002458:	30800015 	stw	r2,0(r6)
 200245c:	003fb606 	br	2002338 <__alt_mem_onchip_memory2_0+0xfdff2338>
 2002460:	01000504 	movi	r4,20
 2002464:	20c01436 	bltu	r4,r3,20024b8 <_free_r+0x29c>
 2002468:	194016c4 	addi	r5,r3,91
 200246c:	2947883a 	add	r3,r5,r5
 2002470:	003fbe06 	br	200236c <__alt_mem_onchip_memory2_0+0xfdff236c>
 2002474:	280bd0ba 	srai	r5,r5,2
 2002478:	00800044 	movi	r2,1
 200247c:	39000117 	ldw	r4,4(r7)
 2002480:	114a983a 	sll	r5,r2,r5
 2002484:	1805883a 	mov	r2,r3
 2002488:	2908b03a 	or	r4,r5,r4
 200248c:	39000115 	stw	r4,4(r7)
 2002490:	003fc406 	br	20023a4 <__alt_mem_onchip_memory2_0+0xfdff23a4>
 2002494:	49800515 	stw	r6,20(r9)
 2002498:	49800415 	stw	r6,16(r9)
 200249c:	10c00054 	ori	r3,r2,1
 20024a0:	31000315 	stw	r4,12(r6)
 20024a4:	31000215 	stw	r4,8(r6)
 20024a8:	30c00115 	stw	r3,4(r6)
 20024ac:	308d883a 	add	r6,r6,r2
 20024b0:	30800015 	stw	r2,0(r6)
 20024b4:	003fa006 	br	2002338 <__alt_mem_onchip_memory2_0+0xfdff2338>
 20024b8:	01001504 	movi	r4,84
 20024bc:	20c00436 	bltu	r4,r3,20024d0 <_free_r+0x2b4>
 20024c0:	1006d33a 	srli	r3,r2,12
 20024c4:	19401b84 	addi	r5,r3,110
 20024c8:	2947883a 	add	r3,r5,r5
 20024cc:	003fa706 	br	200236c <__alt_mem_onchip_memory2_0+0xfdff236c>
 20024d0:	01005504 	movi	r4,340
 20024d4:	20c00436 	bltu	r4,r3,20024e8 <_free_r+0x2cc>
 20024d8:	1006d3fa 	srli	r3,r2,15
 20024dc:	19401dc4 	addi	r5,r3,119
 20024e0:	2947883a 	add	r3,r5,r5
 20024e4:	003fa106 	br	200236c <__alt_mem_onchip_memory2_0+0xfdff236c>
 20024e8:	01015504 	movi	r4,1364
 20024ec:	20c00436 	bltu	r4,r3,2002500 <_free_r+0x2e4>
 20024f0:	1006d4ba 	srli	r3,r2,18
 20024f4:	19401f04 	addi	r5,r3,124
 20024f8:	2947883a 	add	r3,r5,r5
 20024fc:	003f9b06 	br	200236c <__alt_mem_onchip_memory2_0+0xfdff236c>
 2002500:	00c03f04 	movi	r3,252
 2002504:	01401f84 	movi	r5,126
 2002508:	003f9806 	br	200236c <__alt_mem_onchip_memory2_0+0xfdff236c>

0200250c <_fwalk>:
 200250c:	defff804 	addi	sp,sp,-32
 2002510:	dd400515 	stw	r21,20(sp)
 2002514:	2540b804 	addi	r21,r4,736
 2002518:	dd800615 	stw	r22,24(sp)
 200251c:	dd000415 	stw	r20,16(sp)
 2002520:	dfc00715 	stw	ra,28(sp)
 2002524:	dcc00315 	stw	r19,12(sp)
 2002528:	dc800215 	stw	r18,8(sp)
 200252c:	dc400115 	stw	r17,4(sp)
 2002530:	dc000015 	stw	r16,0(sp)
 2002534:	2829883a 	mov	r20,r5
 2002538:	002d883a 	mov	r22,zero
 200253c:	20020b80 	call	20020b8 <__sfp_lock_acquire>
 2002540:	a8001426 	beq	r21,zero,2002594 <_fwalk+0x88>
 2002544:	04ffffc4 	movi	r19,-1
 2002548:	ac400117 	ldw	r17,4(r21)
 200254c:	ac800217 	ldw	r18,8(r21)
 2002550:	8c7fffc4 	addi	r17,r17,-1
 2002554:	88000d16 	blt	r17,zero,200258c <_fwalk+0x80>
 2002558:	94000304 	addi	r16,r18,12
 200255c:	94800384 	addi	r18,r18,14
 2002560:	80c0000f 	ldh	r3,0(r16)
 2002564:	8c7fffc4 	addi	r17,r17,-1
 2002568:	813ffd04 	addi	r4,r16,-12
 200256c:	18000426 	beq	r3,zero,2002580 <_fwalk+0x74>
 2002570:	90c0000f 	ldh	r3,0(r18)
 2002574:	1cc00226 	beq	r3,r19,2002580 <_fwalk+0x74>
 2002578:	a03ee83a 	callr	r20
 200257c:	b0acb03a 	or	r22,r22,r2
 2002580:	84001a04 	addi	r16,r16,104
 2002584:	94801a04 	addi	r18,r18,104
 2002588:	8cfff51e 	bne	r17,r19,2002560 <__alt_mem_onchip_memory2_0+0xfdff2560>
 200258c:	ad400017 	ldw	r21,0(r21)
 2002590:	a83fed1e 	bne	r21,zero,2002548 <__alt_mem_onchip_memory2_0+0xfdff2548>
 2002594:	20020bc0 	call	20020bc <__sfp_lock_release>
 2002598:	b005883a 	mov	r2,r22
 200259c:	dfc00717 	ldw	ra,28(sp)
 20025a0:	dd800617 	ldw	r22,24(sp)
 20025a4:	dd400517 	ldw	r21,20(sp)
 20025a8:	dd000417 	ldw	r20,16(sp)
 20025ac:	dcc00317 	ldw	r19,12(sp)
 20025b0:	dc800217 	ldw	r18,8(sp)
 20025b4:	dc400117 	ldw	r17,4(sp)
 20025b8:	dc000017 	ldw	r16,0(sp)
 20025bc:	dec00804 	addi	sp,sp,32
 20025c0:	f800283a 	ret

020025c4 <_fwalk_reent>:
 20025c4:	defff804 	addi	sp,sp,-32
 20025c8:	dd400515 	stw	r21,20(sp)
 20025cc:	2540b804 	addi	r21,r4,736
 20025d0:	dd800615 	stw	r22,24(sp)
 20025d4:	dd000415 	stw	r20,16(sp)
 20025d8:	dcc00315 	stw	r19,12(sp)
 20025dc:	dfc00715 	stw	ra,28(sp)
 20025e0:	dc800215 	stw	r18,8(sp)
 20025e4:	dc400115 	stw	r17,4(sp)
 20025e8:	dc000015 	stw	r16,0(sp)
 20025ec:	2027883a 	mov	r19,r4
 20025f0:	2829883a 	mov	r20,r5
 20025f4:	002d883a 	mov	r22,zero
 20025f8:	20020b80 	call	20020b8 <__sfp_lock_acquire>
 20025fc:	a8001326 	beq	r21,zero,200264c <_fwalk_reent+0x88>
 2002600:	04bfffc4 	movi	r18,-1
 2002604:	ac400117 	ldw	r17,4(r21)
 2002608:	ac000217 	ldw	r16,8(r21)
 200260c:	8c7fffc4 	addi	r17,r17,-1
 2002610:	88000c16 	blt	r17,zero,2002644 <_fwalk_reent+0x80>
 2002614:	84000304 	addi	r16,r16,12
 2002618:	80c0000f 	ldh	r3,0(r16)
 200261c:	8c7fffc4 	addi	r17,r17,-1
 2002620:	817ffd04 	addi	r5,r16,-12
 2002624:	18000526 	beq	r3,zero,200263c <_fwalk_reent+0x78>
 2002628:	80c0008f 	ldh	r3,2(r16)
 200262c:	9809883a 	mov	r4,r19
 2002630:	1c800226 	beq	r3,r18,200263c <_fwalk_reent+0x78>
 2002634:	a03ee83a 	callr	r20
 2002638:	b0acb03a 	or	r22,r22,r2
 200263c:	84001a04 	addi	r16,r16,104
 2002640:	8cbff51e 	bne	r17,r18,2002618 <__alt_mem_onchip_memory2_0+0xfdff2618>
 2002644:	ad400017 	ldw	r21,0(r21)
 2002648:	a83fee1e 	bne	r21,zero,2002604 <__alt_mem_onchip_memory2_0+0xfdff2604>
 200264c:	20020bc0 	call	20020bc <__sfp_lock_release>
 2002650:	b005883a 	mov	r2,r22
 2002654:	dfc00717 	ldw	ra,28(sp)
 2002658:	dd800617 	ldw	r22,24(sp)
 200265c:	dd400517 	ldw	r21,20(sp)
 2002660:	dd000417 	ldw	r20,16(sp)
 2002664:	dcc00317 	ldw	r19,12(sp)
 2002668:	dc800217 	ldw	r18,8(sp)
 200266c:	dc400117 	ldw	r17,4(sp)
 2002670:	dc000017 	ldw	r16,0(sp)
 2002674:	dec00804 	addi	sp,sp,32
 2002678:	f800283a 	ret

0200267c <__smakebuf_r>:
 200267c:	2880030b 	ldhu	r2,12(r5)
 2002680:	10c0008c 	andi	r3,r2,2
 2002684:	1800401e 	bne	r3,zero,2002788 <__smakebuf_r+0x10c>
 2002688:	deffec04 	addi	sp,sp,-80
 200268c:	dc000f15 	stw	r16,60(sp)
 2002690:	2821883a 	mov	r16,r5
 2002694:	2940038f 	ldh	r5,14(r5)
 2002698:	dc401015 	stw	r17,64(sp)
 200269c:	dfc01315 	stw	ra,76(sp)
 20026a0:	dcc01215 	stw	r19,72(sp)
 20026a4:	dc801115 	stw	r18,68(sp)
 20026a8:	2023883a 	mov	r17,r4
 20026ac:	28001b16 	blt	r5,zero,200271c <__smakebuf_r+0xa0>
 20026b0:	d80d883a 	mov	r6,sp
 20026b4:	2002c580 	call	2002c58 <_fstat_r>
 20026b8:	10001716 	blt	r2,zero,2002718 <__smakebuf_r+0x9c>
 20026bc:	d8800117 	ldw	r2,4(sp)
 20026c0:	00e00014 	movui	r3,32768
 20026c4:	10bc000c 	andi	r2,r2,61440
 20026c8:	10c03726 	beq	r2,r3,20027a8 <__smakebuf_r+0x12c>
 20026cc:	80c0030b 	ldhu	r3,12(r16)
 20026d0:	18c20014 	ori	r3,r3,2048
 20026d4:	80c0030d 	sth	r3,12(r16)
 20026d8:	00c80004 	movi	r3,8192
 20026dc:	10c03c1e 	bne	r2,r3,20027d0 <__smakebuf_r+0x154>
 20026e0:	8140038f 	ldh	r5,14(r16)
 20026e4:	8809883a 	mov	r4,r17
 20026e8:	2002cb00 	call	2002cb0 <_isatty_r>
 20026ec:	10004e26 	beq	r2,zero,2002828 <__smakebuf_r+0x1ac>
 20026f0:	8080030b 	ldhu	r2,12(r16)
 20026f4:	04c00044 	movi	r19,1
 20026f8:	80c010c4 	addi	r3,r16,67
 20026fc:	14c4b03a 	or	r2,r2,r19
 2002700:	8080030d 	sth	r2,12(r16)
 2002704:	80c00015 	stw	r3,0(r16)
 2002708:	80c00415 	stw	r3,16(r16)
 200270c:	84c00515 	stw	r19,20(r16)
 2002710:	04810004 	movi	r18,1024
 2002714:	00000706 	br	2002734 <__smakebuf_r+0xb8>
 2002718:	8080030b 	ldhu	r2,12(r16)
 200271c:	10c0200c 	andi	r3,r2,128
 2002720:	18001f1e 	bne	r3,zero,20027a0 <__smakebuf_r+0x124>
 2002724:	04810004 	movi	r18,1024
 2002728:	10820014 	ori	r2,r2,2048
 200272c:	8080030d 	sth	r2,12(r16)
 2002730:	0027883a 	mov	r19,zero
 2002734:	8809883a 	mov	r4,r17
 2002738:	900b883a 	mov	r5,r18
 200273c:	20008a40 	call	20008a4 <_malloc_r>
 2002740:	10002e26 	beq	r2,zero,20027fc <__smakebuf_r+0x180>
 2002744:	80c0030b 	ldhu	r3,12(r16)
 2002748:	01008034 	movhi	r4,512
 200274c:	21075504 	addi	r4,r4,7508
 2002750:	89000f15 	stw	r4,60(r17)
 2002754:	18c02014 	ori	r3,r3,128
 2002758:	80c0030d 	sth	r3,12(r16)
 200275c:	80800015 	stw	r2,0(r16)
 2002760:	80800415 	stw	r2,16(r16)
 2002764:	84800515 	stw	r18,20(r16)
 2002768:	98001c1e 	bne	r19,zero,20027dc <__smakebuf_r+0x160>
 200276c:	dfc01317 	ldw	ra,76(sp)
 2002770:	dcc01217 	ldw	r19,72(sp)
 2002774:	dc801117 	ldw	r18,68(sp)
 2002778:	dc401017 	ldw	r17,64(sp)
 200277c:	dc000f17 	ldw	r16,60(sp)
 2002780:	dec01404 	addi	sp,sp,80
 2002784:	f800283a 	ret
 2002788:	288010c4 	addi	r2,r5,67
 200278c:	28800015 	stw	r2,0(r5)
 2002790:	28800415 	stw	r2,16(r5)
 2002794:	00800044 	movi	r2,1
 2002798:	28800515 	stw	r2,20(r5)
 200279c:	f800283a 	ret
 20027a0:	04801004 	movi	r18,64
 20027a4:	003fe006 	br	2002728 <__alt_mem_onchip_memory2_0+0xfdff2728>
 20027a8:	81000a17 	ldw	r4,40(r16)
 20027ac:	00c08034 	movhi	r3,512
 20027b0:	18ca8c04 	addi	r3,r3,10800
 20027b4:	20ffc51e 	bne	r4,r3,20026cc <__alt_mem_onchip_memory2_0+0xfdff26cc>
 20027b8:	80c0030b 	ldhu	r3,12(r16)
 20027bc:	01010004 	movi	r4,1024
 20027c0:	81001315 	stw	r4,76(r16)
 20027c4:	1906b03a 	or	r3,r3,r4
 20027c8:	80c0030d 	sth	r3,12(r16)
 20027cc:	003fc206 	br	20026d8 <__alt_mem_onchip_memory2_0+0xfdff26d8>
 20027d0:	0027883a 	mov	r19,zero
 20027d4:	04810004 	movi	r18,1024
 20027d8:	003fd606 	br	2002734 <__alt_mem_onchip_memory2_0+0xfdff2734>
 20027dc:	8140038f 	ldh	r5,14(r16)
 20027e0:	8809883a 	mov	r4,r17
 20027e4:	2002cb00 	call	2002cb0 <_isatty_r>
 20027e8:	103fe026 	beq	r2,zero,200276c <__alt_mem_onchip_memory2_0+0xfdff276c>
 20027ec:	8080030b 	ldhu	r2,12(r16)
 20027f0:	10800054 	ori	r2,r2,1
 20027f4:	8080030d 	sth	r2,12(r16)
 20027f8:	003fdc06 	br	200276c <__alt_mem_onchip_memory2_0+0xfdff276c>
 20027fc:	8080030b 	ldhu	r2,12(r16)
 2002800:	10c0800c 	andi	r3,r2,512
 2002804:	183fd91e 	bne	r3,zero,200276c <__alt_mem_onchip_memory2_0+0xfdff276c>
 2002808:	10800094 	ori	r2,r2,2
 200280c:	80c010c4 	addi	r3,r16,67
 2002810:	8080030d 	sth	r2,12(r16)
 2002814:	00800044 	movi	r2,1
 2002818:	80c00015 	stw	r3,0(r16)
 200281c:	80c00415 	stw	r3,16(r16)
 2002820:	80800515 	stw	r2,20(r16)
 2002824:	003fd106 	br	200276c <__alt_mem_onchip_memory2_0+0xfdff276c>
 2002828:	04c00044 	movi	r19,1
 200282c:	04810004 	movi	r18,1024
 2002830:	003fc006 	br	2002734 <__alt_mem_onchip_memory2_0+0xfdff2734>

02002834 <memset>:
 2002834:	20c000cc 	andi	r3,r4,3
 2002838:	2005883a 	mov	r2,r4
 200283c:	18004326 	beq	r3,zero,200294c <memset+0x118>
 2002840:	31ffffc4 	addi	r7,r6,-1
 2002844:	30004026 	beq	r6,zero,2002948 <memset+0x114>
 2002848:	2813883a 	mov	r9,r5
 200284c:	200d883a 	mov	r6,r4
 2002850:	2007883a 	mov	r3,r4
 2002854:	00000406 	br	2002868 <memset+0x34>
 2002858:	3a3fffc4 	addi	r8,r7,-1
 200285c:	31800044 	addi	r6,r6,1
 2002860:	38003926 	beq	r7,zero,2002948 <memset+0x114>
 2002864:	400f883a 	mov	r7,r8
 2002868:	18c00044 	addi	r3,r3,1
 200286c:	32400005 	stb	r9,0(r6)
 2002870:	1a0000cc 	andi	r8,r3,3
 2002874:	403ff81e 	bne	r8,zero,2002858 <__alt_mem_onchip_memory2_0+0xfdff2858>
 2002878:	010000c4 	movi	r4,3
 200287c:	21c02d2e 	bgeu	r4,r7,2002934 <memset+0x100>
 2002880:	29803fcc 	andi	r6,r5,255
 2002884:	3008923a 	slli	r4,r6,8
 2002888:	218cb03a 	or	r6,r4,r6
 200288c:	3008943a 	slli	r4,r6,16
 2002890:	218cb03a 	or	r6,r4,r6
 2002894:	010003c4 	movi	r4,15
 2002898:	21c0182e 	bgeu	r4,r7,20028fc <memset+0xc8>
 200289c:	3b3ffc04 	addi	r12,r7,-16
 20028a0:	6018d13a 	srli	r12,r12,4
 20028a4:	1a000104 	addi	r8,r3,4
 20028a8:	1ac00204 	addi	r11,r3,8
 20028ac:	6008913a 	slli	r4,r12,4
 20028b0:	1a800304 	addi	r10,r3,12
 20028b4:	1813883a 	mov	r9,r3
 20028b8:	21000504 	addi	r4,r4,20
 20028bc:	1909883a 	add	r4,r3,r4
 20028c0:	49800015 	stw	r6,0(r9)
 20028c4:	41800015 	stw	r6,0(r8)
 20028c8:	59800015 	stw	r6,0(r11)
 20028cc:	51800015 	stw	r6,0(r10)
 20028d0:	42000404 	addi	r8,r8,16
 20028d4:	4a400404 	addi	r9,r9,16
 20028d8:	5ac00404 	addi	r11,r11,16
 20028dc:	52800404 	addi	r10,r10,16
 20028e0:	413ff71e 	bne	r8,r4,20028c0 <__alt_mem_onchip_memory2_0+0xfdff28c0>
 20028e4:	63000044 	addi	r12,r12,1
 20028e8:	6018913a 	slli	r12,r12,4
 20028ec:	39c003cc 	andi	r7,r7,15
 20028f0:	010000c4 	movi	r4,3
 20028f4:	1b07883a 	add	r3,r3,r12
 20028f8:	21c00e2e 	bgeu	r4,r7,2002934 <memset+0x100>
 20028fc:	1813883a 	mov	r9,r3
 2002900:	3811883a 	mov	r8,r7
 2002904:	010000c4 	movi	r4,3
 2002908:	49800015 	stw	r6,0(r9)
 200290c:	423fff04 	addi	r8,r8,-4
 2002910:	4a400104 	addi	r9,r9,4
 2002914:	223ffc36 	bltu	r4,r8,2002908 <__alt_mem_onchip_memory2_0+0xfdff2908>
 2002918:	393fff04 	addi	r4,r7,-4
 200291c:	2008d0ba 	srli	r4,r4,2
 2002920:	39c000cc 	andi	r7,r7,3
 2002924:	21000044 	addi	r4,r4,1
 2002928:	2109883a 	add	r4,r4,r4
 200292c:	2109883a 	add	r4,r4,r4
 2002930:	1907883a 	add	r3,r3,r4
 2002934:	38000426 	beq	r7,zero,2002948 <memset+0x114>
 2002938:	19cf883a 	add	r7,r3,r7
 200293c:	19400005 	stb	r5,0(r3)
 2002940:	18c00044 	addi	r3,r3,1
 2002944:	19fffd1e 	bne	r3,r7,200293c <__alt_mem_onchip_memory2_0+0xfdff293c>
 2002948:	f800283a 	ret
 200294c:	2007883a 	mov	r3,r4
 2002950:	300f883a 	mov	r7,r6
 2002954:	003fc806 	br	2002878 <__alt_mem_onchip_memory2_0+0xfdff2878>

02002958 <__sread>:
 2002958:	defffe04 	addi	sp,sp,-8
 200295c:	dc000015 	stw	r16,0(sp)
 2002960:	2821883a 	mov	r16,r5
 2002964:	2940038f 	ldh	r5,14(r5)
 2002968:	dfc00115 	stw	ra,4(sp)
 200296c:	2002d600 	call	2002d60 <_read_r>
 2002970:	10000716 	blt	r2,zero,2002990 <__sread+0x38>
 2002974:	80c01417 	ldw	r3,80(r16)
 2002978:	1887883a 	add	r3,r3,r2
 200297c:	80c01415 	stw	r3,80(r16)
 2002980:	dfc00117 	ldw	ra,4(sp)
 2002984:	dc000017 	ldw	r16,0(sp)
 2002988:	dec00204 	addi	sp,sp,8
 200298c:	f800283a 	ret
 2002990:	80c0030b 	ldhu	r3,12(r16)
 2002994:	18fbffcc 	andi	r3,r3,61439
 2002998:	80c0030d 	sth	r3,12(r16)
 200299c:	dfc00117 	ldw	ra,4(sp)
 20029a0:	dc000017 	ldw	r16,0(sp)
 20029a4:	dec00204 	addi	sp,sp,8
 20029a8:	f800283a 	ret

020029ac <__seofread>:
 20029ac:	0005883a 	mov	r2,zero
 20029b0:	f800283a 	ret

020029b4 <__swrite>:
 20029b4:	2880030b 	ldhu	r2,12(r5)
 20029b8:	defffb04 	addi	sp,sp,-20
 20029bc:	dcc00315 	stw	r19,12(sp)
 20029c0:	dc800215 	stw	r18,8(sp)
 20029c4:	dc400115 	stw	r17,4(sp)
 20029c8:	dc000015 	stw	r16,0(sp)
 20029cc:	dfc00415 	stw	ra,16(sp)
 20029d0:	10c0400c 	andi	r3,r2,256
 20029d4:	2821883a 	mov	r16,r5
 20029d8:	2027883a 	mov	r19,r4
 20029dc:	3025883a 	mov	r18,r6
 20029e0:	3823883a 	mov	r17,r7
 20029e4:	18000526 	beq	r3,zero,20029fc <__swrite+0x48>
 20029e8:	2940038f 	ldh	r5,14(r5)
 20029ec:	000d883a 	mov	r6,zero
 20029f0:	01c00084 	movi	r7,2
 20029f4:	2002d040 	call	2002d04 <_lseek_r>
 20029f8:	8080030b 	ldhu	r2,12(r16)
 20029fc:	8140038f 	ldh	r5,14(r16)
 2002a00:	10bbffcc 	andi	r2,r2,61439
 2002a04:	9809883a 	mov	r4,r19
 2002a08:	900d883a 	mov	r6,r18
 2002a0c:	880f883a 	mov	r7,r17
 2002a10:	8080030d 	sth	r2,12(r16)
 2002a14:	dfc00417 	ldw	ra,16(sp)
 2002a18:	dcc00317 	ldw	r19,12(sp)
 2002a1c:	dc800217 	ldw	r18,8(sp)
 2002a20:	dc400117 	ldw	r17,4(sp)
 2002a24:	dc000017 	ldw	r16,0(sp)
 2002a28:	dec00504 	addi	sp,sp,20
 2002a2c:	2002a941 	jmpi	2002a94 <_write_r>

02002a30 <__sseek>:
 2002a30:	defffe04 	addi	sp,sp,-8
 2002a34:	dc000015 	stw	r16,0(sp)
 2002a38:	2821883a 	mov	r16,r5
 2002a3c:	2940038f 	ldh	r5,14(r5)
 2002a40:	dfc00115 	stw	ra,4(sp)
 2002a44:	2002d040 	call	2002d04 <_lseek_r>
 2002a48:	00ffffc4 	movi	r3,-1
 2002a4c:	10c00826 	beq	r2,r3,2002a70 <__sseek+0x40>
 2002a50:	80c0030b 	ldhu	r3,12(r16)
 2002a54:	80801415 	stw	r2,80(r16)
 2002a58:	18c40014 	ori	r3,r3,4096
 2002a5c:	80c0030d 	sth	r3,12(r16)
 2002a60:	dfc00117 	ldw	ra,4(sp)
 2002a64:	dc000017 	ldw	r16,0(sp)
 2002a68:	dec00204 	addi	sp,sp,8
 2002a6c:	f800283a 	ret
 2002a70:	80c0030b 	ldhu	r3,12(r16)
 2002a74:	18fbffcc 	andi	r3,r3,61439
 2002a78:	80c0030d 	sth	r3,12(r16)
 2002a7c:	dfc00117 	ldw	ra,4(sp)
 2002a80:	dc000017 	ldw	r16,0(sp)
 2002a84:	dec00204 	addi	sp,sp,8
 2002a88:	f800283a 	ret

02002a8c <__sclose>:
 2002a8c:	2940038f 	ldh	r5,14(r5)
 2002a90:	2002af01 	jmpi	2002af0 <_close_r>

02002a94 <_write_r>:
 2002a94:	defffd04 	addi	sp,sp,-12
 2002a98:	dc000015 	stw	r16,0(sp)
 2002a9c:	04008074 	movhi	r16,513
 2002aa0:	dc400115 	stw	r17,4(sp)
 2002aa4:	84229b04 	addi	r16,r16,-30100
 2002aa8:	2023883a 	mov	r17,r4
 2002aac:	2809883a 	mov	r4,r5
 2002ab0:	300b883a 	mov	r5,r6
 2002ab4:	380d883a 	mov	r6,r7
 2002ab8:	dfc00215 	stw	ra,8(sp)
 2002abc:	80000015 	stw	zero,0(r16)
 2002ac0:	20036d80 	call	20036d8 <write>
 2002ac4:	00ffffc4 	movi	r3,-1
 2002ac8:	10c00526 	beq	r2,r3,2002ae0 <_write_r+0x4c>
 2002acc:	dfc00217 	ldw	ra,8(sp)
 2002ad0:	dc400117 	ldw	r17,4(sp)
 2002ad4:	dc000017 	ldw	r16,0(sp)
 2002ad8:	dec00304 	addi	sp,sp,12
 2002adc:	f800283a 	ret
 2002ae0:	80c00017 	ldw	r3,0(r16)
 2002ae4:	183ff926 	beq	r3,zero,2002acc <__alt_mem_onchip_memory2_0+0xfdff2acc>
 2002ae8:	88c00015 	stw	r3,0(r17)
 2002aec:	003ff706 	br	2002acc <__alt_mem_onchip_memory2_0+0xfdff2acc>

02002af0 <_close_r>:
 2002af0:	defffd04 	addi	sp,sp,-12
 2002af4:	dc000015 	stw	r16,0(sp)
 2002af8:	04008074 	movhi	r16,513
 2002afc:	dc400115 	stw	r17,4(sp)
 2002b00:	84229b04 	addi	r16,r16,-30100
 2002b04:	2023883a 	mov	r17,r4
 2002b08:	2809883a 	mov	r4,r5
 2002b0c:	dfc00215 	stw	ra,8(sp)
 2002b10:	80000015 	stw	zero,0(r16)
 2002b14:	2002e340 	call	2002e34 <close>
 2002b18:	00ffffc4 	movi	r3,-1
 2002b1c:	10c00526 	beq	r2,r3,2002b34 <_close_r+0x44>
 2002b20:	dfc00217 	ldw	ra,8(sp)
 2002b24:	dc400117 	ldw	r17,4(sp)
 2002b28:	dc000017 	ldw	r16,0(sp)
 2002b2c:	dec00304 	addi	sp,sp,12
 2002b30:	f800283a 	ret
 2002b34:	80c00017 	ldw	r3,0(r16)
 2002b38:	183ff926 	beq	r3,zero,2002b20 <__alt_mem_onchip_memory2_0+0xfdff2b20>
 2002b3c:	88c00015 	stw	r3,0(r17)
 2002b40:	003ff706 	br	2002b20 <__alt_mem_onchip_memory2_0+0xfdff2b20>

02002b44 <_fclose_r>:
 2002b44:	28003226 	beq	r5,zero,2002c10 <_fclose_r+0xcc>
 2002b48:	defffc04 	addi	sp,sp,-16
 2002b4c:	dc400115 	stw	r17,4(sp)
 2002b50:	2023883a 	mov	r17,r4
 2002b54:	dc000015 	stw	r16,0(sp)
 2002b58:	dfc00315 	stw	ra,12(sp)
 2002b5c:	dc800215 	stw	r18,8(sp)
 2002b60:	2821883a 	mov	r16,r5
 2002b64:	20020b80 	call	20020b8 <__sfp_lock_acquire>
 2002b68:	88000226 	beq	r17,zero,2002b74 <_fclose_r+0x30>
 2002b6c:	88800e17 	ldw	r2,56(r17)
 2002b70:	10002926 	beq	r2,zero,2002c18 <_fclose_r+0xd4>
 2002b74:	8080030f 	ldh	r2,12(r16)
 2002b78:	10002226 	beq	r2,zero,2002c04 <_fclose_r+0xc0>
 2002b7c:	8809883a 	mov	r4,r17
 2002b80:	800b883a 	mov	r5,r16
 2002b84:	2001aec0 	call	2001aec <_fflush_r>
 2002b88:	1025883a 	mov	r18,r2
 2002b8c:	80800b17 	ldw	r2,44(r16)
 2002b90:	10000426 	beq	r2,zero,2002ba4 <_fclose_r+0x60>
 2002b94:	81400717 	ldw	r5,28(r16)
 2002b98:	8809883a 	mov	r4,r17
 2002b9c:	103ee83a 	callr	r2
 2002ba0:	10002616 	blt	r2,zero,2002c3c <_fclose_r+0xf8>
 2002ba4:	8080030b 	ldhu	r2,12(r16)
 2002ba8:	1080200c 	andi	r2,r2,128
 2002bac:	10001f1e 	bne	r2,zero,2002c2c <_fclose_r+0xe8>
 2002bb0:	81400c17 	ldw	r5,48(r16)
 2002bb4:	28000526 	beq	r5,zero,2002bcc <_fclose_r+0x88>
 2002bb8:	80801004 	addi	r2,r16,64
 2002bbc:	28800226 	beq	r5,r2,2002bc8 <_fclose_r+0x84>
 2002bc0:	8809883a 	mov	r4,r17
 2002bc4:	200221c0 	call	200221c <_free_r>
 2002bc8:	80000c15 	stw	zero,48(r16)
 2002bcc:	81401117 	ldw	r5,68(r16)
 2002bd0:	28000326 	beq	r5,zero,2002be0 <_fclose_r+0x9c>
 2002bd4:	8809883a 	mov	r4,r17
 2002bd8:	200221c0 	call	200221c <_free_r>
 2002bdc:	80001115 	stw	zero,68(r16)
 2002be0:	8000030d 	sth	zero,12(r16)
 2002be4:	20020bc0 	call	20020bc <__sfp_lock_release>
 2002be8:	9005883a 	mov	r2,r18
 2002bec:	dfc00317 	ldw	ra,12(sp)
 2002bf0:	dc800217 	ldw	r18,8(sp)
 2002bf4:	dc400117 	ldw	r17,4(sp)
 2002bf8:	dc000017 	ldw	r16,0(sp)
 2002bfc:	dec00404 	addi	sp,sp,16
 2002c00:	f800283a 	ret
 2002c04:	20020bc0 	call	20020bc <__sfp_lock_release>
 2002c08:	0005883a 	mov	r2,zero
 2002c0c:	003ff706 	br	2002bec <__alt_mem_onchip_memory2_0+0xfdff2bec>
 2002c10:	0005883a 	mov	r2,zero
 2002c14:	f800283a 	ret
 2002c18:	8809883a 	mov	r4,r17
 2002c1c:	20020a80 	call	20020a8 <__sinit>
 2002c20:	8080030f 	ldh	r2,12(r16)
 2002c24:	103fd51e 	bne	r2,zero,2002b7c <__alt_mem_onchip_memory2_0+0xfdff2b7c>
 2002c28:	003ff606 	br	2002c04 <__alt_mem_onchip_memory2_0+0xfdff2c04>
 2002c2c:	81400417 	ldw	r5,16(r16)
 2002c30:	8809883a 	mov	r4,r17
 2002c34:	200221c0 	call	200221c <_free_r>
 2002c38:	003fdd06 	br	2002bb0 <__alt_mem_onchip_memory2_0+0xfdff2bb0>
 2002c3c:	04bfffc4 	movi	r18,-1
 2002c40:	003fd806 	br	2002ba4 <__alt_mem_onchip_memory2_0+0xfdff2ba4>

02002c44 <fclose>:
 2002c44:	00808034 	movhi	r2,512
 2002c48:	109bf004 	addi	r2,r2,28608
 2002c4c:	200b883a 	mov	r5,r4
 2002c50:	11000017 	ldw	r4,0(r2)
 2002c54:	2002b441 	jmpi	2002b44 <_fclose_r>

02002c58 <_fstat_r>:
 2002c58:	defffd04 	addi	sp,sp,-12
 2002c5c:	dc000015 	stw	r16,0(sp)
 2002c60:	04008074 	movhi	r16,513
 2002c64:	dc400115 	stw	r17,4(sp)
 2002c68:	84229b04 	addi	r16,r16,-30100
 2002c6c:	2023883a 	mov	r17,r4
 2002c70:	2809883a 	mov	r4,r5
 2002c74:	300b883a 	mov	r5,r6
 2002c78:	dfc00215 	stw	ra,8(sp)
 2002c7c:	80000015 	stw	zero,0(r16)
 2002c80:	2002f880 	call	2002f88 <fstat>
 2002c84:	00ffffc4 	movi	r3,-1
 2002c88:	10c00526 	beq	r2,r3,2002ca0 <_fstat_r+0x48>
 2002c8c:	dfc00217 	ldw	ra,8(sp)
 2002c90:	dc400117 	ldw	r17,4(sp)
 2002c94:	dc000017 	ldw	r16,0(sp)
 2002c98:	dec00304 	addi	sp,sp,12
 2002c9c:	f800283a 	ret
 2002ca0:	80c00017 	ldw	r3,0(r16)
 2002ca4:	183ff926 	beq	r3,zero,2002c8c <__alt_mem_onchip_memory2_0+0xfdff2c8c>
 2002ca8:	88c00015 	stw	r3,0(r17)
 2002cac:	003ff706 	br	2002c8c <__alt_mem_onchip_memory2_0+0xfdff2c8c>

02002cb0 <_isatty_r>:
 2002cb0:	defffd04 	addi	sp,sp,-12
 2002cb4:	dc000015 	stw	r16,0(sp)
 2002cb8:	04008074 	movhi	r16,513
 2002cbc:	dc400115 	stw	r17,4(sp)
 2002cc0:	84229b04 	addi	r16,r16,-30100
 2002cc4:	2023883a 	mov	r17,r4
 2002cc8:	2809883a 	mov	r4,r5
 2002ccc:	dfc00215 	stw	ra,8(sp)
 2002cd0:	80000015 	stw	zero,0(r16)
 2002cd4:	20030900 	call	2003090 <isatty>
 2002cd8:	00ffffc4 	movi	r3,-1
 2002cdc:	10c00526 	beq	r2,r3,2002cf4 <_isatty_r+0x44>
 2002ce0:	dfc00217 	ldw	ra,8(sp)
 2002ce4:	dc400117 	ldw	r17,4(sp)
 2002ce8:	dc000017 	ldw	r16,0(sp)
 2002cec:	dec00304 	addi	sp,sp,12
 2002cf0:	f800283a 	ret
 2002cf4:	80c00017 	ldw	r3,0(r16)
 2002cf8:	183ff926 	beq	r3,zero,2002ce0 <__alt_mem_onchip_memory2_0+0xfdff2ce0>
 2002cfc:	88c00015 	stw	r3,0(r17)
 2002d00:	003ff706 	br	2002ce0 <__alt_mem_onchip_memory2_0+0xfdff2ce0>

02002d04 <_lseek_r>:
 2002d04:	defffd04 	addi	sp,sp,-12
 2002d08:	dc000015 	stw	r16,0(sp)
 2002d0c:	04008074 	movhi	r16,513
 2002d10:	dc400115 	stw	r17,4(sp)
 2002d14:	84229b04 	addi	r16,r16,-30100
 2002d18:	2023883a 	mov	r17,r4
 2002d1c:	2809883a 	mov	r4,r5
 2002d20:	300b883a 	mov	r5,r6
 2002d24:	380d883a 	mov	r6,r7
 2002d28:	dfc00215 	stw	ra,8(sp)
 2002d2c:	80000015 	stw	zero,0(r16)
 2002d30:	20032700 	call	2003270 <lseek>
 2002d34:	00ffffc4 	movi	r3,-1
 2002d38:	10c00526 	beq	r2,r3,2002d50 <_lseek_r+0x4c>
 2002d3c:	dfc00217 	ldw	ra,8(sp)
 2002d40:	dc400117 	ldw	r17,4(sp)
 2002d44:	dc000017 	ldw	r16,0(sp)
 2002d48:	dec00304 	addi	sp,sp,12
 2002d4c:	f800283a 	ret
 2002d50:	80c00017 	ldw	r3,0(r16)
 2002d54:	183ff926 	beq	r3,zero,2002d3c <__alt_mem_onchip_memory2_0+0xfdff2d3c>
 2002d58:	88c00015 	stw	r3,0(r17)
 2002d5c:	003ff706 	br	2002d3c <__alt_mem_onchip_memory2_0+0xfdff2d3c>

02002d60 <_read_r>:
 2002d60:	defffd04 	addi	sp,sp,-12
 2002d64:	dc000015 	stw	r16,0(sp)
 2002d68:	04008074 	movhi	r16,513
 2002d6c:	dc400115 	stw	r17,4(sp)
 2002d70:	84229b04 	addi	r16,r16,-30100
 2002d74:	2023883a 	mov	r17,r4
 2002d78:	2809883a 	mov	r4,r5
 2002d7c:	300b883a 	mov	r5,r6
 2002d80:	380d883a 	mov	r6,r7
 2002d84:	dfc00215 	stw	ra,8(sp)
 2002d88:	80000015 	stw	zero,0(r16)
 2002d8c:	20034540 	call	2003454 <read>
 2002d90:	00ffffc4 	movi	r3,-1
 2002d94:	10c00526 	beq	r2,r3,2002dac <_read_r+0x4c>
 2002d98:	dfc00217 	ldw	ra,8(sp)
 2002d9c:	dc400117 	ldw	r17,4(sp)
 2002da0:	dc000017 	ldw	r16,0(sp)
 2002da4:	dec00304 	addi	sp,sp,12
 2002da8:	f800283a 	ret
 2002dac:	80c00017 	ldw	r3,0(r16)
 2002db0:	183ff926 	beq	r3,zero,2002d98 <__alt_mem_onchip_memory2_0+0xfdff2d98>
 2002db4:	88c00015 	stw	r3,0(r17)
 2002db8:	003ff706 	br	2002d98 <__alt_mem_onchip_memory2_0+0xfdff2d98>

02002dbc <__mulsi3>:
 2002dbc:	0005883a 	mov	r2,zero
 2002dc0:	20000726 	beq	r4,zero,2002de0 <__mulsi3+0x24>
 2002dc4:	20c0004c 	andi	r3,r4,1
 2002dc8:	2008d07a 	srli	r4,r4,1
 2002dcc:	18000126 	beq	r3,zero,2002dd4 <__mulsi3+0x18>
 2002dd0:	1145883a 	add	r2,r2,r5
 2002dd4:	294b883a 	add	r5,r5,r5
 2002dd8:	203ffa1e 	bne	r4,zero,2002dc4 <__alt_mem_onchip_memory2_0+0xfdff2dc4>
 2002ddc:	f800283a 	ret
 2002de0:	f800283a 	ret

02002de4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002de4:	defffe04 	addi	sp,sp,-8
 2002de8:	dfc00115 	stw	ra,4(sp)
 2002dec:	df000015 	stw	fp,0(sp)
 2002df0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002df4:	00808034 	movhi	r2,512
 2002df8:	109bf804 	addi	r2,r2,28640
 2002dfc:	10800017 	ldw	r2,0(r2)
 2002e00:	10000526 	beq	r2,zero,2002e18 <alt_get_errno+0x34>
 2002e04:	00808034 	movhi	r2,512
 2002e08:	109bf804 	addi	r2,r2,28640
 2002e0c:	10800017 	ldw	r2,0(r2)
 2002e10:	103ee83a 	callr	r2
 2002e14:	00000206 	br	2002e20 <alt_get_errno+0x3c>
 2002e18:	00808074 	movhi	r2,513
 2002e1c:	10a29b04 	addi	r2,r2,-30100
}
 2002e20:	e037883a 	mov	sp,fp
 2002e24:	dfc00117 	ldw	ra,4(sp)
 2002e28:	df000017 	ldw	fp,0(sp)
 2002e2c:	dec00204 	addi	sp,sp,8
 2002e30:	f800283a 	ret

02002e34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2002e34:	defffb04 	addi	sp,sp,-20
 2002e38:	dfc00415 	stw	ra,16(sp)
 2002e3c:	df000315 	stw	fp,12(sp)
 2002e40:	df000304 	addi	fp,sp,12
 2002e44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2002e48:	e0bfff17 	ldw	r2,-4(fp)
 2002e4c:	10000816 	blt	r2,zero,2002e70 <close+0x3c>
 2002e50:	e13fff17 	ldw	r4,-4(fp)
 2002e54:	01400304 	movi	r5,12
 2002e58:	2002dbc0 	call	2002dbc <__mulsi3>
 2002e5c:	1007883a 	mov	r3,r2
 2002e60:	00808034 	movhi	r2,512
 2002e64:	10977704 	addi	r2,r2,24028
 2002e68:	1885883a 	add	r2,r3,r2
 2002e6c:	00000106 	br	2002e74 <close+0x40>
 2002e70:	0005883a 	mov	r2,zero
 2002e74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2002e78:	e0bffd17 	ldw	r2,-12(fp)
 2002e7c:	10001926 	beq	r2,zero,2002ee4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2002e80:	e0bffd17 	ldw	r2,-12(fp)
 2002e84:	10800017 	ldw	r2,0(r2)
 2002e88:	10800417 	ldw	r2,16(r2)
 2002e8c:	10000626 	beq	r2,zero,2002ea8 <close+0x74>
 2002e90:	e0bffd17 	ldw	r2,-12(fp)
 2002e94:	10800017 	ldw	r2,0(r2)
 2002e98:	10800417 	ldw	r2,16(r2)
 2002e9c:	e13ffd17 	ldw	r4,-12(fp)
 2002ea0:	103ee83a 	callr	r2
 2002ea4:	00000106 	br	2002eac <close+0x78>
 2002ea8:	0005883a 	mov	r2,zero
 2002eac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2002eb0:	e13fff17 	ldw	r4,-4(fp)
 2002eb4:	20035580 	call	2003558 <alt_release_fd>
    if (rval < 0)
 2002eb8:	e0bffe17 	ldw	r2,-8(fp)
 2002ebc:	1000070e 	bge	r2,zero,2002edc <close+0xa8>
    {
      ALT_ERRNO = -rval;
 2002ec0:	2002de40 	call	2002de4 <alt_get_errno>
 2002ec4:	1007883a 	mov	r3,r2
 2002ec8:	e0bffe17 	ldw	r2,-8(fp)
 2002ecc:	0085c83a 	sub	r2,zero,r2
 2002ed0:	18800015 	stw	r2,0(r3)
      return -1;
 2002ed4:	00bfffc4 	movi	r2,-1
 2002ed8:	00000706 	br	2002ef8 <close+0xc4>
    }
    return 0;
 2002edc:	0005883a 	mov	r2,zero
 2002ee0:	00000506 	br	2002ef8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002ee4:	2002de40 	call	2002de4 <alt_get_errno>
 2002ee8:	1007883a 	mov	r3,r2
 2002eec:	00801444 	movi	r2,81
 2002ef0:	18800015 	stw	r2,0(r3)
    return -1;
 2002ef4:	00bfffc4 	movi	r2,-1
  }
}
 2002ef8:	e037883a 	mov	sp,fp
 2002efc:	dfc00117 	ldw	ra,4(sp)
 2002f00:	df000017 	ldw	fp,0(sp)
 2002f04:	dec00204 	addi	sp,sp,8
 2002f08:	f800283a 	ret

02002f0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2002f0c:	defffc04 	addi	sp,sp,-16
 2002f10:	df000315 	stw	fp,12(sp)
 2002f14:	df000304 	addi	fp,sp,12
 2002f18:	e13ffd15 	stw	r4,-12(fp)
 2002f1c:	e17ffe15 	stw	r5,-8(fp)
 2002f20:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2002f24:	e0bfff17 	ldw	r2,-4(fp)
}
 2002f28:	e037883a 	mov	sp,fp
 2002f2c:	df000017 	ldw	fp,0(sp)
 2002f30:	dec00104 	addi	sp,sp,4
 2002f34:	f800283a 	ret

02002f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002f38:	defffe04 	addi	sp,sp,-8
 2002f3c:	dfc00115 	stw	ra,4(sp)
 2002f40:	df000015 	stw	fp,0(sp)
 2002f44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002f48:	00808034 	movhi	r2,512
 2002f4c:	109bf804 	addi	r2,r2,28640
 2002f50:	10800017 	ldw	r2,0(r2)
 2002f54:	10000526 	beq	r2,zero,2002f6c <alt_get_errno+0x34>
 2002f58:	00808034 	movhi	r2,512
 2002f5c:	109bf804 	addi	r2,r2,28640
 2002f60:	10800017 	ldw	r2,0(r2)
 2002f64:	103ee83a 	callr	r2
 2002f68:	00000206 	br	2002f74 <alt_get_errno+0x3c>
 2002f6c:	00808074 	movhi	r2,513
 2002f70:	10a29b04 	addi	r2,r2,-30100
}
 2002f74:	e037883a 	mov	sp,fp
 2002f78:	dfc00117 	ldw	ra,4(sp)
 2002f7c:	df000017 	ldw	fp,0(sp)
 2002f80:	dec00204 	addi	sp,sp,8
 2002f84:	f800283a 	ret

02002f88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2002f88:	defffb04 	addi	sp,sp,-20
 2002f8c:	dfc00415 	stw	ra,16(sp)
 2002f90:	df000315 	stw	fp,12(sp)
 2002f94:	df000304 	addi	fp,sp,12
 2002f98:	e13ffe15 	stw	r4,-8(fp)
 2002f9c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2002fa0:	e0bffe17 	ldw	r2,-8(fp)
 2002fa4:	10000816 	blt	r2,zero,2002fc8 <fstat+0x40>
 2002fa8:	e13ffe17 	ldw	r4,-8(fp)
 2002fac:	01400304 	movi	r5,12
 2002fb0:	2002dbc0 	call	2002dbc <__mulsi3>
 2002fb4:	1007883a 	mov	r3,r2
 2002fb8:	00808034 	movhi	r2,512
 2002fbc:	10977704 	addi	r2,r2,24028
 2002fc0:	1885883a 	add	r2,r3,r2
 2002fc4:	00000106 	br	2002fcc <fstat+0x44>
 2002fc8:	0005883a 	mov	r2,zero
 2002fcc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2002fd0:	e0bffd17 	ldw	r2,-12(fp)
 2002fd4:	10001026 	beq	r2,zero,2003018 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2002fd8:	e0bffd17 	ldw	r2,-12(fp)
 2002fdc:	10800017 	ldw	r2,0(r2)
 2002fe0:	10800817 	ldw	r2,32(r2)
 2002fe4:	10000726 	beq	r2,zero,2003004 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 2002fe8:	e0bffd17 	ldw	r2,-12(fp)
 2002fec:	10800017 	ldw	r2,0(r2)
 2002ff0:	10800817 	ldw	r2,32(r2)
 2002ff4:	e13ffd17 	ldw	r4,-12(fp)
 2002ff8:	e17fff17 	ldw	r5,-4(fp)
 2002ffc:	103ee83a 	callr	r2
 2003000:	00000a06 	br	200302c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2003004:	e0bfff17 	ldw	r2,-4(fp)
 2003008:	00c80004 	movi	r3,8192
 200300c:	10c00115 	stw	r3,4(r2)
      return 0;
 2003010:	0005883a 	mov	r2,zero
 2003014:	00000506 	br	200302c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2003018:	2002f380 	call	2002f38 <alt_get_errno>
 200301c:	1007883a 	mov	r3,r2
 2003020:	00801444 	movi	r2,81
 2003024:	18800015 	stw	r2,0(r3)
    return -1;
 2003028:	00bfffc4 	movi	r2,-1
  }
}
 200302c:	e037883a 	mov	sp,fp
 2003030:	dfc00117 	ldw	ra,4(sp)
 2003034:	df000017 	ldw	fp,0(sp)
 2003038:	dec00204 	addi	sp,sp,8
 200303c:	f800283a 	ret

02003040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003040:	defffe04 	addi	sp,sp,-8
 2003044:	dfc00115 	stw	ra,4(sp)
 2003048:	df000015 	stw	fp,0(sp)
 200304c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003050:	00808034 	movhi	r2,512
 2003054:	109bf804 	addi	r2,r2,28640
 2003058:	10800017 	ldw	r2,0(r2)
 200305c:	10000526 	beq	r2,zero,2003074 <alt_get_errno+0x34>
 2003060:	00808034 	movhi	r2,512
 2003064:	109bf804 	addi	r2,r2,28640
 2003068:	10800017 	ldw	r2,0(r2)
 200306c:	103ee83a 	callr	r2
 2003070:	00000206 	br	200307c <alt_get_errno+0x3c>
 2003074:	00808074 	movhi	r2,513
 2003078:	10a29b04 	addi	r2,r2,-30100
}
 200307c:	e037883a 	mov	sp,fp
 2003080:	dfc00117 	ldw	ra,4(sp)
 2003084:	df000017 	ldw	fp,0(sp)
 2003088:	dec00204 	addi	sp,sp,8
 200308c:	f800283a 	ret

02003090 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2003090:	deffed04 	addi	sp,sp,-76
 2003094:	dfc01215 	stw	ra,72(sp)
 2003098:	df001115 	stw	fp,68(sp)
 200309c:	df001104 	addi	fp,sp,68
 20030a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20030a4:	e0bfff17 	ldw	r2,-4(fp)
 20030a8:	10000816 	blt	r2,zero,20030cc <isatty+0x3c>
 20030ac:	e13fff17 	ldw	r4,-4(fp)
 20030b0:	01400304 	movi	r5,12
 20030b4:	2002dbc0 	call	2002dbc <__mulsi3>
 20030b8:	1007883a 	mov	r3,r2
 20030bc:	00808034 	movhi	r2,512
 20030c0:	10977704 	addi	r2,r2,24028
 20030c4:	1885883a 	add	r2,r3,r2
 20030c8:	00000106 	br	20030d0 <isatty+0x40>
 20030cc:	0005883a 	mov	r2,zero
 20030d0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 20030d4:	e0bfef17 	ldw	r2,-68(fp)
 20030d8:	10000e26 	beq	r2,zero,2003114 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 20030dc:	e0bfef17 	ldw	r2,-68(fp)
 20030e0:	10800017 	ldw	r2,0(r2)
 20030e4:	10800817 	ldw	r2,32(r2)
 20030e8:	1000021e 	bne	r2,zero,20030f4 <isatty+0x64>
    {
      return 1;
 20030ec:	00800044 	movi	r2,1
 20030f0:	00000d06 	br	2003128 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 20030f4:	e0bff004 	addi	r2,fp,-64
 20030f8:	e13fff17 	ldw	r4,-4(fp)
 20030fc:	100b883a 	mov	r5,r2
 2003100:	2002f880 	call	2002f88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2003104:	e0bff117 	ldw	r2,-60(fp)
 2003108:	10880020 	cmpeqi	r2,r2,8192
 200310c:	10803fcc 	andi	r2,r2,255
 2003110:	00000506 	br	2003128 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2003114:	20030400 	call	2003040 <alt_get_errno>
 2003118:	1007883a 	mov	r3,r2
 200311c:	00801444 	movi	r2,81
 2003120:	18800015 	stw	r2,0(r3)
    return 0;
 2003124:	0005883a 	mov	r2,zero
  }
}
 2003128:	e037883a 	mov	sp,fp
 200312c:	dfc00117 	ldw	ra,4(sp)
 2003130:	df000017 	ldw	fp,0(sp)
 2003134:	dec00204 	addi	sp,sp,8
 2003138:	f800283a 	ret

0200313c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200313c:	defffc04 	addi	sp,sp,-16
 2003140:	df000315 	stw	fp,12(sp)
 2003144:	df000304 	addi	fp,sp,12
 2003148:	e13ffd15 	stw	r4,-12(fp)
 200314c:	e17ffe15 	stw	r5,-8(fp)
 2003150:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2003154:	e0fffe17 	ldw	r3,-8(fp)
 2003158:	e0bffd17 	ldw	r2,-12(fp)
 200315c:	18800c26 	beq	r3,r2,2003190 <alt_load_section+0x54>
  {
    while( to != end )
 2003160:	00000806 	br	2003184 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2003164:	e0bffe17 	ldw	r2,-8(fp)
 2003168:	10c00104 	addi	r3,r2,4
 200316c:	e0fffe15 	stw	r3,-8(fp)
 2003170:	e0fffd17 	ldw	r3,-12(fp)
 2003174:	19000104 	addi	r4,r3,4
 2003178:	e13ffd15 	stw	r4,-12(fp)
 200317c:	18c00017 	ldw	r3,0(r3)
 2003180:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2003184:	e0fffe17 	ldw	r3,-8(fp)
 2003188:	e0bfff17 	ldw	r2,-4(fp)
 200318c:	18bff51e 	bne	r3,r2,2003164 <__alt_mem_onchip_memory2_0+0xfdff3164>
    {
      *to++ = *from++;
    }
  }
}
 2003190:	e037883a 	mov	sp,fp
 2003194:	df000017 	ldw	fp,0(sp)
 2003198:	dec00104 	addi	sp,sp,4
 200319c:	f800283a 	ret

020031a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 20031a0:	defffe04 	addi	sp,sp,-8
 20031a4:	dfc00115 	stw	ra,4(sp)
 20031a8:	df000015 	stw	fp,0(sp)
 20031ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 20031b0:	01008034 	movhi	r4,512
 20031b4:	211bfd04 	addi	r4,r4,28660
 20031b8:	01408034 	movhi	r5,512
 20031bc:	29556204 	addi	r5,r5,21896
 20031c0:	01808034 	movhi	r6,512
 20031c4:	319bfd04 	addi	r6,r6,28660
 20031c8:	200313c0 	call	200313c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 20031cc:	01008034 	movhi	r4,512
 20031d0:	21000804 	addi	r4,r4,32
 20031d4:	01408034 	movhi	r5,512
 20031d8:	29400804 	addi	r5,r5,32
 20031dc:	01808034 	movhi	r6,512
 20031e0:	31808b04 	addi	r6,r6,556
 20031e4:	200313c0 	call	200313c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 20031e8:	01008034 	movhi	r4,512
 20031ec:	21154e04 	addi	r4,r4,21816
 20031f0:	01408034 	movhi	r5,512
 20031f4:	29554e04 	addi	r5,r5,21816
 20031f8:	01808034 	movhi	r6,512
 20031fc:	31956204 	addi	r6,r6,21896
 2003200:	200313c0 	call	200313c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2003204:	20044140 	call	2004414 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2003208:	20045dc0 	call	20045dc <alt_icache_flush_all>
}
 200320c:	e037883a 	mov	sp,fp
 2003210:	dfc00117 	ldw	ra,4(sp)
 2003214:	df000017 	ldw	fp,0(sp)
 2003218:	dec00204 	addi	sp,sp,8
 200321c:	f800283a 	ret

02003220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003220:	defffe04 	addi	sp,sp,-8
 2003224:	dfc00115 	stw	ra,4(sp)
 2003228:	df000015 	stw	fp,0(sp)
 200322c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003230:	00808034 	movhi	r2,512
 2003234:	109bf804 	addi	r2,r2,28640
 2003238:	10800017 	ldw	r2,0(r2)
 200323c:	10000526 	beq	r2,zero,2003254 <alt_get_errno+0x34>
 2003240:	00808034 	movhi	r2,512
 2003244:	109bf804 	addi	r2,r2,28640
 2003248:	10800017 	ldw	r2,0(r2)
 200324c:	103ee83a 	callr	r2
 2003250:	00000206 	br	200325c <alt_get_errno+0x3c>
 2003254:	00808074 	movhi	r2,513
 2003258:	10a29b04 	addi	r2,r2,-30100
}
 200325c:	e037883a 	mov	sp,fp
 2003260:	dfc00117 	ldw	ra,4(sp)
 2003264:	df000017 	ldw	fp,0(sp)
 2003268:	dec00204 	addi	sp,sp,8
 200326c:	f800283a 	ret

02003270 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2003270:	defff904 	addi	sp,sp,-28
 2003274:	dfc00615 	stw	ra,24(sp)
 2003278:	df000515 	stw	fp,20(sp)
 200327c:	df000504 	addi	fp,sp,20
 2003280:	e13ffd15 	stw	r4,-12(fp)
 2003284:	e17ffe15 	stw	r5,-8(fp)
 2003288:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200328c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003290:	e0bffd17 	ldw	r2,-12(fp)
 2003294:	10000816 	blt	r2,zero,20032b8 <lseek+0x48>
 2003298:	e13ffd17 	ldw	r4,-12(fp)
 200329c:	01400304 	movi	r5,12
 20032a0:	2002dbc0 	call	2002dbc <__mulsi3>
 20032a4:	1007883a 	mov	r3,r2
 20032a8:	00808034 	movhi	r2,512
 20032ac:	10977704 	addi	r2,r2,24028
 20032b0:	1885883a 	add	r2,r3,r2
 20032b4:	00000106 	br	20032bc <lseek+0x4c>
 20032b8:	0005883a 	mov	r2,zero
 20032bc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 20032c0:	e0bffc17 	ldw	r2,-16(fp)
 20032c4:	10001026 	beq	r2,zero,2003308 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 20032c8:	e0bffc17 	ldw	r2,-16(fp)
 20032cc:	10800017 	ldw	r2,0(r2)
 20032d0:	10800717 	ldw	r2,28(r2)
 20032d4:	10000926 	beq	r2,zero,20032fc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 20032d8:	e0bffc17 	ldw	r2,-16(fp)
 20032dc:	10800017 	ldw	r2,0(r2)
 20032e0:	10800717 	ldw	r2,28(r2)
 20032e4:	e13ffc17 	ldw	r4,-16(fp)
 20032e8:	e17ffe17 	ldw	r5,-8(fp)
 20032ec:	e1bfff17 	ldw	r6,-4(fp)
 20032f0:	103ee83a 	callr	r2
 20032f4:	e0bffb15 	stw	r2,-20(fp)
 20032f8:	00000506 	br	2003310 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 20032fc:	00bfde84 	movi	r2,-134
 2003300:	e0bffb15 	stw	r2,-20(fp)
 2003304:	00000206 	br	2003310 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 2003308:	00bfebc4 	movi	r2,-81
 200330c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2003310:	e0bffb17 	ldw	r2,-20(fp)
 2003314:	1000070e 	bge	r2,zero,2003334 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 2003318:	20032200 	call	2003220 <alt_get_errno>
 200331c:	1007883a 	mov	r3,r2
 2003320:	e0bffb17 	ldw	r2,-20(fp)
 2003324:	0085c83a 	sub	r2,zero,r2
 2003328:	18800015 	stw	r2,0(r3)
    rc = -1;
 200332c:	00bfffc4 	movi	r2,-1
 2003330:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2003334:	e0bffb17 	ldw	r2,-20(fp)
}
 2003338:	e037883a 	mov	sp,fp
 200333c:	dfc00117 	ldw	ra,4(sp)
 2003340:	df000017 	ldw	fp,0(sp)
 2003344:	dec00204 	addi	sp,sp,8
 2003348:	f800283a 	ret

0200334c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200334c:	defffd04 	addi	sp,sp,-12
 2003350:	dfc00215 	stw	ra,8(sp)
 2003354:	df000115 	stw	fp,4(sp)
 2003358:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200335c:	0009883a 	mov	r4,zero
 2003360:	20038100 	call	2003810 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2003364:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2003368:	20038440 	call	2003844 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200336c:	01008034 	movhi	r4,512
 2003370:	21155804 	addi	r4,r4,21856
 2003374:	01408034 	movhi	r5,512
 2003378:	29555804 	addi	r5,r5,21856
 200337c:	01808034 	movhi	r6,512
 2003380:	31955804 	addi	r6,r6,21856
 2003384:	20049a80 	call	20049a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2003388:	20045240 	call	2004524 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200338c:	01008034 	movhi	r4,512
 2003390:	21116004 	addi	r4,r4,17792
 2003394:	20051940 	call	2005194 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2003398:	d126ad17 	ldw	r4,-25932(gp)
 200339c:	d0e6ae17 	ldw	r3,-25928(gp)
 20033a0:	d0a6af17 	ldw	r2,-25924(gp)
 20033a4:	180b883a 	mov	r5,r3
 20033a8:	100d883a 	mov	r6,r2
 20033ac:	20002680 	call	2000268 <main>
 20033b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 20033b4:	01000044 	movi	r4,1
 20033b8:	2002e340 	call	2002e34 <close>
  exit (result);
 20033bc:	e13fff17 	ldw	r4,-4(fp)
 20033c0:	20051a80 	call	20051a8 <exit>

020033c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 20033c4:	defffe04 	addi	sp,sp,-8
 20033c8:	df000115 	stw	fp,4(sp)
 20033cc:	df000104 	addi	fp,sp,4
 20033d0:	e13fff15 	stw	r4,-4(fp)
}
 20033d4:	e037883a 	mov	sp,fp
 20033d8:	df000017 	ldw	fp,0(sp)
 20033dc:	dec00104 	addi	sp,sp,4
 20033e0:	f800283a 	ret

020033e4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 20033e4:	defffe04 	addi	sp,sp,-8
 20033e8:	df000115 	stw	fp,4(sp)
 20033ec:	df000104 	addi	fp,sp,4
 20033f0:	e13fff15 	stw	r4,-4(fp)
}
 20033f4:	e037883a 	mov	sp,fp
 20033f8:	df000017 	ldw	fp,0(sp)
 20033fc:	dec00104 	addi	sp,sp,4
 2003400:	f800283a 	ret

02003404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003404:	defffe04 	addi	sp,sp,-8
 2003408:	dfc00115 	stw	ra,4(sp)
 200340c:	df000015 	stw	fp,0(sp)
 2003410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003414:	00808034 	movhi	r2,512
 2003418:	109bf804 	addi	r2,r2,28640
 200341c:	10800017 	ldw	r2,0(r2)
 2003420:	10000526 	beq	r2,zero,2003438 <alt_get_errno+0x34>
 2003424:	00808034 	movhi	r2,512
 2003428:	109bf804 	addi	r2,r2,28640
 200342c:	10800017 	ldw	r2,0(r2)
 2003430:	103ee83a 	callr	r2
 2003434:	00000206 	br	2003440 <alt_get_errno+0x3c>
 2003438:	00808074 	movhi	r2,513
 200343c:	10a29b04 	addi	r2,r2,-30100
}
 2003440:	e037883a 	mov	sp,fp
 2003444:	dfc00117 	ldw	ra,4(sp)
 2003448:	df000017 	ldw	fp,0(sp)
 200344c:	dec00204 	addi	sp,sp,8
 2003450:	f800283a 	ret

02003454 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2003454:	defff904 	addi	sp,sp,-28
 2003458:	dfc00615 	stw	ra,24(sp)
 200345c:	df000515 	stw	fp,20(sp)
 2003460:	df000504 	addi	fp,sp,20
 2003464:	e13ffd15 	stw	r4,-12(fp)
 2003468:	e17ffe15 	stw	r5,-8(fp)
 200346c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003470:	e0bffd17 	ldw	r2,-12(fp)
 2003474:	10000816 	blt	r2,zero,2003498 <read+0x44>
 2003478:	e13ffd17 	ldw	r4,-12(fp)
 200347c:	01400304 	movi	r5,12
 2003480:	2002dbc0 	call	2002dbc <__mulsi3>
 2003484:	1007883a 	mov	r3,r2
 2003488:	00808034 	movhi	r2,512
 200348c:	10977704 	addi	r2,r2,24028
 2003490:	1885883a 	add	r2,r3,r2
 2003494:	00000106 	br	200349c <read+0x48>
 2003498:	0005883a 	mov	r2,zero
 200349c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20034a0:	e0bffb17 	ldw	r2,-20(fp)
 20034a4:	10002226 	beq	r2,zero,2003530 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20034a8:	e0bffb17 	ldw	r2,-20(fp)
 20034ac:	10800217 	ldw	r2,8(r2)
 20034b0:	108000cc 	andi	r2,r2,3
 20034b4:	10800060 	cmpeqi	r2,r2,1
 20034b8:	1000181e 	bne	r2,zero,200351c <read+0xc8>
        (fd->dev->read))
 20034bc:	e0bffb17 	ldw	r2,-20(fp)
 20034c0:	10800017 	ldw	r2,0(r2)
 20034c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20034c8:	10001426 	beq	r2,zero,200351c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 20034cc:	e0bffb17 	ldw	r2,-20(fp)
 20034d0:	10800017 	ldw	r2,0(r2)
 20034d4:	10800517 	ldw	r2,20(r2)
 20034d8:	e0ffff17 	ldw	r3,-4(fp)
 20034dc:	e13ffb17 	ldw	r4,-20(fp)
 20034e0:	e17ffe17 	ldw	r5,-8(fp)
 20034e4:	180d883a 	mov	r6,r3
 20034e8:	103ee83a 	callr	r2
 20034ec:	e0bffc15 	stw	r2,-16(fp)
 20034f0:	e0bffc17 	ldw	r2,-16(fp)
 20034f4:	1000070e 	bge	r2,zero,2003514 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 20034f8:	20034040 	call	2003404 <alt_get_errno>
 20034fc:	1007883a 	mov	r3,r2
 2003500:	e0bffc17 	ldw	r2,-16(fp)
 2003504:	0085c83a 	sub	r2,zero,r2
 2003508:	18800015 	stw	r2,0(r3)
          return -1;
 200350c:	00bfffc4 	movi	r2,-1
 2003510:	00000c06 	br	2003544 <read+0xf0>
        }
        return rval;
 2003514:	e0bffc17 	ldw	r2,-16(fp)
 2003518:	00000a06 	br	2003544 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200351c:	20034040 	call	2003404 <alt_get_errno>
 2003520:	1007883a 	mov	r3,r2
 2003524:	00800344 	movi	r2,13
 2003528:	18800015 	stw	r2,0(r3)
 200352c:	00000406 	br	2003540 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2003530:	20034040 	call	2003404 <alt_get_errno>
 2003534:	1007883a 	mov	r3,r2
 2003538:	00801444 	movi	r2,81
 200353c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2003540:	00bfffc4 	movi	r2,-1
}
 2003544:	e037883a 	mov	sp,fp
 2003548:	dfc00117 	ldw	ra,4(sp)
 200354c:	df000017 	ldw	fp,0(sp)
 2003550:	dec00204 	addi	sp,sp,8
 2003554:	f800283a 	ret

02003558 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2003558:	defffc04 	addi	sp,sp,-16
 200355c:	dfc00315 	stw	ra,12(sp)
 2003560:	df000215 	stw	fp,8(sp)
 2003564:	dc000115 	stw	r16,4(sp)
 2003568:	df000204 	addi	fp,sp,8
 200356c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 2003570:	e0bffe17 	ldw	r2,-8(fp)
 2003574:	108000d0 	cmplti	r2,r2,3
 2003578:	1000111e 	bne	r2,zero,20035c0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200357c:	04008034 	movhi	r16,512
 2003580:	84177704 	addi	r16,r16,24028
 2003584:	e0bffe17 	ldw	r2,-8(fp)
 2003588:	1009883a 	mov	r4,r2
 200358c:	01400304 	movi	r5,12
 2003590:	2002dbc0 	call	2002dbc <__mulsi3>
 2003594:	8085883a 	add	r2,r16,r2
 2003598:	10800204 	addi	r2,r2,8
 200359c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 20035a0:	04008034 	movhi	r16,512
 20035a4:	84177704 	addi	r16,r16,24028
 20035a8:	e0bffe17 	ldw	r2,-8(fp)
 20035ac:	1009883a 	mov	r4,r2
 20035b0:	01400304 	movi	r5,12
 20035b4:	2002dbc0 	call	2002dbc <__mulsi3>
 20035b8:	8085883a 	add	r2,r16,r2
 20035bc:	10000015 	stw	zero,0(r2)
  }
}
 20035c0:	e6ffff04 	addi	sp,fp,-4
 20035c4:	dfc00217 	ldw	ra,8(sp)
 20035c8:	df000117 	ldw	fp,4(sp)
 20035cc:	dc000017 	ldw	r16,0(sp)
 20035d0:	dec00304 	addi	sp,sp,12
 20035d4:	f800283a 	ret

020035d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 20035d8:	defff904 	addi	sp,sp,-28
 20035dc:	df000615 	stw	fp,24(sp)
 20035e0:	df000604 	addi	fp,sp,24
 20035e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20035e8:	0005303a 	rdctl	r2,status
 20035ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20035f0:	e0fffc17 	ldw	r3,-16(fp)
 20035f4:	00bfff84 	movi	r2,-2
 20035f8:	1884703a 	and	r2,r3,r2
 20035fc:	1001703a 	wrctl	status,r2
  
  return context;
 2003600:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2003604:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2003608:	d0a00a17 	ldw	r2,-32728(gp)
 200360c:	10c000c4 	addi	r3,r2,3
 2003610:	00bfff04 	movi	r2,-4
 2003614:	1884703a 	and	r2,r3,r2
 2003618:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200361c:	d0e00a17 	ldw	r3,-32728(gp)
 2003620:	e0bfff17 	ldw	r2,-4(fp)
 2003624:	1887883a 	add	r3,r3,r2
 2003628:	00810034 	movhi	r2,1024
 200362c:	10800004 	addi	r2,r2,0
 2003630:	10c0062e 	bgeu	r2,r3,200364c <sbrk+0x74>
 2003634:	e0bffa17 	ldw	r2,-24(fp)
 2003638:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200363c:	e0bffd17 	ldw	r2,-12(fp)
 2003640:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2003644:	00bfffc4 	movi	r2,-1
 2003648:	00000b06 	br	2003678 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200364c:	d0a00a17 	ldw	r2,-32728(gp)
 2003650:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 2003654:	d0e00a17 	ldw	r3,-32728(gp)
 2003658:	e0bfff17 	ldw	r2,-4(fp)
 200365c:	1885883a 	add	r2,r3,r2
 2003660:	d0a00a15 	stw	r2,-32728(gp)
 2003664:	e0bffa17 	ldw	r2,-24(fp)
 2003668:	e0bffe15 	stw	r2,-8(fp)
 200366c:	e0bffe17 	ldw	r2,-8(fp)
 2003670:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2003674:	e0bffb17 	ldw	r2,-20(fp)
} 
 2003678:	e037883a 	mov	sp,fp
 200367c:	df000017 	ldw	fp,0(sp)
 2003680:	dec00104 	addi	sp,sp,4
 2003684:	f800283a 	ret

02003688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003688:	defffe04 	addi	sp,sp,-8
 200368c:	dfc00115 	stw	ra,4(sp)
 2003690:	df000015 	stw	fp,0(sp)
 2003694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003698:	00808034 	movhi	r2,512
 200369c:	109bf804 	addi	r2,r2,28640
 20036a0:	10800017 	ldw	r2,0(r2)
 20036a4:	10000526 	beq	r2,zero,20036bc <alt_get_errno+0x34>
 20036a8:	00808034 	movhi	r2,512
 20036ac:	109bf804 	addi	r2,r2,28640
 20036b0:	10800017 	ldw	r2,0(r2)
 20036b4:	103ee83a 	callr	r2
 20036b8:	00000206 	br	20036c4 <alt_get_errno+0x3c>
 20036bc:	00808074 	movhi	r2,513
 20036c0:	10a29b04 	addi	r2,r2,-30100
}
 20036c4:	e037883a 	mov	sp,fp
 20036c8:	dfc00117 	ldw	ra,4(sp)
 20036cc:	df000017 	ldw	fp,0(sp)
 20036d0:	dec00204 	addi	sp,sp,8
 20036d4:	f800283a 	ret

020036d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 20036d8:	defff904 	addi	sp,sp,-28
 20036dc:	dfc00615 	stw	ra,24(sp)
 20036e0:	df000515 	stw	fp,20(sp)
 20036e4:	df000504 	addi	fp,sp,20
 20036e8:	e13ffd15 	stw	r4,-12(fp)
 20036ec:	e17ffe15 	stw	r5,-8(fp)
 20036f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20036f4:	e0bffd17 	ldw	r2,-12(fp)
 20036f8:	10000816 	blt	r2,zero,200371c <write+0x44>
 20036fc:	e13ffd17 	ldw	r4,-12(fp)
 2003700:	01400304 	movi	r5,12
 2003704:	2002dbc0 	call	2002dbc <__mulsi3>
 2003708:	1007883a 	mov	r3,r2
 200370c:	00808034 	movhi	r2,512
 2003710:	10977704 	addi	r2,r2,24028
 2003714:	1885883a 	add	r2,r3,r2
 2003718:	00000106 	br	2003720 <write+0x48>
 200371c:	0005883a 	mov	r2,zero
 2003720:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2003724:	e0bffb17 	ldw	r2,-20(fp)
 2003728:	10002126 	beq	r2,zero,20037b0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200372c:	e0bffb17 	ldw	r2,-20(fp)
 2003730:	10800217 	ldw	r2,8(r2)
 2003734:	108000cc 	andi	r2,r2,3
 2003738:	10001826 	beq	r2,zero,200379c <write+0xc4>
 200373c:	e0bffb17 	ldw	r2,-20(fp)
 2003740:	10800017 	ldw	r2,0(r2)
 2003744:	10800617 	ldw	r2,24(r2)
 2003748:	10001426 	beq	r2,zero,200379c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200374c:	e0bffb17 	ldw	r2,-20(fp)
 2003750:	10800017 	ldw	r2,0(r2)
 2003754:	10800617 	ldw	r2,24(r2)
 2003758:	e0ffff17 	ldw	r3,-4(fp)
 200375c:	e13ffb17 	ldw	r4,-20(fp)
 2003760:	e17ffe17 	ldw	r5,-8(fp)
 2003764:	180d883a 	mov	r6,r3
 2003768:	103ee83a 	callr	r2
 200376c:	e0bffc15 	stw	r2,-16(fp)
 2003770:	e0bffc17 	ldw	r2,-16(fp)
 2003774:	1000070e 	bge	r2,zero,2003794 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 2003778:	20036880 	call	2003688 <alt_get_errno>
 200377c:	1007883a 	mov	r3,r2
 2003780:	e0bffc17 	ldw	r2,-16(fp)
 2003784:	0085c83a 	sub	r2,zero,r2
 2003788:	18800015 	stw	r2,0(r3)
        return -1;
 200378c:	00bfffc4 	movi	r2,-1
 2003790:	00000c06 	br	20037c4 <write+0xec>
      }
      return rval;
 2003794:	e0bffc17 	ldw	r2,-16(fp)
 2003798:	00000a06 	br	20037c4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200379c:	20036880 	call	2003688 <alt_get_errno>
 20037a0:	1007883a 	mov	r3,r2
 20037a4:	00800344 	movi	r2,13
 20037a8:	18800015 	stw	r2,0(r3)
 20037ac:	00000406 	br	20037c0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 20037b0:	20036880 	call	2003688 <alt_get_errno>
 20037b4:	1007883a 	mov	r3,r2
 20037b8:	00801444 	movi	r2,81
 20037bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20037c0:	00bfffc4 	movi	r2,-1
}
 20037c4:	e037883a 	mov	sp,fp
 20037c8:	dfc00117 	ldw	ra,4(sp)
 20037cc:	df000017 	ldw	fp,0(sp)
 20037d0:	dec00204 	addi	sp,sp,8
 20037d4:	f800283a 	ret

020037d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20037d8:	defffd04 	addi	sp,sp,-12
 20037dc:	dfc00215 	stw	ra,8(sp)
 20037e0:	df000115 	stw	fp,4(sp)
 20037e4:	df000104 	addi	fp,sp,4
 20037e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20037ec:	e13fff17 	ldw	r4,-4(fp)
 20037f0:	01408034 	movhi	r5,512
 20037f4:	295bf504 	addi	r5,r5,28628
 20037f8:	20044800 	call	2004480 <alt_dev_llist_insert>
}
 20037fc:	e037883a 	mov	sp,fp
 2003800:	dfc00117 	ldw	ra,4(sp)
 2003804:	df000017 	ldw	fp,0(sp)
 2003808:	dec00204 	addi	sp,sp,8
 200380c:	f800283a 	ret

02003810 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2003810:	defffd04 	addi	sp,sp,-12
 2003814:	dfc00215 	stw	ra,8(sp)
 2003818:	df000115 	stw	fp,4(sp)
 200381c:	df000104 	addi	fp,sp,4
 2003820:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 2003824:	2004e600 	call	2004e60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2003828:	00800044 	movi	r2,1
 200382c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2003830:	e037883a 	mov	sp,fp
 2003834:	dfc00117 	ldw	ra,4(sp)
 2003838:	df000017 	ldw	fp,0(sp)
 200383c:	dec00204 	addi	sp,sp,8
 2003840:	f800283a 	ret

02003844 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2003844:	defffe04 	addi	sp,sp,-8
 2003848:	dfc00115 	stw	ra,4(sp)
 200384c:	df000015 	stw	fp,0(sp)
 2003850:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 2003854:	01008034 	movhi	r4,512
 2003858:	2117e104 	addi	r4,r4,24452
 200385c:	000b883a 	mov	r5,zero
 2003860:	000d883a 	mov	r6,zero
 2003864:	20039ec0 	call	20039ec <altera_avalon_jtag_uart_init>
 2003868:	01008034 	movhi	r4,512
 200386c:	2117d704 	addi	r4,r4,24412
 2003870:	20037d80 	call	20037d8 <alt_dev_reg>
}
 2003874:	e037883a 	mov	sp,fp
 2003878:	dfc00117 	ldw	ra,4(sp)
 200387c:	df000017 	ldw	fp,0(sp)
 2003880:	dec00204 	addi	sp,sp,8
 2003884:	f800283a 	ret

02003888 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2003888:	defffa04 	addi	sp,sp,-24
 200388c:	dfc00515 	stw	ra,20(sp)
 2003890:	df000415 	stw	fp,16(sp)
 2003894:	df000404 	addi	fp,sp,16
 2003898:	e13ffd15 	stw	r4,-12(fp)
 200389c:	e17ffe15 	stw	r5,-8(fp)
 20038a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20038a4:	e0bffd17 	ldw	r2,-12(fp)
 20038a8:	10800017 	ldw	r2,0(r2)
 20038ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20038b0:	e0bffc17 	ldw	r2,-16(fp)
 20038b4:	10c00a04 	addi	r3,r2,40
 20038b8:	e0bffd17 	ldw	r2,-12(fp)
 20038bc:	10800217 	ldw	r2,8(r2)
 20038c0:	1809883a 	mov	r4,r3
 20038c4:	e17ffe17 	ldw	r5,-8(fp)
 20038c8:	e1bfff17 	ldw	r6,-4(fp)
 20038cc:	100f883a 	mov	r7,r2
 20038d0:	2003eb00 	call	2003eb0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20038d4:	e037883a 	mov	sp,fp
 20038d8:	dfc00117 	ldw	ra,4(sp)
 20038dc:	df000017 	ldw	fp,0(sp)
 20038e0:	dec00204 	addi	sp,sp,8
 20038e4:	f800283a 	ret

020038e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20038e8:	defffa04 	addi	sp,sp,-24
 20038ec:	dfc00515 	stw	ra,20(sp)
 20038f0:	df000415 	stw	fp,16(sp)
 20038f4:	df000404 	addi	fp,sp,16
 20038f8:	e13ffd15 	stw	r4,-12(fp)
 20038fc:	e17ffe15 	stw	r5,-8(fp)
 2003900:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003904:	e0bffd17 	ldw	r2,-12(fp)
 2003908:	10800017 	ldw	r2,0(r2)
 200390c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2003910:	e0bffc17 	ldw	r2,-16(fp)
 2003914:	10c00a04 	addi	r3,r2,40
 2003918:	e0bffd17 	ldw	r2,-12(fp)
 200391c:	10800217 	ldw	r2,8(r2)
 2003920:	1809883a 	mov	r4,r3
 2003924:	e17ffe17 	ldw	r5,-8(fp)
 2003928:	e1bfff17 	ldw	r6,-4(fp)
 200392c:	100f883a 	mov	r7,r2
 2003930:	20040bc0 	call	20040bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2003934:	e037883a 	mov	sp,fp
 2003938:	dfc00117 	ldw	ra,4(sp)
 200393c:	df000017 	ldw	fp,0(sp)
 2003940:	dec00204 	addi	sp,sp,8
 2003944:	f800283a 	ret

02003948 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2003948:	defffc04 	addi	sp,sp,-16
 200394c:	dfc00315 	stw	ra,12(sp)
 2003950:	df000215 	stw	fp,8(sp)
 2003954:	df000204 	addi	fp,sp,8
 2003958:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200395c:	e0bfff17 	ldw	r2,-4(fp)
 2003960:	10800017 	ldw	r2,0(r2)
 2003964:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2003968:	e0bffe17 	ldw	r2,-8(fp)
 200396c:	10c00a04 	addi	r3,r2,40
 2003970:	e0bfff17 	ldw	r2,-4(fp)
 2003974:	10800217 	ldw	r2,8(r2)
 2003978:	1809883a 	mov	r4,r3
 200397c:	100b883a 	mov	r5,r2
 2003980:	2003d5c0 	call	2003d5c <altera_avalon_jtag_uart_close>
}
 2003984:	e037883a 	mov	sp,fp
 2003988:	dfc00117 	ldw	ra,4(sp)
 200398c:	df000017 	ldw	fp,0(sp)
 2003990:	dec00204 	addi	sp,sp,8
 2003994:	f800283a 	ret

02003998 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2003998:	defffa04 	addi	sp,sp,-24
 200399c:	dfc00515 	stw	ra,20(sp)
 20039a0:	df000415 	stw	fp,16(sp)
 20039a4:	df000404 	addi	fp,sp,16
 20039a8:	e13ffd15 	stw	r4,-12(fp)
 20039ac:	e17ffe15 	stw	r5,-8(fp)
 20039b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20039b4:	e0bffd17 	ldw	r2,-12(fp)
 20039b8:	10800017 	ldw	r2,0(r2)
 20039bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20039c0:	e0bffc17 	ldw	r2,-16(fp)
 20039c4:	10800a04 	addi	r2,r2,40
 20039c8:	1009883a 	mov	r4,r2
 20039cc:	e17ffe17 	ldw	r5,-8(fp)
 20039d0:	e1bfff17 	ldw	r6,-4(fp)
 20039d4:	2003dc40 	call	2003dc4 <altera_avalon_jtag_uart_ioctl>
}
 20039d8:	e037883a 	mov	sp,fp
 20039dc:	dfc00117 	ldw	ra,4(sp)
 20039e0:	df000017 	ldw	fp,0(sp)
 20039e4:	dec00204 	addi	sp,sp,8
 20039e8:	f800283a 	ret

020039ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 20039ec:	defffa04 	addi	sp,sp,-24
 20039f0:	dfc00515 	stw	ra,20(sp)
 20039f4:	df000415 	stw	fp,16(sp)
 20039f8:	df000404 	addi	fp,sp,16
 20039fc:	e13ffd15 	stw	r4,-12(fp)
 2003a00:	e17ffe15 	stw	r5,-8(fp)
 2003a04:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003a08:	e0bffd17 	ldw	r2,-12(fp)
 2003a0c:	00c00044 	movi	r3,1
 2003a10:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2003a14:	e0bffd17 	ldw	r2,-12(fp)
 2003a18:	10800017 	ldw	r2,0(r2)
 2003a1c:	10800104 	addi	r2,r2,4
 2003a20:	1007883a 	mov	r3,r2
 2003a24:	e0bffd17 	ldw	r2,-12(fp)
 2003a28:	10800817 	ldw	r2,32(r2)
 2003a2c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2003a30:	e0fffe17 	ldw	r3,-8(fp)
 2003a34:	e0bfff17 	ldw	r2,-4(fp)
 2003a38:	d8000015 	stw	zero,0(sp)
 2003a3c:	1809883a 	mov	r4,r3
 2003a40:	100b883a 	mov	r5,r2
 2003a44:	01808034 	movhi	r6,512
 2003a48:	318eac04 	addi	r6,r6,15024
 2003a4c:	e1fffd17 	ldw	r7,-12(fp)
 2003a50:	20045f80 	call	20045f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2003a54:	e0bffd17 	ldw	r2,-12(fp)
 2003a58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2003a5c:	e0bffd17 	ldw	r2,-12(fp)
 2003a60:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2003a64:	00808074 	movhi	r2,513
 2003a68:	10a2a004 	addi	r2,r2,-30080
 2003a6c:	10800017 	ldw	r2,0(r2)
 2003a70:	1809883a 	mov	r4,r3
 2003a74:	100b883a 	mov	r5,r2
 2003a78:	01808034 	movhi	r6,512
 2003a7c:	318f2d04 	addi	r6,r6,15540
 2003a80:	e1fffd17 	ldw	r7,-12(fp)
 2003a84:	20042d40 	call	20042d4 <alt_alarm_start>
 2003a88:	1000040e 	bge	r2,zero,2003a9c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2003a8c:	e0fffd17 	ldw	r3,-12(fp)
 2003a90:	00a00034 	movhi	r2,32768
 2003a94:	10bfffc4 	addi	r2,r2,-1
 2003a98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2003a9c:	e037883a 	mov	sp,fp
 2003aa0:	dfc00117 	ldw	ra,4(sp)
 2003aa4:	df000017 	ldw	fp,0(sp)
 2003aa8:	dec00204 	addi	sp,sp,8
 2003aac:	f800283a 	ret

02003ab0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2003ab0:	defff804 	addi	sp,sp,-32
 2003ab4:	df000715 	stw	fp,28(sp)
 2003ab8:	df000704 	addi	fp,sp,28
 2003abc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2003ac0:	e0bfff17 	ldw	r2,-4(fp)
 2003ac4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2003ac8:	e0bffb17 	ldw	r2,-20(fp)
 2003acc:	10800017 	ldw	r2,0(r2)
 2003ad0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003ad4:	e0bffc17 	ldw	r2,-16(fp)
 2003ad8:	10800104 	addi	r2,r2,4
 2003adc:	10800037 	ldwio	r2,0(r2)
 2003ae0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2003ae4:	e0bffd17 	ldw	r2,-12(fp)
 2003ae8:	1080c00c 	andi	r2,r2,768
 2003aec:	1000011e 	bne	r2,zero,2003af4 <altera_avalon_jtag_uart_irq+0x44>
      break;
 2003af0:	00006c06 	br	2003ca4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2003af4:	e0bffd17 	ldw	r2,-12(fp)
 2003af8:	1080400c 	andi	r2,r2,256
 2003afc:	10003426 	beq	r2,zero,2003bd0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2003b00:	00800074 	movhi	r2,1
 2003b04:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003b08:	e0bffb17 	ldw	r2,-20(fp)
 2003b0c:	10800a17 	ldw	r2,40(r2)
 2003b10:	10800044 	addi	r2,r2,1
 2003b14:	1081ffcc 	andi	r2,r2,2047
 2003b18:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2003b1c:	e0bffb17 	ldw	r2,-20(fp)
 2003b20:	10c00b17 	ldw	r3,44(r2)
 2003b24:	e0bffe17 	ldw	r2,-8(fp)
 2003b28:	1880011e 	bne	r3,r2,2003b30 <altera_avalon_jtag_uart_irq+0x80>
          break;
 2003b2c:	00001606 	br	2003b88 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2003b30:	e0bffc17 	ldw	r2,-16(fp)
 2003b34:	10800037 	ldwio	r2,0(r2)
 2003b38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2003b3c:	e0bff917 	ldw	r2,-28(fp)
 2003b40:	10a0000c 	andi	r2,r2,32768
 2003b44:	1000011e 	bne	r2,zero,2003b4c <altera_avalon_jtag_uart_irq+0x9c>
          break;
 2003b48:	00000f06 	br	2003b88 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2003b4c:	e0bffb17 	ldw	r2,-20(fp)
 2003b50:	10800a17 	ldw	r2,40(r2)
 2003b54:	e0fff917 	ldw	r3,-28(fp)
 2003b58:	1809883a 	mov	r4,r3
 2003b5c:	e0fffb17 	ldw	r3,-20(fp)
 2003b60:	1885883a 	add	r2,r3,r2
 2003b64:	10800e04 	addi	r2,r2,56
 2003b68:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003b6c:	e0bffb17 	ldw	r2,-20(fp)
 2003b70:	10800a17 	ldw	r2,40(r2)
 2003b74:	10800044 	addi	r2,r2,1
 2003b78:	10c1ffcc 	andi	r3,r2,2047
 2003b7c:	e0bffb17 	ldw	r2,-20(fp)
 2003b80:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2003b84:	003fe006 	br	2003b08 <__alt_mem_onchip_memory2_0+0xfdff3b08>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2003b88:	e0bff917 	ldw	r2,-28(fp)
 2003b8c:	10bfffec 	andhi	r2,r2,65535
 2003b90:	10000f26 	beq	r2,zero,2003bd0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003b94:	e0bffb17 	ldw	r2,-20(fp)
 2003b98:	10c00817 	ldw	r3,32(r2)
 2003b9c:	00bfff84 	movi	r2,-2
 2003ba0:	1886703a 	and	r3,r3,r2
 2003ba4:	e0bffb17 	ldw	r2,-20(fp)
 2003ba8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2003bac:	e0bffc17 	ldw	r2,-16(fp)
 2003bb0:	10800104 	addi	r2,r2,4
 2003bb4:	1007883a 	mov	r3,r2
 2003bb8:	e0bffb17 	ldw	r2,-20(fp)
 2003bbc:	10800817 	ldw	r2,32(r2)
 2003bc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003bc4:	e0bffc17 	ldw	r2,-16(fp)
 2003bc8:	10800104 	addi	r2,r2,4
 2003bcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2003bd0:	e0bffd17 	ldw	r2,-12(fp)
 2003bd4:	1080800c 	andi	r2,r2,512
 2003bd8:	10003126 	beq	r2,zero,2003ca0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2003bdc:	e0bffd17 	ldw	r2,-12(fp)
 2003be0:	1004d43a 	srli	r2,r2,16
 2003be4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003be8:	00001406 	br	2003c3c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2003bec:	e0bffc17 	ldw	r2,-16(fp)
 2003bf0:	e0fffb17 	ldw	r3,-20(fp)
 2003bf4:	18c00d17 	ldw	r3,52(r3)
 2003bf8:	e13ffb17 	ldw	r4,-20(fp)
 2003bfc:	20c7883a 	add	r3,r4,r3
 2003c00:	18c20e04 	addi	r3,r3,2104
 2003c04:	18c00003 	ldbu	r3,0(r3)
 2003c08:	18c03fcc 	andi	r3,r3,255
 2003c0c:	18c0201c 	xori	r3,r3,128
 2003c10:	18ffe004 	addi	r3,r3,-128
 2003c14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003c18:	e0bffb17 	ldw	r2,-20(fp)
 2003c1c:	10800d17 	ldw	r2,52(r2)
 2003c20:	10800044 	addi	r2,r2,1
 2003c24:	10c1ffcc 	andi	r3,r2,2047
 2003c28:	e0bffb17 	ldw	r2,-20(fp)
 2003c2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2003c30:	e0bffa17 	ldw	r2,-24(fp)
 2003c34:	10bfffc4 	addi	r2,r2,-1
 2003c38:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003c3c:	e0bffa17 	ldw	r2,-24(fp)
 2003c40:	10000526 	beq	r2,zero,2003c58 <altera_avalon_jtag_uart_irq+0x1a8>
 2003c44:	e0bffb17 	ldw	r2,-20(fp)
 2003c48:	10c00d17 	ldw	r3,52(r2)
 2003c4c:	e0bffb17 	ldw	r2,-20(fp)
 2003c50:	10800c17 	ldw	r2,48(r2)
 2003c54:	18bfe51e 	bne	r3,r2,2003bec <__alt_mem_onchip_memory2_0+0xfdff3bec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2003c58:	e0bffa17 	ldw	r2,-24(fp)
 2003c5c:	10001026 	beq	r2,zero,2003ca0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2003c60:	e0bffb17 	ldw	r2,-20(fp)
 2003c64:	10c00817 	ldw	r3,32(r2)
 2003c68:	00bfff44 	movi	r2,-3
 2003c6c:	1886703a 	and	r3,r3,r2
 2003c70:	e0bffb17 	ldw	r2,-20(fp)
 2003c74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2003c78:	e0bffb17 	ldw	r2,-20(fp)
 2003c7c:	10800017 	ldw	r2,0(r2)
 2003c80:	10800104 	addi	r2,r2,4
 2003c84:	1007883a 	mov	r3,r2
 2003c88:	e0bffb17 	ldw	r2,-20(fp)
 2003c8c:	10800817 	ldw	r2,32(r2)
 2003c90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003c94:	e0bffc17 	ldw	r2,-16(fp)
 2003c98:	10800104 	addi	r2,r2,4
 2003c9c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2003ca0:	003f8c06 	br	2003ad4 <__alt_mem_onchip_memory2_0+0xfdff3ad4>
}
 2003ca4:	e037883a 	mov	sp,fp
 2003ca8:	df000017 	ldw	fp,0(sp)
 2003cac:	dec00104 	addi	sp,sp,4
 2003cb0:	f800283a 	ret

02003cb4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2003cb4:	defff804 	addi	sp,sp,-32
 2003cb8:	df000715 	stw	fp,28(sp)
 2003cbc:	df000704 	addi	fp,sp,28
 2003cc0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2003cc4:	e0bffb17 	ldw	r2,-20(fp)
 2003cc8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2003ccc:	e0bff917 	ldw	r2,-28(fp)
 2003cd0:	10800017 	ldw	r2,0(r2)
 2003cd4:	10800104 	addi	r2,r2,4
 2003cd8:	10800037 	ldwio	r2,0(r2)
 2003cdc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2003ce0:	e0bffa17 	ldw	r2,-24(fp)
 2003ce4:	1081000c 	andi	r2,r2,1024
 2003ce8:	10000b26 	beq	r2,zero,2003d18 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2003cec:	e0bff917 	ldw	r2,-28(fp)
 2003cf0:	10800017 	ldw	r2,0(r2)
 2003cf4:	10800104 	addi	r2,r2,4
 2003cf8:	1007883a 	mov	r3,r2
 2003cfc:	e0bff917 	ldw	r2,-28(fp)
 2003d00:	10800817 	ldw	r2,32(r2)
 2003d04:	10810014 	ori	r2,r2,1024
 2003d08:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2003d0c:	e0bff917 	ldw	r2,-28(fp)
 2003d10:	10000915 	stw	zero,36(r2)
 2003d14:	00000a06 	br	2003d40 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2003d18:	e0bff917 	ldw	r2,-28(fp)
 2003d1c:	10c00917 	ldw	r3,36(r2)
 2003d20:	00a00034 	movhi	r2,32768
 2003d24:	10bfff04 	addi	r2,r2,-4
 2003d28:	10c00536 	bltu	r2,r3,2003d40 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2003d2c:	e0bff917 	ldw	r2,-28(fp)
 2003d30:	10800917 	ldw	r2,36(r2)
 2003d34:	10c00044 	addi	r3,r2,1
 2003d38:	e0bff917 	ldw	r2,-28(fp)
 2003d3c:	10c00915 	stw	r3,36(r2)
 2003d40:	00808074 	movhi	r2,513
 2003d44:	10a2a004 	addi	r2,r2,-30080
 2003d48:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2003d4c:	e037883a 	mov	sp,fp
 2003d50:	df000017 	ldw	fp,0(sp)
 2003d54:	dec00104 	addi	sp,sp,4
 2003d58:	f800283a 	ret

02003d5c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2003d5c:	defffd04 	addi	sp,sp,-12
 2003d60:	df000215 	stw	fp,8(sp)
 2003d64:	df000204 	addi	fp,sp,8
 2003d68:	e13ffe15 	stw	r4,-8(fp)
 2003d6c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2003d70:	00000506 	br	2003d88 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2003d74:	e0bfff17 	ldw	r2,-4(fp)
 2003d78:	1090000c 	andi	r2,r2,16384
 2003d7c:	10000226 	beq	r2,zero,2003d88 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2003d80:	00bffd44 	movi	r2,-11
 2003d84:	00000b06 	br	2003db4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2003d88:	e0bffe17 	ldw	r2,-8(fp)
 2003d8c:	10c00d17 	ldw	r3,52(r2)
 2003d90:	e0bffe17 	ldw	r2,-8(fp)
 2003d94:	10800c17 	ldw	r2,48(r2)
 2003d98:	18800526 	beq	r3,r2,2003db0 <altera_avalon_jtag_uart_close+0x54>
 2003d9c:	e0bffe17 	ldw	r2,-8(fp)
 2003da0:	10c00917 	ldw	r3,36(r2)
 2003da4:	e0bffe17 	ldw	r2,-8(fp)
 2003da8:	10800117 	ldw	r2,4(r2)
 2003dac:	18bff136 	bltu	r3,r2,2003d74 <__alt_mem_onchip_memory2_0+0xfdff3d74>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2003db0:	0005883a 	mov	r2,zero
}
 2003db4:	e037883a 	mov	sp,fp
 2003db8:	df000017 	ldw	fp,0(sp)
 2003dbc:	dec00104 	addi	sp,sp,4
 2003dc0:	f800283a 	ret

02003dc4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2003dc4:	defffa04 	addi	sp,sp,-24
 2003dc8:	df000515 	stw	fp,20(sp)
 2003dcc:	df000504 	addi	fp,sp,20
 2003dd0:	e13ffd15 	stw	r4,-12(fp)
 2003dd4:	e17ffe15 	stw	r5,-8(fp)
 2003dd8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2003ddc:	00bff9c4 	movi	r2,-25
 2003de0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2003de4:	e0bffe17 	ldw	r2,-8(fp)
 2003de8:	10da8060 	cmpeqi	r3,r2,27137
 2003dec:	1800031e 	bne	r3,zero,2003dfc <altera_avalon_jtag_uart_ioctl+0x38>
 2003df0:	109a80a0 	cmpeqi	r2,r2,27138
 2003df4:	1000191e 	bne	r2,zero,2003e5c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 2003df8:	00002806 	br	2003e9c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2003dfc:	e0bffd17 	ldw	r2,-12(fp)
 2003e00:	10c00117 	ldw	r3,4(r2)
 2003e04:	00a00034 	movhi	r2,32768
 2003e08:	10bfffc4 	addi	r2,r2,-1
 2003e0c:	18801226 	beq	r3,r2,2003e58 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 2003e10:	e0bfff17 	ldw	r2,-4(fp)
 2003e14:	10800017 	ldw	r2,0(r2)
 2003e18:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2003e1c:	e0bffc17 	ldw	r2,-16(fp)
 2003e20:	10800090 	cmplti	r2,r2,2
 2003e24:	1000061e 	bne	r2,zero,2003e40 <altera_avalon_jtag_uart_ioctl+0x7c>
 2003e28:	e0fffc17 	ldw	r3,-16(fp)
 2003e2c:	00a00034 	movhi	r2,32768
 2003e30:	10bfffc4 	addi	r2,r2,-1
 2003e34:	18800226 	beq	r3,r2,2003e40 <altera_avalon_jtag_uart_ioctl+0x7c>
 2003e38:	e0bffc17 	ldw	r2,-16(fp)
 2003e3c:	00000206 	br	2003e48 <altera_avalon_jtag_uart_ioctl+0x84>
 2003e40:	00a00034 	movhi	r2,32768
 2003e44:	10bfff84 	addi	r2,r2,-2
 2003e48:	e0fffd17 	ldw	r3,-12(fp)
 2003e4c:	18800115 	stw	r2,4(r3)
      rc = 0;
 2003e50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2003e54:	00001106 	br	2003e9c <altera_avalon_jtag_uart_ioctl+0xd8>
 2003e58:	00001006 	br	2003e9c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2003e5c:	e0bffd17 	ldw	r2,-12(fp)
 2003e60:	10c00117 	ldw	r3,4(r2)
 2003e64:	00a00034 	movhi	r2,32768
 2003e68:	10bfffc4 	addi	r2,r2,-1
 2003e6c:	18800a26 	beq	r3,r2,2003e98 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2003e70:	e0bffd17 	ldw	r2,-12(fp)
 2003e74:	10c00917 	ldw	r3,36(r2)
 2003e78:	e0bffd17 	ldw	r2,-12(fp)
 2003e7c:	10800117 	ldw	r2,4(r2)
 2003e80:	1885803a 	cmpltu	r2,r3,r2
 2003e84:	10c03fcc 	andi	r3,r2,255
 2003e88:	e0bfff17 	ldw	r2,-4(fp)
 2003e8c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2003e90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2003e94:	00000006 	br	2003e98 <altera_avalon_jtag_uart_ioctl+0xd4>
 2003e98:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2003e9c:	e0bffb17 	ldw	r2,-20(fp)
}
 2003ea0:	e037883a 	mov	sp,fp
 2003ea4:	df000017 	ldw	fp,0(sp)
 2003ea8:	dec00104 	addi	sp,sp,4
 2003eac:	f800283a 	ret

02003eb0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2003eb0:	defff304 	addi	sp,sp,-52
 2003eb4:	dfc00c15 	stw	ra,48(sp)
 2003eb8:	df000b15 	stw	fp,44(sp)
 2003ebc:	df000b04 	addi	fp,sp,44
 2003ec0:	e13ffc15 	stw	r4,-16(fp)
 2003ec4:	e17ffd15 	stw	r5,-12(fp)
 2003ec8:	e1bffe15 	stw	r6,-8(fp)
 2003ecc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2003ed0:	e0bffd17 	ldw	r2,-12(fp)
 2003ed4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2003ed8:	00004906 	br	2004000 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2003edc:	e0bffc17 	ldw	r2,-16(fp)
 2003ee0:	10800a17 	ldw	r2,40(r2)
 2003ee4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2003ee8:	e0bffc17 	ldw	r2,-16(fp)
 2003eec:	10800b17 	ldw	r2,44(r2)
 2003ef0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 2003ef4:	e0fff717 	ldw	r3,-36(fp)
 2003ef8:	e0bff817 	ldw	r2,-32(fp)
 2003efc:	18800536 	bltu	r3,r2,2003f14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2003f00:	e0fff717 	ldw	r3,-36(fp)
 2003f04:	e0bff817 	ldw	r2,-32(fp)
 2003f08:	1885c83a 	sub	r2,r3,r2
 2003f0c:	e0bff615 	stw	r2,-40(fp)
 2003f10:	00000406 	br	2003f24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2003f14:	00c20004 	movi	r3,2048
 2003f18:	e0bff817 	ldw	r2,-32(fp)
 2003f1c:	1885c83a 	sub	r2,r3,r2
 2003f20:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2003f24:	e0bff617 	ldw	r2,-40(fp)
 2003f28:	1000011e 	bne	r2,zero,2003f30 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 2003f2c:	00001d06 	br	2003fa4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 2003f30:	e0fffe17 	ldw	r3,-8(fp)
 2003f34:	e0bff617 	ldw	r2,-40(fp)
 2003f38:	1880022e 	bgeu	r3,r2,2003f44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2003f3c:	e0bffe17 	ldw	r2,-8(fp)
 2003f40:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2003f44:	e0bff817 	ldw	r2,-32(fp)
 2003f48:	10800e04 	addi	r2,r2,56
 2003f4c:	e0fffc17 	ldw	r3,-16(fp)
 2003f50:	1885883a 	add	r2,r3,r2
 2003f54:	e13ff517 	ldw	r4,-44(fp)
 2003f58:	100b883a 	mov	r5,r2
 2003f5c:	e1bff617 	ldw	r6,-40(fp)
 2003f60:	20011340 	call	2001134 <memcpy>
      ptr   += n;
 2003f64:	e0fff517 	ldw	r3,-44(fp)
 2003f68:	e0bff617 	ldw	r2,-40(fp)
 2003f6c:	1885883a 	add	r2,r3,r2
 2003f70:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2003f74:	e0fffe17 	ldw	r3,-8(fp)
 2003f78:	e0bff617 	ldw	r2,-40(fp)
 2003f7c:	1885c83a 	sub	r2,r3,r2
 2003f80:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003f84:	e0fff817 	ldw	r3,-32(fp)
 2003f88:	e0bff617 	ldw	r2,-40(fp)
 2003f8c:	1885883a 	add	r2,r3,r2
 2003f90:	10c1ffcc 	andi	r3,r2,2047
 2003f94:	e0bffc17 	ldw	r2,-16(fp)
 2003f98:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2003f9c:	e0bffe17 	ldw	r2,-8(fp)
 2003fa0:	00bfce16 	blt	zero,r2,2003edc <__alt_mem_onchip_memory2_0+0xfdff3edc>

    /* If we read any data then return it */
    if (ptr != buffer)
 2003fa4:	e0fff517 	ldw	r3,-44(fp)
 2003fa8:	e0bffd17 	ldw	r2,-12(fp)
 2003fac:	18800126 	beq	r3,r2,2003fb4 <altera_avalon_jtag_uart_read+0x104>
      break;
 2003fb0:	00001506 	br	2004008 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2003fb4:	e0bfff17 	ldw	r2,-4(fp)
 2003fb8:	1090000c 	andi	r2,r2,16384
 2003fbc:	10000126 	beq	r2,zero,2003fc4 <altera_avalon_jtag_uart_read+0x114>
      break;
 2003fc0:	00001106 	br	2004008 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2003fc4:	0001883a 	nop
 2003fc8:	e0bffc17 	ldw	r2,-16(fp)
 2003fcc:	10c00a17 	ldw	r3,40(r2)
 2003fd0:	e0bff717 	ldw	r2,-36(fp)
 2003fd4:	1880051e 	bne	r3,r2,2003fec <altera_avalon_jtag_uart_read+0x13c>
 2003fd8:	e0bffc17 	ldw	r2,-16(fp)
 2003fdc:	10c00917 	ldw	r3,36(r2)
 2003fe0:	e0bffc17 	ldw	r2,-16(fp)
 2003fe4:	10800117 	ldw	r2,4(r2)
 2003fe8:	18bff736 	bltu	r3,r2,2003fc8 <__alt_mem_onchip_memory2_0+0xfdff3fc8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2003fec:	e0bffc17 	ldw	r2,-16(fp)
 2003ff0:	10c00a17 	ldw	r3,40(r2)
 2003ff4:	e0bff717 	ldw	r2,-36(fp)
 2003ff8:	1880011e 	bne	r3,r2,2004000 <altera_avalon_jtag_uart_read+0x150>
      break;
 2003ffc:	00000206 	br	2004008 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2004000:	e0bffe17 	ldw	r2,-8(fp)
 2004004:	00bfb516 	blt	zero,r2,2003edc <__alt_mem_onchip_memory2_0+0xfdff3edc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2004008:	e0fff517 	ldw	r3,-44(fp)
 200400c:	e0bffd17 	ldw	r2,-12(fp)
 2004010:	18801826 	beq	r3,r2,2004074 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004014:	0005303a 	rdctl	r2,status
 2004018:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200401c:	e0fffa17 	ldw	r3,-24(fp)
 2004020:	00bfff84 	movi	r2,-2
 2004024:	1884703a 	and	r2,r3,r2
 2004028:	1001703a 	wrctl	status,r2
  
  return context;
 200402c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2004030:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2004034:	e0bffc17 	ldw	r2,-16(fp)
 2004038:	10800817 	ldw	r2,32(r2)
 200403c:	10c00054 	ori	r3,r2,1
 2004040:	e0bffc17 	ldw	r2,-16(fp)
 2004044:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2004048:	e0bffc17 	ldw	r2,-16(fp)
 200404c:	10800017 	ldw	r2,0(r2)
 2004050:	10800104 	addi	r2,r2,4
 2004054:	1007883a 	mov	r3,r2
 2004058:	e0bffc17 	ldw	r2,-16(fp)
 200405c:	10800817 	ldw	r2,32(r2)
 2004060:	18800035 	stwio	r2,0(r3)
 2004064:	e0bff917 	ldw	r2,-28(fp)
 2004068:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200406c:	e0bffb17 	ldw	r2,-20(fp)
 2004070:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2004074:	e0fff517 	ldw	r3,-44(fp)
 2004078:	e0bffd17 	ldw	r2,-12(fp)
 200407c:	18800426 	beq	r3,r2,2004090 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 2004080:	e0fff517 	ldw	r3,-44(fp)
 2004084:	e0bffd17 	ldw	r2,-12(fp)
 2004088:	1885c83a 	sub	r2,r3,r2
 200408c:	00000606 	br	20040a8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 2004090:	e0bfff17 	ldw	r2,-4(fp)
 2004094:	1090000c 	andi	r2,r2,16384
 2004098:	10000226 	beq	r2,zero,20040a4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 200409c:	00bffd44 	movi	r2,-11
 20040a0:	00000106 	br	20040a8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 20040a4:	00bffec4 	movi	r2,-5
}
 20040a8:	e037883a 	mov	sp,fp
 20040ac:	dfc00117 	ldw	ra,4(sp)
 20040b0:	df000017 	ldw	fp,0(sp)
 20040b4:	dec00204 	addi	sp,sp,8
 20040b8:	f800283a 	ret

020040bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20040bc:	defff304 	addi	sp,sp,-52
 20040c0:	dfc00c15 	stw	ra,48(sp)
 20040c4:	df000b15 	stw	fp,44(sp)
 20040c8:	df000b04 	addi	fp,sp,44
 20040cc:	e13ffc15 	stw	r4,-16(fp)
 20040d0:	e17ffd15 	stw	r5,-12(fp)
 20040d4:	e1bffe15 	stw	r6,-8(fp)
 20040d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20040dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20040e0:	e0bffd17 	ldw	r2,-12(fp)
 20040e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20040e8:	00003806 	br	20041cc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 20040ec:	e0bffc17 	ldw	r2,-16(fp)
 20040f0:	10800c17 	ldw	r2,48(r2)
 20040f4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 20040f8:	e0bffc17 	ldw	r2,-16(fp)
 20040fc:	10800d17 	ldw	r2,52(r2)
 2004100:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2004104:	e0fff817 	ldw	r3,-32(fp)
 2004108:	e0bff517 	ldw	r2,-44(fp)
 200410c:	1880062e 	bgeu	r3,r2,2004128 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2004110:	e0fff517 	ldw	r3,-44(fp)
 2004114:	e0bff817 	ldw	r2,-32(fp)
 2004118:	1885c83a 	sub	r2,r3,r2
 200411c:	10bfffc4 	addi	r2,r2,-1
 2004120:	e0bff615 	stw	r2,-40(fp)
 2004124:	00000b06 	br	2004154 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2004128:	e0bff517 	ldw	r2,-44(fp)
 200412c:	10000526 	beq	r2,zero,2004144 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2004130:	00c20004 	movi	r3,2048
 2004134:	e0bff817 	ldw	r2,-32(fp)
 2004138:	1885c83a 	sub	r2,r3,r2
 200413c:	e0bff615 	stw	r2,-40(fp)
 2004140:	00000406 	br	2004154 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2004144:	00c1ffc4 	movi	r3,2047
 2004148:	e0bff817 	ldw	r2,-32(fp)
 200414c:	1885c83a 	sub	r2,r3,r2
 2004150:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2004154:	e0bff617 	ldw	r2,-40(fp)
 2004158:	1000011e 	bne	r2,zero,2004160 <altera_avalon_jtag_uart_write+0xa4>
        break;
 200415c:	00001d06 	br	20041d4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 2004160:	e0fffe17 	ldw	r3,-8(fp)
 2004164:	e0bff617 	ldw	r2,-40(fp)
 2004168:	1880022e 	bgeu	r3,r2,2004174 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 200416c:	e0bffe17 	ldw	r2,-8(fp)
 2004170:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2004174:	e0bff817 	ldw	r2,-32(fp)
 2004178:	10820e04 	addi	r2,r2,2104
 200417c:	e0fffc17 	ldw	r3,-16(fp)
 2004180:	1885883a 	add	r2,r3,r2
 2004184:	1009883a 	mov	r4,r2
 2004188:	e17ffd17 	ldw	r5,-12(fp)
 200418c:	e1bff617 	ldw	r6,-40(fp)
 2004190:	20011340 	call	2001134 <memcpy>
      ptr   += n;
 2004194:	e0fffd17 	ldw	r3,-12(fp)
 2004198:	e0bff617 	ldw	r2,-40(fp)
 200419c:	1885883a 	add	r2,r3,r2
 20041a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 20041a4:	e0fffe17 	ldw	r3,-8(fp)
 20041a8:	e0bff617 	ldw	r2,-40(fp)
 20041ac:	1885c83a 	sub	r2,r3,r2
 20041b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20041b4:	e0fff817 	ldw	r3,-32(fp)
 20041b8:	e0bff617 	ldw	r2,-40(fp)
 20041bc:	1885883a 	add	r2,r3,r2
 20041c0:	10c1ffcc 	andi	r3,r2,2047
 20041c4:	e0bffc17 	ldw	r2,-16(fp)
 20041c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20041cc:	e0bffe17 	ldw	r2,-8(fp)
 20041d0:	00bfc616 	blt	zero,r2,20040ec <__alt_mem_onchip_memory2_0+0xfdff40ec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20041d4:	0005303a 	rdctl	r2,status
 20041d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20041dc:	e0fffa17 	ldw	r3,-24(fp)
 20041e0:	00bfff84 	movi	r2,-2
 20041e4:	1884703a 	and	r2,r3,r2
 20041e8:	1001703a 	wrctl	status,r2
  
  return context;
 20041ec:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 20041f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 20041f4:	e0bffc17 	ldw	r2,-16(fp)
 20041f8:	10800817 	ldw	r2,32(r2)
 20041fc:	10c00094 	ori	r3,r2,2
 2004200:	e0bffc17 	ldw	r2,-16(fp)
 2004204:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2004208:	e0bffc17 	ldw	r2,-16(fp)
 200420c:	10800017 	ldw	r2,0(r2)
 2004210:	10800104 	addi	r2,r2,4
 2004214:	1007883a 	mov	r3,r2
 2004218:	e0bffc17 	ldw	r2,-16(fp)
 200421c:	10800817 	ldw	r2,32(r2)
 2004220:	18800035 	stwio	r2,0(r3)
 2004224:	e0bff917 	ldw	r2,-28(fp)
 2004228:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200422c:	e0bffb17 	ldw	r2,-20(fp)
 2004230:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2004234:	e0bffe17 	ldw	r2,-8(fp)
 2004238:	0080120e 	bge	zero,r2,2004284 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 200423c:	e0bfff17 	ldw	r2,-4(fp)
 2004240:	1090000c 	andi	r2,r2,16384
 2004244:	10000126 	beq	r2,zero,200424c <altera_avalon_jtag_uart_write+0x190>
        break;
 2004248:	00001006 	br	200428c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200424c:	0001883a 	nop
 2004250:	e0bffc17 	ldw	r2,-16(fp)
 2004254:	10c00d17 	ldw	r3,52(r2)
 2004258:	e0bff517 	ldw	r2,-44(fp)
 200425c:	1880051e 	bne	r3,r2,2004274 <altera_avalon_jtag_uart_write+0x1b8>
 2004260:	e0bffc17 	ldw	r2,-16(fp)
 2004264:	10c00917 	ldw	r3,36(r2)
 2004268:	e0bffc17 	ldw	r2,-16(fp)
 200426c:	10800117 	ldw	r2,4(r2)
 2004270:	18bff736 	bltu	r3,r2,2004250 <__alt_mem_onchip_memory2_0+0xfdff4250>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2004274:	e0bffc17 	ldw	r2,-16(fp)
 2004278:	10800917 	ldw	r2,36(r2)
 200427c:	10000126 	beq	r2,zero,2004284 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 2004280:	00000206 	br	200428c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 2004284:	e0bffe17 	ldw	r2,-8(fp)
 2004288:	00bf9716 	blt	zero,r2,20040e8 <__alt_mem_onchip_memory2_0+0xfdff40e8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200428c:	e0fffd17 	ldw	r3,-12(fp)
 2004290:	e0bff717 	ldw	r2,-36(fp)
 2004294:	18800426 	beq	r3,r2,20042a8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 2004298:	e0fffd17 	ldw	r3,-12(fp)
 200429c:	e0bff717 	ldw	r2,-36(fp)
 20042a0:	1885c83a 	sub	r2,r3,r2
 20042a4:	00000606 	br	20042c0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 20042a8:	e0bfff17 	ldw	r2,-4(fp)
 20042ac:	1090000c 	andi	r2,r2,16384
 20042b0:	10000226 	beq	r2,zero,20042bc <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 20042b4:	00bffd44 	movi	r2,-11
 20042b8:	00000106 	br	20042c0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 20042bc:	00bffec4 	movi	r2,-5
}
 20042c0:	e037883a 	mov	sp,fp
 20042c4:	dfc00117 	ldw	ra,4(sp)
 20042c8:	df000017 	ldw	fp,0(sp)
 20042cc:	dec00204 	addi	sp,sp,8
 20042d0:	f800283a 	ret

020042d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20042d4:	defff504 	addi	sp,sp,-44
 20042d8:	df000a15 	stw	fp,40(sp)
 20042dc:	df000a04 	addi	fp,sp,40
 20042e0:	e13ffc15 	stw	r4,-16(fp)
 20042e4:	e17ffd15 	stw	r5,-12(fp)
 20042e8:	e1bffe15 	stw	r6,-8(fp)
 20042ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20042f0:	e03ff615 	stw	zero,-40(fp)
 20042f4:	00808074 	movhi	r2,513
 20042f8:	10a2a004 	addi	r2,r2,-30080
 20042fc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2004300:	10003f26 	beq	r2,zero,2004400 <alt_alarm_start+0x12c>
  {
    if (alarm)
 2004304:	e0bffc17 	ldw	r2,-16(fp)
 2004308:	10003b26 	beq	r2,zero,20043f8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 200430c:	e0bffc17 	ldw	r2,-16(fp)
 2004310:	e0fffe17 	ldw	r3,-8(fp)
 2004314:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2004318:	e0bffc17 	ldw	r2,-16(fp)
 200431c:	e0ffff17 	ldw	r3,-4(fp)
 2004320:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004324:	0005303a 	rdctl	r2,status
 2004328:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200432c:	e0fff817 	ldw	r3,-32(fp)
 2004330:	00bfff84 	movi	r2,-2
 2004334:	1884703a 	and	r2,r3,r2
 2004338:	1001703a 	wrctl	status,r2
  
  return context;
 200433c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2004340:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2004344:	00808074 	movhi	r2,513
 2004348:	10a2a104 	addi	r2,r2,-30076
 200434c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2004350:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2004354:	e0fffd17 	ldw	r3,-12(fp)
 2004358:	e0bff617 	ldw	r2,-40(fp)
 200435c:	1885883a 	add	r2,r3,r2
 2004360:	10c00044 	addi	r3,r2,1
 2004364:	e0bffc17 	ldw	r2,-16(fp)
 2004368:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200436c:	e0bffc17 	ldw	r2,-16(fp)
 2004370:	10c00217 	ldw	r3,8(r2)
 2004374:	e0bff617 	ldw	r2,-40(fp)
 2004378:	1880042e 	bgeu	r3,r2,200438c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 200437c:	e0bffc17 	ldw	r2,-16(fp)
 2004380:	00c00044 	movi	r3,1
 2004384:	10c00405 	stb	r3,16(r2)
 2004388:	00000206 	br	2004394 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 200438c:	e0bffc17 	ldw	r2,-16(fp)
 2004390:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2004394:	e0fffc17 	ldw	r3,-16(fp)
 2004398:	00808034 	movhi	r2,512
 200439c:	109bfb04 	addi	r2,r2,28652
 20043a0:	e0bff915 	stw	r2,-28(fp)
 20043a4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20043a8:	e0bffa17 	ldw	r2,-24(fp)
 20043ac:	e0fff917 	ldw	r3,-28(fp)
 20043b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20043b4:	e0bff917 	ldw	r2,-28(fp)
 20043b8:	10c00017 	ldw	r3,0(r2)
 20043bc:	e0bffa17 	ldw	r2,-24(fp)
 20043c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20043c4:	e0bff917 	ldw	r2,-28(fp)
 20043c8:	10800017 	ldw	r2,0(r2)
 20043cc:	e0fffa17 	ldw	r3,-24(fp)
 20043d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20043d4:	e0bff917 	ldw	r2,-28(fp)
 20043d8:	e0fffa17 	ldw	r3,-24(fp)
 20043dc:	10c00015 	stw	r3,0(r2)
 20043e0:	e0bff717 	ldw	r2,-36(fp)
 20043e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20043e8:	e0bffb17 	ldw	r2,-20(fp)
 20043ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20043f0:	0005883a 	mov	r2,zero
 20043f4:	00000306 	br	2004404 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 20043f8:	00bffa84 	movi	r2,-22
 20043fc:	00000106 	br	2004404 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 2004400:	00bfde84 	movi	r2,-134
  }
}
 2004404:	e037883a 	mov	sp,fp
 2004408:	df000017 	ldw	fp,0(sp)
 200440c:	dec00104 	addi	sp,sp,4
 2004410:	f800283a 	ret

02004414 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2004414:	deffff04 	addi	sp,sp,-4
 2004418:	df000015 	stw	fp,0(sp)
 200441c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2004420:	e037883a 	mov	sp,fp
 2004424:	df000017 	ldw	fp,0(sp)
 2004428:	dec00104 	addi	sp,sp,4
 200442c:	f800283a 	ret

02004430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004430:	defffe04 	addi	sp,sp,-8
 2004434:	dfc00115 	stw	ra,4(sp)
 2004438:	df000015 	stw	fp,0(sp)
 200443c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2004440:	00808034 	movhi	r2,512
 2004444:	109bf804 	addi	r2,r2,28640
 2004448:	10800017 	ldw	r2,0(r2)
 200444c:	10000526 	beq	r2,zero,2004464 <alt_get_errno+0x34>
 2004450:	00808034 	movhi	r2,512
 2004454:	109bf804 	addi	r2,r2,28640
 2004458:	10800017 	ldw	r2,0(r2)
 200445c:	103ee83a 	callr	r2
 2004460:	00000206 	br	200446c <alt_get_errno+0x3c>
 2004464:	00808074 	movhi	r2,513
 2004468:	10a29b04 	addi	r2,r2,-30100
}
 200446c:	e037883a 	mov	sp,fp
 2004470:	dfc00117 	ldw	ra,4(sp)
 2004474:	df000017 	ldw	fp,0(sp)
 2004478:	dec00204 	addi	sp,sp,8
 200447c:	f800283a 	ret

02004480 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2004480:	defffa04 	addi	sp,sp,-24
 2004484:	dfc00515 	stw	ra,20(sp)
 2004488:	df000415 	stw	fp,16(sp)
 200448c:	df000404 	addi	fp,sp,16
 2004490:	e13ffe15 	stw	r4,-8(fp)
 2004494:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2004498:	e0bffe17 	ldw	r2,-8(fp)
 200449c:	10000326 	beq	r2,zero,20044ac <alt_dev_llist_insert+0x2c>
 20044a0:	e0bffe17 	ldw	r2,-8(fp)
 20044a4:	10800217 	ldw	r2,8(r2)
 20044a8:	1000061e 	bne	r2,zero,20044c4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 20044ac:	20044300 	call	2004430 <alt_get_errno>
 20044b0:	1007883a 	mov	r3,r2
 20044b4:	00800584 	movi	r2,22
 20044b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20044bc:	00bffa84 	movi	r2,-22
 20044c0:	00001306 	br	2004510 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20044c4:	e0bffe17 	ldw	r2,-8(fp)
 20044c8:	e0ffff17 	ldw	r3,-4(fp)
 20044cc:	e0fffc15 	stw	r3,-16(fp)
 20044d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20044d4:	e0bffd17 	ldw	r2,-12(fp)
 20044d8:	e0fffc17 	ldw	r3,-16(fp)
 20044dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20044e0:	e0bffc17 	ldw	r2,-16(fp)
 20044e4:	10c00017 	ldw	r3,0(r2)
 20044e8:	e0bffd17 	ldw	r2,-12(fp)
 20044ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20044f0:	e0bffc17 	ldw	r2,-16(fp)
 20044f4:	10800017 	ldw	r2,0(r2)
 20044f8:	e0fffd17 	ldw	r3,-12(fp)
 20044fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2004500:	e0bffc17 	ldw	r2,-16(fp)
 2004504:	e0fffd17 	ldw	r3,-12(fp)
 2004508:	10c00015 	stw	r3,0(r2)

  return 0;  
 200450c:	0005883a 	mov	r2,zero
}
 2004510:	e037883a 	mov	sp,fp
 2004514:	dfc00117 	ldw	ra,4(sp)
 2004518:	df000017 	ldw	fp,0(sp)
 200451c:	dec00204 	addi	sp,sp,8
 2004520:	f800283a 	ret

02004524 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2004524:	defffd04 	addi	sp,sp,-12
 2004528:	dfc00215 	stw	ra,8(sp)
 200452c:	df000115 	stw	fp,4(sp)
 2004530:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2004534:	00808034 	movhi	r2,512
 2004538:	10954d04 	addi	r2,r2,21812
 200453c:	e0bfff15 	stw	r2,-4(fp)
 2004540:	00000606 	br	200455c <_do_ctors+0x38>
        (*ctor) (); 
 2004544:	e0bfff17 	ldw	r2,-4(fp)
 2004548:	10800017 	ldw	r2,0(r2)
 200454c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2004550:	e0bfff17 	ldw	r2,-4(fp)
 2004554:	10bfff04 	addi	r2,r2,-4
 2004558:	e0bfff15 	stw	r2,-4(fp)
 200455c:	e0ffff17 	ldw	r3,-4(fp)
 2004560:	00808034 	movhi	r2,512
 2004564:	10954e04 	addi	r2,r2,21816
 2004568:	18bff62e 	bgeu	r3,r2,2004544 <__alt_mem_onchip_memory2_0+0xfdff4544>
        (*ctor) (); 
}
 200456c:	e037883a 	mov	sp,fp
 2004570:	dfc00117 	ldw	ra,4(sp)
 2004574:	df000017 	ldw	fp,0(sp)
 2004578:	dec00204 	addi	sp,sp,8
 200457c:	f800283a 	ret

02004580 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2004580:	defffd04 	addi	sp,sp,-12
 2004584:	dfc00215 	stw	ra,8(sp)
 2004588:	df000115 	stw	fp,4(sp)
 200458c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2004590:	00808034 	movhi	r2,512
 2004594:	10954d04 	addi	r2,r2,21812
 2004598:	e0bfff15 	stw	r2,-4(fp)
 200459c:	00000606 	br	20045b8 <_do_dtors+0x38>
        (*dtor) (); 
 20045a0:	e0bfff17 	ldw	r2,-4(fp)
 20045a4:	10800017 	ldw	r2,0(r2)
 20045a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20045ac:	e0bfff17 	ldw	r2,-4(fp)
 20045b0:	10bfff04 	addi	r2,r2,-4
 20045b4:	e0bfff15 	stw	r2,-4(fp)
 20045b8:	e0ffff17 	ldw	r3,-4(fp)
 20045bc:	00808034 	movhi	r2,512
 20045c0:	10954e04 	addi	r2,r2,21816
 20045c4:	18bff62e 	bgeu	r3,r2,20045a0 <__alt_mem_onchip_memory2_0+0xfdff45a0>
        (*dtor) (); 
}
 20045c8:	e037883a 	mov	sp,fp
 20045cc:	dfc00117 	ldw	ra,4(sp)
 20045d0:	df000017 	ldw	fp,0(sp)
 20045d4:	dec00204 	addi	sp,sp,8
 20045d8:	f800283a 	ret

020045dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20045dc:	deffff04 	addi	sp,sp,-4
 20045e0:	df000015 	stw	fp,0(sp)
 20045e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 20045e8:	e037883a 	mov	sp,fp
 20045ec:	df000017 	ldw	fp,0(sp)
 20045f0:	dec00104 	addi	sp,sp,4
 20045f4:	f800283a 	ret

020045f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20045f8:	defff904 	addi	sp,sp,-28
 20045fc:	dfc00615 	stw	ra,24(sp)
 2004600:	df000515 	stw	fp,20(sp)
 2004604:	df000504 	addi	fp,sp,20
 2004608:	e13ffc15 	stw	r4,-16(fp)
 200460c:	e17ffd15 	stw	r5,-12(fp)
 2004610:	e1bffe15 	stw	r6,-8(fp)
 2004614:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2004618:	e0800217 	ldw	r2,8(fp)
 200461c:	d8800015 	stw	r2,0(sp)
 2004620:	e13ffc17 	ldw	r4,-16(fp)
 2004624:	e17ffd17 	ldw	r5,-12(fp)
 2004628:	e1bffe17 	ldw	r6,-8(fp)
 200462c:	e1ffff17 	ldw	r7,-4(fp)
 2004630:	20047d80 	call	20047d8 <alt_iic_isr_register>
}  
 2004634:	e037883a 	mov	sp,fp
 2004638:	dfc00117 	ldw	ra,4(sp)
 200463c:	df000017 	ldw	fp,0(sp)
 2004640:	dec00204 	addi	sp,sp,8
 2004644:	f800283a 	ret

02004648 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2004648:	defff904 	addi	sp,sp,-28
 200464c:	df000615 	stw	fp,24(sp)
 2004650:	df000604 	addi	fp,sp,24
 2004654:	e13ffe15 	stw	r4,-8(fp)
 2004658:	e17fff15 	stw	r5,-4(fp)
 200465c:	e0bfff17 	ldw	r2,-4(fp)
 2004660:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004664:	0005303a 	rdctl	r2,status
 2004668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200466c:	e0fffb17 	ldw	r3,-20(fp)
 2004670:	00bfff84 	movi	r2,-2
 2004674:	1884703a 	and	r2,r3,r2
 2004678:	1001703a 	wrctl	status,r2
  
  return context;
 200467c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2004680:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2004684:	e0bffa17 	ldw	r2,-24(fp)
 2004688:	00c00044 	movi	r3,1
 200468c:	1884983a 	sll	r2,r3,r2
 2004690:	1007883a 	mov	r3,r2
 2004694:	00808074 	movhi	r2,513
 2004698:	10a29f04 	addi	r2,r2,-30084
 200469c:	10800017 	ldw	r2,0(r2)
 20046a0:	1886b03a 	or	r3,r3,r2
 20046a4:	00808074 	movhi	r2,513
 20046a8:	10a29f04 	addi	r2,r2,-30084
 20046ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20046b0:	00808074 	movhi	r2,513
 20046b4:	10a29f04 	addi	r2,r2,-30084
 20046b8:	10800017 	ldw	r2,0(r2)
 20046bc:	100170fa 	wrctl	ienable,r2
 20046c0:	e0bffc17 	ldw	r2,-16(fp)
 20046c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20046c8:	e0bffd17 	ldw	r2,-12(fp)
 20046cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20046d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 20046d4:	0001883a 	nop
}
 20046d8:	e037883a 	mov	sp,fp
 20046dc:	df000017 	ldw	fp,0(sp)
 20046e0:	dec00104 	addi	sp,sp,4
 20046e4:	f800283a 	ret

020046e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 20046e8:	defff904 	addi	sp,sp,-28
 20046ec:	df000615 	stw	fp,24(sp)
 20046f0:	df000604 	addi	fp,sp,24
 20046f4:	e13ffe15 	stw	r4,-8(fp)
 20046f8:	e17fff15 	stw	r5,-4(fp)
 20046fc:	e0bfff17 	ldw	r2,-4(fp)
 2004700:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004704:	0005303a 	rdctl	r2,status
 2004708:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200470c:	e0fffb17 	ldw	r3,-20(fp)
 2004710:	00bfff84 	movi	r2,-2
 2004714:	1884703a 	and	r2,r3,r2
 2004718:	1001703a 	wrctl	status,r2
  
  return context;
 200471c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2004720:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2004724:	e0bffa17 	ldw	r2,-24(fp)
 2004728:	00c00044 	movi	r3,1
 200472c:	1884983a 	sll	r2,r3,r2
 2004730:	0084303a 	nor	r2,zero,r2
 2004734:	1007883a 	mov	r3,r2
 2004738:	00808074 	movhi	r2,513
 200473c:	10a29f04 	addi	r2,r2,-30084
 2004740:	10800017 	ldw	r2,0(r2)
 2004744:	1886703a 	and	r3,r3,r2
 2004748:	00808074 	movhi	r2,513
 200474c:	10a29f04 	addi	r2,r2,-30084
 2004750:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2004754:	00808074 	movhi	r2,513
 2004758:	10a29f04 	addi	r2,r2,-30084
 200475c:	10800017 	ldw	r2,0(r2)
 2004760:	100170fa 	wrctl	ienable,r2
 2004764:	e0bffc17 	ldw	r2,-16(fp)
 2004768:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200476c:	e0bffd17 	ldw	r2,-12(fp)
 2004770:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2004774:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2004778:	0001883a 	nop
}
 200477c:	e037883a 	mov	sp,fp
 2004780:	df000017 	ldw	fp,0(sp)
 2004784:	dec00104 	addi	sp,sp,4
 2004788:	f800283a 	ret

0200478c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 200478c:	defffc04 	addi	sp,sp,-16
 2004790:	df000315 	stw	fp,12(sp)
 2004794:	df000304 	addi	fp,sp,12
 2004798:	e13ffe15 	stw	r4,-8(fp)
 200479c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 20047a0:	000530fa 	rdctl	r2,ienable
 20047a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 20047a8:	e0bfff17 	ldw	r2,-4(fp)
 20047ac:	00c00044 	movi	r3,1
 20047b0:	1884983a 	sll	r2,r3,r2
 20047b4:	1007883a 	mov	r3,r2
 20047b8:	e0bffd17 	ldw	r2,-12(fp)
 20047bc:	1884703a 	and	r2,r3,r2
 20047c0:	1004c03a 	cmpne	r2,r2,zero
 20047c4:	10803fcc 	andi	r2,r2,255
}
 20047c8:	e037883a 	mov	sp,fp
 20047cc:	df000017 	ldw	fp,0(sp)
 20047d0:	dec00104 	addi	sp,sp,4
 20047d4:	f800283a 	ret

020047d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20047d8:	defff504 	addi	sp,sp,-44
 20047dc:	dfc00a15 	stw	ra,40(sp)
 20047e0:	df000915 	stw	fp,36(sp)
 20047e4:	df000904 	addi	fp,sp,36
 20047e8:	e13ffc15 	stw	r4,-16(fp)
 20047ec:	e17ffd15 	stw	r5,-12(fp)
 20047f0:	e1bffe15 	stw	r6,-8(fp)
 20047f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 20047f8:	00bffa84 	movi	r2,-22
 20047fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2004800:	e0bffd17 	ldw	r2,-12(fp)
 2004804:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2004808:	e0bff817 	ldw	r2,-32(fp)
 200480c:	10800808 	cmpgei	r2,r2,32
 2004810:	1000271e 	bne	r2,zero,20048b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004814:	0005303a 	rdctl	r2,status
 2004818:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200481c:	e0fffa17 	ldw	r3,-24(fp)
 2004820:	00bfff84 	movi	r2,-2
 2004824:	1884703a 	and	r2,r3,r2
 2004828:	1001703a 	wrctl	status,r2
  
  return context;
 200482c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2004830:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 2004834:	00808074 	movhi	r2,513
 2004838:	10a2ad04 	addi	r2,r2,-30028
 200483c:	e0fff817 	ldw	r3,-32(fp)
 2004840:	180690fa 	slli	r3,r3,3
 2004844:	10c5883a 	add	r2,r2,r3
 2004848:	e0fffe17 	ldw	r3,-8(fp)
 200484c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2004850:	00808074 	movhi	r2,513
 2004854:	10a2ad04 	addi	r2,r2,-30028
 2004858:	e0fff817 	ldw	r3,-32(fp)
 200485c:	180690fa 	slli	r3,r3,3
 2004860:	10c5883a 	add	r2,r2,r3
 2004864:	10800104 	addi	r2,r2,4
 2004868:	e0ffff17 	ldw	r3,-4(fp)
 200486c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2004870:	e0bffe17 	ldw	r2,-8(fp)
 2004874:	10000526 	beq	r2,zero,200488c <alt_iic_isr_register+0xb4>
 2004878:	e0bff817 	ldw	r2,-32(fp)
 200487c:	e13ffc17 	ldw	r4,-16(fp)
 2004880:	100b883a 	mov	r5,r2
 2004884:	20046480 	call	2004648 <alt_ic_irq_enable>
 2004888:	00000406 	br	200489c <alt_iic_isr_register+0xc4>
 200488c:	e0bff817 	ldw	r2,-32(fp)
 2004890:	e13ffc17 	ldw	r4,-16(fp)
 2004894:	100b883a 	mov	r5,r2
 2004898:	20046e80 	call	20046e8 <alt_ic_irq_disable>
 200489c:	e0bff715 	stw	r2,-36(fp)
 20048a0:	e0bff917 	ldw	r2,-28(fp)
 20048a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20048a8:	e0bffb17 	ldw	r2,-20(fp)
 20048ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20048b0:	e0bff717 	ldw	r2,-36(fp)
}
 20048b4:	e037883a 	mov	sp,fp
 20048b8:	dfc00117 	ldw	ra,4(sp)
 20048bc:	df000017 	ldw	fp,0(sp)
 20048c0:	dec00204 	addi	sp,sp,8
 20048c4:	f800283a 	ret

020048c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 20048c8:	defff804 	addi	sp,sp,-32
 20048cc:	dfc00715 	stw	ra,28(sp)
 20048d0:	df000615 	stw	fp,24(sp)
 20048d4:	dc000515 	stw	r16,20(sp)
 20048d8:	df000604 	addi	fp,sp,24
 20048dc:	e13ffb15 	stw	r4,-20(fp)
 20048e0:	e17ffc15 	stw	r5,-16(fp)
 20048e4:	e1bffd15 	stw	r6,-12(fp)
 20048e8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 20048ec:	e13ffc17 	ldw	r4,-16(fp)
 20048f0:	e17ffd17 	ldw	r5,-12(fp)
 20048f4:	e1bffe17 	ldw	r6,-8(fp)
 20048f8:	2004b640 	call	2004b64 <open>
 20048fc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2004900:	e0bffa17 	ldw	r2,-24(fp)
 2004904:	10002216 	blt	r2,zero,2004990 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2004908:	04008034 	movhi	r16,512
 200490c:	84177704 	addi	r16,r16,24028
 2004910:	e0bffa17 	ldw	r2,-24(fp)
 2004914:	1009883a 	mov	r4,r2
 2004918:	01400304 	movi	r5,12
 200491c:	2002dbc0 	call	2002dbc <__mulsi3>
 2004920:	8085883a 	add	r2,r16,r2
 2004924:	10c00017 	ldw	r3,0(r2)
 2004928:	e0bffb17 	ldw	r2,-20(fp)
 200492c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2004930:	04008034 	movhi	r16,512
 2004934:	84177704 	addi	r16,r16,24028
 2004938:	e0bffa17 	ldw	r2,-24(fp)
 200493c:	1009883a 	mov	r4,r2
 2004940:	01400304 	movi	r5,12
 2004944:	2002dbc0 	call	2002dbc <__mulsi3>
 2004948:	8085883a 	add	r2,r16,r2
 200494c:	10800104 	addi	r2,r2,4
 2004950:	10c00017 	ldw	r3,0(r2)
 2004954:	e0bffb17 	ldw	r2,-20(fp)
 2004958:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200495c:	04008034 	movhi	r16,512
 2004960:	84177704 	addi	r16,r16,24028
 2004964:	e0bffa17 	ldw	r2,-24(fp)
 2004968:	1009883a 	mov	r4,r2
 200496c:	01400304 	movi	r5,12
 2004970:	2002dbc0 	call	2002dbc <__mulsi3>
 2004974:	8085883a 	add	r2,r16,r2
 2004978:	10800204 	addi	r2,r2,8
 200497c:	10c00017 	ldw	r3,0(r2)
 2004980:	e0bffb17 	ldw	r2,-20(fp)
 2004984:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2004988:	e13ffa17 	ldw	r4,-24(fp)
 200498c:	20035580 	call	2003558 <alt_release_fd>
  }
} 
 2004990:	e6ffff04 	addi	sp,fp,-4
 2004994:	dfc00217 	ldw	ra,8(sp)
 2004998:	df000117 	ldw	fp,4(sp)
 200499c:	dc000017 	ldw	r16,0(sp)
 20049a0:	dec00304 	addi	sp,sp,12
 20049a4:	f800283a 	ret

020049a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 20049a8:	defffb04 	addi	sp,sp,-20
 20049ac:	dfc00415 	stw	ra,16(sp)
 20049b0:	df000315 	stw	fp,12(sp)
 20049b4:	df000304 	addi	fp,sp,12
 20049b8:	e13ffd15 	stw	r4,-12(fp)
 20049bc:	e17ffe15 	stw	r5,-8(fp)
 20049c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 20049c4:	01008034 	movhi	r4,512
 20049c8:	21177a04 	addi	r4,r4,24040
 20049cc:	e17ffd17 	ldw	r5,-12(fp)
 20049d0:	01800044 	movi	r6,1
 20049d4:	01c07fc4 	movi	r7,511
 20049d8:	20048c80 	call	20048c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 20049dc:	01008034 	movhi	r4,512
 20049e0:	21177704 	addi	r4,r4,24028
 20049e4:	e17ffe17 	ldw	r5,-8(fp)
 20049e8:	000d883a 	mov	r6,zero
 20049ec:	01c07fc4 	movi	r7,511
 20049f0:	20048c80 	call	20048c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 20049f4:	01008034 	movhi	r4,512
 20049f8:	21177d04 	addi	r4,r4,24052
 20049fc:	e17fff17 	ldw	r5,-4(fp)
 2004a00:	01800044 	movi	r6,1
 2004a04:	01c07fc4 	movi	r7,511
 2004a08:	20048c80 	call	20048c8 <alt_open_fd>
}  
 2004a0c:	e037883a 	mov	sp,fp
 2004a10:	dfc00117 	ldw	ra,4(sp)
 2004a14:	df000017 	ldw	fp,0(sp)
 2004a18:	dec00204 	addi	sp,sp,8
 2004a1c:	f800283a 	ret

02004a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004a20:	defffe04 	addi	sp,sp,-8
 2004a24:	dfc00115 	stw	ra,4(sp)
 2004a28:	df000015 	stw	fp,0(sp)
 2004a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2004a30:	00808034 	movhi	r2,512
 2004a34:	109bf804 	addi	r2,r2,28640
 2004a38:	10800017 	ldw	r2,0(r2)
 2004a3c:	10000526 	beq	r2,zero,2004a54 <alt_get_errno+0x34>
 2004a40:	00808034 	movhi	r2,512
 2004a44:	109bf804 	addi	r2,r2,28640
 2004a48:	10800017 	ldw	r2,0(r2)
 2004a4c:	103ee83a 	callr	r2
 2004a50:	00000206 	br	2004a5c <alt_get_errno+0x3c>
 2004a54:	00808074 	movhi	r2,513
 2004a58:	10a29b04 	addi	r2,r2,-30100
}
 2004a5c:	e037883a 	mov	sp,fp
 2004a60:	dfc00117 	ldw	ra,4(sp)
 2004a64:	df000017 	ldw	fp,0(sp)
 2004a68:	dec00204 	addi	sp,sp,8
 2004a6c:	f800283a 	ret

02004a70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2004a70:	defffb04 	addi	sp,sp,-20
 2004a74:	dfc00415 	stw	ra,16(sp)
 2004a78:	df000315 	stw	fp,12(sp)
 2004a7c:	dc000215 	stw	r16,8(sp)
 2004a80:	df000304 	addi	fp,sp,12
 2004a84:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2004a88:	e0bffe17 	ldw	r2,-8(fp)
 2004a8c:	10800217 	ldw	r2,8(r2)
 2004a90:	10d00034 	orhi	r3,r2,16384
 2004a94:	e0bffe17 	ldw	r2,-8(fp)
 2004a98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004a9c:	e03ffd15 	stw	zero,-12(fp)
 2004aa0:	00002306 	br	2004b30 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2004aa4:	04008034 	movhi	r16,512
 2004aa8:	84177704 	addi	r16,r16,24028
 2004aac:	e0bffd17 	ldw	r2,-12(fp)
 2004ab0:	1009883a 	mov	r4,r2
 2004ab4:	01400304 	movi	r5,12
 2004ab8:	2002dbc0 	call	2002dbc <__mulsi3>
 2004abc:	8085883a 	add	r2,r16,r2
 2004ac0:	10c00017 	ldw	r3,0(r2)
 2004ac4:	e0bffe17 	ldw	r2,-8(fp)
 2004ac8:	10800017 	ldw	r2,0(r2)
 2004acc:	1880151e 	bne	r3,r2,2004b24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2004ad0:	04008034 	movhi	r16,512
 2004ad4:	84177704 	addi	r16,r16,24028
 2004ad8:	e0bffd17 	ldw	r2,-12(fp)
 2004adc:	1009883a 	mov	r4,r2
 2004ae0:	01400304 	movi	r5,12
 2004ae4:	2002dbc0 	call	2002dbc <__mulsi3>
 2004ae8:	8085883a 	add	r2,r16,r2
 2004aec:	10800204 	addi	r2,r2,8
 2004af0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2004af4:	10000b0e 	bge	r2,zero,2004b24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2004af8:	e13ffd17 	ldw	r4,-12(fp)
 2004afc:	01400304 	movi	r5,12
 2004b00:	2002dbc0 	call	2002dbc <__mulsi3>
 2004b04:	1007883a 	mov	r3,r2
 2004b08:	00808034 	movhi	r2,512
 2004b0c:	10977704 	addi	r2,r2,24028
 2004b10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2004b14:	e0bffe17 	ldw	r2,-8(fp)
 2004b18:	18800226 	beq	r3,r2,2004b24 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2004b1c:	00bffcc4 	movi	r2,-13
 2004b20:	00000a06 	br	2004b4c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004b24:	e0bffd17 	ldw	r2,-12(fp)
 2004b28:	10800044 	addi	r2,r2,1
 2004b2c:	e0bffd15 	stw	r2,-12(fp)
 2004b30:	00808034 	movhi	r2,512
 2004b34:	109bf704 	addi	r2,r2,28636
 2004b38:	10800017 	ldw	r2,0(r2)
 2004b3c:	1007883a 	mov	r3,r2
 2004b40:	e0bffd17 	ldw	r2,-12(fp)
 2004b44:	18bfd72e 	bgeu	r3,r2,2004aa4 <__alt_mem_onchip_memory2_0+0xfdff4aa4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2004b48:	0005883a 	mov	r2,zero
}
 2004b4c:	e6ffff04 	addi	sp,fp,-4
 2004b50:	dfc00217 	ldw	ra,8(sp)
 2004b54:	df000117 	ldw	fp,4(sp)
 2004b58:	dc000017 	ldw	r16,0(sp)
 2004b5c:	dec00304 	addi	sp,sp,12
 2004b60:	f800283a 	ret

02004b64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2004b64:	defff604 	addi	sp,sp,-40
 2004b68:	dfc00915 	stw	ra,36(sp)
 2004b6c:	df000815 	stw	fp,32(sp)
 2004b70:	df000804 	addi	fp,sp,32
 2004b74:	e13ffd15 	stw	r4,-12(fp)
 2004b78:	e17ffe15 	stw	r5,-8(fp)
 2004b7c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2004b80:	00bfffc4 	movi	r2,-1
 2004b84:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2004b88:	00bffb44 	movi	r2,-19
 2004b8c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2004b90:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2004b94:	e13ffd17 	ldw	r4,-12(fp)
 2004b98:	01408034 	movhi	r5,512
 2004b9c:	295bf504 	addi	r5,r5,28628
 2004ba0:	2004e800 	call	2004e80 <alt_find_dev>
 2004ba4:	e0bff815 	stw	r2,-32(fp)
 2004ba8:	e0bff817 	ldw	r2,-32(fp)
 2004bac:	1000051e 	bne	r2,zero,2004bc4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2004bb0:	e13ffd17 	ldw	r4,-12(fp)
 2004bb4:	2004f100 	call	2004f10 <alt_find_file>
 2004bb8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2004bbc:	00800044 	movi	r2,1
 2004bc0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2004bc4:	e0bff817 	ldw	r2,-32(fp)
 2004bc8:	10002b26 	beq	r2,zero,2004c78 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2004bcc:	e13ff817 	ldw	r4,-32(fp)
 2004bd0:	20050240 	call	2005024 <alt_get_fd>
 2004bd4:	e0bff915 	stw	r2,-28(fp)
 2004bd8:	e0bff917 	ldw	r2,-28(fp)
 2004bdc:	1000030e 	bge	r2,zero,2004bec <open+0x88>
    {
      status = index;
 2004be0:	e0bff917 	ldw	r2,-28(fp)
 2004be4:	e0bffa15 	stw	r2,-24(fp)
 2004be8:	00002506 	br	2004c80 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 2004bec:	e13ff917 	ldw	r4,-28(fp)
 2004bf0:	01400304 	movi	r5,12
 2004bf4:	2002dbc0 	call	2002dbc <__mulsi3>
 2004bf8:	1007883a 	mov	r3,r2
 2004bfc:	00808034 	movhi	r2,512
 2004c00:	10977704 	addi	r2,r2,24028
 2004c04:	1885883a 	add	r2,r3,r2
 2004c08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2004c0c:	e0fffe17 	ldw	r3,-8(fp)
 2004c10:	00900034 	movhi	r2,16384
 2004c14:	10bfffc4 	addi	r2,r2,-1
 2004c18:	1886703a 	and	r3,r3,r2
 2004c1c:	e0bffc17 	ldw	r2,-16(fp)
 2004c20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2004c24:	e0bffb17 	ldw	r2,-20(fp)
 2004c28:	1000051e 	bne	r2,zero,2004c40 <open+0xdc>
 2004c2c:	e13ffc17 	ldw	r4,-16(fp)
 2004c30:	2004a700 	call	2004a70 <alt_file_locked>
 2004c34:	e0bffa15 	stw	r2,-24(fp)
 2004c38:	e0bffa17 	ldw	r2,-24(fp)
 2004c3c:	10001016 	blt	r2,zero,2004c80 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2004c40:	e0bff817 	ldw	r2,-32(fp)
 2004c44:	10800317 	ldw	r2,12(r2)
 2004c48:	10000826 	beq	r2,zero,2004c6c <open+0x108>
 2004c4c:	e0bff817 	ldw	r2,-32(fp)
 2004c50:	10800317 	ldw	r2,12(r2)
 2004c54:	e13ffc17 	ldw	r4,-16(fp)
 2004c58:	e17ffd17 	ldw	r5,-12(fp)
 2004c5c:	e1bffe17 	ldw	r6,-8(fp)
 2004c60:	e1ffff17 	ldw	r7,-4(fp)
 2004c64:	103ee83a 	callr	r2
 2004c68:	00000106 	br	2004c70 <open+0x10c>
 2004c6c:	0005883a 	mov	r2,zero
 2004c70:	e0bffa15 	stw	r2,-24(fp)
 2004c74:	00000206 	br	2004c80 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2004c78:	00bffb44 	movi	r2,-19
 2004c7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2004c80:	e0bffa17 	ldw	r2,-24(fp)
 2004c84:	1000090e 	bge	r2,zero,2004cac <open+0x148>
  {
    alt_release_fd (index);  
 2004c88:	e13ff917 	ldw	r4,-28(fp)
 2004c8c:	20035580 	call	2003558 <alt_release_fd>
    ALT_ERRNO = -status;
 2004c90:	2004a200 	call	2004a20 <alt_get_errno>
 2004c94:	1007883a 	mov	r3,r2
 2004c98:	e0bffa17 	ldw	r2,-24(fp)
 2004c9c:	0085c83a 	sub	r2,zero,r2
 2004ca0:	18800015 	stw	r2,0(r3)
    return -1;
 2004ca4:	00bfffc4 	movi	r2,-1
 2004ca8:	00000106 	br	2004cb0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 2004cac:	e0bff917 	ldw	r2,-28(fp)
}
 2004cb0:	e037883a 	mov	sp,fp
 2004cb4:	dfc00117 	ldw	ra,4(sp)
 2004cb8:	df000017 	ldw	fp,0(sp)
 2004cbc:	dec00204 	addi	sp,sp,8
 2004cc0:	f800283a 	ret

02004cc4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2004cc4:	defffa04 	addi	sp,sp,-24
 2004cc8:	df000515 	stw	fp,20(sp)
 2004ccc:	df000504 	addi	fp,sp,20
 2004cd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004cd4:	0005303a 	rdctl	r2,status
 2004cd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004cdc:	e0fffc17 	ldw	r3,-16(fp)
 2004ce0:	00bfff84 	movi	r2,-2
 2004ce4:	1884703a 	and	r2,r3,r2
 2004ce8:	1001703a 	wrctl	status,r2
  
  return context;
 2004cec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2004cf0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2004cf4:	e0bfff17 	ldw	r2,-4(fp)
 2004cf8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2004cfc:	e0bffd17 	ldw	r2,-12(fp)
 2004d00:	10800017 	ldw	r2,0(r2)
 2004d04:	e0fffd17 	ldw	r3,-12(fp)
 2004d08:	18c00117 	ldw	r3,4(r3)
 2004d0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2004d10:	e0bffd17 	ldw	r2,-12(fp)
 2004d14:	10800117 	ldw	r2,4(r2)
 2004d18:	e0fffd17 	ldw	r3,-12(fp)
 2004d1c:	18c00017 	ldw	r3,0(r3)
 2004d20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2004d24:	e0bffd17 	ldw	r2,-12(fp)
 2004d28:	e0fffd17 	ldw	r3,-12(fp)
 2004d2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2004d30:	e0bffd17 	ldw	r2,-12(fp)
 2004d34:	e0fffd17 	ldw	r3,-12(fp)
 2004d38:	10c00015 	stw	r3,0(r2)
 2004d3c:	e0bffb17 	ldw	r2,-20(fp)
 2004d40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004d44:	e0bffe17 	ldw	r2,-8(fp)
 2004d48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2004d4c:	e037883a 	mov	sp,fp
 2004d50:	df000017 	ldw	fp,0(sp)
 2004d54:	dec00104 	addi	sp,sp,4
 2004d58:	f800283a 	ret

02004d5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2004d5c:	defffb04 	addi	sp,sp,-20
 2004d60:	dfc00415 	stw	ra,16(sp)
 2004d64:	df000315 	stw	fp,12(sp)
 2004d68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2004d6c:	d0a00c17 	ldw	r2,-32720(gp)
 2004d70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2004d74:	d0a6b217 	ldw	r2,-25912(gp)
 2004d78:	10800044 	addi	r2,r2,1
 2004d7c:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004d80:	00002e06 	br	2004e3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2004d84:	e0bffd17 	ldw	r2,-12(fp)
 2004d88:	10800017 	ldw	r2,0(r2)
 2004d8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2004d90:	e0bffd17 	ldw	r2,-12(fp)
 2004d94:	10800403 	ldbu	r2,16(r2)
 2004d98:	10803fcc 	andi	r2,r2,255
 2004d9c:	10000426 	beq	r2,zero,2004db0 <alt_tick+0x54>
 2004da0:	d0a6b217 	ldw	r2,-25912(gp)
 2004da4:	1000021e 	bne	r2,zero,2004db0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2004da8:	e0bffd17 	ldw	r2,-12(fp)
 2004dac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2004db0:	e0bffd17 	ldw	r2,-12(fp)
 2004db4:	10800217 	ldw	r2,8(r2)
 2004db8:	d0e6b217 	ldw	r3,-25912(gp)
 2004dbc:	18801d36 	bltu	r3,r2,2004e34 <alt_tick+0xd8>
 2004dc0:	e0bffd17 	ldw	r2,-12(fp)
 2004dc4:	10800403 	ldbu	r2,16(r2)
 2004dc8:	10803fcc 	andi	r2,r2,255
 2004dcc:	1000191e 	bne	r2,zero,2004e34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2004dd0:	e0bffd17 	ldw	r2,-12(fp)
 2004dd4:	10800317 	ldw	r2,12(r2)
 2004dd8:	e0fffd17 	ldw	r3,-12(fp)
 2004ddc:	18c00517 	ldw	r3,20(r3)
 2004de0:	1809883a 	mov	r4,r3
 2004de4:	103ee83a 	callr	r2
 2004de8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2004dec:	e0bfff17 	ldw	r2,-4(fp)
 2004df0:	1000031e 	bne	r2,zero,2004e00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2004df4:	e13ffd17 	ldw	r4,-12(fp)
 2004df8:	2004cc40 	call	2004cc4 <alt_alarm_stop>
 2004dfc:	00000d06 	br	2004e34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2004e00:	e0bffd17 	ldw	r2,-12(fp)
 2004e04:	10c00217 	ldw	r3,8(r2)
 2004e08:	e0bfff17 	ldw	r2,-4(fp)
 2004e0c:	1887883a 	add	r3,r3,r2
 2004e10:	e0bffd17 	ldw	r2,-12(fp)
 2004e14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2004e18:	e0bffd17 	ldw	r2,-12(fp)
 2004e1c:	10c00217 	ldw	r3,8(r2)
 2004e20:	d0a6b217 	ldw	r2,-25912(gp)
 2004e24:	1880032e 	bgeu	r3,r2,2004e34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2004e28:	e0bffd17 	ldw	r2,-12(fp)
 2004e2c:	00c00044 	movi	r3,1
 2004e30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2004e34:	e0bffe17 	ldw	r2,-8(fp)
 2004e38:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004e3c:	e0fffd17 	ldw	r3,-12(fp)
 2004e40:	d0a00c04 	addi	r2,gp,-32720
 2004e44:	18bfcf1e 	bne	r3,r2,2004d84 <__alt_mem_onchip_memory2_0+0xfdff4d84>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2004e48:	0001883a 	nop
}
 2004e4c:	e037883a 	mov	sp,fp
 2004e50:	dfc00117 	ldw	ra,4(sp)
 2004e54:	df000017 	ldw	fp,0(sp)
 2004e58:	dec00204 	addi	sp,sp,8
 2004e5c:	f800283a 	ret

02004e60 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2004e60:	deffff04 	addi	sp,sp,-4
 2004e64:	df000015 	stw	fp,0(sp)
 2004e68:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2004e6c:	000170fa 	wrctl	ienable,zero
}
 2004e70:	e037883a 	mov	sp,fp
 2004e74:	df000017 	ldw	fp,0(sp)
 2004e78:	dec00104 	addi	sp,sp,4
 2004e7c:	f800283a 	ret

02004e80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2004e80:	defffa04 	addi	sp,sp,-24
 2004e84:	dfc00515 	stw	ra,20(sp)
 2004e88:	df000415 	stw	fp,16(sp)
 2004e8c:	df000404 	addi	fp,sp,16
 2004e90:	e13ffe15 	stw	r4,-8(fp)
 2004e94:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2004e98:	e0bfff17 	ldw	r2,-4(fp)
 2004e9c:	10800017 	ldw	r2,0(r2)
 2004ea0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2004ea4:	e13ffe17 	ldw	r4,-8(fp)
 2004ea8:	20003680 	call	2000368 <strlen>
 2004eac:	10800044 	addi	r2,r2,1
 2004eb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2004eb4:	00000d06 	br	2004eec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2004eb8:	e0bffc17 	ldw	r2,-16(fp)
 2004ebc:	10c00217 	ldw	r3,8(r2)
 2004ec0:	e0bffd17 	ldw	r2,-12(fp)
 2004ec4:	1809883a 	mov	r4,r3
 2004ec8:	e17ffe17 	ldw	r5,-8(fp)
 2004ecc:	100d883a 	mov	r6,r2
 2004ed0:	20051e00 	call	20051e0 <memcmp>
 2004ed4:	1000021e 	bne	r2,zero,2004ee0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2004ed8:	e0bffc17 	ldw	r2,-16(fp)
 2004edc:	00000706 	br	2004efc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2004ee0:	e0bffc17 	ldw	r2,-16(fp)
 2004ee4:	10800017 	ldw	r2,0(r2)
 2004ee8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2004eec:	e0fffc17 	ldw	r3,-16(fp)
 2004ef0:	e0bfff17 	ldw	r2,-4(fp)
 2004ef4:	18bff01e 	bne	r3,r2,2004eb8 <__alt_mem_onchip_memory2_0+0xfdff4eb8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2004ef8:	0005883a 	mov	r2,zero
}
 2004efc:	e037883a 	mov	sp,fp
 2004f00:	dfc00117 	ldw	ra,4(sp)
 2004f04:	df000017 	ldw	fp,0(sp)
 2004f08:	dec00204 	addi	sp,sp,8
 2004f0c:	f800283a 	ret

02004f10 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2004f10:	defffb04 	addi	sp,sp,-20
 2004f14:	dfc00415 	stw	ra,16(sp)
 2004f18:	df000315 	stw	fp,12(sp)
 2004f1c:	df000304 	addi	fp,sp,12
 2004f20:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2004f24:	00808034 	movhi	r2,512
 2004f28:	109bf304 	addi	r2,r2,28620
 2004f2c:	10800017 	ldw	r2,0(r2)
 2004f30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2004f34:	00003106 	br	2004ffc <alt_find_file+0xec>
  {
    len = strlen(next->name);
 2004f38:	e0bffd17 	ldw	r2,-12(fp)
 2004f3c:	10800217 	ldw	r2,8(r2)
 2004f40:	1009883a 	mov	r4,r2
 2004f44:	20003680 	call	2000368 <strlen>
 2004f48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2004f4c:	e0bffd17 	ldw	r2,-12(fp)
 2004f50:	10c00217 	ldw	r3,8(r2)
 2004f54:	e0bffe17 	ldw	r2,-8(fp)
 2004f58:	10bfffc4 	addi	r2,r2,-1
 2004f5c:	1885883a 	add	r2,r3,r2
 2004f60:	10800003 	ldbu	r2,0(r2)
 2004f64:	10803fcc 	andi	r2,r2,255
 2004f68:	1080201c 	xori	r2,r2,128
 2004f6c:	10bfe004 	addi	r2,r2,-128
 2004f70:	10800bd8 	cmpnei	r2,r2,47
 2004f74:	1000031e 	bne	r2,zero,2004f84 <alt_find_file+0x74>
    {
      len -= 1;
 2004f78:	e0bffe17 	ldw	r2,-8(fp)
 2004f7c:	10bfffc4 	addi	r2,r2,-1
 2004f80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2004f84:	e0bffe17 	ldw	r2,-8(fp)
 2004f88:	e0ffff17 	ldw	r3,-4(fp)
 2004f8c:	1885883a 	add	r2,r3,r2
 2004f90:	10800003 	ldbu	r2,0(r2)
 2004f94:	10803fcc 	andi	r2,r2,255
 2004f98:	1080201c 	xori	r2,r2,128
 2004f9c:	10bfe004 	addi	r2,r2,-128
 2004fa0:	10800be0 	cmpeqi	r2,r2,47
 2004fa4:	1000081e 	bne	r2,zero,2004fc8 <alt_find_file+0xb8>
 2004fa8:	e0bffe17 	ldw	r2,-8(fp)
 2004fac:	e0ffff17 	ldw	r3,-4(fp)
 2004fb0:	1885883a 	add	r2,r3,r2
 2004fb4:	10800003 	ldbu	r2,0(r2)
 2004fb8:	10803fcc 	andi	r2,r2,255
 2004fbc:	1080201c 	xori	r2,r2,128
 2004fc0:	10bfe004 	addi	r2,r2,-128
 2004fc4:	10000a1e 	bne	r2,zero,2004ff0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 2004fc8:	e0bffd17 	ldw	r2,-12(fp)
 2004fcc:	10c00217 	ldw	r3,8(r2)
 2004fd0:	e0bffe17 	ldw	r2,-8(fp)
 2004fd4:	1809883a 	mov	r4,r3
 2004fd8:	e17fff17 	ldw	r5,-4(fp)
 2004fdc:	100d883a 	mov	r6,r2
 2004fe0:	20051e00 	call	20051e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2004fe4:	1000021e 	bne	r2,zero,2004ff0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2004fe8:	e0bffd17 	ldw	r2,-12(fp)
 2004fec:	00000806 	br	2005010 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 2004ff0:	e0bffd17 	ldw	r2,-12(fp)
 2004ff4:	10800017 	ldw	r2,0(r2)
 2004ff8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2004ffc:	e0fffd17 	ldw	r3,-12(fp)
 2005000:	00808034 	movhi	r2,512
 2005004:	109bf304 	addi	r2,r2,28620
 2005008:	18bfcb1e 	bne	r3,r2,2004f38 <__alt_mem_onchip_memory2_0+0xfdff4f38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200500c:	0005883a 	mov	r2,zero
}
 2005010:	e037883a 	mov	sp,fp
 2005014:	dfc00117 	ldw	ra,4(sp)
 2005018:	df000017 	ldw	fp,0(sp)
 200501c:	dec00204 	addi	sp,sp,8
 2005020:	f800283a 	ret

02005024 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2005024:	defffa04 	addi	sp,sp,-24
 2005028:	dfc00515 	stw	ra,20(sp)
 200502c:	df000415 	stw	fp,16(sp)
 2005030:	dc000315 	stw	r16,12(sp)
 2005034:	df000404 	addi	fp,sp,16
 2005038:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 200503c:	00bffa04 	movi	r2,-24
 2005040:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2005044:	e03ffc15 	stw	zero,-16(fp)
 2005048:	00002106 	br	20050d0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 200504c:	04008034 	movhi	r16,512
 2005050:	84177704 	addi	r16,r16,24028
 2005054:	e0bffc17 	ldw	r2,-16(fp)
 2005058:	1009883a 	mov	r4,r2
 200505c:	01400304 	movi	r5,12
 2005060:	2002dbc0 	call	2002dbc <__mulsi3>
 2005064:	8085883a 	add	r2,r16,r2
 2005068:	10800017 	ldw	r2,0(r2)
 200506c:	1000151e 	bne	r2,zero,20050c4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 2005070:	04008034 	movhi	r16,512
 2005074:	84177704 	addi	r16,r16,24028
 2005078:	e0bffc17 	ldw	r2,-16(fp)
 200507c:	1009883a 	mov	r4,r2
 2005080:	01400304 	movi	r5,12
 2005084:	2002dbc0 	call	2002dbc <__mulsi3>
 2005088:	8085883a 	add	r2,r16,r2
 200508c:	e0fffe17 	ldw	r3,-8(fp)
 2005090:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2005094:	00808034 	movhi	r2,512
 2005098:	109bf704 	addi	r2,r2,28636
 200509c:	10c00017 	ldw	r3,0(r2)
 20050a0:	e0bffc17 	ldw	r2,-16(fp)
 20050a4:	1880040e 	bge	r3,r2,20050b8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 20050a8:	00808034 	movhi	r2,512
 20050ac:	109bf704 	addi	r2,r2,28636
 20050b0:	e0fffc17 	ldw	r3,-16(fp)
 20050b4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 20050b8:	e0bffc17 	ldw	r2,-16(fp)
 20050bc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 20050c0:	00000606 	br	20050dc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20050c4:	e0bffc17 	ldw	r2,-16(fp)
 20050c8:	10800044 	addi	r2,r2,1
 20050cc:	e0bffc15 	stw	r2,-16(fp)
 20050d0:	e0bffc17 	ldw	r2,-16(fp)
 20050d4:	10800810 	cmplti	r2,r2,32
 20050d8:	103fdc1e 	bne	r2,zero,200504c <__alt_mem_onchip_memory2_0+0xfdff504c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20050dc:	e0bffd17 	ldw	r2,-12(fp)
}
 20050e0:	e6ffff04 	addi	sp,fp,-4
 20050e4:	dfc00217 	ldw	ra,8(sp)
 20050e8:	df000117 	ldw	fp,4(sp)
 20050ec:	dc000017 	ldw	r16,0(sp)
 20050f0:	dec00304 	addi	sp,sp,12
 20050f4:	f800283a 	ret

020050f8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 20050f8:	defffe04 	addi	sp,sp,-8
 20050fc:	df000115 	stw	fp,4(sp)
 2005100:	df000104 	addi	fp,sp,4
 2005104:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2005108:	e0bfff17 	ldw	r2,-4(fp)
 200510c:	10bffe84 	addi	r2,r2,-6
 2005110:	10c00428 	cmpgeui	r3,r2,16
 2005114:	18001a1e 	bne	r3,zero,2005180 <alt_exception_cause_generated_bad_addr+0x88>
 2005118:	100690ba 	slli	r3,r2,2
 200511c:	00808034 	movhi	r2,512
 2005120:	10944c04 	addi	r2,r2,20784
 2005124:	1885883a 	add	r2,r3,r2
 2005128:	10800017 	ldw	r2,0(r2)
 200512c:	1000683a 	jmp	r2
 2005130:	02005170 	cmpltui	r8,zero,325
 2005134:	02005170 	cmpltui	r8,zero,325
 2005138:	02005180 	call	200518 <__reset-0x1dffae8>
 200513c:	02005180 	call	200518 <__reset-0x1dffae8>
 2005140:	02005180 	call	200518 <__reset-0x1dffae8>
 2005144:	02005170 	cmpltui	r8,zero,325
 2005148:	02005178 	rdprs	r8,zero,325
 200514c:	02005180 	call	200518 <__reset-0x1dffae8>
 2005150:	02005170 	cmpltui	r8,zero,325
 2005154:	02005170 	cmpltui	r8,zero,325
 2005158:	02005180 	call	200518 <__reset-0x1dffae8>
 200515c:	02005170 	cmpltui	r8,zero,325
 2005160:	02005178 	rdprs	r8,zero,325
 2005164:	02005180 	call	200518 <__reset-0x1dffae8>
 2005168:	02005180 	call	200518 <__reset-0x1dffae8>
 200516c:	02005170 	cmpltui	r8,zero,325
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2005170:	00800044 	movi	r2,1
 2005174:	00000306 	br	2005184 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2005178:	0005883a 	mov	r2,zero
 200517c:	00000106 	br	2005184 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2005180:	0005883a 	mov	r2,zero
  }
}
 2005184:	e037883a 	mov	sp,fp
 2005188:	df000017 	ldw	fp,0(sp)
 200518c:	dec00104 	addi	sp,sp,4
 2005190:	f800283a 	ret

02005194 <atexit>:
 2005194:	200b883a 	mov	r5,r4
 2005198:	000d883a 	mov	r6,zero
 200519c:	0009883a 	mov	r4,zero
 20051a0:	000f883a 	mov	r7,zero
 20051a4:	200525c1 	jmpi	200525c <__register_exitproc>

020051a8 <exit>:
 20051a8:	defffe04 	addi	sp,sp,-8
 20051ac:	000b883a 	mov	r5,zero
 20051b0:	dc000015 	stw	r16,0(sp)
 20051b4:	dfc00115 	stw	ra,4(sp)
 20051b8:	2021883a 	mov	r16,r4
 20051bc:	20053700 	call	2005370 <__call_exitprocs>
 20051c0:	00808034 	movhi	r2,512
 20051c4:	109bef04 	addi	r2,r2,28604
 20051c8:	11000017 	ldw	r4,0(r2)
 20051cc:	20800f17 	ldw	r2,60(r4)
 20051d0:	10000126 	beq	r2,zero,20051d8 <exit+0x30>
 20051d4:	103ee83a 	callr	r2
 20051d8:	8009883a 	mov	r4,r16
 20051dc:	20055040 	call	2005504 <_exit>

020051e0 <memcmp>:
 20051e0:	01c000c4 	movi	r7,3
 20051e4:	3980192e 	bgeu	r7,r6,200524c <memcmp+0x6c>
 20051e8:	2144b03a 	or	r2,r4,r5
 20051ec:	11c4703a 	and	r2,r2,r7
 20051f0:	10000f26 	beq	r2,zero,2005230 <memcmp+0x50>
 20051f4:	20800003 	ldbu	r2,0(r4)
 20051f8:	28c00003 	ldbu	r3,0(r5)
 20051fc:	10c0151e 	bne	r2,r3,2005254 <memcmp+0x74>
 2005200:	31bfff84 	addi	r6,r6,-2
 2005204:	01ffffc4 	movi	r7,-1
 2005208:	00000406 	br	200521c <memcmp+0x3c>
 200520c:	20800003 	ldbu	r2,0(r4)
 2005210:	28c00003 	ldbu	r3,0(r5)
 2005214:	31bfffc4 	addi	r6,r6,-1
 2005218:	10c00e1e 	bne	r2,r3,2005254 <memcmp+0x74>
 200521c:	21000044 	addi	r4,r4,1
 2005220:	29400044 	addi	r5,r5,1
 2005224:	31fff91e 	bne	r6,r7,200520c <__alt_mem_onchip_memory2_0+0xfdff520c>
 2005228:	0005883a 	mov	r2,zero
 200522c:	f800283a 	ret
 2005230:	20c00017 	ldw	r3,0(r4)
 2005234:	28800017 	ldw	r2,0(r5)
 2005238:	1880041e 	bne	r3,r2,200524c <memcmp+0x6c>
 200523c:	31bfff04 	addi	r6,r6,-4
 2005240:	21000104 	addi	r4,r4,4
 2005244:	29400104 	addi	r5,r5,4
 2005248:	39bff936 	bltu	r7,r6,2005230 <__alt_mem_onchip_memory2_0+0xfdff5230>
 200524c:	303fe91e 	bne	r6,zero,20051f4 <__alt_mem_onchip_memory2_0+0xfdff51f4>
 2005250:	003ff506 	br	2005228 <__alt_mem_onchip_memory2_0+0xfdff5228>
 2005254:	10c5c83a 	sub	r2,r2,r3
 2005258:	f800283a 	ret

0200525c <__register_exitproc>:
 200525c:	00808034 	movhi	r2,512
 2005260:	defffa04 	addi	sp,sp,-24
 2005264:	109bef04 	addi	r2,r2,28604
 2005268:	dc000315 	stw	r16,12(sp)
 200526c:	14000017 	ldw	r16,0(r2)
 2005270:	dc400415 	stw	r17,16(sp)
 2005274:	dfc00515 	stw	ra,20(sp)
 2005278:	80805217 	ldw	r2,328(r16)
 200527c:	2023883a 	mov	r17,r4
 2005280:	10003626 	beq	r2,zero,200535c <__register_exitproc+0x100>
 2005284:	10c00117 	ldw	r3,4(r2)
 2005288:	010007c4 	movi	r4,31
 200528c:	20c00e16 	blt	r4,r3,20052c8 <__register_exitproc+0x6c>
 2005290:	1a400044 	addi	r9,r3,1
 2005294:	8800211e 	bne	r17,zero,200531c <__register_exitproc+0xc0>
 2005298:	18c00084 	addi	r3,r3,2
 200529c:	18c7883a 	add	r3,r3,r3
 20052a0:	18c7883a 	add	r3,r3,r3
 20052a4:	12400115 	stw	r9,4(r2)
 20052a8:	10c7883a 	add	r3,r2,r3
 20052ac:	19400015 	stw	r5,0(r3)
 20052b0:	0005883a 	mov	r2,zero
 20052b4:	dfc00517 	ldw	ra,20(sp)
 20052b8:	dc400417 	ldw	r17,16(sp)
 20052bc:	dc000317 	ldw	r16,12(sp)
 20052c0:	dec00604 	addi	sp,sp,24
 20052c4:	f800283a 	ret
 20052c8:	00800034 	movhi	r2,0
 20052cc:	10800004 	addi	r2,r2,0
 20052d0:	10002526 	beq	r2,zero,2005368 <__register_exitproc+0x10c>
 20052d4:	01006404 	movi	r4,400
 20052d8:	d9400015 	stw	r5,0(sp)
 20052dc:	d9800115 	stw	r6,4(sp)
 20052e0:	d9c00215 	stw	r7,8(sp)
 20052e4:	00000000 	call	0 <__reset-0x2000000>
 20052e8:	d9400017 	ldw	r5,0(sp)
 20052ec:	d9800117 	ldw	r6,4(sp)
 20052f0:	d9c00217 	ldw	r7,8(sp)
 20052f4:	10001c26 	beq	r2,zero,2005368 <__register_exitproc+0x10c>
 20052f8:	80c05217 	ldw	r3,328(r16)
 20052fc:	10000115 	stw	zero,4(r2)
 2005300:	02400044 	movi	r9,1
 2005304:	10c00015 	stw	r3,0(r2)
 2005308:	80805215 	stw	r2,328(r16)
 200530c:	10006215 	stw	zero,392(r2)
 2005310:	10006315 	stw	zero,396(r2)
 2005314:	0007883a 	mov	r3,zero
 2005318:	883fdf26 	beq	r17,zero,2005298 <__alt_mem_onchip_memory2_0+0xfdff5298>
 200531c:	18d1883a 	add	r8,r3,r3
 2005320:	4211883a 	add	r8,r8,r8
 2005324:	1211883a 	add	r8,r2,r8
 2005328:	41802215 	stw	r6,136(r8)
 200532c:	01000044 	movi	r4,1
 2005330:	11806217 	ldw	r6,392(r2)
 2005334:	20c8983a 	sll	r4,r4,r3
 2005338:	310cb03a 	or	r6,r6,r4
 200533c:	11806215 	stw	r6,392(r2)
 2005340:	41c04215 	stw	r7,264(r8)
 2005344:	01800084 	movi	r6,2
 2005348:	89bfd31e 	bne	r17,r6,2005298 <__alt_mem_onchip_memory2_0+0xfdff5298>
 200534c:	11806317 	ldw	r6,396(r2)
 2005350:	3108b03a 	or	r4,r6,r4
 2005354:	11006315 	stw	r4,396(r2)
 2005358:	003fcf06 	br	2005298 <__alt_mem_onchip_memory2_0+0xfdff5298>
 200535c:	80805304 	addi	r2,r16,332
 2005360:	80805215 	stw	r2,328(r16)
 2005364:	003fc706 	br	2005284 <__alt_mem_onchip_memory2_0+0xfdff5284>
 2005368:	00bfffc4 	movi	r2,-1
 200536c:	003fd106 	br	20052b4 <__alt_mem_onchip_memory2_0+0xfdff52b4>

02005370 <__call_exitprocs>:
 2005370:	00808034 	movhi	r2,512
 2005374:	109bef04 	addi	r2,r2,28604
 2005378:	10800017 	ldw	r2,0(r2)
 200537c:	defff404 	addi	sp,sp,-48
 2005380:	dd800815 	stw	r22,32(sp)
 2005384:	d8800015 	stw	r2,0(sp)
 2005388:	10805204 	addi	r2,r2,328
 200538c:	dd000615 	stw	r20,24(sp)
 2005390:	dc800415 	stw	r18,16(sp)
 2005394:	dfc00b15 	stw	ra,44(sp)
 2005398:	df000a15 	stw	fp,40(sp)
 200539c:	ddc00915 	stw	r23,36(sp)
 20053a0:	dd400715 	stw	r21,28(sp)
 20053a4:	dcc00515 	stw	r19,20(sp)
 20053a8:	dc400315 	stw	r17,12(sp)
 20053ac:	dc000215 	stw	r16,8(sp)
 20053b0:	2025883a 	mov	r18,r4
 20053b4:	2829883a 	mov	r20,r5
 20053b8:	d8800115 	stw	r2,4(sp)
 20053bc:	05bfffc4 	movi	r22,-1
 20053c0:	d8800017 	ldw	r2,0(sp)
 20053c4:	14c05217 	ldw	r19,328(r2)
 20053c8:	98001d26 	beq	r19,zero,2005440 <__call_exitprocs+0xd0>
 20053cc:	dd400117 	ldw	r21,4(sp)
 20053d0:	98800117 	ldw	r2,4(r19)
 20053d4:	173fffc4 	addi	fp,r2,-1
 20053d8:	e0000d16 	blt	fp,zero,2005410 <__call_exitprocs+0xa0>
 20053dc:	14000044 	addi	r16,r2,1
 20053e0:	8421883a 	add	r16,r16,r16
 20053e4:	8421883a 	add	r16,r16,r16
 20053e8:	84402004 	addi	r17,r16,128
 20053ec:	9c63883a 	add	r17,r19,r17
 20053f0:	9c21883a 	add	r16,r19,r16
 20053f4:	a0001e26 	beq	r20,zero,2005470 <__call_exitprocs+0x100>
 20053f8:	80804017 	ldw	r2,256(r16)
 20053fc:	15001c26 	beq	r2,r20,2005470 <__call_exitprocs+0x100>
 2005400:	e73fffc4 	addi	fp,fp,-1
 2005404:	843fff04 	addi	r16,r16,-4
 2005408:	8c7fff04 	addi	r17,r17,-4
 200540c:	e5bff91e 	bne	fp,r22,20053f4 <__alt_mem_onchip_memory2_0+0xfdff53f4>
 2005410:	00800034 	movhi	r2,0
 2005414:	10800004 	addi	r2,r2,0
 2005418:	10000926 	beq	r2,zero,2005440 <__call_exitprocs+0xd0>
 200541c:	98800117 	ldw	r2,4(r19)
 2005420:	1000311e 	bne	r2,zero,20054e8 <__call_exitprocs+0x178>
 2005424:	98800017 	ldw	r2,0(r19)
 2005428:	10003426 	beq	r2,zero,20054fc <__call_exitprocs+0x18c>
 200542c:	9809883a 	mov	r4,r19
 2005430:	a8800015 	stw	r2,0(r21)
 2005434:	00000000 	call	0 <__reset-0x2000000>
 2005438:	acc00017 	ldw	r19,0(r21)
 200543c:	983fe41e 	bne	r19,zero,20053d0 <__alt_mem_onchip_memory2_0+0xfdff53d0>
 2005440:	dfc00b17 	ldw	ra,44(sp)
 2005444:	df000a17 	ldw	fp,40(sp)
 2005448:	ddc00917 	ldw	r23,36(sp)
 200544c:	dd800817 	ldw	r22,32(sp)
 2005450:	dd400717 	ldw	r21,28(sp)
 2005454:	dd000617 	ldw	r20,24(sp)
 2005458:	dcc00517 	ldw	r19,20(sp)
 200545c:	dc800417 	ldw	r18,16(sp)
 2005460:	dc400317 	ldw	r17,12(sp)
 2005464:	dc000217 	ldw	r16,8(sp)
 2005468:	dec00c04 	addi	sp,sp,48
 200546c:	f800283a 	ret
 2005470:	98800117 	ldw	r2,4(r19)
 2005474:	80c00017 	ldw	r3,0(r16)
 2005478:	10bfffc4 	addi	r2,r2,-1
 200547c:	17001526 	beq	r2,fp,20054d4 <__call_exitprocs+0x164>
 2005480:	80000015 	stw	zero,0(r16)
 2005484:	183fde26 	beq	r3,zero,2005400 <__alt_mem_onchip_memory2_0+0xfdff5400>
 2005488:	00800044 	movi	r2,1
 200548c:	1708983a 	sll	r4,r2,fp
 2005490:	98806217 	ldw	r2,392(r19)
 2005494:	9dc00117 	ldw	r23,4(r19)
 2005498:	2084703a 	and	r2,r4,r2
 200549c:	1000061e 	bne	r2,zero,20054b8 <__call_exitprocs+0x148>
 20054a0:	183ee83a 	callr	r3
 20054a4:	98800117 	ldw	r2,4(r19)
 20054a8:	15ffc51e 	bne	r2,r23,20053c0 <__alt_mem_onchip_memory2_0+0xfdff53c0>
 20054ac:	a8800017 	ldw	r2,0(r21)
 20054b0:	14ffd326 	beq	r2,r19,2005400 <__alt_mem_onchip_memory2_0+0xfdff5400>
 20054b4:	003fc206 	br	20053c0 <__alt_mem_onchip_memory2_0+0xfdff53c0>
 20054b8:	98806317 	ldw	r2,396(r19)
 20054bc:	2084703a 	and	r2,r4,r2
 20054c0:	1000061e 	bne	r2,zero,20054dc <__call_exitprocs+0x16c>
 20054c4:	89400017 	ldw	r5,0(r17)
 20054c8:	9009883a 	mov	r4,r18
 20054cc:	183ee83a 	callr	r3
 20054d0:	003ff406 	br	20054a4 <__alt_mem_onchip_memory2_0+0xfdff54a4>
 20054d4:	9f000115 	stw	fp,4(r19)
 20054d8:	003fea06 	br	2005484 <__alt_mem_onchip_memory2_0+0xfdff5484>
 20054dc:	89000017 	ldw	r4,0(r17)
 20054e0:	183ee83a 	callr	r3
 20054e4:	003fef06 	br	20054a4 <__alt_mem_onchip_memory2_0+0xfdff54a4>
 20054e8:	98800017 	ldw	r2,0(r19)
 20054ec:	982b883a 	mov	r21,r19
 20054f0:	1027883a 	mov	r19,r2
 20054f4:	983fb61e 	bne	r19,zero,20053d0 <__alt_mem_onchip_memory2_0+0xfdff53d0>
 20054f8:	003fd106 	br	2005440 <__alt_mem_onchip_memory2_0+0xfdff5440>
 20054fc:	0005883a 	mov	r2,zero
 2005500:	003ffa06 	br	20054ec <__alt_mem_onchip_memory2_0+0xfdff54ec>

02005504 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2005504:	defffd04 	addi	sp,sp,-12
 2005508:	df000215 	stw	fp,8(sp)
 200550c:	df000204 	addi	fp,sp,8
 2005510:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2005514:	0001883a 	nop
 2005518:	e0bfff17 	ldw	r2,-4(fp)
 200551c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2005520:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2005524:	10000226 	beq	r2,zero,2005530 <_exit+0x2c>
    ALT_SIM_FAIL();
 2005528:	002af070 	cmpltui	zero,zero,43969
 200552c:	00000106 	br	2005534 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2005530:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2005534:	003fff06 	br	2005534 <__alt_mem_onchip_memory2_0+0xfdff5534>
