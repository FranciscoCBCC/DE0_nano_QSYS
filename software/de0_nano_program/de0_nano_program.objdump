
de0_nano_program.elf:     file format elf32-littlenios2
de0_nano_program.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000140c memsz 0x0000140c flags r-x
    LOAD off    0x0000242c vaddr 0x0000942c paddr 0x00009700 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000029d4 vaddr 0x000099d4 paddr 0x000099d4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00002700  2**0
                  CONTENTS
  2 .text         000013c8  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  000093e8  000093e8  000023e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  0000942c  00009700  0000242c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000099d4  000099d4  000029d4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000099e4  000099e4  00002700  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000410  00000000  00000000  00002728  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005631  00000000  00000000  00002b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001cdf  00000000  00000000  00008169  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000020e0  00000000  00000000  00009e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000007b8  00000000  00000000  0000bf28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001210  00000000  00000000  0000c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000461  00000000  00000000  0000d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000dd54  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000038  00000000  00000000  0000dd68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000f2f7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000f2fa  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000f2fd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000f2fe  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000f2ff  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000f303  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000f307  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000f30b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0000f314  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000f31d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0000f326  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000028  00000000  00000000  0000f32e  2**0
                  CONTENTS, READONLY
 29 .jdi          000036d2  00000000  00000000  0000f356  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00035bdb  00000000  00000000  00012a28  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
000093e8 l    d  .rodata	00000000 .rodata
0000942c l    d  .rwdata	00000000 .rwdata
000099d4 l    d  .bss	00000000 .bss
000099e4 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../de0_nano_program_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000942c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00008298 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000083e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008534 l     F .text	00000038 alt_dev_reg
0000950c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
0000880c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008950 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000897c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008a8c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00008be4 l     F .text	00000050 alt_get_errno
00008c34 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000837c g     F .text	00000068 alt_main
000080e4 g     F .text	00000080 _puts_r
00009700 g       *ABS*	00000000 __flash_rwdata_start
00008f08 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000099d4 g     O .bss	00000004 errno
000099dc g     O .bss	00000004 alt_argv
000116e0 g       *ABS*	00000000 _gp
00009560 g     O .rwdata	00000180 alt_fd_list
00008f28 g     F .text	00000090 alt_find_dev
00008b6c g     F .text	00000078 alt_io_redirect
00008164 g     F .text	00000014 puts
00008694 g     F .text	000000e4 altera_avalon_jtag_uart_read
000096f8 g     O .rwdata	00000004 alt_max_fd
000096e0 g     O .rwdata	00000004 _global_impure_ptr
000099e4 g       *ABS*	00000000 __bss_end
00009538 g     O .rwdata	00000028 alt_dev_null
00008934 g     F .text	0000001c alt_dcache_flush_all
00009700 g       *ABS*	00000000 __ram_rwdata_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
000096f0 g     O .rwdata	00000008 alt_dev_list
00008434 g     F .text	00000100 write
0000942c g       *ABS*	00000000 __ram_rodata_end
000099e4 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008778 g     F .text	00000094 altera_avalon_jtag_uart_write
000091f0 g     F .text	0000019c __call_exitprocs
00008020 g     F .text	0000003c _start
000085a0 g     F .text	00000034 alt_sys_init
0000938c g     F .text	00000028 .hidden __mulsi3
0000942c g       *ABS*	00000000 __ram_rwdata_start
000093e8 g       *ABS*	00000000 __ram_rodata_start
000085d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000090cc g     F .text	000000d4 alt_get_fd
000091c0 g     F .text	00000030 memcmp
000099e4 g       *ABS*	00000000 __alt_stack_base
00008fb8 g     F .text	00000114 alt_find_file
000089cc g     F .text	000000a4 alt_dev_llist_insert
00008194 g     F .text	000000ac __sfvwrite_small_dev
000099d4 g       *ABS*	00000000 __bss_start
0000809c g     F .text	00000048 main
000099e0 g     O .bss	00000004 alt_envp
00008634 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000096fc g     O .rwdata	00000004 alt_errno
000093e8 g       *ABS*	00000000 __flash_rodata_start
0000856c g     F .text	00000034 alt_irq_init
00008e88 g     F .text	00000080 alt_release_fd
00008240 g     F .text	00000058 _write_r
0000805c g     F .text	00000040 simple_loop_delay
000096e4 g     O .rwdata	00000004 _impure_ptr
000099d8 g     O .bss	00000004 alt_argc
000096e8 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009700 g       *ABS*	00000000 _edata
000099e4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000091a0 g     F .text	00000020 exit
0000d000 g       *ABS*	00000000 __alt_data_end
000093b4 g     F .text	00000034 _exit
00008178 g     F .text	0000001c strlen
00008d28 g     F .text	00000160 open
00008a70 g     F .text	0000001c alt_icache_flush_all
0000885c g     F .text	000000d8 close
000082fc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d685b814 	ori	gp,gp,5856
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a67514 	ori	r2,r2,39380

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e67914 	ori	r3,r3,39396

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff6964>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00082fc0 	call	82fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000837c0 	call	837c <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff6978>

0000805c <simple_loop_delay>:
#include <stdio.h>
#include <system.h>
#include <altera_avalon_pio_regs.h>

void simple_loop_delay()
{
    805c:	defffe04 	addi	sp,sp,-8
    8060:	df000115 	stw	fp,4(sp)
    8064:	df000104 	addi	fp,sp,4
   int l;
   for (l=0; l<100000;l++);
    8068:	e03fff15 	stw	zero,-4(fp)
    806c:	00000306 	br	807c <simple_loop_delay+0x20>
    8070:	e0bfff17 	ldw	r2,-4(fp)
    8074:	10800044 	addi	r2,r2,1
    8078:	e0bfff15 	stw	r2,-4(fp)
    807c:	e0ffff17 	ldw	r3,-4(fp)
    8080:	008000b4 	movhi	r2,2
    8084:	10a1a7c4 	addi	r2,r2,-31073
    8088:	10fff90e 	bge	r2,r3,8070 <_gp+0xffff6990>

}
    808c:	e037883a 	mov	sp,fp
    8090:	df000017 	ldw	fp,0(sp)
    8094:	dec00104 	addi	sp,sp,4
    8098:	f800283a 	ret

0000809c <main>:

int main()
{
    809c:	defffe04 	addi	sp,sp,-8
    80a0:	dfc00115 	stw	ra,4(sp)
    80a4:	df000015 	stw	fp,0(sp)
    80a8:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    80ac:	01000074 	movhi	r4,1
    80b0:	2124fa04 	addi	r4,r4,-27672
    80b4:	00081640 	call	8164 <puts>

  while(1)
  {
     IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, 0xaa);
    80b8:	00c02a84 	movi	r3,170
    80bc:	00800074 	movhi	r2,1
    80c0:	10840004 	addi	r2,r2,4096
    80c4:	10c00035 	stwio	r3,0(r2)
     simple_loop_delay();
    80c8:	000805c0 	call	805c <simple_loop_delay>

     IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, 0x55);
    80cc:	00c01544 	movi	r3,85
    80d0:	00800074 	movhi	r2,1
    80d4:	10840004 	addi	r2,r2,4096
    80d8:	10c00035 	stwio	r3,0(r2)
     simple_loop_delay();
    80dc:	000805c0 	call	805c <simple_loop_delay>
  }
    80e0:	003ff506 	br	80b8 <_gp+0xffff69d8>

000080e4 <_puts_r>:
    80e4:	defffd04 	addi	sp,sp,-12
    80e8:	dc000015 	stw	r16,0(sp)
    80ec:	2021883a 	mov	r16,r4
    80f0:	2809883a 	mov	r4,r5
    80f4:	dfc00215 	stw	ra,8(sp)
    80f8:	dc400115 	stw	r17,4(sp)
    80fc:	2823883a 	mov	r17,r5
    8100:	00081780 	call	8178 <strlen>
    8104:	81400217 	ldw	r5,8(r16)
    8108:	00c00074 	movhi	r3,1
    810c:	18e06504 	addi	r3,r3,-32364
    8110:	28c00115 	stw	r3,4(r5)
    8114:	8009883a 	mov	r4,r16
    8118:	880d883a 	mov	r6,r17
    811c:	100f883a 	mov	r7,r2
    8120:	00081940 	call	8194 <__sfvwrite_small_dev>
    8124:	00ffffc4 	movi	r3,-1
    8128:	10c00926 	beq	r2,r3,8150 <_puts_r+0x6c>
    812c:	81400217 	ldw	r5,8(r16)
    8130:	01800074 	movhi	r6,1
    8134:	8009883a 	mov	r4,r16
    8138:	28800117 	ldw	r2,4(r5)
    813c:	31a4ff04 	addi	r6,r6,-27652
    8140:	01c00044 	movi	r7,1
    8144:	103ee83a 	callr	r2
    8148:	10bfffe0 	cmpeqi	r2,r2,-1
    814c:	0085c83a 	sub	r2,zero,r2
    8150:	dfc00217 	ldw	ra,8(sp)
    8154:	dc400117 	ldw	r17,4(sp)
    8158:	dc000017 	ldw	r16,0(sp)
    815c:	dec00304 	addi	sp,sp,12
    8160:	f800283a 	ret

00008164 <puts>:
    8164:	00800074 	movhi	r2,1
    8168:	10a5b904 	addi	r2,r2,-26908
    816c:	200b883a 	mov	r5,r4
    8170:	11000017 	ldw	r4,0(r2)
    8174:	00080e41 	jmpi	80e4 <_puts_r>

00008178 <strlen>:
    8178:	2005883a 	mov	r2,r4
    817c:	10c00007 	ldb	r3,0(r2)
    8180:	18000226 	beq	r3,zero,818c <strlen+0x14>
    8184:	10800044 	addi	r2,r2,1
    8188:	003ffc06 	br	817c <_gp+0xffff6a9c>
    818c:	1105c83a 	sub	r2,r2,r4
    8190:	f800283a 	ret

00008194 <__sfvwrite_small_dev>:
    8194:	2880000b 	ldhu	r2,0(r5)
    8198:	defffa04 	addi	sp,sp,-24
    819c:	dc000015 	stw	r16,0(sp)
    81a0:	dfc00515 	stw	ra,20(sp)
    81a4:	dd000415 	stw	r20,16(sp)
    81a8:	dcc00315 	stw	r19,12(sp)
    81ac:	dc800215 	stw	r18,8(sp)
    81b0:	dc400115 	stw	r17,4(sp)
    81b4:	1080020c 	andi	r2,r2,8
    81b8:	2821883a 	mov	r16,r5
    81bc:	10001726 	beq	r2,zero,821c <__sfvwrite_small_dev+0x88>
    81c0:	2880008f 	ldh	r2,2(r5)
    81c4:	10001216 	blt	r2,zero,8210 <__sfvwrite_small_dev+0x7c>
    81c8:	2027883a 	mov	r19,r4
    81cc:	3025883a 	mov	r18,r6
    81d0:	3823883a 	mov	r17,r7
    81d4:	05010004 	movi	r20,1024
    81d8:	04400b0e 	bge	zero,r17,8208 <__sfvwrite_small_dev+0x74>
    81dc:	8140008f 	ldh	r5,2(r16)
    81e0:	880f883a 	mov	r7,r17
    81e4:	a440010e 	bge	r20,r17,81ec <__sfvwrite_small_dev+0x58>
    81e8:	01c10004 	movi	r7,1024
    81ec:	9809883a 	mov	r4,r19
    81f0:	900d883a 	mov	r6,r18
    81f4:	00082400 	call	8240 <_write_r>
    81f8:	0080050e 	bge	zero,r2,8210 <__sfvwrite_small_dev+0x7c>
    81fc:	88a3c83a 	sub	r17,r17,r2
    8200:	90a5883a 	add	r18,r18,r2
    8204:	003ff406 	br	81d8 <_gp+0xffff6af8>
    8208:	0005883a 	mov	r2,zero
    820c:	00000406 	br	8220 <__sfvwrite_small_dev+0x8c>
    8210:	8080000b 	ldhu	r2,0(r16)
    8214:	10801014 	ori	r2,r2,64
    8218:	8080000d 	sth	r2,0(r16)
    821c:	00bfffc4 	movi	r2,-1
    8220:	dfc00517 	ldw	ra,20(sp)
    8224:	dd000417 	ldw	r20,16(sp)
    8228:	dcc00317 	ldw	r19,12(sp)
    822c:	dc800217 	ldw	r18,8(sp)
    8230:	dc400117 	ldw	r17,4(sp)
    8234:	dc000017 	ldw	r16,0(sp)
    8238:	dec00604 	addi	sp,sp,24
    823c:	f800283a 	ret

00008240 <_write_r>:
    8240:	defffd04 	addi	sp,sp,-12
    8244:	dc000015 	stw	r16,0(sp)
    8248:	04000074 	movhi	r16,1
    824c:	dc400115 	stw	r17,4(sp)
    8250:	84267504 	addi	r16,r16,-26156
    8254:	2023883a 	mov	r17,r4
    8258:	2809883a 	mov	r4,r5
    825c:	300b883a 	mov	r5,r6
    8260:	380d883a 	mov	r6,r7
    8264:	dfc00215 	stw	ra,8(sp)
    8268:	80000015 	stw	zero,0(r16)
    826c:	00084340 	call	8434 <write>
    8270:	00ffffc4 	movi	r3,-1
    8274:	10c0031e 	bne	r2,r3,8284 <_write_r+0x44>
    8278:	80c00017 	ldw	r3,0(r16)
    827c:	18000126 	beq	r3,zero,8284 <_write_r+0x44>
    8280:	88c00015 	stw	r3,0(r17)
    8284:	dfc00217 	ldw	ra,8(sp)
    8288:	dc400117 	ldw	r17,4(sp)
    828c:	dc000017 	ldw	r16,0(sp)
    8290:	dec00304 	addi	sp,sp,12
    8294:	f800283a 	ret

00008298 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8298:	defffc04 	addi	sp,sp,-16
    829c:	df000315 	stw	fp,12(sp)
    82a0:	df000304 	addi	fp,sp,12
    82a4:	e13ffd15 	stw	r4,-12(fp)
    82a8:	e17ffe15 	stw	r5,-8(fp)
    82ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    82b0:	e0fffe17 	ldw	r3,-8(fp)
    82b4:	e0bffd17 	ldw	r2,-12(fp)
    82b8:	18800c26 	beq	r3,r2,82ec <alt_load_section+0x54>
  {
    while( to != end )
    82bc:	00000806 	br	82e0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    82c0:	e0bffe17 	ldw	r2,-8(fp)
    82c4:	10c00104 	addi	r3,r2,4
    82c8:	e0fffe15 	stw	r3,-8(fp)
    82cc:	e0fffd17 	ldw	r3,-12(fp)
    82d0:	19000104 	addi	r4,r3,4
    82d4:	e13ffd15 	stw	r4,-12(fp)
    82d8:	18c00017 	ldw	r3,0(r3)
    82dc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    82e0:	e0fffe17 	ldw	r3,-8(fp)
    82e4:	e0bfff17 	ldw	r2,-4(fp)
    82e8:	18bff51e 	bne	r3,r2,82c0 <_gp+0xffff6be0>
    {
      *to++ = *from++;
    }
  }
}
    82ec:	e037883a 	mov	sp,fp
    82f0:	df000017 	ldw	fp,0(sp)
    82f4:	dec00104 	addi	sp,sp,4
    82f8:	f800283a 	ret

000082fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    82fc:	defffe04 	addi	sp,sp,-8
    8300:	dfc00115 	stw	ra,4(sp)
    8304:	df000015 	stw	fp,0(sp)
    8308:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    830c:	01000074 	movhi	r4,1
    8310:	2125c004 	addi	r4,r4,-26880
    8314:	01400074 	movhi	r5,1
    8318:	29650b04 	addi	r5,r5,-27604
    831c:	01800074 	movhi	r6,1
    8320:	31a5c004 	addi	r6,r6,-26880
    8324:	00082980 	call	8298 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8328:	01000074 	movhi	r4,1
    832c:	21200804 	addi	r4,r4,-32736
    8330:	01400074 	movhi	r5,1
    8334:	29600804 	addi	r5,r5,-32736
    8338:	01800074 	movhi	r6,1
    833c:	31a00804 	addi	r6,r6,-32736
    8340:	00082980 	call	8298 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8344:	01000074 	movhi	r4,1
    8348:	2124fa04 	addi	r4,r4,-27672
    834c:	01400074 	movhi	r5,1
    8350:	2964fa04 	addi	r5,r5,-27672
    8354:	01800074 	movhi	r6,1
    8358:	31a50b04 	addi	r6,r6,-27604
    835c:	00082980 	call	8298 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8360:	00089340 	call	8934 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8364:	0008a700 	call	8a70 <alt_icache_flush_all>
}
    8368:	e037883a 	mov	sp,fp
    836c:	dfc00117 	ldw	ra,4(sp)
    8370:	df000017 	ldw	fp,0(sp)
    8374:	dec00204 	addi	sp,sp,8
    8378:	f800283a 	ret

0000837c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    837c:	defffd04 	addi	sp,sp,-12
    8380:	dfc00215 	stw	ra,8(sp)
    8384:	df000115 	stw	fp,4(sp)
    8388:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    838c:	0009883a 	mov	r4,zero
    8390:	000856c0 	call	856c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8394:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8398:	00085a00 	call	85a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    839c:	01000074 	movhi	r4,1
    83a0:	21250004 	addi	r4,r4,-27648
    83a4:	01400074 	movhi	r5,1
    83a8:	29650004 	addi	r5,r5,-27648
    83ac:	01800074 	movhi	r6,1
    83b0:	31a50004 	addi	r6,r6,-27648
    83b4:	0008b6c0 	call	8b6c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    83b8:	d120be17 	ldw	r4,-32008(gp)
    83bc:	d0e0bf17 	ldw	r3,-32004(gp)
    83c0:	d0a0c017 	ldw	r2,-32000(gp)
    83c4:	180b883a 	mov	r5,r3
    83c8:	100d883a 	mov	r6,r2
    83cc:	000809c0 	call	809c <main>
    83d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    83d4:	01000044 	movi	r4,1
    83d8:	000885c0 	call	885c <close>
  exit (result);
    83dc:	e13fff17 	ldw	r4,-4(fp)
    83e0:	00091a00 	call	91a0 <exit>

000083e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    83e4:	defffe04 	addi	sp,sp,-8
    83e8:	dfc00115 	stw	ra,4(sp)
    83ec:	df000015 	stw	fp,0(sp)
    83f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    83f4:	00800074 	movhi	r2,1
    83f8:	10a5bf04 	addi	r2,r2,-26884
    83fc:	10800017 	ldw	r2,0(r2)
    8400:	10000526 	beq	r2,zero,8418 <alt_get_errno+0x34>
    8404:	00800074 	movhi	r2,1
    8408:	10a5bf04 	addi	r2,r2,-26884
    840c:	10800017 	ldw	r2,0(r2)
    8410:	103ee83a 	callr	r2
    8414:	00000206 	br	8420 <alt_get_errno+0x3c>
    8418:	00800074 	movhi	r2,1
    841c:	10a67504 	addi	r2,r2,-26156
}
    8420:	e037883a 	mov	sp,fp
    8424:	dfc00117 	ldw	ra,4(sp)
    8428:	df000017 	ldw	fp,0(sp)
    842c:	dec00204 	addi	sp,sp,8
    8430:	f800283a 	ret

00008434 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8434:	defff904 	addi	sp,sp,-28
    8438:	dfc00615 	stw	ra,24(sp)
    843c:	df000515 	stw	fp,20(sp)
    8440:	df000504 	addi	fp,sp,20
    8444:	e13ffd15 	stw	r4,-12(fp)
    8448:	e17ffe15 	stw	r5,-8(fp)
    844c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8450:	e0bffd17 	ldw	r2,-12(fp)
    8454:	10000816 	blt	r2,zero,8478 <write+0x44>
    8458:	e13ffd17 	ldw	r4,-12(fp)
    845c:	01400304 	movi	r5,12
    8460:	000938c0 	call	938c <__mulsi3>
    8464:	1007883a 	mov	r3,r2
    8468:	00800074 	movhi	r2,1
    846c:	10a55804 	addi	r2,r2,-27296
    8470:	1885883a 	add	r2,r3,r2
    8474:	00000106 	br	847c <write+0x48>
    8478:	0005883a 	mov	r2,zero
    847c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    8480:	e0bffb17 	ldw	r2,-20(fp)
    8484:	10002126 	beq	r2,zero,850c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8488:	e0bffb17 	ldw	r2,-20(fp)
    848c:	10800217 	ldw	r2,8(r2)
    8490:	108000cc 	andi	r2,r2,3
    8494:	10001826 	beq	r2,zero,84f8 <write+0xc4>
    8498:	e0bffb17 	ldw	r2,-20(fp)
    849c:	10800017 	ldw	r2,0(r2)
    84a0:	10800617 	ldw	r2,24(r2)
    84a4:	10001426 	beq	r2,zero,84f8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    84a8:	e0bffb17 	ldw	r2,-20(fp)
    84ac:	10800017 	ldw	r2,0(r2)
    84b0:	10800617 	ldw	r2,24(r2)
    84b4:	e0ffff17 	ldw	r3,-4(fp)
    84b8:	e13ffb17 	ldw	r4,-20(fp)
    84bc:	e17ffe17 	ldw	r5,-8(fp)
    84c0:	180d883a 	mov	r6,r3
    84c4:	103ee83a 	callr	r2
    84c8:	e0bffc15 	stw	r2,-16(fp)
    84cc:	e0bffc17 	ldw	r2,-16(fp)
    84d0:	1000070e 	bge	r2,zero,84f0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    84d4:	00083e40 	call	83e4 <alt_get_errno>
    84d8:	1007883a 	mov	r3,r2
    84dc:	e0bffc17 	ldw	r2,-16(fp)
    84e0:	0085c83a 	sub	r2,zero,r2
    84e4:	18800015 	stw	r2,0(r3)
        return -1;
    84e8:	00bfffc4 	movi	r2,-1
    84ec:	00000c06 	br	8520 <write+0xec>
      }
      return rval;
    84f0:	e0bffc17 	ldw	r2,-16(fp)
    84f4:	00000a06 	br	8520 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    84f8:	00083e40 	call	83e4 <alt_get_errno>
    84fc:	1007883a 	mov	r3,r2
    8500:	00800344 	movi	r2,13
    8504:	18800015 	stw	r2,0(r3)
    8508:	00000406 	br	851c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    850c:	00083e40 	call	83e4 <alt_get_errno>
    8510:	1007883a 	mov	r3,r2
    8514:	00801444 	movi	r2,81
    8518:	18800015 	stw	r2,0(r3)
  }
  return -1;
    851c:	00bfffc4 	movi	r2,-1
}
    8520:	e037883a 	mov	sp,fp
    8524:	dfc00117 	ldw	ra,4(sp)
    8528:	df000017 	ldw	fp,0(sp)
    852c:	dec00204 	addi	sp,sp,8
    8530:	f800283a 	ret

00008534 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8534:	defffd04 	addi	sp,sp,-12
    8538:	dfc00215 	stw	ra,8(sp)
    853c:	df000115 	stw	fp,4(sp)
    8540:	df000104 	addi	fp,sp,4
    8544:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8548:	e13fff17 	ldw	r4,-4(fp)
    854c:	01400074 	movhi	r5,1
    8550:	2965bc04 	addi	r5,r5,-26896
    8554:	00089cc0 	call	89cc <alt_dev_llist_insert>
}
    8558:	e037883a 	mov	sp,fp
    855c:	dfc00117 	ldw	ra,4(sp)
    8560:	df000017 	ldw	fp,0(sp)
    8564:	dec00204 	addi	sp,sp,8
    8568:	f800283a 	ret

0000856c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    856c:	defffd04 	addi	sp,sp,-12
    8570:	dfc00215 	stw	ra,8(sp)
    8574:	df000115 	stw	fp,4(sp)
    8578:	df000104 	addi	fp,sp,4
    857c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8580:	0008f080 	call	8f08 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8584:	00800044 	movi	r2,1
    8588:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    858c:	e037883a 	mov	sp,fp
    8590:	dfc00117 	ldw	ra,4(sp)
    8594:	df000017 	ldw	fp,0(sp)
    8598:	dec00204 	addi	sp,sp,8
    859c:	f800283a 	ret

000085a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    85a0:	defffe04 	addi	sp,sp,-8
    85a4:	dfc00115 	stw	ra,4(sp)
    85a8:	df000015 	stw	fp,0(sp)
    85ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    85b0:	01000074 	movhi	r4,1
    85b4:	21254304 	addi	r4,r4,-27380
    85b8:	00085340 	call	8534 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    85bc:	0001883a 	nop
}
    85c0:	e037883a 	mov	sp,fp
    85c4:	dfc00117 	ldw	ra,4(sp)
    85c8:	df000017 	ldw	fp,0(sp)
    85cc:	dec00204 	addi	sp,sp,8
    85d0:	f800283a 	ret

000085d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    85d4:	defffa04 	addi	sp,sp,-24
    85d8:	dfc00515 	stw	ra,20(sp)
    85dc:	df000415 	stw	fp,16(sp)
    85e0:	df000404 	addi	fp,sp,16
    85e4:	e13ffd15 	stw	r4,-12(fp)
    85e8:	e17ffe15 	stw	r5,-8(fp)
    85ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    85f0:	e0bffd17 	ldw	r2,-12(fp)
    85f4:	10800017 	ldw	r2,0(r2)
    85f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    85fc:	e0bffc17 	ldw	r2,-16(fp)
    8600:	10c00a04 	addi	r3,r2,40
    8604:	e0bffd17 	ldw	r2,-12(fp)
    8608:	10800217 	ldw	r2,8(r2)
    860c:	1809883a 	mov	r4,r3
    8610:	e17ffe17 	ldw	r5,-8(fp)
    8614:	e1bfff17 	ldw	r6,-4(fp)
    8618:	100f883a 	mov	r7,r2
    861c:	00086940 	call	8694 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8620:	e037883a 	mov	sp,fp
    8624:	dfc00117 	ldw	ra,4(sp)
    8628:	df000017 	ldw	fp,0(sp)
    862c:	dec00204 	addi	sp,sp,8
    8630:	f800283a 	ret

00008634 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8634:	defffa04 	addi	sp,sp,-24
    8638:	dfc00515 	stw	ra,20(sp)
    863c:	df000415 	stw	fp,16(sp)
    8640:	df000404 	addi	fp,sp,16
    8644:	e13ffd15 	stw	r4,-12(fp)
    8648:	e17ffe15 	stw	r5,-8(fp)
    864c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8650:	e0bffd17 	ldw	r2,-12(fp)
    8654:	10800017 	ldw	r2,0(r2)
    8658:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    865c:	e0bffc17 	ldw	r2,-16(fp)
    8660:	10c00a04 	addi	r3,r2,40
    8664:	e0bffd17 	ldw	r2,-12(fp)
    8668:	10800217 	ldw	r2,8(r2)
    866c:	1809883a 	mov	r4,r3
    8670:	e17ffe17 	ldw	r5,-8(fp)
    8674:	e1bfff17 	ldw	r6,-4(fp)
    8678:	100f883a 	mov	r7,r2
    867c:	00087780 	call	8778 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8680:	e037883a 	mov	sp,fp
    8684:	dfc00117 	ldw	ra,4(sp)
    8688:	df000017 	ldw	fp,0(sp)
    868c:	dec00204 	addi	sp,sp,8
    8690:	f800283a 	ret

00008694 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8694:	defff704 	addi	sp,sp,-36
    8698:	df000815 	stw	fp,32(sp)
    869c:	df000804 	addi	fp,sp,32
    86a0:	e13ffc15 	stw	r4,-16(fp)
    86a4:	e17ffd15 	stw	r5,-12(fp)
    86a8:	e1bffe15 	stw	r6,-8(fp)
    86ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    86b0:	e0bffc17 	ldw	r2,-16(fp)
    86b4:	10800017 	ldw	r2,0(r2)
    86b8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    86bc:	e0bffd17 	ldw	r2,-12(fp)
    86c0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    86c4:	e0bffe17 	ldw	r2,-8(fp)
    86c8:	e0fffd17 	ldw	r3,-12(fp)
    86cc:	1885883a 	add	r2,r3,r2
    86d0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    86d4:	00001406 	br	8728 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    86d8:	e0bff917 	ldw	r2,-28(fp)
    86dc:	10800037 	ldwio	r2,0(r2)
    86e0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    86e4:	e0bffb17 	ldw	r2,-20(fp)
    86e8:	10a0000c 	andi	r2,r2,32768
    86ec:	10000626 	beq	r2,zero,8708 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    86f0:	e0bff817 	ldw	r2,-32(fp)
    86f4:	10c00044 	addi	r3,r2,1
    86f8:	e0fff815 	stw	r3,-32(fp)
    86fc:	e0fffb17 	ldw	r3,-20(fp)
    8700:	10c00005 	stb	r3,0(r2)
    8704:	00000806 	br	8728 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    8708:	e0fff817 	ldw	r3,-32(fp)
    870c:	e0bffd17 	ldw	r2,-12(fp)
    8710:	18800126 	beq	r3,r2,8718 <altera_avalon_jtag_uart_read+0x84>
      break;
    8714:	00000706 	br	8734 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
    8718:	e0bfff17 	ldw	r2,-4(fp)
    871c:	1090000c 	andi	r2,r2,16384
    8720:	10000126 	beq	r2,zero,8728 <altera_avalon_jtag_uart_read+0x94>
      break;   
    8724:	00000306 	br	8734 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8728:	e0fff817 	ldw	r3,-32(fp)
    872c:	e0bffa17 	ldw	r2,-24(fp)
    8730:	18bfe936 	bltu	r3,r2,86d8 <_gp+0xffff6ff8>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    8734:	e0fff817 	ldw	r3,-32(fp)
    8738:	e0bffd17 	ldw	r2,-12(fp)
    873c:	18800426 	beq	r3,r2,8750 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
    8740:	e0fff817 	ldw	r3,-32(fp)
    8744:	e0bffd17 	ldw	r2,-12(fp)
    8748:	1885c83a 	sub	r2,r3,r2
    874c:	00000606 	br	8768 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
    8750:	e0bfff17 	ldw	r2,-4(fp)
    8754:	1090000c 	andi	r2,r2,16384
    8758:	10000226 	beq	r2,zero,8764 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
    875c:	00bffd44 	movi	r2,-11
    8760:	00000106 	br	8768 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
    8764:	00bffec4 	movi	r2,-5
}
    8768:	e037883a 	mov	sp,fp
    876c:	df000017 	ldw	fp,0(sp)
    8770:	dec00104 	addi	sp,sp,4
    8774:	f800283a 	ret

00008778 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8778:	defff904 	addi	sp,sp,-28
    877c:	df000615 	stw	fp,24(sp)
    8780:	df000604 	addi	fp,sp,24
    8784:	e13ffc15 	stw	r4,-16(fp)
    8788:	e17ffd15 	stw	r5,-12(fp)
    878c:	e1bffe15 	stw	r6,-8(fp)
    8790:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8794:	e0bffc17 	ldw	r2,-16(fp)
    8798:	10800017 	ldw	r2,0(r2)
    879c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    87a0:	e0bffe17 	ldw	r2,-8(fp)
    87a4:	e0fffd17 	ldw	r3,-12(fp)
    87a8:	1885883a 	add	r2,r3,r2
    87ac:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    87b0:	00000e06 	br	87ec <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    87b4:	e0bffa17 	ldw	r2,-24(fp)
    87b8:	10800104 	addi	r2,r2,4
    87bc:	10800037 	ldwio	r2,0(r2)
    87c0:	10bfffec 	andhi	r2,r2,65535
    87c4:	10000926 	beq	r2,zero,87ec <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    87c8:	e0fffa17 	ldw	r3,-24(fp)
    87cc:	e0bffd17 	ldw	r2,-12(fp)
    87d0:	11000044 	addi	r4,r2,1
    87d4:	e13ffd15 	stw	r4,-12(fp)
    87d8:	10800003 	ldbu	r2,0(r2)
    87dc:	10803fcc 	andi	r2,r2,255
    87e0:	1080201c 	xori	r2,r2,128
    87e4:	10bfe004 	addi	r2,r2,-128
    87e8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    87ec:	e0fffd17 	ldw	r3,-12(fp)
    87f0:	e0bffb17 	ldw	r2,-20(fp)
    87f4:	18bfef36 	bltu	r3,r2,87b4 <_gp+0xffff70d4>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    87f8:	e0bffe17 	ldw	r2,-8(fp)
}
    87fc:	e037883a 	mov	sp,fp
    8800:	df000017 	ldw	fp,0(sp)
    8804:	dec00104 	addi	sp,sp,4
    8808:	f800283a 	ret

0000880c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    880c:	defffe04 	addi	sp,sp,-8
    8810:	dfc00115 	stw	ra,4(sp)
    8814:	df000015 	stw	fp,0(sp)
    8818:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    881c:	00800074 	movhi	r2,1
    8820:	10a5bf04 	addi	r2,r2,-26884
    8824:	10800017 	ldw	r2,0(r2)
    8828:	10000526 	beq	r2,zero,8840 <alt_get_errno+0x34>
    882c:	00800074 	movhi	r2,1
    8830:	10a5bf04 	addi	r2,r2,-26884
    8834:	10800017 	ldw	r2,0(r2)
    8838:	103ee83a 	callr	r2
    883c:	00000206 	br	8848 <alt_get_errno+0x3c>
    8840:	00800074 	movhi	r2,1
    8844:	10a67504 	addi	r2,r2,-26156
}
    8848:	e037883a 	mov	sp,fp
    884c:	dfc00117 	ldw	ra,4(sp)
    8850:	df000017 	ldw	fp,0(sp)
    8854:	dec00204 	addi	sp,sp,8
    8858:	f800283a 	ret

0000885c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    885c:	defffb04 	addi	sp,sp,-20
    8860:	dfc00415 	stw	ra,16(sp)
    8864:	df000315 	stw	fp,12(sp)
    8868:	df000304 	addi	fp,sp,12
    886c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8870:	e0bfff17 	ldw	r2,-4(fp)
    8874:	10000816 	blt	r2,zero,8898 <close+0x3c>
    8878:	e13fff17 	ldw	r4,-4(fp)
    887c:	01400304 	movi	r5,12
    8880:	000938c0 	call	938c <__mulsi3>
    8884:	1007883a 	mov	r3,r2
    8888:	00800074 	movhi	r2,1
    888c:	10a55804 	addi	r2,r2,-27296
    8890:	1885883a 	add	r2,r3,r2
    8894:	00000106 	br	889c <close+0x40>
    8898:	0005883a 	mov	r2,zero
    889c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    88a0:	e0bffd17 	ldw	r2,-12(fp)
    88a4:	10001926 	beq	r2,zero,890c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    88a8:	e0bffd17 	ldw	r2,-12(fp)
    88ac:	10800017 	ldw	r2,0(r2)
    88b0:	10800417 	ldw	r2,16(r2)
    88b4:	10000626 	beq	r2,zero,88d0 <close+0x74>
    88b8:	e0bffd17 	ldw	r2,-12(fp)
    88bc:	10800017 	ldw	r2,0(r2)
    88c0:	10800417 	ldw	r2,16(r2)
    88c4:	e13ffd17 	ldw	r4,-12(fp)
    88c8:	103ee83a 	callr	r2
    88cc:	00000106 	br	88d4 <close+0x78>
    88d0:	0005883a 	mov	r2,zero
    88d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    88d8:	e13fff17 	ldw	r4,-4(fp)
    88dc:	0008e880 	call	8e88 <alt_release_fd>
    if (rval < 0)
    88e0:	e0bffe17 	ldw	r2,-8(fp)
    88e4:	1000070e 	bge	r2,zero,8904 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    88e8:	000880c0 	call	880c <alt_get_errno>
    88ec:	1007883a 	mov	r3,r2
    88f0:	e0bffe17 	ldw	r2,-8(fp)
    88f4:	0085c83a 	sub	r2,zero,r2
    88f8:	18800015 	stw	r2,0(r3)
      return -1;
    88fc:	00bfffc4 	movi	r2,-1
    8900:	00000706 	br	8920 <close+0xc4>
    }
    return 0;
    8904:	0005883a 	mov	r2,zero
    8908:	00000506 	br	8920 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    890c:	000880c0 	call	880c <alt_get_errno>
    8910:	1007883a 	mov	r3,r2
    8914:	00801444 	movi	r2,81
    8918:	18800015 	stw	r2,0(r3)
    return -1;
    891c:	00bfffc4 	movi	r2,-1
  }
}
    8920:	e037883a 	mov	sp,fp
    8924:	dfc00117 	ldw	ra,4(sp)
    8928:	df000017 	ldw	fp,0(sp)
    892c:	dec00204 	addi	sp,sp,8
    8930:	f800283a 	ret

00008934 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8934:	deffff04 	addi	sp,sp,-4
    8938:	df000015 	stw	fp,0(sp)
    893c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8940:	e037883a 	mov	sp,fp
    8944:	df000017 	ldw	fp,0(sp)
    8948:	dec00104 	addi	sp,sp,4
    894c:	f800283a 	ret

00008950 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8950:	defffc04 	addi	sp,sp,-16
    8954:	df000315 	stw	fp,12(sp)
    8958:	df000304 	addi	fp,sp,12
    895c:	e13ffd15 	stw	r4,-12(fp)
    8960:	e17ffe15 	stw	r5,-8(fp)
    8964:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8968:	e0bfff17 	ldw	r2,-4(fp)
}
    896c:	e037883a 	mov	sp,fp
    8970:	df000017 	ldw	fp,0(sp)
    8974:	dec00104 	addi	sp,sp,4
    8978:	f800283a 	ret

0000897c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    897c:	defffe04 	addi	sp,sp,-8
    8980:	dfc00115 	stw	ra,4(sp)
    8984:	df000015 	stw	fp,0(sp)
    8988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    898c:	00800074 	movhi	r2,1
    8990:	10a5bf04 	addi	r2,r2,-26884
    8994:	10800017 	ldw	r2,0(r2)
    8998:	10000526 	beq	r2,zero,89b0 <alt_get_errno+0x34>
    899c:	00800074 	movhi	r2,1
    89a0:	10a5bf04 	addi	r2,r2,-26884
    89a4:	10800017 	ldw	r2,0(r2)
    89a8:	103ee83a 	callr	r2
    89ac:	00000206 	br	89b8 <alt_get_errno+0x3c>
    89b0:	00800074 	movhi	r2,1
    89b4:	10a67504 	addi	r2,r2,-26156
}
    89b8:	e037883a 	mov	sp,fp
    89bc:	dfc00117 	ldw	ra,4(sp)
    89c0:	df000017 	ldw	fp,0(sp)
    89c4:	dec00204 	addi	sp,sp,8
    89c8:	f800283a 	ret

000089cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    89cc:	defffa04 	addi	sp,sp,-24
    89d0:	dfc00515 	stw	ra,20(sp)
    89d4:	df000415 	stw	fp,16(sp)
    89d8:	df000404 	addi	fp,sp,16
    89dc:	e13ffe15 	stw	r4,-8(fp)
    89e0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    89e4:	e0bffe17 	ldw	r2,-8(fp)
    89e8:	10000326 	beq	r2,zero,89f8 <alt_dev_llist_insert+0x2c>
    89ec:	e0bffe17 	ldw	r2,-8(fp)
    89f0:	10800217 	ldw	r2,8(r2)
    89f4:	1000061e 	bne	r2,zero,8a10 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    89f8:	000897c0 	call	897c <alt_get_errno>
    89fc:	1007883a 	mov	r3,r2
    8a00:	00800584 	movi	r2,22
    8a04:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    8a08:	00bffa84 	movi	r2,-22
    8a0c:	00001306 	br	8a5c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8a10:	e0bffe17 	ldw	r2,-8(fp)
    8a14:	e0ffff17 	ldw	r3,-4(fp)
    8a18:	e0fffc15 	stw	r3,-16(fp)
    8a1c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8a20:	e0bffd17 	ldw	r2,-12(fp)
    8a24:	e0fffc17 	ldw	r3,-16(fp)
    8a28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8a2c:	e0bffc17 	ldw	r2,-16(fp)
    8a30:	10c00017 	ldw	r3,0(r2)
    8a34:	e0bffd17 	ldw	r2,-12(fp)
    8a38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8a3c:	e0bffc17 	ldw	r2,-16(fp)
    8a40:	10800017 	ldw	r2,0(r2)
    8a44:	e0fffd17 	ldw	r3,-12(fp)
    8a48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8a4c:	e0bffc17 	ldw	r2,-16(fp)
    8a50:	e0fffd17 	ldw	r3,-12(fp)
    8a54:	10c00015 	stw	r3,0(r2)

  return 0;  
    8a58:	0005883a 	mov	r2,zero
}
    8a5c:	e037883a 	mov	sp,fp
    8a60:	dfc00117 	ldw	ra,4(sp)
    8a64:	df000017 	ldw	fp,0(sp)
    8a68:	dec00204 	addi	sp,sp,8
    8a6c:	f800283a 	ret

00008a70 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8a70:	deffff04 	addi	sp,sp,-4
    8a74:	df000015 	stw	fp,0(sp)
    8a78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8a7c:	e037883a 	mov	sp,fp
    8a80:	df000017 	ldw	fp,0(sp)
    8a84:	dec00104 	addi	sp,sp,4
    8a88:	f800283a 	ret

00008a8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8a8c:	defff804 	addi	sp,sp,-32
    8a90:	dfc00715 	stw	ra,28(sp)
    8a94:	df000615 	stw	fp,24(sp)
    8a98:	dc000515 	stw	r16,20(sp)
    8a9c:	df000604 	addi	fp,sp,24
    8aa0:	e13ffb15 	stw	r4,-20(fp)
    8aa4:	e17ffc15 	stw	r5,-16(fp)
    8aa8:	e1bffd15 	stw	r6,-12(fp)
    8aac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    8ab0:	e13ffc17 	ldw	r4,-16(fp)
    8ab4:	e17ffd17 	ldw	r5,-12(fp)
    8ab8:	e1bffe17 	ldw	r6,-8(fp)
    8abc:	0008d280 	call	8d28 <open>
    8ac0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    8ac4:	e0bffa17 	ldw	r2,-24(fp)
    8ac8:	10002216 	blt	r2,zero,8b54 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    8acc:	04000074 	movhi	r16,1
    8ad0:	84255804 	addi	r16,r16,-27296
    8ad4:	e0bffa17 	ldw	r2,-24(fp)
    8ad8:	1009883a 	mov	r4,r2
    8adc:	01400304 	movi	r5,12
    8ae0:	000938c0 	call	938c <__mulsi3>
    8ae4:	8085883a 	add	r2,r16,r2
    8ae8:	10c00017 	ldw	r3,0(r2)
    8aec:	e0bffb17 	ldw	r2,-20(fp)
    8af0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    8af4:	04000074 	movhi	r16,1
    8af8:	84255804 	addi	r16,r16,-27296
    8afc:	e0bffa17 	ldw	r2,-24(fp)
    8b00:	1009883a 	mov	r4,r2
    8b04:	01400304 	movi	r5,12
    8b08:	000938c0 	call	938c <__mulsi3>
    8b0c:	8085883a 	add	r2,r16,r2
    8b10:	10800104 	addi	r2,r2,4
    8b14:	10c00017 	ldw	r3,0(r2)
    8b18:	e0bffb17 	ldw	r2,-20(fp)
    8b1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    8b20:	04000074 	movhi	r16,1
    8b24:	84255804 	addi	r16,r16,-27296
    8b28:	e0bffa17 	ldw	r2,-24(fp)
    8b2c:	1009883a 	mov	r4,r2
    8b30:	01400304 	movi	r5,12
    8b34:	000938c0 	call	938c <__mulsi3>
    8b38:	8085883a 	add	r2,r16,r2
    8b3c:	10800204 	addi	r2,r2,8
    8b40:	10c00017 	ldw	r3,0(r2)
    8b44:	e0bffb17 	ldw	r2,-20(fp)
    8b48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8b4c:	e13ffa17 	ldw	r4,-24(fp)
    8b50:	0008e880 	call	8e88 <alt_release_fd>
  }
} 
    8b54:	e6ffff04 	addi	sp,fp,-4
    8b58:	dfc00217 	ldw	ra,8(sp)
    8b5c:	df000117 	ldw	fp,4(sp)
    8b60:	dc000017 	ldw	r16,0(sp)
    8b64:	dec00304 	addi	sp,sp,12
    8b68:	f800283a 	ret

00008b6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8b6c:	defffb04 	addi	sp,sp,-20
    8b70:	dfc00415 	stw	ra,16(sp)
    8b74:	df000315 	stw	fp,12(sp)
    8b78:	df000304 	addi	fp,sp,12
    8b7c:	e13ffd15 	stw	r4,-12(fp)
    8b80:	e17ffe15 	stw	r5,-8(fp)
    8b84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8b88:	01000074 	movhi	r4,1
    8b8c:	21255b04 	addi	r4,r4,-27284
    8b90:	e17ffd17 	ldw	r5,-12(fp)
    8b94:	01800044 	movi	r6,1
    8b98:	01c07fc4 	movi	r7,511
    8b9c:	0008a8c0 	call	8a8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8ba0:	01000074 	movhi	r4,1
    8ba4:	21255804 	addi	r4,r4,-27296
    8ba8:	e17ffe17 	ldw	r5,-8(fp)
    8bac:	000d883a 	mov	r6,zero
    8bb0:	01c07fc4 	movi	r7,511
    8bb4:	0008a8c0 	call	8a8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8bb8:	01000074 	movhi	r4,1
    8bbc:	21255e04 	addi	r4,r4,-27272
    8bc0:	e17fff17 	ldw	r5,-4(fp)
    8bc4:	01800044 	movi	r6,1
    8bc8:	01c07fc4 	movi	r7,511
    8bcc:	0008a8c0 	call	8a8c <alt_open_fd>
}  
    8bd0:	e037883a 	mov	sp,fp
    8bd4:	dfc00117 	ldw	ra,4(sp)
    8bd8:	df000017 	ldw	fp,0(sp)
    8bdc:	dec00204 	addi	sp,sp,8
    8be0:	f800283a 	ret

00008be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8be4:	defffe04 	addi	sp,sp,-8
    8be8:	dfc00115 	stw	ra,4(sp)
    8bec:	df000015 	stw	fp,0(sp)
    8bf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8bf4:	00800074 	movhi	r2,1
    8bf8:	10a5bf04 	addi	r2,r2,-26884
    8bfc:	10800017 	ldw	r2,0(r2)
    8c00:	10000526 	beq	r2,zero,8c18 <alt_get_errno+0x34>
    8c04:	00800074 	movhi	r2,1
    8c08:	10a5bf04 	addi	r2,r2,-26884
    8c0c:	10800017 	ldw	r2,0(r2)
    8c10:	103ee83a 	callr	r2
    8c14:	00000206 	br	8c20 <alt_get_errno+0x3c>
    8c18:	00800074 	movhi	r2,1
    8c1c:	10a67504 	addi	r2,r2,-26156
}
    8c20:	e037883a 	mov	sp,fp
    8c24:	dfc00117 	ldw	ra,4(sp)
    8c28:	df000017 	ldw	fp,0(sp)
    8c2c:	dec00204 	addi	sp,sp,8
    8c30:	f800283a 	ret

00008c34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8c34:	defffb04 	addi	sp,sp,-20
    8c38:	dfc00415 	stw	ra,16(sp)
    8c3c:	df000315 	stw	fp,12(sp)
    8c40:	dc000215 	stw	r16,8(sp)
    8c44:	df000304 	addi	fp,sp,12
    8c48:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8c4c:	e0bffe17 	ldw	r2,-8(fp)
    8c50:	10800217 	ldw	r2,8(r2)
    8c54:	10d00034 	orhi	r3,r2,16384
    8c58:	e0bffe17 	ldw	r2,-8(fp)
    8c5c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8c60:	e03ffd15 	stw	zero,-12(fp)
    8c64:	00002306 	br	8cf4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8c68:	04000074 	movhi	r16,1
    8c6c:	84255804 	addi	r16,r16,-27296
    8c70:	e0bffd17 	ldw	r2,-12(fp)
    8c74:	1009883a 	mov	r4,r2
    8c78:	01400304 	movi	r5,12
    8c7c:	000938c0 	call	938c <__mulsi3>
    8c80:	8085883a 	add	r2,r16,r2
    8c84:	10c00017 	ldw	r3,0(r2)
    8c88:	e0bffe17 	ldw	r2,-8(fp)
    8c8c:	10800017 	ldw	r2,0(r2)
    8c90:	1880151e 	bne	r3,r2,8ce8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8c94:	04000074 	movhi	r16,1
    8c98:	84255804 	addi	r16,r16,-27296
    8c9c:	e0bffd17 	ldw	r2,-12(fp)
    8ca0:	1009883a 	mov	r4,r2
    8ca4:	01400304 	movi	r5,12
    8ca8:	000938c0 	call	938c <__mulsi3>
    8cac:	8085883a 	add	r2,r16,r2
    8cb0:	10800204 	addi	r2,r2,8
    8cb4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8cb8:	10000b0e 	bge	r2,zero,8ce8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    8cbc:	e13ffd17 	ldw	r4,-12(fp)
    8cc0:	01400304 	movi	r5,12
    8cc4:	000938c0 	call	938c <__mulsi3>
    8cc8:	1007883a 	mov	r3,r2
    8ccc:	00800074 	movhi	r2,1
    8cd0:	10a55804 	addi	r2,r2,-27296
    8cd4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8cd8:	e0bffe17 	ldw	r2,-8(fp)
    8cdc:	18800226 	beq	r3,r2,8ce8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8ce0:	00bffcc4 	movi	r2,-13
    8ce4:	00000a06 	br	8d10 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8ce8:	e0bffd17 	ldw	r2,-12(fp)
    8cec:	10800044 	addi	r2,r2,1
    8cf0:	e0bffd15 	stw	r2,-12(fp)
    8cf4:	00800074 	movhi	r2,1
    8cf8:	10a5be04 	addi	r2,r2,-26888
    8cfc:	10800017 	ldw	r2,0(r2)
    8d00:	1007883a 	mov	r3,r2
    8d04:	e0bffd17 	ldw	r2,-12(fp)
    8d08:	18bfd72e 	bgeu	r3,r2,8c68 <_gp+0xffff7588>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8d0c:	0005883a 	mov	r2,zero
}
    8d10:	e6ffff04 	addi	sp,fp,-4
    8d14:	dfc00217 	ldw	ra,8(sp)
    8d18:	df000117 	ldw	fp,4(sp)
    8d1c:	dc000017 	ldw	r16,0(sp)
    8d20:	dec00304 	addi	sp,sp,12
    8d24:	f800283a 	ret

00008d28 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8d28:	defff604 	addi	sp,sp,-40
    8d2c:	dfc00915 	stw	ra,36(sp)
    8d30:	df000815 	stw	fp,32(sp)
    8d34:	df000804 	addi	fp,sp,32
    8d38:	e13ffd15 	stw	r4,-12(fp)
    8d3c:	e17ffe15 	stw	r5,-8(fp)
    8d40:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8d44:	00bfffc4 	movi	r2,-1
    8d48:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    8d4c:	00bffb44 	movi	r2,-19
    8d50:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    8d54:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8d58:	e13ffd17 	ldw	r4,-12(fp)
    8d5c:	01400074 	movhi	r5,1
    8d60:	2965bc04 	addi	r5,r5,-26896
    8d64:	0008f280 	call	8f28 <alt_find_dev>
    8d68:	e0bff815 	stw	r2,-32(fp)
    8d6c:	e0bff817 	ldw	r2,-32(fp)
    8d70:	1000051e 	bne	r2,zero,8d88 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8d74:	e13ffd17 	ldw	r4,-12(fp)
    8d78:	0008fb80 	call	8fb8 <alt_find_file>
    8d7c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    8d80:	00800044 	movi	r2,1
    8d84:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8d88:	e0bff817 	ldw	r2,-32(fp)
    8d8c:	10002b26 	beq	r2,zero,8e3c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8d90:	e13ff817 	ldw	r4,-32(fp)
    8d94:	00090cc0 	call	90cc <alt_get_fd>
    8d98:	e0bff915 	stw	r2,-28(fp)
    8d9c:	e0bff917 	ldw	r2,-28(fp)
    8da0:	1000030e 	bge	r2,zero,8db0 <open+0x88>
    {
      status = index;
    8da4:	e0bff917 	ldw	r2,-28(fp)
    8da8:	e0bffa15 	stw	r2,-24(fp)
    8dac:	00002506 	br	8e44 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    8db0:	e13ff917 	ldw	r4,-28(fp)
    8db4:	01400304 	movi	r5,12
    8db8:	000938c0 	call	938c <__mulsi3>
    8dbc:	1007883a 	mov	r3,r2
    8dc0:	00800074 	movhi	r2,1
    8dc4:	10a55804 	addi	r2,r2,-27296
    8dc8:	1885883a 	add	r2,r3,r2
    8dcc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    8dd0:	e0fffe17 	ldw	r3,-8(fp)
    8dd4:	00900034 	movhi	r2,16384
    8dd8:	10bfffc4 	addi	r2,r2,-1
    8ddc:	1886703a 	and	r3,r3,r2
    8de0:	e0bffc17 	ldw	r2,-16(fp)
    8de4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    8de8:	e0bffb17 	ldw	r2,-20(fp)
    8dec:	1000051e 	bne	r2,zero,8e04 <open+0xdc>
    8df0:	e13ffc17 	ldw	r4,-16(fp)
    8df4:	0008c340 	call	8c34 <alt_file_locked>
    8df8:	e0bffa15 	stw	r2,-24(fp)
    8dfc:	e0bffa17 	ldw	r2,-24(fp)
    8e00:	10001016 	blt	r2,zero,8e44 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    8e04:	e0bff817 	ldw	r2,-32(fp)
    8e08:	10800317 	ldw	r2,12(r2)
    8e0c:	10000826 	beq	r2,zero,8e30 <open+0x108>
    8e10:	e0bff817 	ldw	r2,-32(fp)
    8e14:	10800317 	ldw	r2,12(r2)
    8e18:	e13ffc17 	ldw	r4,-16(fp)
    8e1c:	e17ffd17 	ldw	r5,-12(fp)
    8e20:	e1bffe17 	ldw	r6,-8(fp)
    8e24:	e1ffff17 	ldw	r7,-4(fp)
    8e28:	103ee83a 	callr	r2
    8e2c:	00000106 	br	8e34 <open+0x10c>
    8e30:	0005883a 	mov	r2,zero
    8e34:	e0bffa15 	stw	r2,-24(fp)
    8e38:	00000206 	br	8e44 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    8e3c:	00bffb44 	movi	r2,-19
    8e40:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    8e44:	e0bffa17 	ldw	r2,-24(fp)
    8e48:	1000090e 	bge	r2,zero,8e70 <open+0x148>
  {
    alt_release_fd (index);  
    8e4c:	e13ff917 	ldw	r4,-28(fp)
    8e50:	0008e880 	call	8e88 <alt_release_fd>
    ALT_ERRNO = -status;
    8e54:	0008be40 	call	8be4 <alt_get_errno>
    8e58:	1007883a 	mov	r3,r2
    8e5c:	e0bffa17 	ldw	r2,-24(fp)
    8e60:	0085c83a 	sub	r2,zero,r2
    8e64:	18800015 	stw	r2,0(r3)
    return -1;
    8e68:	00bfffc4 	movi	r2,-1
    8e6c:	00000106 	br	8e74 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    8e70:	e0bff917 	ldw	r2,-28(fp)
}
    8e74:	e037883a 	mov	sp,fp
    8e78:	dfc00117 	ldw	ra,4(sp)
    8e7c:	df000017 	ldw	fp,0(sp)
    8e80:	dec00204 	addi	sp,sp,8
    8e84:	f800283a 	ret

00008e88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8e88:	defffc04 	addi	sp,sp,-16
    8e8c:	dfc00315 	stw	ra,12(sp)
    8e90:	df000215 	stw	fp,8(sp)
    8e94:	dc000115 	stw	r16,4(sp)
    8e98:	df000204 	addi	fp,sp,8
    8e9c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    8ea0:	e0bffe17 	ldw	r2,-8(fp)
    8ea4:	108000d0 	cmplti	r2,r2,3
    8ea8:	1000111e 	bne	r2,zero,8ef0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    8eac:	04000074 	movhi	r16,1
    8eb0:	84255804 	addi	r16,r16,-27296
    8eb4:	e0bffe17 	ldw	r2,-8(fp)
    8eb8:	1009883a 	mov	r4,r2
    8ebc:	01400304 	movi	r5,12
    8ec0:	000938c0 	call	938c <__mulsi3>
    8ec4:	8085883a 	add	r2,r16,r2
    8ec8:	10800204 	addi	r2,r2,8
    8ecc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    8ed0:	04000074 	movhi	r16,1
    8ed4:	84255804 	addi	r16,r16,-27296
    8ed8:	e0bffe17 	ldw	r2,-8(fp)
    8edc:	1009883a 	mov	r4,r2
    8ee0:	01400304 	movi	r5,12
    8ee4:	000938c0 	call	938c <__mulsi3>
    8ee8:	8085883a 	add	r2,r16,r2
    8eec:	10000015 	stw	zero,0(r2)
  }
}
    8ef0:	e6ffff04 	addi	sp,fp,-4
    8ef4:	dfc00217 	ldw	ra,8(sp)
    8ef8:	df000117 	ldw	fp,4(sp)
    8efc:	dc000017 	ldw	r16,0(sp)
    8f00:	dec00304 	addi	sp,sp,12
    8f04:	f800283a 	ret

00008f08 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    8f08:	deffff04 	addi	sp,sp,-4
    8f0c:	df000015 	stw	fp,0(sp)
    8f10:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    8f14:	000170fa 	wrctl	ienable,zero
}
    8f18:	e037883a 	mov	sp,fp
    8f1c:	df000017 	ldw	fp,0(sp)
    8f20:	dec00104 	addi	sp,sp,4
    8f24:	f800283a 	ret

00008f28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    8f28:	defffa04 	addi	sp,sp,-24
    8f2c:	dfc00515 	stw	ra,20(sp)
    8f30:	df000415 	stw	fp,16(sp)
    8f34:	df000404 	addi	fp,sp,16
    8f38:	e13ffe15 	stw	r4,-8(fp)
    8f3c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    8f40:	e0bfff17 	ldw	r2,-4(fp)
    8f44:	10800017 	ldw	r2,0(r2)
    8f48:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    8f4c:	e13ffe17 	ldw	r4,-8(fp)
    8f50:	00081780 	call	8178 <strlen>
    8f54:	10800044 	addi	r2,r2,1
    8f58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8f5c:	00000d06 	br	8f94 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    8f60:	e0bffc17 	ldw	r2,-16(fp)
    8f64:	10c00217 	ldw	r3,8(r2)
    8f68:	e0bffd17 	ldw	r2,-12(fp)
    8f6c:	1809883a 	mov	r4,r3
    8f70:	e17ffe17 	ldw	r5,-8(fp)
    8f74:	100d883a 	mov	r6,r2
    8f78:	00091c00 	call	91c0 <memcmp>
    8f7c:	1000021e 	bne	r2,zero,8f88 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    8f80:	e0bffc17 	ldw	r2,-16(fp)
    8f84:	00000706 	br	8fa4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    8f88:	e0bffc17 	ldw	r2,-16(fp)
    8f8c:	10800017 	ldw	r2,0(r2)
    8f90:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8f94:	e0fffc17 	ldw	r3,-16(fp)
    8f98:	e0bfff17 	ldw	r2,-4(fp)
    8f9c:	18bff01e 	bne	r3,r2,8f60 <_gp+0xffff7880>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    8fa0:	0005883a 	mov	r2,zero
}
    8fa4:	e037883a 	mov	sp,fp
    8fa8:	dfc00117 	ldw	ra,4(sp)
    8fac:	df000017 	ldw	fp,0(sp)
    8fb0:	dec00204 	addi	sp,sp,8
    8fb4:	f800283a 	ret

00008fb8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    8fb8:	defffb04 	addi	sp,sp,-20
    8fbc:	dfc00415 	stw	ra,16(sp)
    8fc0:	df000315 	stw	fp,12(sp)
    8fc4:	df000304 	addi	fp,sp,12
    8fc8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    8fcc:	00800074 	movhi	r2,1
    8fd0:	10a5ba04 	addi	r2,r2,-26904
    8fd4:	10800017 	ldw	r2,0(r2)
    8fd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8fdc:	00003106 	br	90a4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    8fe0:	e0bffd17 	ldw	r2,-12(fp)
    8fe4:	10800217 	ldw	r2,8(r2)
    8fe8:	1009883a 	mov	r4,r2
    8fec:	00081780 	call	8178 <strlen>
    8ff0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    8ff4:	e0bffd17 	ldw	r2,-12(fp)
    8ff8:	10c00217 	ldw	r3,8(r2)
    8ffc:	e0bffe17 	ldw	r2,-8(fp)
    9000:	10bfffc4 	addi	r2,r2,-1
    9004:	1885883a 	add	r2,r3,r2
    9008:	10800003 	ldbu	r2,0(r2)
    900c:	10803fcc 	andi	r2,r2,255
    9010:	1080201c 	xori	r2,r2,128
    9014:	10bfe004 	addi	r2,r2,-128
    9018:	10800bd8 	cmpnei	r2,r2,47
    901c:	1000031e 	bne	r2,zero,902c <alt_find_file+0x74>
    {
      len -= 1;
    9020:	e0bffe17 	ldw	r2,-8(fp)
    9024:	10bfffc4 	addi	r2,r2,-1
    9028:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    902c:	e0bffe17 	ldw	r2,-8(fp)
    9030:	e0ffff17 	ldw	r3,-4(fp)
    9034:	1885883a 	add	r2,r3,r2
    9038:	10800003 	ldbu	r2,0(r2)
    903c:	10803fcc 	andi	r2,r2,255
    9040:	1080201c 	xori	r2,r2,128
    9044:	10bfe004 	addi	r2,r2,-128
    9048:	10800be0 	cmpeqi	r2,r2,47
    904c:	1000081e 	bne	r2,zero,9070 <alt_find_file+0xb8>
    9050:	e0bffe17 	ldw	r2,-8(fp)
    9054:	e0ffff17 	ldw	r3,-4(fp)
    9058:	1885883a 	add	r2,r3,r2
    905c:	10800003 	ldbu	r2,0(r2)
    9060:	10803fcc 	andi	r2,r2,255
    9064:	1080201c 	xori	r2,r2,128
    9068:	10bfe004 	addi	r2,r2,-128
    906c:	10000a1e 	bne	r2,zero,9098 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9070:	e0bffd17 	ldw	r2,-12(fp)
    9074:	10c00217 	ldw	r3,8(r2)
    9078:	e0bffe17 	ldw	r2,-8(fp)
    907c:	1809883a 	mov	r4,r3
    9080:	e17fff17 	ldw	r5,-4(fp)
    9084:	100d883a 	mov	r6,r2
    9088:	00091c00 	call	91c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    908c:	1000021e 	bne	r2,zero,9098 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9090:	e0bffd17 	ldw	r2,-12(fp)
    9094:	00000806 	br	90b8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    9098:	e0bffd17 	ldw	r2,-12(fp)
    909c:	10800017 	ldw	r2,0(r2)
    90a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    90a4:	e0fffd17 	ldw	r3,-12(fp)
    90a8:	00800074 	movhi	r2,1
    90ac:	10a5ba04 	addi	r2,r2,-26904
    90b0:	18bfcb1e 	bne	r3,r2,8fe0 <_gp+0xffff7900>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    90b4:	0005883a 	mov	r2,zero
}
    90b8:	e037883a 	mov	sp,fp
    90bc:	dfc00117 	ldw	ra,4(sp)
    90c0:	df000017 	ldw	fp,0(sp)
    90c4:	dec00204 	addi	sp,sp,8
    90c8:	f800283a 	ret

000090cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    90cc:	defffa04 	addi	sp,sp,-24
    90d0:	dfc00515 	stw	ra,20(sp)
    90d4:	df000415 	stw	fp,16(sp)
    90d8:	dc000315 	stw	r16,12(sp)
    90dc:	df000404 	addi	fp,sp,16
    90e0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    90e4:	00bffa04 	movi	r2,-24
    90e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    90ec:	e03ffc15 	stw	zero,-16(fp)
    90f0:	00002106 	br	9178 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    90f4:	04000074 	movhi	r16,1
    90f8:	84255804 	addi	r16,r16,-27296
    90fc:	e0bffc17 	ldw	r2,-16(fp)
    9100:	1009883a 	mov	r4,r2
    9104:	01400304 	movi	r5,12
    9108:	000938c0 	call	938c <__mulsi3>
    910c:	8085883a 	add	r2,r16,r2
    9110:	10800017 	ldw	r2,0(r2)
    9114:	1000151e 	bne	r2,zero,916c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    9118:	04000074 	movhi	r16,1
    911c:	84255804 	addi	r16,r16,-27296
    9120:	e0bffc17 	ldw	r2,-16(fp)
    9124:	1009883a 	mov	r4,r2
    9128:	01400304 	movi	r5,12
    912c:	000938c0 	call	938c <__mulsi3>
    9130:	8085883a 	add	r2,r16,r2
    9134:	e0fffe17 	ldw	r3,-8(fp)
    9138:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    913c:	00800074 	movhi	r2,1
    9140:	10a5be04 	addi	r2,r2,-26888
    9144:	10c00017 	ldw	r3,0(r2)
    9148:	e0bffc17 	ldw	r2,-16(fp)
    914c:	1880040e 	bge	r3,r2,9160 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    9150:	00800074 	movhi	r2,1
    9154:	10a5be04 	addi	r2,r2,-26888
    9158:	e0fffc17 	ldw	r3,-16(fp)
    915c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    9160:	e0bffc17 	ldw	r2,-16(fp)
    9164:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9168:	00000606 	br	9184 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    916c:	e0bffc17 	ldw	r2,-16(fp)
    9170:	10800044 	addi	r2,r2,1
    9174:	e0bffc15 	stw	r2,-16(fp)
    9178:	e0bffc17 	ldw	r2,-16(fp)
    917c:	10800810 	cmplti	r2,r2,32
    9180:	103fdc1e 	bne	r2,zero,90f4 <_gp+0xffff7a14>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9184:	e0bffd17 	ldw	r2,-12(fp)
}
    9188:	e6ffff04 	addi	sp,fp,-4
    918c:	dfc00217 	ldw	ra,8(sp)
    9190:	df000117 	ldw	fp,4(sp)
    9194:	dc000017 	ldw	r16,0(sp)
    9198:	dec00304 	addi	sp,sp,12
    919c:	f800283a 	ret

000091a0 <exit>:
    91a0:	defffe04 	addi	sp,sp,-8
    91a4:	000b883a 	mov	r5,zero
    91a8:	dc000015 	stw	r16,0(sp)
    91ac:	dfc00115 	stw	ra,4(sp)
    91b0:	2021883a 	mov	r16,r4
    91b4:	00091f00 	call	91f0 <__call_exitprocs>
    91b8:	8009883a 	mov	r4,r16
    91bc:	00093b40 	call	93b4 <_exit>

000091c0 <memcmp>:
    91c0:	218d883a 	add	r6,r4,r6
    91c4:	21800826 	beq	r4,r6,91e8 <memcmp+0x28>
    91c8:	20800003 	ldbu	r2,0(r4)
    91cc:	28c00003 	ldbu	r3,0(r5)
    91d0:	10c00226 	beq	r2,r3,91dc <memcmp+0x1c>
    91d4:	10c5c83a 	sub	r2,r2,r3
    91d8:	f800283a 	ret
    91dc:	21000044 	addi	r4,r4,1
    91e0:	29400044 	addi	r5,r5,1
    91e4:	003ff706 	br	91c4 <_gp+0xffff7ae4>
    91e8:	0005883a 	mov	r2,zero
    91ec:	f800283a 	ret

000091f0 <__call_exitprocs>:
    91f0:	00800074 	movhi	r2,1
    91f4:	10a5b804 	addi	r2,r2,-26912
    91f8:	10800017 	ldw	r2,0(r2)
    91fc:	defff304 	addi	sp,sp,-52
    9200:	ddc00a15 	stw	r23,40(sp)
    9204:	d8800015 	stw	r2,0(sp)
    9208:	05c00034 	movhi	r23,0
    920c:	10800c04 	addi	r2,r2,48
    9210:	dc800515 	stw	r18,20(sp)
    9214:	dfc00c15 	stw	ra,48(sp)
    9218:	df000b15 	stw	fp,44(sp)
    921c:	dd800915 	stw	r22,36(sp)
    9220:	dd400815 	stw	r21,32(sp)
    9224:	dd000715 	stw	r20,28(sp)
    9228:	dcc00615 	stw	r19,24(sp)
    922c:	dc400415 	stw	r17,16(sp)
    9230:	dc000315 	stw	r16,12(sp)
    9234:	d9000115 	stw	r4,4(sp)
    9238:	2825883a 	mov	r18,r5
    923c:	d8800215 	stw	r2,8(sp)
    9240:	bdc00004 	addi	r23,r23,0
    9244:	d8800017 	ldw	r2,0(sp)
    9248:	dc400217 	ldw	r17,8(sp)
    924c:	14c00c17 	ldw	r19,48(r2)
    9250:	98004226 	beq	r19,zero,935c <__call_exitprocs+0x16c>
    9254:	9c000117 	ldw	r16,4(r19)
    9258:	00900034 	movhi	r2,16384
    925c:	10bfffc4 	addi	r2,r2,-1
    9260:	9d002217 	ldw	r20,136(r19)
    9264:	857fffc4 	addi	r21,r16,-1
    9268:	80a1883a 	add	r16,r16,r2
    926c:	8421883a 	add	r16,r16,r16
    9270:	8421883a 	add	r16,r16,r16
    9274:	a42d883a 	add	r22,r20,r16
    9278:	84000204 	addi	r16,r16,8
    927c:	9c21883a 	add	r16,r19,r16
    9280:	a8002616 	blt	r21,zero,931c <__call_exitprocs+0x12c>
    9284:	90000326 	beq	r18,zero,9294 <__call_exitprocs+0xa4>
    9288:	a0002026 	beq	r20,zero,930c <__call_exitprocs+0x11c>
    928c:	b1002017 	ldw	r4,128(r22)
    9290:	24801e1e 	bne	r4,r18,930c <__call_exitprocs+0x11c>
    9294:	99000117 	ldw	r4,4(r19)
    9298:	82000017 	ldw	r8,0(r16)
    929c:	213fffc4 	addi	r4,r4,-1
    92a0:	a900021e 	bne	r21,r4,92ac <__call_exitprocs+0xbc>
    92a4:	9d400115 	stw	r21,4(r19)
    92a8:	00000106 	br	92b0 <__call_exitprocs+0xc0>
    92ac:	80000015 	stw	zero,0(r16)
    92b0:	40001626 	beq	r8,zero,930c <__call_exitprocs+0x11c>
    92b4:	9f000117 	ldw	fp,4(r19)
    92b8:	a0000526 	beq	r20,zero,92d0 <__call_exitprocs+0xe0>
    92bc:	00800044 	movi	r2,1
    92c0:	1552983a 	sll	r9,r2,r21
    92c4:	a1404017 	ldw	r5,256(r20)
    92c8:	494a703a 	and	r5,r9,r5
    92cc:	2800021e 	bne	r5,zero,92d8 <__call_exitprocs+0xe8>
    92d0:	403ee83a 	callr	r8
    92d4:	00000906 	br	92fc <__call_exitprocs+0x10c>
    92d8:	a1004117 	ldw	r4,260(r20)
    92dc:	4908703a 	and	r4,r9,r4
    92e0:	2000041e 	bne	r4,zero,92f4 <__call_exitprocs+0x104>
    92e4:	d9000117 	ldw	r4,4(sp)
    92e8:	b1400017 	ldw	r5,0(r22)
    92ec:	403ee83a 	callr	r8
    92f0:	00000206 	br	92fc <__call_exitprocs+0x10c>
    92f4:	b1000017 	ldw	r4,0(r22)
    92f8:	403ee83a 	callr	r8
    92fc:	99000117 	ldw	r4,4(r19)
    9300:	e13fd01e 	bne	fp,r4,9244 <_gp+0xffff7b64>
    9304:	89000017 	ldw	r4,0(r17)
    9308:	24ffce1e 	bne	r4,r19,9244 <_gp+0xffff7b64>
    930c:	ad7fffc4 	addi	r21,r21,-1
    9310:	b5bfff04 	addi	r22,r22,-4
    9314:	843fff04 	addi	r16,r16,-4
    9318:	003fd906 	br	9280 <_gp+0xffff7ba0>
    931c:	b8000f26 	beq	r23,zero,935c <__call_exitprocs+0x16c>
    9320:	99000117 	ldw	r4,4(r19)
    9324:	20000a1e 	bne	r4,zero,9350 <__call_exitprocs+0x160>
    9328:	99000017 	ldw	r4,0(r19)
    932c:	20000826 	beq	r4,zero,9350 <__call_exitprocs+0x160>
    9330:	89000015 	stw	r4,0(r17)
    9334:	a0000226 	beq	r20,zero,9340 <__call_exitprocs+0x150>
    9338:	a009883a 	mov	r4,r20
    933c:	00000000 	call	0 <__reset-0x8000>
    9340:	9809883a 	mov	r4,r19
    9344:	00000000 	call	0 <__reset-0x8000>
    9348:	8cc00017 	ldw	r19,0(r17)
    934c:	003fc006 	br	9250 <_gp+0xffff7b70>
    9350:	9823883a 	mov	r17,r19
    9354:	9cc00017 	ldw	r19,0(r19)
    9358:	003fbd06 	br	9250 <_gp+0xffff7b70>
    935c:	dfc00c17 	ldw	ra,48(sp)
    9360:	df000b17 	ldw	fp,44(sp)
    9364:	ddc00a17 	ldw	r23,40(sp)
    9368:	dd800917 	ldw	r22,36(sp)
    936c:	dd400817 	ldw	r21,32(sp)
    9370:	dd000717 	ldw	r20,28(sp)
    9374:	dcc00617 	ldw	r19,24(sp)
    9378:	dc800517 	ldw	r18,20(sp)
    937c:	dc400417 	ldw	r17,16(sp)
    9380:	dc000317 	ldw	r16,12(sp)
    9384:	dec00d04 	addi	sp,sp,52
    9388:	f800283a 	ret

0000938c <__mulsi3>:
    938c:	0005883a 	mov	r2,zero
    9390:	20000726 	beq	r4,zero,93b0 <__mulsi3+0x24>
    9394:	20c0004c 	andi	r3,r4,1
    9398:	2008d07a 	srli	r4,r4,1
    939c:	18000126 	beq	r3,zero,93a4 <__mulsi3+0x18>
    93a0:	1145883a 	add	r2,r2,r5
    93a4:	294b883a 	add	r5,r5,r5
    93a8:	203ffa1e 	bne	r4,zero,9394 <_gp+0xffff7cb4>
    93ac:	f800283a 	ret
    93b0:	f800283a 	ret

000093b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    93b4:	defffd04 	addi	sp,sp,-12
    93b8:	df000215 	stw	fp,8(sp)
    93bc:	df000204 	addi	fp,sp,8
    93c0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    93c4:	0001883a 	nop
    93c8:	e0bfff17 	ldw	r2,-4(fp)
    93cc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    93d0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    93d4:	10000226 	beq	r2,zero,93e0 <_exit+0x2c>
    ALT_SIM_FAIL();
    93d8:	002af070 	cmpltui	zero,zero,43969
    93dc:	00000106 	br	93e4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    93e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    93e4:	003fff06 	br	93e4 <_gp+0xffff7d04>
