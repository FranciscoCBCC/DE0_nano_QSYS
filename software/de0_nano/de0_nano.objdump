
de0_nano.elf:     file format elf32-littlenios2
de0_nano.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00009b5c memsz 0x00009b5c flags r-x
    LOAD off    0x0000ab7c vaddr 0x00019b7c paddr 0x0001a08c align 2**12
         filesz 0x00000510 memsz 0x00000510 flags rw-
    LOAD off    0x0000b59c vaddr 0x0001a59c paddr 0x0001a59c align 2**12
         filesz 0x00000000 memsz 0x00000064 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  0000b08c  2**0
                  CONTENTS
  2 .text         000096f0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000046c  00019710  00019710  0000a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000510  00019b7c  0001a08c  0000ab7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000064  0001a59c  0001a59c  0000b59c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0001a600  0001a600  0000b08c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000888  00000000  00000000  0000b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000e2fd  00000000  00000000  0000b938  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004e3d  00000000  00000000  00019c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006441  00000000  00000000  0001ea72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001320  00000000  00000000  00024eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002807  00000000  00000000  000261d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f211  00000000  00000000  000289db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00037bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001298  00000000  00000000  00037c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003afa3  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003afa6  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003afb2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003afb3  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003afb4  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003afbf  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003afca  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0003afd5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0003afdd  2**0
                  CONTENTS, READONLY
 26 .jdi          00003f24  00000000  00000000  0003b005  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002b705  00000000  00000000  0003ef29  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00019710 l    d  .rodata	00000000 .rodata
00019b7c l    d  .rwdata	00000000 .rwdata
0001a59c l    d  .bss	00000000 .bss
0001a600 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../de0_nano_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00019924 l     O .rodata	00000108 two_over_pi
000198a4 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00019a6c l     O .rodata	00000010 init_jk
00019a2c l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00013b54 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00019b7c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
0001a5a8 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00018064 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001a078 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 libgcc2.c
00010d04 g     F .text	000000c0 identificar_dominio
00018eb4 g     F .text	0000002c alt_main
00010920 g     F .text	000001ec merge
00017ea4 g     F .text	00000080 _puts_r
000136e8 g     F .text	00000014 fabs
000116ec g     F .text	00000130 sqrt
0001a08c g       *ABS*	00000000 __flash_rwdata_start
00015f54 g     F .text	00000084 .hidden __eqdf2
00018ab8 g     F .text	00000054 _gettimeofday_r
00010100 g     F .text	00000198 rastrigin
0001a600 g       *ABS*	00000000 __alt_heap_start
00017e58 g     F .text	0000004c printf
00011328 g     F .text	000001f8 executar
00018ee4 g     F .text	00000004 __malloc_unlock
00011520 g     F .text	000000c4 menu
00014b8c g     F .text	00000078 .hidden __fixsfsi
00010e60 g     F .text	00000068 imprimir_individuo
00015fd8 g     F .text	000000e0 .hidden __gtdf2
000190ec g     F .text	00000008 altera_nios2_gen2_irq_init
00017738 g     F .text	00000010 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001a5b0 g     O .bss	00000004 errno
000136fc g     F .text	000001f4 floor
0001a5c8 g     O .bss	00000004 alt_argv
00022064 g       *ABS*	00000000 _gp
00014690 g     F .text	000004fc .hidden __subsf3
0001181c g     F .text	0000079c __ieee754_rem_pio2
00017df4 g     F .text	00000028 memcpy
0001735c g     F .text	000000d0 .hidden __floatsidf
000160b8 g     F .text	000000e0 .hidden __ltdf2
00017f24 g     F .text	00000014 puts
000138f0 g     F .text	00000074 __fpclassifyd
00017748 g     F .text	00000014 malloc
00017e1c g     F .text	0000003c _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00013c70 g     F .text	00000008 .hidden __udivsi3
0001224c g     F .text	000004a4 __kernel_cos
00014188 g     F .text	000000b8 .hidden __lesf2
0001a5bc g     O .bss	00000008 alt_timezone
0001a5a4 g     O .bss	00000004 __malloc_top_pad
00017fa4 g     F .text	00000050 _sbrk_r
0001005c g     F .text	000000a4 de_jongs
0001a5a0 g     O .bss	00000004 __malloc_max_sbrked_mem
00010558 g     F .text	000001e0 shubert
00013420 g     F .text	000002c8 __kernel_sin
0001742c g     F .text	00000110 .hidden __extendsfdf2
00014d38 g     F .text	0000089c .hidden __adddf3
000190f4 g     F .text	0000061c .hidden __umoddi3
00010dc4 g     F .text	0000009c encontra_melhor_individuo
0001a064 g     O .rwdata	00000004 __fdlib_version
0001a068 g     O .rwdata	00000004 _global_impure_ptr
0001a600 g       *ABS*	00000000 __bss_end
00018f68 g     F .text	000000b8 alt_tick
00018f34 g     F .text	00000034 alt_alarm_stop
00010790 g     F .text	00000014 d_shubert
000126f0 g     F .text	00000d30 __kernel_rem_pio2
00010298 g     F .text	00000148 drop_wave
000190e4 g     F .text	00000004 alt_dcache_flush_all
000172d4 g     F .text	00000088 .hidden __fixdfsi
0001a08c g       *ABS*	00000000 __ram_rwdata_end
00019020 g     F .text	0000006c write
00019b7c g       *ABS*	00000000 __ram_rodata_end
0001a084 g     O .rwdata	00000004 jtag_uart_0
000160b8 g     F .text	000000e0 .hidden __ledf2
00013c78 g     F .text	00000008 .hidden __umodsi3
00010808 g     F .text	00000060 obter_numero_uniforme_continuo
0001a600 g       *ABS*	00000000 end
0001b400 g       *ABS*	00000000 __alt_stack_pointer
000176d4 g     F .text	00000064 .hidden __clzsi2
000190b0 g     F .text	00000034 altera_avalon_jtag_uart_write
00011600 g     F .text	000000ec cos
000180d0 g     F .text	0000056c ___vfprintf_internal_r
00018784 g     F .text	00000288 _free_r
0001a070 g     O .rwdata	00000004 __malloc_sbrk_base
00010020 g     F .text	0000003c _start
0001a5d4 g     O .bss	00000004 _alt_tick_rate
00017f48 g     F .text	0000005c rand
0001a5d0 g     O .bss	00000004 _alt_nticks
000190ac g     F .text	00000004 alt_sys_init
00014c04 g     F .text	00000134 .hidden __floatsisf
00010754 g     F .text	00000014 d_rastrigin
00013c80 g     F .text	00000028 .hidden __mulsi3
00019b7c g       *ABS*	00000000 __ram_rwdata_start
00019710 g       *ABS*	00000000 __ram_rodata_start
0001a5d8 g     O .bss	00000028 __malloc_current_mallinfo
000107a4 g     F .text	00000064 obter_numero_uniforme
0001a600 g       *ABS*	00000000 __alt_stack_base
000155d4 g     F .text	00000980 .hidden __divdf3
00019c5c g     O .rwdata	00000408 __malloc_av_
00016198 g     F .text	0000086c .hidden __muldf3
00018ee0 g     F .text	00000004 __malloc_lock
00018ee8 g     F .text	0000004c sbrk
00010f2c g     F .text	000000c0 gerar_populacao_inicial
00018a0c g     F .text	000000ac __sfvwrite_small_dev
00018c70 g     F .text	0000014c gettimeofday
0001a59c g       *ABS*	00000000 __bss_start
00010738 g     F .text	0000001c d_de_jongs
000115e4 g     F .text	0000001c main
0001a5c4 g     O .bss	00000004 alt_envp
0001a59c g     O .bss	00000004 __malloc_max_total_mem
00017f38 g     F .text	00000010 srand
00014188 g     F .text	000000b8 .hidden __ltsf2
00013964 g     F .text	00000008 matherr
0001b400 g       *ABS*	00000000 __alt_heap_limit
0001753c g     F .text	00000198 .hidden __truncdfsf2
00010b0c g     F .text	0000006c mergeSort
00017770 g     F .text	00000684 _malloc_r
00018010 g     F .text	00000054 time
0001a088 g     O .rwdata	00000004 alt_errno
00010868 g     F .text	000000b8 obter_numero_uniforme_discreto
00013bc0 g     F .text	00000054 .hidden __divsi3
00018660 g     F .text	00000124 _malloc_trim_r
00014240 g     F .text	00000450 .hidden __mulsf3
00019710 g       *ABS*	00000000 __flash_rodata_start
00013b38 g     F .text	0000001c copysign
00015f54 g     F .text	00000084 .hidden __nedf2
0001908c g     F .text	00000020 alt_irq_init
00019a7c g     O .rodata	00000100 .hidden __clz_tab
00018b0c g     F .text	00000058 _write_r
0001a06c g     O .rwdata	00000004 _impure_ptr
0001a5cc g     O .bss	00000004 alt_argc
0001396c g     F .text	000001cc scalbn
00010b78 g     F .text	0000018c obter_fitness
0001a5b4 g     O .bss	00000008 alt_resettime
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011fb8 g     F .text	00000294 __ieee754_sqrt
0001077c g     F .text	00000014 d_griewangk
00011084 g     F .text	000000b0 op_recombinacao
0001a08c g       *ABS*	00000000 _edata
00010fec g     F .text	00000098 op_mutacao
0001a600 g       *ABS*	00000000 _end
00010768 g     F .text	00000014 d_drop_wave
00010020 g       *ABS*	00000000 __ram_exceptions_end
0001a074 g     O .rwdata	00000004 __malloc_trim_threshold
00013c14 g     F .text	0000005c .hidden __modsi3
0001b400 g       *ABS*	00000000 __alt_data_end
00011134 g     F .text	00000174 op_selecao_de_pais
0001000c g       .entry	00000000 _exit
00018b64 g     F .text	0000010c .hidden __muldi3
00017ff4 g     F .text	0000001c strlen
000112a8 g     F .text	00000080 op_selecao_de_sobreviventes
00015fd8 g     F .text	000000e0 .hidden __gedf2
00010ec8 g     F .text	00000064 imprimir_populacao
000103e0 g     F .text	00000178 griewangk
000190e8 g     F .text	00000004 alt_icache_flush_all
0001863c g     F .text	00000024 __vfprintf_internal
00016a04 g     F .text	000008d0 .hidden __subdf3
0001a07c g     O .rwdata	00000008 alt_alarm_list
00013ca8 g     F .text	000004e0 .hidden __addsf3
00018dbc g     F .text	000000f8 alt_load
0001775c g     F .text	00000014 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	deed0014 	ori	sp,sp,46080
    movhi gp, %hi(_gp)
   10028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   1002c:	d6881914 	ori	gp,gp,8292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10a96714 	ori	r2,r2,42396

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18e98014 	ori	r3,r3,42496

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_gp+0xfffedfe0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0018dbc0 	call	18dbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0018eb40 	call	18eb4 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <_gp+0xfffedff4>

0001005c <de_jongs>:
// **************** FUNCOES (em C) QUE RETORNAM VALOR DE UMA ESPECIFICA FUNCAO DE BENCHMARK, DADO x1 e x2 ****************

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
   1005c:	defffb04 	addi	sp,sp,-20
   10060:	dfc00415 	stw	ra,16(sp)
   10064:	dcc00315 	stw	r19,12(sp)
   10068:	dc800215 	stw	r18,8(sp)
   1006c:	dc400115 	stw	r17,4(sp)
   10070:	2825883a 	mov	r18,r5
   10074:	dc000015 	stw	r16,0(sp)
    return pow(x1,2.0) + pow(x2,2.0);
   10078:	001742c0 	call	1742c <__extendsfdf2>
   1007c:	9009883a 	mov	r4,r18
   10080:	1023883a 	mov	r17,r2
   10084:	1821883a 	mov	r16,r3
   10088:	001742c0 	call	1742c <__extendsfdf2>
   1008c:	8809883a 	mov	r4,r17
   10090:	800b883a 	mov	r5,r16
   10094:	880d883a 	mov	r6,r17
   10098:	800f883a 	mov	r7,r16
   1009c:	1027883a 	mov	r19,r2
   100a0:	1825883a 	mov	r18,r3
   100a4:	00161980 	call	16198 <__muldf3>
   100a8:	9809883a 	mov	r4,r19
   100ac:	900b883a 	mov	r5,r18
   100b0:	980d883a 	mov	r6,r19
   100b4:	900f883a 	mov	r7,r18
   100b8:	1023883a 	mov	r17,r2
   100bc:	1821883a 	mov	r16,r3
   100c0:	00161980 	call	16198 <__muldf3>
   100c4:	8809883a 	mov	r4,r17
   100c8:	800b883a 	mov	r5,r16
   100cc:	100d883a 	mov	r6,r2
   100d0:	180f883a 	mov	r7,r3
   100d4:	0014d380 	call	14d38 <__adddf3>
   100d8:	1009883a 	mov	r4,r2
   100dc:	180b883a 	mov	r5,r3
   100e0:	001753c0 	call	1753c <__truncdfsf2>
}
   100e4:	dfc00417 	ldw	ra,16(sp)
   100e8:	dcc00317 	ldw	r19,12(sp)
   100ec:	dc800217 	ldw	r18,8(sp)
   100f0:	dc400117 	ldw	r17,4(sp)
   100f4:	dc000017 	ldw	r16,0(sp)
   100f8:	dec00504 	addi	sp,sp,20
   100fc:	f800283a 	ret

00010100 <rastrigin>:

/*
 * Retorna um valor (do tipo float) referente a funcao RASTRIGIN, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float rastrigin(float x1, float x2){
   10100:	defff704 	addi	sp,sp,-36
   10104:	dfc00815 	stw	ra,32(sp)
   10108:	ddc00715 	stw	r23,28(sp)
   1010c:	dd800615 	stw	r22,24(sp)
   10110:	dd400515 	stw	r21,20(sp)
   10114:	dd000415 	stw	r20,16(sp)
   10118:	dcc00315 	stw	r19,12(sp)
   1011c:	dc800215 	stw	r18,8(sp)
   10120:	dc400115 	stw	r17,4(sp)
   10124:	dc000015 	stw	r16,0(sp)
   10128:	2821883a 	mov	r16,r5
    return 20 + (pow(x1,2.0) - (10.0 * cos(2.0*PI*x1))) + (pow(x2,2.0) - (10.0 * cos(2.0*PI*x2)));
   1012c:	001742c0 	call	1742c <__extendsfdf2>
   10130:	01951134 	movhi	r6,21572
   10134:	01d00674 	movhi	r7,16409
   10138:	318bba84 	addi	r6,r6,12010
   1013c:	39c87ec4 	addi	r7,r7,8699
   10140:	1009883a 	mov	r4,r2
   10144:	180b883a 	mov	r5,r3
   10148:	1027883a 	mov	r19,r2
   1014c:	1825883a 	mov	r18,r3
   10150:	00161980 	call	16198 <__muldf3>
   10154:	180b883a 	mov	r5,r3
   10158:	1009883a 	mov	r4,r2
   1015c:	00116000 	call	11600 <cos>
   10160:	8009883a 	mov	r4,r16
   10164:	102f883a 	mov	r23,r2
   10168:	182d883a 	mov	r22,r3
   1016c:	001742c0 	call	1742c <__extendsfdf2>
   10170:	01951134 	movhi	r6,21572
   10174:	01d00674 	movhi	r7,16409
   10178:	318bba84 	addi	r6,r6,12010
   1017c:	39c87ec4 	addi	r7,r7,8699
   10180:	1009883a 	mov	r4,r2
   10184:	180b883a 	mov	r5,r3
   10188:	1023883a 	mov	r17,r2
   1018c:	1821883a 	mov	r16,r3
   10190:	00161980 	call	16198 <__muldf3>
   10194:	1009883a 	mov	r4,r2
   10198:	180b883a 	mov	r5,r3
   1019c:	00116000 	call	11600 <cos>
   101a0:	9809883a 	mov	r4,r19
   101a4:	900b883a 	mov	r5,r18
   101a8:	980d883a 	mov	r6,r19
   101ac:	900f883a 	mov	r7,r18
   101b0:	102b883a 	mov	r21,r2
   101b4:	1829883a 	mov	r20,r3
   101b8:	00161980 	call	16198 <__muldf3>
   101bc:	b809883a 	mov	r4,r23
   101c0:	b00b883a 	mov	r5,r22
   101c4:	000d883a 	mov	r6,zero
   101c8:	01d00934 	movhi	r7,16420
   101cc:	1027883a 	mov	r19,r2
   101d0:	1825883a 	mov	r18,r3
   101d4:	00161980 	call	16198 <__muldf3>
   101d8:	9809883a 	mov	r4,r19
   101dc:	900b883a 	mov	r5,r18
   101e0:	100d883a 	mov	r6,r2
   101e4:	180f883a 	mov	r7,r3
   101e8:	0016a040 	call	16a04 <__subdf3>
   101ec:	1009883a 	mov	r4,r2
   101f0:	180b883a 	mov	r5,r3
   101f4:	000d883a 	mov	r6,zero
   101f8:	01d00d34 	movhi	r7,16436
   101fc:	0014d380 	call	14d38 <__adddf3>
   10200:	8809883a 	mov	r4,r17
   10204:	800b883a 	mov	r5,r16
   10208:	880d883a 	mov	r6,r17
   1020c:	800f883a 	mov	r7,r16
   10210:	1027883a 	mov	r19,r2
   10214:	1825883a 	mov	r18,r3
   10218:	00161980 	call	16198 <__muldf3>
   1021c:	a809883a 	mov	r4,r21
   10220:	a00b883a 	mov	r5,r20
   10224:	000d883a 	mov	r6,zero
   10228:	01d00934 	movhi	r7,16420
   1022c:	1023883a 	mov	r17,r2
   10230:	1821883a 	mov	r16,r3
   10234:	00161980 	call	16198 <__muldf3>
   10238:	8809883a 	mov	r4,r17
   1023c:	800b883a 	mov	r5,r16
   10240:	100d883a 	mov	r6,r2
   10244:	180f883a 	mov	r7,r3
   10248:	0016a040 	call	16a04 <__subdf3>
   1024c:	9809883a 	mov	r4,r19
   10250:	900b883a 	mov	r5,r18
   10254:	100d883a 	mov	r6,r2
   10258:	180f883a 	mov	r7,r3
   1025c:	0014d380 	call	14d38 <__adddf3>
   10260:	1009883a 	mov	r4,r2
   10264:	180b883a 	mov	r5,r3
   10268:	001753c0 	call	1753c <__truncdfsf2>
}
   1026c:	dfc00817 	ldw	ra,32(sp)
   10270:	ddc00717 	ldw	r23,28(sp)
   10274:	dd800617 	ldw	r22,24(sp)
   10278:	dd400517 	ldw	r21,20(sp)
   1027c:	dd000417 	ldw	r20,16(sp)
   10280:	dcc00317 	ldw	r19,12(sp)
   10284:	dc800217 	ldw	r18,8(sp)
   10288:	dc400117 	ldw	r17,4(sp)
   1028c:	dc000017 	ldw	r16,0(sp)
   10290:	dec00904 	addi	sp,sp,36
   10294:	f800283a 	ret

00010298 <drop_wave>:

/*
 * Retorna um valor (do tipo float) referente a funcao DROP WAVE, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float drop_wave(float x1, float x2){
   10298:	defffb04 	addi	sp,sp,-20
   1029c:	dfc00415 	stw	ra,16(sp)
   102a0:	dcc00315 	stw	r19,12(sp)
   102a4:	dc800215 	stw	r18,8(sp)
   102a8:	dc400115 	stw	r17,4(sp)
   102ac:	2825883a 	mov	r18,r5
   102b0:	dc000015 	stw	r16,0(sp)

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
   102b4:	001742c0 	call	1742c <__extendsfdf2>
   102b8:	9009883a 	mov	r4,r18
   102bc:	1023883a 	mov	r17,r2
   102c0:	1821883a 	mov	r16,r3
   102c4:	001742c0 	call	1742c <__extendsfdf2>
   102c8:	8809883a 	mov	r4,r17
   102cc:	800b883a 	mov	r5,r16
   102d0:	880d883a 	mov	r6,r17
   102d4:	800f883a 	mov	r7,r16
   102d8:	1027883a 	mov	r19,r2
   102dc:	1825883a 	mov	r18,r3
   102e0:	00161980 	call	16198 <__muldf3>
   102e4:	9809883a 	mov	r4,r19
   102e8:	900b883a 	mov	r5,r18
   102ec:	980d883a 	mov	r6,r19
   102f0:	900f883a 	mov	r7,r18
   102f4:	1023883a 	mov	r17,r2
   102f8:	1821883a 	mov	r16,r3
   102fc:	00161980 	call	16198 <__muldf3>
   10300:	100d883a 	mov	r6,r2
   10304:	180f883a 	mov	r7,r3
   10308:	8809883a 	mov	r4,r17
   1030c:	800b883a 	mov	r5,r16
   10310:	0014d380 	call	14d38 <__adddf3>
   10314:	180b883a 	mov	r5,r3
   10318:	1009883a 	mov	r4,r2
   1031c:	001753c0 	call	1753c <__truncdfsf2>
    float valor = de_jongs(x1,x2);
    //float part1 = 1.0 + cos(12.0 * sqrt(valor));
    //float part2 = (0.5 * valor) + 2.0;
    //return - (part1/part2);

    return -((1.0 + cos(12.0 * sqrt(valor)))/((0.5 * valor) + 2.0));
   10320:	1009883a 	mov	r4,r2
   10324:	001742c0 	call	1742c <__extendsfdf2>
   10328:	1009883a 	mov	r4,r2
   1032c:	180b883a 	mov	r5,r3
   10330:	1023883a 	mov	r17,r2
   10334:	1821883a 	mov	r16,r3
   10338:	00116ec0 	call	116ec <sqrt>
   1033c:	000d883a 	mov	r6,zero
   10340:	01d00a34 	movhi	r7,16424
   10344:	1009883a 	mov	r4,r2
   10348:	180b883a 	mov	r5,r3
   1034c:	00161980 	call	16198 <__muldf3>
   10350:	1009883a 	mov	r4,r2
   10354:	180b883a 	mov	r5,r3
   10358:	00116000 	call	11600 <cos>
   1035c:	1009883a 	mov	r4,r2
   10360:	180b883a 	mov	r5,r3
   10364:	000d883a 	mov	r6,zero
   10368:	01cffc34 	movhi	r7,16368
   1036c:	0014d380 	call	14d38 <__adddf3>
   10370:	8809883a 	mov	r4,r17
   10374:	800b883a 	mov	r5,r16
   10378:	000d883a 	mov	r6,zero
   1037c:	01cff834 	movhi	r7,16352
   10380:	1027883a 	mov	r19,r2
   10384:	1825883a 	mov	r18,r3
   10388:	00161980 	call	16198 <__muldf3>
   1038c:	1009883a 	mov	r4,r2
   10390:	180b883a 	mov	r5,r3
   10394:	000d883a 	mov	r6,zero
   10398:	01d00034 	movhi	r7,16384
   1039c:	0014d380 	call	14d38 <__adddf3>
   103a0:	9809883a 	mov	r4,r19
   103a4:	900b883a 	mov	r5,r18
   103a8:	100d883a 	mov	r6,r2
   103ac:	180f883a 	mov	r7,r3
   103b0:	00155d40 	call	155d4 <__divdf3>
   103b4:	1009883a 	mov	r4,r2
   103b8:	180b883a 	mov	r5,r3
   103bc:	001753c0 	call	1753c <__truncdfsf2>
   103c0:	10a0003c 	xorhi	r2,r2,32768
}
   103c4:	dfc00417 	ldw	ra,16(sp)
   103c8:	dcc00317 	ldw	r19,12(sp)
   103cc:	dc800217 	ldw	r18,8(sp)
   103d0:	dc400117 	ldw	r17,4(sp)
   103d4:	dc000017 	ldw	r16,0(sp)
   103d8:	dec00504 	addi	sp,sp,20
   103dc:	f800283a 	ret

000103e0 <griewangk>:

/*
 * Retorna um valor (do tipo float) referente a funcao GRIEWANGK, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float griewangk(float x1, float x2){
   103e0:	defff704 	addi	sp,sp,-36
   103e4:	dfc00815 	stw	ra,32(sp)
   103e8:	ddc00715 	stw	r23,28(sp)
   103ec:	dd800615 	stw	r22,24(sp)
   103f0:	dd400515 	stw	r21,20(sp)
   103f4:	dd000415 	stw	r20,16(sp)
   103f8:	dcc00315 	stw	r19,12(sp)
   103fc:	dc800215 	stw	r18,8(sp)
   10400:	dc400115 	stw	r17,4(sp)
   10404:	dc000015 	stw	r16,0(sp)
   10408:	2821883a 	mov	r16,r5

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
   1040c:	001742c0 	call	1742c <__extendsfdf2>
   10410:	8009883a 	mov	r4,r16
   10414:	1027883a 	mov	r19,r2
   10418:	1825883a 	mov	r18,r3
   1041c:	001742c0 	call	1742c <__extendsfdf2>
    float valor = de_jongs(x1,x2);
    //float part1 = valor/4000.0;
    //float part2 = (cos(x1) * cos(x2/sqrt(2)));

    //return part1 - part2 + 1;
    return (valor/4000.0) - (cos(x1) * cos(x2/sqrt(2))) + 1;
   10420:	9809883a 	mov	r4,r19
   10424:	900b883a 	mov	r5,r18

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
   10428:	1023883a 	mov	r17,r2
   1042c:	1821883a 	mov	r16,r3
    float valor = de_jongs(x1,x2);
    //float part1 = valor/4000.0;
    //float part2 = (cos(x1) * cos(x2/sqrt(2)));

    //return part1 - part2 + 1;
    return (valor/4000.0) - (cos(x1) * cos(x2/sqrt(2))) + 1;
   10430:	00116000 	call	11600 <cos>
   10434:	01999ff4 	movhi	r6,26239
   10438:	01cffdf4 	movhi	r7,16375
   1043c:	8809883a 	mov	r4,r17
   10440:	800b883a 	mov	r5,r16
   10444:	318ef344 	addi	r6,r6,15309
   10448:	39e82784 	addi	r7,r7,-24418
   1044c:	102f883a 	mov	r23,r2
   10450:	182d883a 	mov	r22,r3
   10454:	00155d40 	call	155d4 <__divdf3>
   10458:	1009883a 	mov	r4,r2
   1045c:	180b883a 	mov	r5,r3
   10460:	00116000 	call	11600 <cos>

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
   10464:	9809883a 	mov	r4,r19
   10468:	900b883a 	mov	r5,r18
   1046c:	980d883a 	mov	r6,r19
   10470:	900f883a 	mov	r7,r18
    float valor = de_jongs(x1,x2);
    //float part1 = valor/4000.0;
    //float part2 = (cos(x1) * cos(x2/sqrt(2)));

    //return part1 - part2 + 1;
    return (valor/4000.0) - (cos(x1) * cos(x2/sqrt(2))) + 1;
   10474:	102b883a 	mov	r21,r2
   10478:	1829883a 	mov	r20,r3

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
   1047c:	00161980 	call	16198 <__muldf3>
   10480:	8809883a 	mov	r4,r17
   10484:	800b883a 	mov	r5,r16
   10488:	880d883a 	mov	r6,r17
   1048c:	800f883a 	mov	r7,r16
   10490:	1027883a 	mov	r19,r2
   10494:	1825883a 	mov	r18,r3
   10498:	00161980 	call	16198 <__muldf3>
   1049c:	100d883a 	mov	r6,r2
   104a0:	180f883a 	mov	r7,r3
   104a4:	9809883a 	mov	r4,r19
   104a8:	900b883a 	mov	r5,r18
   104ac:	0014d380 	call	14d38 <__adddf3>
   104b0:	180b883a 	mov	r5,r3
   104b4:	1009883a 	mov	r4,r2
   104b8:	001753c0 	call	1753c <__truncdfsf2>
    float valor = de_jongs(x1,x2);
    //float part1 = valor/4000.0;
    //float part2 = (cos(x1) * cos(x2/sqrt(2)));

    //return part1 - part2 + 1;
    return (valor/4000.0) - (cos(x1) * cos(x2/sqrt(2))) + 1;
   104bc:	1009883a 	mov	r4,r2
   104c0:	001742c0 	call	1742c <__extendsfdf2>
   104c4:	01d02bf4 	movhi	r7,16559
   104c8:	1009883a 	mov	r4,r2
   104cc:	180b883a 	mov	r5,r3
   104d0:	000d883a 	mov	r6,zero
   104d4:	39d00004 	addi	r7,r7,16384
   104d8:	00155d40 	call	155d4 <__divdf3>
   104dc:	b809883a 	mov	r4,r23
   104e0:	b00b883a 	mov	r5,r22
   104e4:	a80d883a 	mov	r6,r21
   104e8:	a00f883a 	mov	r7,r20
   104ec:	1023883a 	mov	r17,r2
   104f0:	1821883a 	mov	r16,r3
   104f4:	00161980 	call	16198 <__muldf3>
   104f8:	8809883a 	mov	r4,r17
   104fc:	800b883a 	mov	r5,r16
   10500:	100d883a 	mov	r6,r2
   10504:	180f883a 	mov	r7,r3
   10508:	0016a040 	call	16a04 <__subdf3>
   1050c:	000d883a 	mov	r6,zero
   10510:	01cffc34 	movhi	r7,16368
   10514:	1009883a 	mov	r4,r2
   10518:	180b883a 	mov	r5,r3
   1051c:	0014d380 	call	14d38 <__adddf3>
   10520:	1009883a 	mov	r4,r2
   10524:	180b883a 	mov	r5,r3
   10528:	001753c0 	call	1753c <__truncdfsf2>
}
   1052c:	dfc00817 	ldw	ra,32(sp)
   10530:	ddc00717 	ldw	r23,28(sp)
   10534:	dd800617 	ldw	r22,24(sp)
   10538:	dd400517 	ldw	r21,20(sp)
   1053c:	dd000417 	ldw	r20,16(sp)
   10540:	dcc00317 	ldw	r19,12(sp)
   10544:	dc800217 	ldw	r18,8(sp)
   10548:	dc400117 	ldw	r17,4(sp)
   1054c:	dc000017 	ldw	r16,0(sp)
   10550:	dec00904 	addi	sp,sp,36
   10554:	f800283a 	ret

00010558 <shubert>:

/*
 * Retorna um valor (do tipo float) referente a funcao SHUBERT, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float shubert(float x1, float x2){
   10558:	defff204 	addi	sp,sp,-56
   1055c:	ddc00b15 	stw	r23,44(sp)
   10560:	dd800a15 	stw	r22,40(sp)
   10564:	dd400915 	stw	r21,36(sp)
   10568:	dc800615 	stw	r18,24(sp)
   1056c:	dfc00d15 	stw	ra,52(sp)
   10570:	df000c15 	stw	fp,48(sp)
   10574:	dd000815 	stw	r20,32(sp)
   10578:	dcc00715 	stw	r19,28(sp)
   1057c:	dc400515 	stw	r17,20(sp)
   10580:	dc000415 	stw	r16,16(sp)
   10584:	202f883a 	mov	r23,r4
   10588:	282d883a 	mov	r22,r5
    float sum1 = 0.0;
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
   1058c:	04800044 	movi	r18,1
/*
 * Retorna um valor (do tipo float) referente a funcao SHUBERT, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float shubert(float x1, float x2){
    float sum1 = 0.0;
    float sum2 = 0.0;
   10590:	0011883a 	mov	r8,zero

/*
 * Retorna um valor (do tipo float) referente a funcao SHUBERT, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float shubert(float x1, float x2){
    float sum1 = 0.0;
   10594:	002b883a 	mov	r21,zero
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
   10598:	02400184 	movi	r9,6
        sum1 += (i * cos((i + 1.0) * x1 + i));
   1059c:	9009883a 	mov	r4,r18
   105a0:	da400315 	stw	r9,12(sp)
   105a4:	da000215 	stw	r8,8(sp)
   105a8:	001735c0 	call	1735c <__floatsidf>
   105ac:	180b883a 	mov	r5,r3
   105b0:	000d883a 	mov	r6,zero
   105b4:	01cffc34 	movhi	r7,16368
   105b8:	1009883a 	mov	r4,r2
   105bc:	1023883a 	mov	r17,r2
   105c0:	1821883a 	mov	r16,r3
   105c4:	0014d380 	call	14d38 <__adddf3>
   105c8:	b809883a 	mov	r4,r23
   105cc:	1039883a 	mov	fp,r2
   105d0:	1829883a 	mov	r20,r3
   105d4:	001742c0 	call	1742c <__extendsfdf2>
   105d8:	e009883a 	mov	r4,fp
   105dc:	a00b883a 	mov	r5,r20
   105e0:	100d883a 	mov	r6,r2
   105e4:	180f883a 	mov	r7,r3
   105e8:	00161980 	call	16198 <__muldf3>
   105ec:	880d883a 	mov	r6,r17
   105f0:	800f883a 	mov	r7,r16
   105f4:	1009883a 	mov	r4,r2
   105f8:	180b883a 	mov	r5,r3
   105fc:	0014d380 	call	14d38 <__adddf3>
   10600:	180b883a 	mov	r5,r3
   10604:	1009883a 	mov	r4,r2
   10608:	00116000 	call	11600 <cos>
   1060c:	a809883a 	mov	r4,r21
   10610:	d8800015 	stw	r2,0(sp)
   10614:	d8c00115 	stw	r3,4(sp)
   10618:	001742c0 	call	1742c <__extendsfdf2>
   1061c:	d9800017 	ldw	r6,0(sp)
   10620:	d9c00117 	ldw	r7,4(sp)
   10624:	8809883a 	mov	r4,r17
   10628:	800b883a 	mov	r5,r16
   1062c:	102b883a 	mov	r21,r2
   10630:	1827883a 	mov	r19,r3
   10634:	00161980 	call	16198 <__muldf3>
   10638:	100d883a 	mov	r6,r2
   1063c:	180f883a 	mov	r7,r3
   10640:	a809883a 	mov	r4,r21
   10644:	980b883a 	mov	r5,r19
   10648:	0014d380 	call	14d38 <__adddf3>
   1064c:	180b883a 	mov	r5,r3
   10650:	1009883a 	mov	r4,r2
   10654:	001753c0 	call	1753c <__truncdfsf2>
        sum2 += (i * cos((i + 1.0) * x2 + i));
   10658:	b009883a 	mov	r4,r22
    float sum1 = 0.0;
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
        sum1 += (i * cos((i + 1.0) * x1 + i));
   1065c:	1027883a 	mov	r19,r2
   10660:	102b883a 	mov	r21,r2
        sum2 += (i * cos((i + 1.0) * x2 + i));
   10664:	001742c0 	call	1742c <__extendsfdf2>
   10668:	e009883a 	mov	r4,fp
   1066c:	a00b883a 	mov	r5,r20
   10670:	100d883a 	mov	r6,r2
   10674:	180f883a 	mov	r7,r3
   10678:	00161980 	call	16198 <__muldf3>
   1067c:	880d883a 	mov	r6,r17
   10680:	800f883a 	mov	r7,r16
   10684:	1009883a 	mov	r4,r2
   10688:	180b883a 	mov	r5,r3
   1068c:	0014d380 	call	14d38 <__adddf3>
   10690:	180b883a 	mov	r5,r3
   10694:	1009883a 	mov	r4,r2
   10698:	00116000 	call	11600 <cos>
   1069c:	da000217 	ldw	r8,8(sp)
   106a0:	d8800015 	stw	r2,0(sp)
   106a4:	d8c00115 	stw	r3,4(sp)
   106a8:	4009883a 	mov	r4,r8
   106ac:	001742c0 	call	1742c <__extendsfdf2>
   106b0:	d9800017 	ldw	r6,0(sp)
   106b4:	d9c00117 	ldw	r7,4(sp)
   106b8:	8809883a 	mov	r4,r17
   106bc:	800b883a 	mov	r5,r16
   106c0:	1039883a 	mov	fp,r2
   106c4:	1829883a 	mov	r20,r3
   106c8:	00161980 	call	16198 <__muldf3>
   106cc:	e009883a 	mov	r4,fp
   106d0:	a00b883a 	mov	r5,r20
   106d4:	100d883a 	mov	r6,r2
   106d8:	180f883a 	mov	r7,r3
   106dc:	0014d380 	call	14d38 <__adddf3>
   106e0:	1009883a 	mov	r4,r2
   106e4:	180b883a 	mov	r5,r3
   106e8:	001753c0 	call	1753c <__truncdfsf2>
float shubert(float x1, float x2){
    float sum1 = 0.0;
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
   106ec:	da400317 	ldw	r9,12(sp)
   106f0:	94800044 	addi	r18,r18,1
        sum1 += (i * cos((i + 1.0) * x1 + i));
        sum2 += (i * cos((i + 1.0) * x2 + i));
   106f4:	1011883a 	mov	r8,r2
float shubert(float x1, float x2){
    float sum1 = 0.0;
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
   106f8:	927fa81e 	bne	r18,r9,1059c <_gp+0xfffee538>
        sum1 += (i * cos((i + 1.0) * x1 + i));
        sum2 += (i * cos((i + 1.0) * x2 + i));
    }

    return sum1*sum2;
   106fc:	9809883a 	mov	r4,r19
   10700:	100b883a 	mov	r5,r2
   10704:	00142400 	call	14240 <__mulsf3>

}
   10708:	dfc00d17 	ldw	ra,52(sp)
   1070c:	df000c17 	ldw	fp,48(sp)
   10710:	ddc00b17 	ldw	r23,44(sp)
   10714:	dd800a17 	ldw	r22,40(sp)
   10718:	dd400917 	ldw	r21,36(sp)
   1071c:	dd000817 	ldw	r20,32(sp)
   10720:	dcc00717 	ldw	r19,28(sp)
   10724:	dc800617 	ldw	r18,24(sp)
   10728:	dc400517 	ldw	r17,20(sp)
   1072c:	dc000417 	ldw	r16,16(sp)
   10730:	dec00e04 	addi	sp,sp,56
   10734:	f800283a 	ret

00010738 <d_de_jongs>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DE JONGS
 */
void d_de_jongs(float d[]){
    d[0] = -5.12;
   10738:	00b02934 	movhi	r2,49316
   1073c:	10b5c284 	addi	r2,r2,-10486
   10740:	20800015 	stw	r2,0(r4)
    d[1] = 5.12;
   10744:	00902934 	movhi	r2,16548
   10748:	10b5c284 	addi	r2,r2,-10486
   1074c:	20800115 	stw	r2,4(r4)
   10750:	f800283a 	ret

00010754 <d_rastrigin>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark RASTRIGIN
 */
void d_rastrigin(float d[]){
    d[0] = -2.0;
   10754:	00b00034 	movhi	r2,49152
   10758:	20800015 	stw	r2,0(r4)
    d[1] = 2.0;
   1075c:	00900034 	movhi	r2,16384
   10760:	20800115 	stw	r2,4(r4)
   10764:	f800283a 	ret

00010768 <d_drop_wave>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DROP WAVE
 */
void d_drop_wave(float d[]){
    d[0] = -2.0;
   10768:	00b00034 	movhi	r2,49152
   1076c:	20800015 	stw	r2,0(r4)
    d[1] = 2.0;
   10770:	00900034 	movhi	r2,16384
   10774:	20800115 	stw	r2,4(r4)
   10778:	f800283a 	ret

0001077c <d_griewangk>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark GRIEWANGK
 */
void d_griewangk(float d[]){
    d[0] = -4.0;
   1077c:	00b02034 	movhi	r2,49280
   10780:	20800015 	stw	r2,0(r4)
    d[1] = 4.0;
   10784:	00902034 	movhi	r2,16512
   10788:	20800115 	stw	r2,4(r4)
   1078c:	f800283a 	ret

00010790 <d_shubert>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark SHUBERT
 */
void d_shubert(float d[]){
    d[0] = -3.0;
   10790:	00b01034 	movhi	r2,49216
   10794:	20800015 	stw	r2,0(r4)
    d[1] = 3.0;
   10798:	00901034 	movhi	r2,16448
   1079c:	20800115 	stw	r2,4(r4)
   107a0:	f800283a 	ret

000107a4 <obter_numero_uniforme>:


/*
 * Esta funcao retorna um valor (do tipo float) aleatorio uniforme entre 0 e 1.
 */
float obter_numero_uniforme(){
   107a4:	defffd04 	addi	sp,sp,-12
   107a8:	dfc00215 	stw	ra,8(sp)
   107ac:	dc400115 	stw	r17,4(sp)
   107b0:	dc000015 	stw	r16,0(sp)
    int max_mix = rand() % 100; //aumenta a aleatoriedade
   107b4:	0017f480 	call	17f48 <rand>
   107b8:	1009883a 	mov	r4,r2
   107bc:	01401904 	movi	r5,100
   107c0:	0013c140 	call	13c14 <__modsi3>
   107c4:	1023883a 	mov	r17,r2
    int i;
    for (i = 0; i < max_mix; i++) rand(); //aumenta a aleatoriedade
   107c8:	0021883a 	mov	r16,zero
   107cc:	8440030e 	bge	r16,r17,107dc <obter_numero_uniforme+0x38>
   107d0:	0017f480 	call	17f48 <rand>
   107d4:	84000044 	addi	r16,r16,1
   107d8:	003ffc06 	br	107cc <_gp+0xfffee768>

    return (float) rand() / (float) RAND_MAX;
   107dc:	0017f480 	call	17f48 <rand>
   107e0:	1009883a 	mov	r4,r2
   107e4:	0014c040 	call	14c04 <__floatsisf>
   107e8:	1009883a 	mov	r4,r2
   107ec:	014c0034 	movhi	r5,12288
   107f0:	00142400 	call	14240 <__mulsf3>
}
   107f4:	dfc00217 	ldw	ra,8(sp)
   107f8:	dc400117 	ldw	r17,4(sp)
   107fc:	dc000017 	ldw	r16,0(sp)
   10800:	dec00304 	addi	sp,sp,12
   10804:	f800283a 	ret

00010808 <obter_numero_uniforme_continuo>:
 *  - limite inferior
 *  - limite superior
 *
 * Retorna um valor (do tipo float) aleatorio uniforme continuo.
 */
float obter_numero_uniforme_continuo(float l_inf, float l_sup){
   10808:	defffc04 	addi	sp,sp,-16
   1080c:	dfc00315 	stw	ra,12(sp)
   10810:	dc800215 	stw	r18,8(sp)
   10814:	dc400115 	stw	r17,4(sp)
   10818:	2825883a 	mov	r18,r5
   1081c:	dc000015 	stw	r16,0(sp)
   10820:	2021883a 	mov	r16,r4
    float u = obter_numero_uniforme();
   10824:	00107a40 	call	107a4 <obter_numero_uniforme>
    return l_inf + (l_sup - l_inf) * u;
   10828:	9009883a 	mov	r4,r18
   1082c:	800b883a 	mov	r5,r16
 *  - limite superior
 *
 * Retorna um valor (do tipo float) aleatorio uniforme continuo.
 */
float obter_numero_uniforme_continuo(float l_inf, float l_sup){
    float u = obter_numero_uniforme();
   10830:	1023883a 	mov	r17,r2
    return l_inf + (l_sup - l_inf) * u;
   10834:	00146900 	call	14690 <__subsf3>
   10838:	880b883a 	mov	r5,r17
   1083c:	1009883a 	mov	r4,r2
   10840:	00142400 	call	14240 <__mulsf3>
   10844:	8009883a 	mov	r4,r16
   10848:	100b883a 	mov	r5,r2
   1084c:	0013ca80 	call	13ca8 <__addsf3>
}
   10850:	dfc00317 	ldw	ra,12(sp)
   10854:	dc800217 	ldw	r18,8(sp)
   10858:	dc400117 	ldw	r17,4(sp)
   1085c:	dc000017 	ldw	r16,0(sp)
   10860:	dec00404 	addi	sp,sp,16
   10864:	f800283a 	ret

00010868 <obter_numero_uniforme_discreto>:
 *  - limite inferior
 *  - limite superior
 *
 * Retorna um valor (do tipo int) aleatorio uniforme discreto.
 */
int obter_numero_uniforme_discreto(float l_inf, float l_sup){
   10868:	defffb04 	addi	sp,sp,-20
   1086c:	dfc00415 	stw	ra,16(sp)
   10870:	dcc00315 	stw	r19,12(sp)
   10874:	dc800215 	stw	r18,8(sp)
   10878:	dc400115 	stw	r17,4(sp)
   1087c:	dc000015 	stw	r16,0(sp)
   10880:	2823883a 	mov	r17,r5
   10884:	2021883a 	mov	r16,r4
    float u = obter_numero_uniforme();
   10888:	00107a40 	call	107a4 <obter_numero_uniforme>

    return l_inf + (int)((l_sup - l_inf + 1.0) * u);
   1088c:	800b883a 	mov	r5,r16
   10890:	8809883a 	mov	r4,r17
 *  - limite superior
 *
 * Retorna um valor (do tipo int) aleatorio uniforme discreto.
 */
int obter_numero_uniforme_discreto(float l_inf, float l_sup){
    float u = obter_numero_uniforme();
   10894:	1027883a 	mov	r19,r2

    return l_inf + (int)((l_sup - l_inf + 1.0) * u);
   10898:	00146900 	call	14690 <__subsf3>
   1089c:	1009883a 	mov	r4,r2
   108a0:	001742c0 	call	1742c <__extendsfdf2>
   108a4:	180b883a 	mov	r5,r3
   108a8:	000d883a 	mov	r6,zero
   108ac:	01cffc34 	movhi	r7,16368
   108b0:	1009883a 	mov	r4,r2
   108b4:	0014d380 	call	14d38 <__adddf3>
   108b8:	9809883a 	mov	r4,r19
   108bc:	1025883a 	mov	r18,r2
   108c0:	1823883a 	mov	r17,r3
   108c4:	001742c0 	call	1742c <__extendsfdf2>
   108c8:	100d883a 	mov	r6,r2
   108cc:	180f883a 	mov	r7,r3
   108d0:	9009883a 	mov	r4,r18
   108d4:	880b883a 	mov	r5,r17
   108d8:	00161980 	call	16198 <__muldf3>
   108dc:	180b883a 	mov	r5,r3
   108e0:	1009883a 	mov	r4,r2
   108e4:	00172d40 	call	172d4 <__fixdfsi>
   108e8:	1009883a 	mov	r4,r2
   108ec:	0014c040 	call	14c04 <__floatsisf>
   108f0:	8009883a 	mov	r4,r16
   108f4:	100b883a 	mov	r5,r2
   108f8:	0013ca80 	call	13ca8 <__addsf3>
   108fc:	1009883a 	mov	r4,r2
   10900:	0014b8c0 	call	14b8c <__fixsfsi>
}
   10904:	dfc00417 	ldw	ra,16(sp)
   10908:	dcc00317 	ldw	r19,12(sp)
   1090c:	dc800217 	ldw	r18,8(sp)
   10910:	dc400117 	ldw	r17,4(sp)
   10914:	dc000017 	ldw	r16,0(sp)
   10918:	dec00504 	addi	sp,sp,20
   1091c:	f800283a 	ret

00010920 <merge>:
    float x1;
    float x2;
    float fitness;
}t_individuo;

void merge(struct t_individuo vet[], int tam_vet) {
   10920:	defff504 	addi	sp,sp,-44
   10924:	dd400615 	stw	r21,24(sp)
   10928:	dd000515 	stw	r20,20(sp)
   1092c:	202b883a 	mov	r21,r4
   10930:	2829883a 	mov	r20,r5

    int mid;
    int i, j, k;
    struct t_individuo* tmp;

    tmp = (struct t_individuo*) malloc(tam_vet * sizeof(struct t_individuo));
   10934:	2809883a 	mov	r4,r5
   10938:	01400304 	movi	r5,12
    float x1;
    float x2;
    float fitness;
}t_individuo;

void merge(struct t_individuo vet[], int tam_vet) {
   1093c:	dfc00a15 	stw	ra,40(sp)
   10940:	dcc00415 	stw	r19,16(sp)
   10944:	df000915 	stw	fp,36(sp)
   10948:	ddc00815 	stw	r23,32(sp)
   1094c:	dd800715 	stw	r22,28(sp)
   10950:	dc800315 	stw	r18,12(sp)
   10954:	dc400215 	stw	r17,8(sp)
   10958:	dc000115 	stw	r16,4(sp)

    int mid;
    int i, j, k;
    struct t_individuo* tmp;

    tmp = (struct t_individuo*) malloc(tam_vet * sizeof(struct t_individuo));
   1095c:	0013c800 	call	13c80 <__mulsi3>
   10960:	1009883a 	mov	r4,r2
   10964:	00177480 	call	17748 <malloc>
   10968:	1027883a 	mov	r19,r2

    if (tmp == NULL) {
   1096c:	1000021e 	bne	r2,zero,10978 <merge+0x58>
        exit(1);
   10970:	01000044 	movi	r4,1
   10974:	001000c0 	call	1000c <_exit>
    }

    mid = tam_vet / 2;
   10978:	a022d7fa 	srli	r17,r20,31
   1097c:	102d883a 	mov	r22,r2
    i = 0;
    j = mid;
    k = 0;
   10980:	002f883a 	mov	r23,zero

    if (tmp == NULL) {
        exit(1);
    }

    mid = tam_vet / 2;
   10984:	8d23883a 	add	r17,r17,r20
   10988:	8823d07a 	srai	r17,r17,1
    i = 0;
   1098c:	0021883a 	mov	r16,zero

    if (tmp == NULL) {
        exit(1);
    }

    mid = tam_vet / 2;
   10990:	8825883a 	mov	r18,r17
    i = 0;
    j = mid;
    k = 0;

    while (i < mid && j < tam_vet) {
   10994:	84400c16 	blt	r16,r17,109c8 <merge+0xa8>
   10998:	902d883a 	mov	r22,r18
            tmp[k] = vet[j++];
        }
        ++k;
    }

    if (i == mid) {
   1099c:	84402526 	beq	r16,r17,10a34 <merge+0x114>
   109a0:	8009883a 	mov	r4,r16
   109a4:	01400304 	movi	r5,12
   109a8:	0013c800 	call	13c80 <__mulsi3>
   109ac:	b809883a 	mov	r4,r23
   109b0:	01400304 	movi	r5,12
   109b4:	1039883a 	mov	fp,r2
   109b8:	0013c800 	call	13c80 <__mulsi3>
   109bc:	102d883a 	mov	r22,r2
   109c0:	0025883a 	mov	r18,zero
   109c4:	00003006 	br	10a88 <merge+0x168>
    mid = tam_vet / 2;
    i = 0;
    j = mid;
    k = 0;

    while (i < mid && j < tam_vet) {
   109c8:	953ff30e 	bge	r18,r20,10998 <_gp+0xfffee934>
        if (vet[i].fitness <= vet[j].fitness) {
   109cc:	8009883a 	mov	r4,r16
   109d0:	01400304 	movi	r5,12
   109d4:	0013c800 	call	13c80 <__mulsi3>
   109d8:	9009883a 	mov	r4,r18
   109dc:	01400304 	movi	r5,12
   109e0:	a8b9883a 	add	fp,r21,r2
   109e4:	0013c800 	call	13c80 <__mulsi3>
   109e8:	a887883a 	add	r3,r21,r2
   109ec:	19400217 	ldw	r5,8(r3)
   109f0:	e1000217 	ldw	r4,8(fp)
   109f4:	d8c00015 	stw	r3,0(sp)
   109f8:	00141880 	call	14188 <__lesf2>
   109fc:	d8c00017 	ldw	r3,0(sp)
   10a00:	00800416 	blt	zero,r2,10a14 <merge+0xf4>
            tmp[k] = vet[i++];
   10a04:	84000044 	addi	r16,r16,1
   10a08:	b009883a 	mov	r4,r22
   10a0c:	e00b883a 	mov	r5,fp
   10a10:	00000306 	br	10a20 <merge+0x100>
        }
        else {
            tmp[k] = vet[j++];
   10a14:	94800044 	addi	r18,r18,1
   10a18:	b009883a 	mov	r4,r22
   10a1c:	180b883a 	mov	r5,r3
   10a20:	01800304 	movi	r6,12
   10a24:	0017df40 	call	17df4 <memcpy>
        }
        ++k;
   10a28:	bdc00044 	addi	r23,r23,1
   10a2c:	b5800304 	addi	r22,r22,12
   10a30:	003fd806 	br	10994 <_gp+0xfffee930>
   10a34:	9009883a 	mov	r4,r18
   10a38:	01400304 	movi	r5,12
   10a3c:	0013c800 	call	13c80 <__mulsi3>
   10a40:	b809883a 	mov	r4,r23
   10a44:	01400304 	movi	r5,12
   10a48:	1023883a 	mov	r17,r2
   10a4c:	0013c800 	call	13c80 <__mulsi3>
   10a50:	1025883a 	mov	r18,r2
    }

    if (i == mid) {
   10a54:	0021883a 	mov	r16,zero
        while (j < tam_vet) {
   10a58:	b500090e 	bge	r22,r20,10a80 <merge+0x160>
   10a5c:	8489883a 	add	r4,r16,r18
   10a60:	844b883a 	add	r5,r16,r17
            tmp[k++] = vet[j++];
   10a64:	9909883a 	add	r4,r19,r4
   10a68:	a94b883a 	add	r5,r21,r5
   10a6c:	01800304 	movi	r6,12
   10a70:	b5800044 	addi	r22,r22,1
   10a74:	0017df40 	call	17df4 <memcpy>
   10a78:	84000304 	addi	r16,r16,12
   10a7c:	003ff606 	br	10a58 <_gp+0xfffee9f4>
            tmp[k] = vet[j++];
        }
        ++k;
    }

    if (i == mid) {
   10a80:	0021883a 	mov	r16,zero
   10a84:	00000a06 	br	10ab0 <merge+0x190>
        while (j < tam_vet) {
            tmp[k++] = vet[j++];
        }
    }
    else {
        while (i < mid) {
   10a88:	847ffd0e 	bge	r16,r17,10a80 <_gp+0xfffeea1c>
   10a8c:	9589883a 	add	r4,r18,r22
   10a90:	970b883a 	add	r5,r18,fp
            tmp[k++] = vet[i++];
   10a94:	9909883a 	add	r4,r19,r4
   10a98:	a94b883a 	add	r5,r21,r5
   10a9c:	01800304 	movi	r6,12
   10aa0:	84000044 	addi	r16,r16,1
   10aa4:	0017df40 	call	17df4 <memcpy>
   10aa8:	94800304 	addi	r18,r18,12
   10aac:	003ff606 	br	10a88 <_gp+0xfffeea24>
        }
    }

    for (i = 0; i < tam_vet; ++i) {
   10ab0:	8500090e 	bge	r16,r20,10ad8 <merge+0x1b8>
   10ab4:	8009883a 	mov	r4,r16
   10ab8:	01400304 	movi	r5,12
   10abc:	0013c800 	call	13c80 <__mulsi3>
        vet[i] = tmp[i];
   10ac0:	a889883a 	add	r4,r21,r2
   10ac4:	988b883a 	add	r5,r19,r2
   10ac8:	01800304 	movi	r6,12
   10acc:	0017df40 	call	17df4 <memcpy>
        while (i < mid) {
            tmp[k++] = vet[i++];
        }
    }

    for (i = 0; i < tam_vet; ++i) {
   10ad0:	84000044 	addi	r16,r16,1
   10ad4:	003ff606 	br	10ab0 <_gp+0xfffeea4c>
        vet[i] = tmp[i];
    }

    free(tmp);
   10ad8:	9809883a 	mov	r4,r19
}
   10adc:	dfc00a17 	ldw	ra,40(sp)
   10ae0:	df000917 	ldw	fp,36(sp)
   10ae4:	ddc00817 	ldw	r23,32(sp)
   10ae8:	dd800717 	ldw	r22,28(sp)
   10aec:	dd400617 	ldw	r21,24(sp)
   10af0:	dd000517 	ldw	r20,20(sp)
   10af4:	dcc00417 	ldw	r19,16(sp)
   10af8:	dc800317 	ldw	r18,12(sp)
   10afc:	dc400217 	ldw	r17,8(sp)
   10b00:	dc000117 	ldw	r16,4(sp)
   10b04:	dec00b04 	addi	sp,sp,44

    for (i = 0; i < tam_vet; ++i) {
        vet[i] = tmp[i];
    }

    free(tmp);
   10b08:	001775c1 	jmpi	1775c <free>

00010b0c <mergeSort>:
 * Ordenacao da Populacao pelo Fitness
 * O procedimento abaixo implementa o algoritmo de Ordenacao MERGE SORT.
 */
void mergeSort(struct t_individuo vet[], int tam_vet) {
    int mid;
    if (tam_vet > 1) {
   10b0c:	00800044 	movi	r2,1
   10b10:	1140180e 	bge	r2,r5,10b74 <mergeSort+0x68>

/*
 * Ordenacao da Populacao pelo Fitness
 * O procedimento abaixo implementa o algoritmo de Ordenacao MERGE SORT.
 */
void mergeSort(struct t_individuo vet[], int tam_vet) {
   10b14:	defffc04 	addi	sp,sp,-16
   10b18:	dc800215 	stw	r18,8(sp)
    int mid;
    if (tam_vet > 1) {
        mid = tam_vet / 2;
   10b1c:	28a5d83a 	sra	r18,r5,r2

/*
 * Ordenacao da Populacao pelo Fitness
 * O procedimento abaixo implementa o algoritmo de Ordenacao MERGE SORT.
 */
void mergeSort(struct t_individuo vet[], int tam_vet) {
   10b20:	dc000015 	stw	r16,0(sp)
   10b24:	2821883a 	mov	r16,r5
    int mid;
    if (tam_vet > 1) {
        mid = tam_vet / 2;
        mergeSort(vet, mid);
   10b28:	900b883a 	mov	r5,r18

/*
 * Ordenacao da Populacao pelo Fitness
 * O procedimento abaixo implementa o algoritmo de Ordenacao MERGE SORT.
 */
void mergeSort(struct t_individuo vet[], int tam_vet) {
   10b2c:	dfc00315 	stw	ra,12(sp)
   10b30:	dc400115 	stw	r17,4(sp)
   10b34:	2023883a 	mov	r17,r4
    int mid;
    if (tam_vet > 1) {
        mid = tam_vet / 2;
        mergeSort(vet, mid);
   10b38:	0010b0c0 	call	10b0c <mergeSort>
        mergeSort(vet+mid, tam_vet-mid);
   10b3c:	9009883a 	mov	r4,r18
   10b40:	01400304 	movi	r5,12
   10b44:	0013c800 	call	13c80 <__mulsi3>
   10b48:	8889883a 	add	r4,r17,r2
   10b4c:	848bc83a 	sub	r5,r16,r18
   10b50:	0010b0c0 	call	10b0c <mergeSort>
        merge(vet, tam_vet);
   10b54:	8809883a 	mov	r4,r17
   10b58:	800b883a 	mov	r5,r16
    }
}
   10b5c:	dfc00317 	ldw	ra,12(sp)
   10b60:	dc800217 	ldw	r18,8(sp)
   10b64:	dc400117 	ldw	r17,4(sp)
   10b68:	dc000017 	ldw	r16,0(sp)
   10b6c:	dec00404 	addi	sp,sp,16
    int mid;
    if (tam_vet > 1) {
        mid = tam_vet / 2;
        mergeSort(vet, mid);
        mergeSort(vet+mid, tam_vet-mid);
        merge(vet, tam_vet);
   10b70:	00109201 	jmpi	10920 <merge>
   10b74:	f800283a 	ret

00010b78 <obter_fitness>:
    }
}

float obter_fitness(int funcao, float x1, float x2){
   10b78:	defffa04 	addi	sp,sp,-24
   10b7c:	dfc00515 	stw	ra,20(sp)
   10b80:	dd000415 	stw	r20,16(sp)
   10b84:	dcc00315 	stw	r19,12(sp)
   10b88:	dc800215 	stw	r18,8(sp)
   10b8c:	dc400115 	stw	r17,4(sp)
   10b90:	dc000015 	stw	r16,0(sp)
    float fitness = 0.0;

    switch (funcao)
   10b94:	213fffc4 	addi	r4,r4,-1
   10b98:	00800104 	movi	r2,4
   10b9c:	11004d36 	bltu	r2,r4,10cd4 <obter_fitness+0x15c>
   10ba0:	200890ba 	slli	r4,r4,2
   10ba4:	00800074 	movhi	r2,1
   10ba8:	1082f004 	addi	r2,r2,3008
   10bac:	2089883a 	add	r4,r4,r2
   10bb0:	20800017 	ldw	r2,0(r4)
   10bb4:	3021883a 	mov	r16,r6
            break;
        case 4:
            fitness = griewangk(x1,x2);
            break;
        case 5:
            fitness = shubert(x1,x2);
   10bb8:	2809883a 	mov	r4,r5
}

float obter_fitness(int funcao, float x1, float x2){
    float fitness = 0.0;

    switch (funcao)
   10bbc:	1000683a 	jmp	r2
   10bc0:	00010bd4 	movui	zero,1071
   10bc4:	00010c44 	movi	zero,1073
   10bc8:	00010c68 	cmpgeui	zero,zero,1073
   10bcc:	00010c8c 	andi	zero,zero,1074
   10bd0:	00010cb0 	cmpltui	zero,zero,1074

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
   10bd4:	001742c0 	call	1742c <__extendsfdf2>
   10bd8:	8009883a 	mov	r4,r16
   10bdc:	1029883a 	mov	r20,r2
   10be0:	1823883a 	mov	r17,r3
   10be4:	001742c0 	call	1742c <__extendsfdf2>
   10be8:	a009883a 	mov	r4,r20
   10bec:	880b883a 	mov	r5,r17
   10bf0:	a00d883a 	mov	r6,r20
   10bf4:	880f883a 	mov	r7,r17
   10bf8:	1027883a 	mov	r19,r2
   10bfc:	1825883a 	mov	r18,r3
   10c00:	00161980 	call	16198 <__muldf3>
   10c04:	9809883a 	mov	r4,r19
   10c08:	900b883a 	mov	r5,r18
   10c0c:	980d883a 	mov	r6,r19
   10c10:	900f883a 	mov	r7,r18
   10c14:	1023883a 	mov	r17,r2
   10c18:	1821883a 	mov	r16,r3
   10c1c:	00161980 	call	16198 <__muldf3>
   10c20:	8809883a 	mov	r4,r17
   10c24:	800b883a 	mov	r5,r16
   10c28:	100d883a 	mov	r6,r2
   10c2c:	180f883a 	mov	r7,r3
   10c30:	0014d380 	call	14d38 <__adddf3>
   10c34:	1009883a 	mov	r4,r2
   10c38:	180b883a 	mov	r5,r3
   10c3c:	001753c0 	call	1753c <__truncdfsf2>

    switch (funcao)
    {
        case 1:
            fitness = de_jongs(x1,x2);
            break;
   10c40:	00002806 	br	10ce4 <obter_fitness+0x16c>
        case 2:
            fitness = rastrigin(x1,x2);
   10c44:	300b883a 	mov	r5,r6
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
   10c48:	dfc00517 	ldw	ra,20(sp)
   10c4c:	dd000417 	ldw	r20,16(sp)
   10c50:	dcc00317 	ldw	r19,12(sp)
   10c54:	dc800217 	ldw	r18,8(sp)
   10c58:	dc400117 	ldw	r17,4(sp)
   10c5c:	dc000017 	ldw	r16,0(sp)
   10c60:	dec00604 	addi	sp,sp,24
    {
        case 1:
            fitness = de_jongs(x1,x2);
            break;
        case 2:
            fitness = rastrigin(x1,x2);
   10c64:	00101001 	jmpi	10100 <rastrigin>
            break;
        case 3:
            fitness = drop_wave(x1,x2);
   10c68:	300b883a 	mov	r5,r6
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
   10c6c:	dfc00517 	ldw	ra,20(sp)
   10c70:	dd000417 	ldw	r20,16(sp)
   10c74:	dcc00317 	ldw	r19,12(sp)
   10c78:	dc800217 	ldw	r18,8(sp)
   10c7c:	dc400117 	ldw	r17,4(sp)
   10c80:	dc000017 	ldw	r16,0(sp)
   10c84:	dec00604 	addi	sp,sp,24
            break;
        case 2:
            fitness = rastrigin(x1,x2);
            break;
        case 3:
            fitness = drop_wave(x1,x2);
   10c88:	00102981 	jmpi	10298 <drop_wave>
            break;
        case 4:
            fitness = griewangk(x1,x2);
   10c8c:	300b883a 	mov	r5,r6
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
   10c90:	dfc00517 	ldw	ra,20(sp)
   10c94:	dd000417 	ldw	r20,16(sp)
   10c98:	dcc00317 	ldw	r19,12(sp)
   10c9c:	dc800217 	ldw	r18,8(sp)
   10ca0:	dc400117 	ldw	r17,4(sp)
   10ca4:	dc000017 	ldw	r16,0(sp)
   10ca8:	dec00604 	addi	sp,sp,24
            break;
        case 3:
            fitness = drop_wave(x1,x2);
            break;
        case 4:
            fitness = griewangk(x1,x2);
   10cac:	00103e01 	jmpi	103e0 <griewangk>
            break;
        case 5:
            fitness = shubert(x1,x2);
   10cb0:	300b883a 	mov	r5,r6
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
   10cb4:	dfc00517 	ldw	ra,20(sp)
   10cb8:	dd000417 	ldw	r20,16(sp)
   10cbc:	dcc00317 	ldw	r19,12(sp)
   10cc0:	dc800217 	ldw	r18,8(sp)
   10cc4:	dc400117 	ldw	r17,4(sp)
   10cc8:	dc000017 	ldw	r16,0(sp)
   10ccc:	dec00604 	addi	sp,sp,24
            break;
        case 4:
            fitness = griewangk(x1,x2);
            break;
        case 5:
            fitness = shubert(x1,x2);
   10cd0:	00105581 	jmpi	10558 <shubert>
            break;
        default:
            printf ("\nERRO!\n");
   10cd4:	010000b4 	movhi	r4,2
   10cd8:	2125c404 	addi	r4,r4,-26864
   10cdc:	0017f240 	call	17f24 <puts>
        merge(vet, tam_vet);
    }
}

float obter_fitness(int funcao, float x1, float x2){
    float fitness = 0.0;
   10ce0:	0005883a 	mov	r2,zero
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
   10ce4:	dfc00517 	ldw	ra,20(sp)
   10ce8:	dd000417 	ldw	r20,16(sp)
   10cec:	dcc00317 	ldw	r19,12(sp)
   10cf0:	dc800217 	ldw	r18,8(sp)
   10cf4:	dc400117 	ldw	r17,4(sp)
   10cf8:	dc000017 	ldw	r16,0(sp)
   10cfc:	dec00604 	addi	sp,sp,24
   10d00:	f800283a 	ret

00010d04 <identificar_dominio>:

void identificar_dominio(int funcao, float *l_inf, float *l_sup){
   10d04:	defffb04 	addi	sp,sp,-20
   10d08:	dcc00315 	stw	r19,12(sp)
   10d0c:	dc800215 	stw	r18,8(sp)
   10d10:	dfc00415 	stw	ra,16(sp)
   10d14:	dc400115 	stw	r17,4(sp)
   10d18:	dc000015 	stw	r16,0(sp)
    float d[2];
    switch (funcao)
   10d1c:	213fffc4 	addi	r4,r4,-1
   10d20:	00800104 	movi	r2,4
    }

    return fitness;
}

void identificar_dominio(int funcao, float *l_inf, float *l_sup){
   10d24:	2827883a 	mov	r19,r5
   10d28:	3025883a 	mov	r18,r6
    float d[2];
    switch (funcao)
   10d2c:	11001436 	bltu	r2,r4,10d80 <identificar_dominio+0x7c>
   10d30:	200890ba 	slli	r4,r4,2
   10d34:	00800074 	movhi	r2,1
   10d38:	10835204 	addi	r2,r2,3400
   10d3c:	2089883a 	add	r4,r4,r2
   10d40:	20800017 	ldw	r2,0(r4)
   10d44:	1000683a 	jmp	r2
   10d48:	00010d90 	cmplti	zero,zero,1078
   10d4c:	00010d5c 	xori	zero,zero,1077
   10d50:	00010d5c 	xori	zero,zero,1077
   10d54:	00010d68 	cmpgeui	zero,zero,1077
   10d58:	00010d74 	movhi	zero,1077
/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark RASTRIGIN
 */
void d_rastrigin(float d[]){
    d[0] = -2.0;
    d[1] = 2.0;
   10d5c:	04100034 	movhi	r16,16384

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark RASTRIGIN
 */
void d_rastrigin(float d[]){
    d[0] = -2.0;
   10d60:	04700034 	movhi	r17,49152
   10d64:	00000e06 	br	10da0 <identificar_dominio+0x9c>
/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark GRIEWANGK
 */
void d_griewangk(float d[]){
    d[0] = -4.0;
    d[1] = 4.0;
   10d68:	04102034 	movhi	r16,16512

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark GRIEWANGK
 */
void d_griewangk(float d[]){
    d[0] = -4.0;
   10d6c:	04702034 	movhi	r17,49280
   10d70:	00000b06 	br	10da0 <identificar_dominio+0x9c>
/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark SHUBERT
 */
void d_shubert(float d[]){
    d[0] = -3.0;
    d[1] = 3.0;
   10d74:	04101034 	movhi	r16,16448

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark SHUBERT
 */
void d_shubert(float d[]){
    d[0] = -3.0;
   10d78:	04701034 	movhi	r17,49216
   10d7c:	00000806 	br	10da0 <identificar_dominio+0x9c>
            break;
        case 5:
            d_shubert(d);
            break;
        default:
            printf ("\nERRO!\n");
   10d80:	010000b4 	movhi	r4,2
   10d84:	2125c404 	addi	r4,r4,-26864
   10d88:	0017f240 	call	17f24 <puts>
   10d8c:	00000406 	br	10da0 <identificar_dominio+0x9c>
/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DE JONGS
 */
void d_de_jongs(float d[]){
    d[0] = -5.12;
    d[1] = 5.12;
   10d90:	04102934 	movhi	r16,16548

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DE JONGS
 */
void d_de_jongs(float d[]){
    d[0] = -5.12;
   10d94:	04702934 	movhi	r17,49316
    d[1] = 5.12;
   10d98:	8435c284 	addi	r16,r16,-10486

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DE JONGS
 */
void d_de_jongs(float d[]){
    d[0] = -5.12;
   10d9c:	8c75c284 	addi	r17,r17,-10486
            d_shubert(d);
            break;
        default:
            printf ("\nERRO!\n");
    }
    *l_inf = d[0];
   10da0:	9c400015 	stw	r17,0(r19)
    *l_sup = d[1];
   10da4:	94000015 	stw	r16,0(r18)
}
   10da8:	dfc00417 	ldw	ra,16(sp)
   10dac:	dcc00317 	ldw	r19,12(sp)
   10db0:	dc800217 	ldw	r18,8(sp)
   10db4:	dc400117 	ldw	r17,4(sp)
   10db8:	dc000017 	ldw	r16,0(sp)
   10dbc:	dec00504 	addi	sp,sp,20
   10dc0:	f800283a 	ret

00010dc4 <encontra_melhor_individuo>:

/*
 * O procedimento abaixo eh responsavel por encontrar o melhor individuo (o que possui o menor fitness) no vetor "vet".
 */
void encontra_melhor_individuo(struct t_individuo vet[], int tam_vet, struct t_individuo *melhor){
   10dc4:	defffa04 	addi	sp,sp,-24
   10dc8:	dc800215 	stw	r18,8(sp)
   10dcc:	2025883a 	mov	r18,r4
   10dd0:	dd000415 	stw	r20,16(sp)
   10dd4:	dcc00315 	stw	r19,12(sp)
    int i;
    *melhor = vet[0];
   10dd8:	3009883a 	mov	r4,r6
}

/*
 * O procedimento abaixo eh responsavel por encontrar o melhor individuo (o que possui o menor fitness) no vetor "vet".
 */
void encontra_melhor_individuo(struct t_individuo vet[], int tam_vet, struct t_individuo *melhor){
   10ddc:	2829883a 	mov	r20,r5
   10de0:	3027883a 	mov	r19,r6
    int i;
    *melhor = vet[0];
   10de4:	900b883a 	mov	r5,r18
   10de8:	01800304 	movi	r6,12
}

/*
 * O procedimento abaixo eh responsavel por encontrar o melhor individuo (o que possui o menor fitness) no vetor "vet".
 */
void encontra_melhor_individuo(struct t_individuo vet[], int tam_vet, struct t_individuo *melhor){
   10dec:	dc400115 	stw	r17,4(sp)
   10df0:	dc000015 	stw	r16,0(sp)
   10df4:	dfc00515 	stw	ra,20(sp)
   10df8:	94400504 	addi	r17,r18,20
    int i;
    *melhor = vet[0];
   10dfc:	0017df40 	call	17df4 <memcpy>
    for(i = 1; i < tam_vet; i++){
   10e00:	04000044 	movi	r16,1
   10e04:	85000e0e 	bge	r16,r20,10e40 <encontra_melhor_individuo+0x7c>
        if (vet[i].fitness < melhor->fitness) *melhor = vet[i];
   10e08:	89000017 	ldw	r4,0(r17)
   10e0c:	99400217 	ldw	r5,8(r19)
   10e10:	00141880 	call	14188 <__lesf2>
   10e14:	1000070e 	bge	r2,zero,10e34 <encontra_melhor_individuo+0x70>
   10e18:	8009883a 	mov	r4,r16
   10e1c:	01400304 	movi	r5,12
   10e20:	0013c800 	call	13c80 <__mulsi3>
   10e24:	9809883a 	mov	r4,r19
   10e28:	908b883a 	add	r5,r18,r2
   10e2c:	01800304 	movi	r6,12
   10e30:	0017df40 	call	17df4 <memcpy>
 * O procedimento abaixo eh responsavel por encontrar o melhor individuo (o que possui o menor fitness) no vetor "vet".
 */
void encontra_melhor_individuo(struct t_individuo vet[], int tam_vet, struct t_individuo *melhor){
    int i;
    *melhor = vet[0];
    for(i = 1; i < tam_vet; i++){
   10e34:	84000044 	addi	r16,r16,1
   10e38:	8c400304 	addi	r17,r17,12
   10e3c:	003ff106 	br	10e04 <_gp+0xfffeeda0>
        if (vet[i].fitness < melhor->fitness) *melhor = vet[i];
    }
}
   10e40:	dfc00517 	ldw	ra,20(sp)
   10e44:	dd000417 	ldw	r20,16(sp)
   10e48:	dcc00317 	ldw	r19,12(sp)
   10e4c:	dc800217 	ldw	r18,8(sp)
   10e50:	dc400117 	ldw	r17,4(sp)
   10e54:	dc000017 	ldw	r16,0(sp)
   10e58:	dec00604 	addi	sp,sp,24
   10e5c:	f800283a 	ret

00010e60 <imprimir_individuo>:

/*
 * Procedimento para imprimir um unico individuo do tipo t_individuo
 */
void imprimir_individuo(struct t_individuo individuo){
   10e60:	defffc04 	addi	sp,sp,-16
   10e64:	dfc00315 	stw	ra,12(sp)
   10e68:	d9400115 	stw	r5,4(sp)
   10e6c:	d9800215 	stw	r6,8(sp)
    printf("x1 = %f\n",individuo.x1);
   10e70:	001742c0 	call	1742c <__extendsfdf2>
   10e74:	010000b4 	movhi	r4,2
   10e78:	100b883a 	mov	r5,r2
   10e7c:	180d883a 	mov	r6,r3
   10e80:	2125c604 	addi	r4,r4,-26856
   10e84:	0017e580 	call	17e58 <printf>
    printf("x2 = %f\n",individuo.x2);
   10e88:	d9000117 	ldw	r4,4(sp)
   10e8c:	001742c0 	call	1742c <__extendsfdf2>
   10e90:	010000b4 	movhi	r4,2
   10e94:	100b883a 	mov	r5,r2
   10e98:	180d883a 	mov	r6,r3
   10e9c:	2125c904 	addi	r4,r4,-26844
   10ea0:	0017e580 	call	17e58 <printf>
    printf("fitness = %f\n\n",individuo.fitness);
   10ea4:	d9000217 	ldw	r4,8(sp)
   10ea8:	001742c0 	call	1742c <__extendsfdf2>
   10eac:	010000b4 	movhi	r4,2
   10eb0:	2125cc04 	addi	r4,r4,-26832
   10eb4:	100b883a 	mov	r5,r2
   10eb8:	180d883a 	mov	r6,r3
}
   10ebc:	dfc00317 	ldw	ra,12(sp)
   10ec0:	dec00404 	addi	sp,sp,16
 * Procedimento para imprimir um unico individuo do tipo t_individuo
 */
void imprimir_individuo(struct t_individuo individuo){
    printf("x1 = %f\n",individuo.x1);
    printf("x2 = %f\n",individuo.x2);
    printf("fitness = %f\n\n",individuo.fitness);
   10ec4:	0017e581 	jmpi	17e58 <printf>

00010ec8 <imprimir_populacao>:
}

/*
 * Procedimento para imprimir um vetor de t_individuo
 */
void imprimir_populacao(struct t_individuo populacao[], int total_individuos){
   10ec8:	defffc04 	addi	sp,sp,-16
   10ecc:	dc800215 	stw	r18,8(sp)
   10ed0:	dc400115 	stw	r17,4(sp)
   10ed4:	dc000015 	stw	r16,0(sp)
   10ed8:	dfc00315 	stw	ra,12(sp)
   10edc:	2825883a 	mov	r18,r5
   10ee0:	24400204 	addi	r17,r4,8
    int i;
    for(i = 0; i < total_individuos; ++i){
   10ee4:	0021883a 	mov	r16,zero
   10ee8:	84800a0e 	bge	r16,r18,10f14 <imprimir_populacao+0x4c>
        //printf("(%d) x1 = %f; x2 = %f\n",i,populacao[i].x1,populacao[i].x2);
        printf("fitness: %f\n",populacao[i].fitness);
   10eec:	89000017 	ldw	r4,0(r17)
/*
 * Procedimento para imprimir um vetor de t_individuo
 */
void imprimir_populacao(struct t_individuo populacao[], int total_individuos){
    int i;
    for(i = 0; i < total_individuos; ++i){
   10ef0:	84000044 	addi	r16,r16,1
   10ef4:	8c400304 	addi	r17,r17,12
        //printf("(%d) x1 = %f; x2 = %f\n",i,populacao[i].x1,populacao[i].x2);
        printf("fitness: %f\n",populacao[i].fitness);
   10ef8:	001742c0 	call	1742c <__extendsfdf2>
   10efc:	010000b4 	movhi	r4,2
   10f00:	2125d004 	addi	r4,r4,-26816
   10f04:	100b883a 	mov	r5,r2
   10f08:	180d883a 	mov	r6,r3
   10f0c:	0017e580 	call	17e58 <printf>
   10f10:	003ff506 	br	10ee8 <_gp+0xfffeee84>

        //printf("fitness: %d\n\n",obter_numero_uniforme_discreto(0,4)); //4 inclusive
    }
}
   10f14:	dfc00317 	ldw	ra,12(sp)
   10f18:	dc800217 	ldw	r18,8(sp)
   10f1c:	dc400117 	ldw	r17,4(sp)
   10f20:	dc000017 	ldw	r16,0(sp)
   10f24:	dec00404 	addi	sp,sp,16
   10f28:	f800283a 	ret

00010f2c <gerar_populacao_inicial>:
 *  - a populacao (vetor de "t_individuo")
 *  - o tamanho da populacao ("total_individuos")
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void gerar_populacao_inicial(struct t_individuo populacao[], int total_individuos, int funcao){
   10f2c:	defff704 	addi	sp,sp,-36
   10f30:	dd400715 	stw	r21,28(sp)
   10f34:	dd000615 	stw	r20,24(sp)
   10f38:	dc000215 	stw	r16,8(sp)
   10f3c:	282b883a 	mov	r21,r5
   10f40:	2021883a 	mov	r16,r4
   10f44:	3029883a 	mov	r20,r6

    float l_inf = 0.0;
    float l_sup = 0.0;
    identificar_dominio(funcao,&l_inf,&l_sup);
   10f48:	3009883a 	mov	r4,r6
   10f4c:	d9400104 	addi	r5,sp,4
   10f50:	d80d883a 	mov	r6,sp
 *  - a populacao (vetor de "t_individuo")
 *  - o tamanho da populacao ("total_individuos")
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void gerar_populacao_inicial(struct t_individuo populacao[], int total_individuos, int funcao){
   10f54:	dcc00515 	stw	r19,20(sp)
   10f58:	dc800415 	stw	r18,16(sp)
   10f5c:	dc400315 	stw	r17,12(sp)
   10f60:	dfc00815 	stw	ra,32(sp)

    float l_inf = 0.0;
   10f64:	d8000115 	stw	zero,4(sp)
    float l_sup = 0.0;
   10f68:	d8000015 	stw	zero,0(sp)
   10f6c:	84800104 	addi	r18,r16,4
    identificar_dominio(funcao,&l_inf,&l_sup);
   10f70:	0010d040 	call	10d04 <identificar_dominio>
   10f74:	84c00204 	addi	r19,r16,8

    int i;
    for(i = 0; i < total_individuos; ++i){
   10f78:	0023883a 	mov	r17,zero
   10f7c:	8d40120e 	bge	r17,r21,10fc8 <gerar_populacao_inicial+0x9c>
        populacao[i].x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
   10f80:	d9000117 	ldw	r4,4(sp)
   10f84:	d9400017 	ldw	r5,0(sp)
    float l_inf = 0.0;
    float l_sup = 0.0;
    identificar_dominio(funcao,&l_inf,&l_sup);

    int i;
    for(i = 0; i < total_individuos; ++i){
   10f88:	8c400044 	addi	r17,r17,1
   10f8c:	84000304 	addi	r16,r16,12
        populacao[i].x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
   10f90:	00108080 	call	10808 <obter_numero_uniforme_continuo>
        populacao[i].x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
   10f94:	d9000117 	ldw	r4,4(sp)
   10f98:	d9400017 	ldw	r5,0(sp)
    float l_sup = 0.0;
    identificar_dominio(funcao,&l_inf,&l_sup);

    int i;
    for(i = 0; i < total_individuos; ++i){
        populacao[i].x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
   10f9c:	80bffd15 	stw	r2,-12(r16)
   10fa0:	94800304 	addi	r18,r18,12
        populacao[i].x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
   10fa4:	00108080 	call	10808 <obter_numero_uniforme_continuo>
   10fa8:	90bffd15 	stw	r2,-12(r18)
        populacao[i].fitness = obter_fitness(funcao, populacao[i].x1, populacao[i].x2);
   10fac:	817ffd17 	ldw	r5,-12(r16)
   10fb0:	a009883a 	mov	r4,r20
   10fb4:	100d883a 	mov	r6,r2
   10fb8:	0010b780 	call	10b78 <obter_fitness>
   10fbc:	98800015 	stw	r2,0(r19)
   10fc0:	9cc00304 	addi	r19,r19,12
   10fc4:	003fed06 	br	10f7c <_gp+0xfffeef18>
    }

}
   10fc8:	dfc00817 	ldw	ra,32(sp)
   10fcc:	dd400717 	ldw	r21,28(sp)
   10fd0:	dd000617 	ldw	r20,24(sp)
   10fd4:	dcc00517 	ldw	r19,20(sp)
   10fd8:	dc800417 	ldw	r18,16(sp)
   10fdc:	dc400317 	ldw	r17,12(sp)
   10fe0:	dc000217 	ldw	r16,8(sp)
   10fe4:	dec00904 	addi	sp,sp,36
   10fe8:	f800283a 	ret

00010fec <op_mutacao>:
 *  - a probabilidade (baixa) de mutacao informada pelo usuario no Menu (prob_mutacao)
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 *
 */
void op_mutacao(struct t_individuo *filho, float prob_mutacao, int funcao){
   10fec:	defffa04 	addi	sp,sp,-24
   10ff0:	dc800415 	stw	r18,16(sp)
   10ff4:	dc400315 	stw	r17,12(sp)
   10ff8:	dc000215 	stw	r16,8(sp)
   10ffc:	dfc00515 	stw	ra,20(sp)
   11000:	2021883a 	mov	r16,r4
   11004:	2825883a 	mov	r18,r5
   11008:	3023883a 	mov	r17,r6
    float u = obter_numero_uniforme();
   1100c:	00107a40 	call	107a4 <obter_numero_uniforme>

    if (u <= prob_mutacao){
   11010:	1009883a 	mov	r4,r2
   11014:	900b883a 	mov	r5,r18
   11018:	00141880 	call	14188 <__lesf2>
   1101c:	00801316 	blt	zero,r2,1106c <op_mutacao+0x80>

        float l_inf = 0.0;
        float l_sup = 0.0;
        identificar_dominio(funcao,&l_inf,&l_sup);
   11020:	d80d883a 	mov	r6,sp
   11024:	8809883a 	mov	r4,r17
   11028:	d9400104 	addi	r5,sp,4
void op_mutacao(struct t_individuo *filho, float prob_mutacao, int funcao){
    float u = obter_numero_uniforme();

    if (u <= prob_mutacao){

        float l_inf = 0.0;
   1102c:	d8000115 	stw	zero,4(sp)
        float l_sup = 0.0;
   11030:	d8000015 	stw	zero,0(sp)
        identificar_dominio(funcao,&l_inf,&l_sup);
   11034:	0010d040 	call	10d04 <identificar_dominio>

        filho->x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
   11038:	d9000117 	ldw	r4,4(sp)
   1103c:	d9400017 	ldw	r5,0(sp)
   11040:	00108080 	call	10808 <obter_numero_uniforme_continuo>
        filho->x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
   11044:	d9000117 	ldw	r4,4(sp)
   11048:	d9400017 	ldw	r5,0(sp)

        float l_inf = 0.0;
        float l_sup = 0.0;
        identificar_dominio(funcao,&l_inf,&l_sup);

        filho->x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
   1104c:	80800015 	stw	r2,0(r16)
        filho->x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
   11050:	00108080 	call	10808 <obter_numero_uniforme_continuo>
        filho->fitness = obter_fitness(funcao, filho->x1, filho->x2);
   11054:	81400017 	ldw	r5,0(r16)
        float l_inf = 0.0;
        float l_sup = 0.0;
        identificar_dominio(funcao,&l_inf,&l_sup);

        filho->x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
        filho->x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
   11058:	80800115 	stw	r2,4(r16)
        filho->fitness = obter_fitness(funcao, filho->x1, filho->x2);
   1105c:	8809883a 	mov	r4,r17
   11060:	100d883a 	mov	r6,r2
   11064:	0010b780 	call	10b78 <obter_fitness>
   11068:	80800215 	stw	r2,8(r16)
    }

}
   1106c:	dfc00517 	ldw	ra,20(sp)
   11070:	dc800417 	ldw	r18,16(sp)
   11074:	dc400317 	ldw	r17,12(sp)
   11078:	dc000217 	ldw	r16,8(sp)
   1107c:	dec00604 	addi	sp,sp,24
   11080:	f800283a 	ret

00011084 <op_recombinacao>:
 *  - os pais selecionados no torneio ("pai" e "mae")
 *  - o novo individuo (filho ou descendente) a ser gerado pela recombinacao dos dois pais selecionados
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
   11084:	defff704 	addi	sp,sp,-36
   11088:	dc800515 	stw	r18,20(sp)
   1108c:	2825883a 	mov	r18,r5
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
   11090:	014fc034 	movhi	r5,16128
 *  - os pais selecionados no torneio ("pai" e "mae")
 *  - o novo individuo (filho ou descendente) a ser gerado pela recombinacao dos dois pais selecionados
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
   11094:	dfc00715 	stw	ra,28(sp)
   11098:	d9c00815 	stw	r7,32(sp)
   1109c:	dcc00615 	stw	r19,24(sp)
   110a0:	dc400415 	stw	r17,16(sp)
   110a4:	dc000315 	stw	r16,12(sp)
   110a8:	3823883a 	mov	r17,r7
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
   110ac:	00142400 	call	14240 <__mulsf3>
   110b0:	8809883a 	mov	r4,r17
   110b4:	014fc034 	movhi	r5,16128
 *  - os pais selecionados no torneio ("pai" e "mae")
 *  - o novo individuo (filho ou descendente) a ser gerado pela recombinacao dos dois pais selecionados
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
   110b8:	dc000b17 	ldw	r16,44(sp)
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
   110bc:	1027883a 	mov	r19,r2
   110c0:	00142400 	call	14240 <__mulsf3>
   110c4:	9809883a 	mov	r4,r19
   110c8:	100b883a 	mov	r5,r2
   110cc:	0013ca80 	call	13ca8 <__addsf3>
    filho->x2 = alpha*pai.x2 + (1 - alpha)*mae.x2;
   110d0:	9009883a 	mov	r4,r18
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
   110d4:	80800015 	stw	r2,0(r16)
    filho->x2 = alpha*pai.x2 + (1 - alpha)*mae.x2;
   110d8:	014fc034 	movhi	r5,16128
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
   110dc:	1023883a 	mov	r17,r2
    filho->x2 = alpha*pai.x2 + (1 - alpha)*mae.x2;
   110e0:	00142400 	call	14240 <__mulsf3>
   110e4:	d9000917 	ldw	r4,36(sp)
   110e8:	014fc034 	movhi	r5,16128
   110ec:	1025883a 	mov	r18,r2
   110f0:	00142400 	call	14240 <__mulsf3>
   110f4:	9009883a 	mov	r4,r18
   110f8:	100b883a 	mov	r5,r2
   110fc:	0013ca80 	call	13ca8 <__addsf3>
    filho->fitness = obter_fitness(funcao, filho->x1, filho->x2);
   11100:	d9000c17 	ldw	r4,48(sp)
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
    filho->x2 = alpha*pai.x2 + (1 - alpha)*mae.x2;
   11104:	100d883a 	mov	r6,r2
   11108:	80800115 	stw	r2,4(r16)
    filho->fitness = obter_fitness(funcao, filho->x1, filho->x2);
   1110c:	880b883a 	mov	r5,r17
   11110:	0010b780 	call	10b78 <obter_fitness>
   11114:	80800215 	stw	r2,8(r16)
}
   11118:	dfc00717 	ldw	ra,28(sp)
   1111c:	dcc00617 	ldw	r19,24(sp)
   11120:	dc800517 	ldw	r18,20(sp)
   11124:	dc400417 	ldw	r17,16(sp)
   11128:	dc000317 	ldw	r16,12(sp)
   1112c:	dec00904 	addi	sp,sp,36
   11130:	f800283a 	ret

00011134 <op_selecao_de_pais>:
 *  - o tamanho da populacao ("total_individuos")
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 *  - os pais a serem selecionados no torneio ("pai" e "mae"). [SELECAO POR TORNEIO, onde a letra grega "tau" = 3]
 */
void op_selecao_de_pais(struct t_individuo populacao[], int total_individuos, struct t_individuo *pai, struct t_individuo *mae){
   11134:	defff004 	addi	sp,sp,-64
   11138:	dc400a15 	stw	r17,40(sp)
   1113c:	2023883a 	mov	r17,r4
	struct t_individuo sorteio[3]; //valor eh 3 pois foi definido no enunciado, isto e, letra grega "tau" = 3

    sorteio[0] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
   11140:	293fffc4 	addi	r4,r5,-1
 *  - o tamanho da populacao ("total_individuos")
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 *  - os pais a serem selecionados no torneio ("pai" e "mae"). [SELECAO POR TORNEIO, onde a letra grega "tau" = 3]
 */
void op_selecao_de_pais(struct t_individuo populacao[], int total_individuos, struct t_individuo *pai, struct t_individuo *mae){
   11144:	dfc00f15 	stw	ra,60(sp)
   11148:	dd400e15 	stw	r21,56(sp)
   1114c:	dd000d15 	stw	r20,52(sp)
   11150:	302b883a 	mov	r21,r6
   11154:	3829883a 	mov	r20,r7
   11158:	dcc00c15 	stw	r19,48(sp)
   1115c:	dc800b15 	stw	r18,44(sp)
   11160:	dc000915 	stw	r16,36(sp)
	struct t_individuo sorteio[3]; //valor eh 3 pois foi definido no enunciado, isto e, letra grega "tau" = 3

    sorteio[0] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
   11164:	0014c040 	call	14c04 <__floatsisf>
   11168:	0009883a 	mov	r4,zero
   1116c:	100b883a 	mov	r5,r2
   11170:	1025883a 	mov	r18,r2
   11174:	00108680 	call	10868 <obter_numero_uniforme_discreto>
   11178:	1009883a 	mov	r4,r2
   1117c:	01400304 	movi	r5,12
   11180:	04000304 	movi	r16,12
   11184:	0013c800 	call	13c80 <__mulsi3>
   11188:	800d883a 	mov	r6,r16
   1118c:	d809883a 	mov	r4,sp
   11190:	888b883a 	add	r5,r17,r2
   11194:	0017df40 	call	17df4 <memcpy>
    sorteio[1] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
   11198:	900b883a 	mov	r5,r18
   1119c:	0009883a 	mov	r4,zero
   111a0:	00108680 	call	10868 <obter_numero_uniforme_discreto>
   111a4:	800b883a 	mov	r5,r16
   111a8:	1009883a 	mov	r4,r2
   111ac:	0013c800 	call	13c80 <__mulsi3>
   111b0:	800d883a 	mov	r6,r16
   111b4:	dc09883a 	add	r4,sp,r16
   111b8:	888b883a 	add	r5,r17,r2
   111bc:	0017df40 	call	17df4 <memcpy>
    sorteio[2] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
   111c0:	900b883a 	mov	r5,r18
   111c4:	0009883a 	mov	r4,zero
   111c8:	00108680 	call	10868 <obter_numero_uniforme_discreto>
   111cc:	800b883a 	mov	r5,r16
   111d0:	1009883a 	mov	r4,r2
   111d4:	0013c800 	call	13c80 <__mulsi3>
   111d8:	d9000604 	addi	r4,sp,24
   111dc:	888b883a 	add	r5,r17,r2
   111e0:	800d883a 	mov	r6,r16
   111e4:	0017df40 	call	17df4 <memcpy>
    encontra_melhor_individuo(sorteio,3,pai);
   111e8:	04c000c4 	movi	r19,3
   111ec:	a80d883a 	mov	r6,r21
   111f0:	d809883a 	mov	r4,sp
   111f4:	980b883a 	mov	r5,r19
   111f8:	0010dc40 	call	10dc4 <encontra_melhor_individuo>

    sorteio[0] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
   111fc:	900b883a 	mov	r5,r18
   11200:	0009883a 	mov	r4,zero
   11204:	00108680 	call	10868 <obter_numero_uniforme_discreto>
   11208:	800b883a 	mov	r5,r16
   1120c:	1009883a 	mov	r4,r2
   11210:	0013c800 	call	13c80 <__mulsi3>
   11214:	800d883a 	mov	r6,r16
   11218:	d809883a 	mov	r4,sp
   1121c:	888b883a 	add	r5,r17,r2
   11220:	0017df40 	call	17df4 <memcpy>
    sorteio[1] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
   11224:	900b883a 	mov	r5,r18
   11228:	0009883a 	mov	r4,zero
   1122c:	00108680 	call	10868 <obter_numero_uniforme_discreto>
   11230:	800b883a 	mov	r5,r16
   11234:	1009883a 	mov	r4,r2
   11238:	0013c800 	call	13c80 <__mulsi3>
   1123c:	800d883a 	mov	r6,r16
   11240:	dc09883a 	add	r4,sp,r16
   11244:	888b883a 	add	r5,r17,r2
   11248:	0017df40 	call	17df4 <memcpy>
    sorteio[2] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
   1124c:	900b883a 	mov	r5,r18
   11250:	0009883a 	mov	r4,zero
   11254:	00108680 	call	10868 <obter_numero_uniforme_discreto>
   11258:	800b883a 	mov	r5,r16
   1125c:	1009883a 	mov	r4,r2
   11260:	0013c800 	call	13c80 <__mulsi3>
   11264:	d9000604 	addi	r4,sp,24
   11268:	888b883a 	add	r5,r17,r2
   1126c:	800d883a 	mov	r6,r16
   11270:	0017df40 	call	17df4 <memcpy>
    encontra_melhor_individuo(sorteio,3,mae);
   11274:	d809883a 	mov	r4,sp
   11278:	980b883a 	mov	r5,r19
   1127c:	a00d883a 	mov	r6,r20
   11280:	0010dc40 	call	10dc4 <encontra_melhor_individuo>

}
   11284:	dfc00f17 	ldw	ra,60(sp)
   11288:	dd400e17 	ldw	r21,56(sp)
   1128c:	dd000d17 	ldw	r20,52(sp)
   11290:	dcc00c17 	ldw	r19,48(sp)
   11294:	dc800b17 	ldw	r18,44(sp)
   11298:	dc400a17 	ldw	r17,40(sp)
   1129c:	dc000917 	ldw	r16,36(sp)
   112a0:	dec01004 	addi	sp,sp,64
   112a4:	f800283a 	ret

000112a8 <op_selecao_de_sobreviventes>:
 *  - o tamanho da populacao ("total_individuos")
 *  - o vetor que representada novos individuos ("novos_individuos")
 *  - "descarte": a quantidade de individuos a estarem presentes no vetor "novos_individuos"
 *
 */
void op_selecao_de_sobreviventes(struct t_individuo populacao[], int total_individuos, struct t_individuo novos_individuos[], int descarte){
   112a8:	defffb04 	addi	sp,sp,-20
   112ac:	dc000015 	stw	r16,0(sp)
   112b0:	2021883a 	mov	r16,r4
   112b4:	2809883a 	mov	r4,r5
   112b8:	01400304 	movi	r5,12
   112bc:	dcc00315 	stw	r19,12(sp)
   112c0:	dc800215 	stw	r18,8(sp)
   112c4:	dc400115 	stw	r17,4(sp)
   112c8:	dfc00415 	stw	ra,16(sp)
   112cc:	3027883a 	mov	r19,r6
   112d0:	3825883a 	mov	r18,r7
   112d4:	0013c800 	call	13c80 <__mulsi3>
   112d8:	80a1883a 	add	r16,r16,r2
    int i = 0;
    int j = total_individuos-1;

    for(i = 0; i < descarte; i++, j--){
   112dc:	0023883a 	mov	r17,zero
   112e0:	843ffd04 	addi	r16,r16,-12
   112e4:	8c80090e 	bge	r17,r18,1130c <op_selecao_de_sobreviventes+0x64>
   112e8:	8809883a 	mov	r4,r17
   112ec:	01400304 	movi	r5,12
   112f0:	0013c800 	call	13c80 <__mulsi3>
        populacao[j] = novos_individuos[i];
   112f4:	8009883a 	mov	r4,r16
   112f8:	988b883a 	add	r5,r19,r2
   112fc:	01800304 	movi	r6,12
   11300:	0017df40 	call	17df4 <memcpy>
 */
void op_selecao_de_sobreviventes(struct t_individuo populacao[], int total_individuos, struct t_individuo novos_individuos[], int descarte){
    int i = 0;
    int j = total_individuos-1;

    for(i = 0; i < descarte; i++, j--){
   11304:	8c400044 	addi	r17,r17,1
   11308:	003ff506 	br	112e0 <_gp+0xfffef27c>
        populacao[j] = novos_individuos[i];
    }
}
   1130c:	dfc00417 	ldw	ra,16(sp)
   11310:	dcc00317 	ldw	r19,12(sp)
   11314:	dc800217 	ldw	r18,8(sp)
   11318:	dc400117 	ldw	r17,4(sp)
   1131c:	dc000017 	ldw	r16,0(sp)
   11320:	dec00504 	addi	sp,sp,20
   11324:	f800283a 	ret

00011328 <executar>:
 *  - o tamanho da populacao (ou total de individuos "total_individuos" da populacao)
 *  - a quantidade "descarte" de individuos a serem substituidos na proxima geracao
 *  - por quantas "geracoes" a populacao inicial sera evoluida
 *  - a probabilidade (baixa) de mutacao (prob_mutacao)
 */
void executar(int funcao, int total_individuos, int descarte, int geracoes, float prob_mutacao){
   11328:	deffe504 	addi	sp,sp,-108
   1132c:	df001915 	stw	fp,100(sp)
   11330:	df001904 	addi	fp,sp,100
   11334:	e0800217 	ldw	r2,8(fp)
   11338:	dfc01a15 	stw	ra,104(sp)
   1133c:	dd001515 	stw	r20,84(sp)
   11340:	dcc01415 	stw	r19,80(sp)
   11344:	dc801315 	stw	r18,76(sp)
   11348:	dc401215 	stw	r17,72(sp)
   1134c:	dc001115 	stw	r16,68(sp)
   11350:	ddc01815 	stw	r23,96(sp)
   11354:	dd801715 	stw	r22,92(sp)
   11358:	dd401615 	stw	r21,88(sp)
   1135c:	2027883a 	mov	r19,r4
    srand((unsigned)time(NULL));
   11360:	0009883a 	mov	r4,zero
 *  - o tamanho da populacao (ou total de individuos "total_individuos" da populacao)
 *  - a quantidade "descarte" de individuos a serem substituidos na proxima geracao
 *  - por quantas "geracoes" a populacao inicial sera evoluida
 *  - a probabilidade (baixa) de mutacao (prob_mutacao)
 */
void executar(int funcao, int total_individuos, int descarte, int geracoes, float prob_mutacao){
   11364:	e1fff415 	stw	r7,-48(fp)
   11368:	2823883a 	mov	r17,r5
   1136c:	3029883a 	mov	r20,r6
   11370:	e0bff515 	stw	r2,-44(fp)
    srand((unsigned)time(NULL));
   11374:	00180100 	call	18010 <time>
   11378:	1009883a 	mov	r4,r2
   1137c:	0017f380 	call	17f38 <srand>

    /*
     * A Populacao e representada como um vetor de "t_individuo", cujo o tamanho e "total_individuos" (definido previamente pelo usuario).
     * A variavel "total_individuos" e equivalente a letra grega "mu" especificada no enunciado do trabalho.
     */
    t_individuo populacao[total_individuos];
   11380:	8809883a 	mov	r4,r17
   11384:	01400304 	movi	r5,12
   11388:	0013c800 	call	13c80 <__mulsi3>
   1138c:	00ffff04 	movi	r3,-4
   11390:	10800184 	addi	r2,r2,6
   11394:	10c4703a 	and	r2,r2,r3
   11398:	d8b7c83a 	sub	sp,sp,r2
   1139c:	dc000404 	addi	r16,sp,16

    gerar_populacao_inicial(populacao, total_individuos, funcao);
   113a0:	880b883a 	mov	r5,r17
   113a4:	980d883a 	mov	r6,r19
   113a8:	8009883a 	mov	r4,r16
   113ac:	0010f2c0 	call	10f2c <gerar_populacao_inicial>

    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
   113b0:	010000b4 	movhi	r4,2
   113b4:	2125d404 	addi	r4,r4,-26800
   113b8:	0017f240 	call	17f24 <puts>
    for(g = 0; g < geracoes; g++){

        t_individuo novos_individuos[descarte]; //vetor de novos individuos
   113bc:	a009883a 	mov	r4,r20
   113c0:	01400304 	movi	r5,12
   113c4:	0013c800 	call	13c80 <__mulsi3>
   113c8:	10800184 	addi	r2,r2,6
   113cc:	00ffff04 	movi	r3,-4
   113d0:	10c6703a 	and	r3,r2,r3
    gerar_populacao_inicial(populacao, total_individuos, funcao);

    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
    for(g = 0; g < geracoes; g++){
   113d4:	0025883a 	mov	r18,zero

        t_individuo novos_individuos[descarte]; //vetor de novos individuos
   113d8:	e0fff615 	stw	r3,-40(fp)
    gerar_populacao_inicial(populacao, total_individuos, funcao);

    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
    for(g = 0; g < geracoes; g++){
   113dc:	e0bff417 	ldw	r2,-48(fp)
   113e0:	9080420e 	bge	r18,r2,114ec <executar+0x1c4>

        t_individuo novos_individuos[descarte]; //vetor de novos individuos
   113e4:	e0bff617 	ldw	r2,-40(fp)
   113e8:	d82f883a 	mov	r23,sp

        int i;
        for(i = 0; i < descarte; i++){
   113ec:	002d883a 	mov	r22,zero
    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
    for(g = 0; g < geracoes; g++){

        t_individuo novos_individuos[descarte]; //vetor de novos individuos
   113f0:	d8b7c83a 	sub	sp,sp,r2
   113f4:	dd400404 	addi	r21,sp,16
        	struct t_individuo pai;
        	struct t_individuo mae;
        	struct t_individuo filho;

            //printf("SELECAO DE PAIS\n");
            op_selecao_de_pais(populacao, total_individuos, &pai, &mae);
   113f8:	8009883a 	mov	r4,r16
   113fc:	880b883a 	mov	r5,r17
    for(g = 0; g < geracoes; g++){

        t_individuo novos_individuos[descarte]; //vetor de novos individuos

        int i;
        for(i = 0; i < descarte; i++){
   11400:	b5001c0e 	bge	r22,r20,11474 <executar+0x14c>
        	struct t_individuo pai;
        	struct t_individuo mae;
        	struct t_individuo filho;

            //printf("SELECAO DE PAIS\n");
            op_selecao_de_pais(populacao, total_individuos, &pai, &mae);
   11404:	e1bff104 	addi	r6,fp,-60
   11408:	e1ffee04 	addi	r7,fp,-72
   1140c:	00111340 	call	11134 <op_selecao_de_pais>
            //imprimir_individuo(pai);
            //imprimir_individuo(mae);

            //printf("RECOMBINACAO\n");
            op_recombinacao(pai,mae,&filho,funcao);
   11410:	e0bfeb04 	addi	r2,fp,-84
   11414:	d8800215 	stw	r2,8(sp)
   11418:	dcc00315 	stw	r19,12(sp)
   1141c:	e0bfef17 	ldw	r2,-68(fp)
   11420:	d8800015 	stw	r2,0(sp)
   11424:	e0bff017 	ldw	r2,-64(fp)
   11428:	d8800115 	stw	r2,4(sp)
   1142c:	e1ffee17 	ldw	r7,-72(fp)
   11430:	e13ff117 	ldw	r4,-60(fp)
   11434:	e17ff217 	ldw	r5,-56(fp)
   11438:	e1bff317 	ldw	r6,-52(fp)
   1143c:	00110840 	call	11084 <op_recombinacao>
            //imprimir_individuo(filho);

            //printf("MUTACAO\n");
            op_mutacao(&filho,prob_mutacao,funcao);
   11440:	e17ff517 	ldw	r5,-44(fp)
   11444:	980d883a 	mov	r6,r19
   11448:	e13feb04 	addi	r4,fp,-84
   1144c:	0010fec0 	call	10fec <op_mutacao>
   11450:	b009883a 	mov	r4,r22
   11454:	01400304 	movi	r5,12
   11458:	0013c800 	call	13c80 <__mulsi3>
            //imprimir_individuo(filho);

            novos_individuos[i] = filho;
   1145c:	a889883a 	add	r4,r21,r2
   11460:	e17feb04 	addi	r5,fp,-84
   11464:	01800304 	movi	r6,12
   11468:	0017df40 	call	17df4 <memcpy>
    for(g = 0; g < geracoes; g++){

        t_individuo novos_individuos[descarte]; //vetor de novos individuos

        int i;
        for(i = 0; i < descarte; i++){
   1146c:	b5800044 	addi	r22,r22,1
   11470:	003fe106 	br	113f8 <_gp+0xfffef394>
            //imprimir_individuo(filho);

            novos_individuos[i] = filho;
        }

        mergeSort(populacao, total_individuos);
   11474:	0010b0c0 	call	10b0c <mergeSort>

        op_selecao_de_sobreviventes(populacao,total_individuos,novos_individuos,descarte);
   11478:	a80d883a 	mov	r6,r21
   1147c:	a00f883a 	mov	r7,r20
   11480:	8009883a 	mov	r4,r16
   11484:	880b883a 	mov	r5,r17
   11488:	00112a80 	call	112a8 <op_selecao_de_sobreviventes>

        mergeSort(populacao, total_individuos);
   1148c:	880b883a 	mov	r5,r17
   11490:	8009883a 	mov	r4,r16
   11494:	0010b0c0 	call	10b0c <mergeSort>

        // Saida de Dados
        printf("%d\t%f\t%f\t%f\n",g,populacao[0].x1,populacao[0].x2,populacao[0].fitness); //saida de dados
   11498:	81000017 	ldw	r4,0(r16)
   1149c:	001742c0 	call	1742c <__extendsfdf2>
   114a0:	81000117 	ldw	r4,4(r16)
   114a4:	182b883a 	mov	r21,r3
   114a8:	e0bff715 	stw	r2,-36(fp)
   114ac:	001742c0 	call	1742c <__extendsfdf2>
   114b0:	d8800015 	stw	r2,0(sp)
   114b4:	d8c00115 	stw	r3,4(sp)
   114b8:	81000217 	ldw	r4,8(r16)
   114bc:	001742c0 	call	1742c <__extendsfdf2>
   114c0:	d8800215 	stw	r2,8(sp)
   114c4:	d8c00315 	stw	r3,12(sp)
   114c8:	e1bff717 	ldw	r6,-36(fp)
   114cc:	010000b4 	movhi	r4,2
   114d0:	900b883a 	mov	r5,r18
   114d4:	2125db04 	addi	r4,r4,-26772
   114d8:	a80f883a 	mov	r7,r21
   114dc:	0017e580 	call	17e58 <printf>
    gerar_populacao_inicial(populacao, total_individuos, funcao);

    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
    for(g = 0; g < geracoes; g++){
   114e0:	94800044 	addi	r18,r18,1
   114e4:	b837883a 	mov	sp,r23
   114e8:	003fbc06 	br	113dc <_gp+0xfffef378>
        // Saida de Dados
        printf("%d\t%f\t%f\t%f\n",g,populacao[0].x1,populacao[0].x2,populacao[0].fitness); //saida de dados

    }

}
   114ec:	e6fff804 	addi	sp,fp,-32
   114f0:	dfc00917 	ldw	ra,36(sp)
   114f4:	df000817 	ldw	fp,32(sp)
   114f8:	ddc00717 	ldw	r23,28(sp)
   114fc:	dd800617 	ldw	r22,24(sp)
   11500:	dd400517 	ldw	r21,20(sp)
   11504:	dd000417 	ldw	r20,16(sp)
   11508:	dcc00317 	ldw	r19,12(sp)
   1150c:	dc800217 	ldw	r18,8(sp)
   11510:	dc400117 	ldw	r17,4(sp)
   11514:	dc000017 	ldw	r16,0(sp)
   11518:	dec00a04 	addi	sp,sp,40
   1151c:	f800283a 	ret

00011520 <menu>:
    int total_individuos = 1000;
    int descarte = 100;
    int geracoes = 10;
    float prob_mutacao = 0.1;

    printf("\n\nAlgoritmos Geneticos\n");
   11520:	010000b4 	movhi	r4,2
/*
 * No procedimento menu() abaixo que esta implementada a entrada de dados simples, onde:
 *  - mostra o nome de cada uma das funcoes do benchmark;
 *  - o usuario define qual funcao otimizar e parametros do algoritmo genetico.
 */
void menu(){
   11524:	defffe04 	addi	sp,sp,-8
    int total_individuos = 1000;
    int descarte = 100;
    int geracoes = 10;
    float prob_mutacao = 0.1;

    printf("\n\nAlgoritmos Geneticos\n");
   11528:	2125df04 	addi	r4,r4,-26756
/*
 * No procedimento menu() abaixo que esta implementada a entrada de dados simples, onde:
 *  - mostra o nome de cada uma das funcoes do benchmark;
 *  - o usuario define qual funcao otimizar e parametros do algoritmo genetico.
 */
void menu(){
   1152c:	dfc00115 	stw	ra,4(sp)
    int total_individuos = 1000;
    int descarte = 100;
    int geracoes = 10;
    float prob_mutacao = 0.1;

    printf("\n\nAlgoritmos Geneticos\n");
   11530:	0017f240 	call	17f24 <puts>
    printf("========== =========\n\n");
   11534:	010000b4 	movhi	r4,2
   11538:	2125e504 	addi	r4,r4,-26732
   1153c:	0017f240 	call	17f24 <puts>
    printf("1) De Jongs\n");
   11540:	010000b4 	movhi	r4,2
   11544:	2125eb04 	addi	r4,r4,-26708
   11548:	0017f240 	call	17f24 <puts>
    printf("2) Rastrigin\n");
   1154c:	010000b4 	movhi	r4,2
   11550:	2125ee04 	addi	r4,r4,-26696
   11554:	0017f240 	call	17f24 <puts>
    printf("3) DropWave\n");
   11558:	010000b4 	movhi	r4,2
   1155c:	2125f204 	addi	r4,r4,-26680
   11560:	0017f240 	call	17f24 <puts>
    printf("4) Griegwangk\n");
   11564:	010000b4 	movhi	r4,2
   11568:	2125f504 	addi	r4,r4,-26668
   1156c:	0017f240 	call	17f24 <puts>
    printf("5) Shubert\n\n");
   11570:	010000b4 	movhi	r4,2
   11574:	2125f904 	addi	r4,r4,-26652
   11578:	0017f240 	call	17f24 <puts>

    printf("Selecione a funcao a minimizar : ");
   1157c:	010000b4 	movhi	r4,2
   11580:	2125fc04 	addi	r4,r4,-26640
   11584:	0017e580 	call	17e58 <printf>
    if (funcao < 1 || funcao > 5){
        printf("\nOpcao Invalida! Opcoes possiveis: 1-5 !!!\n");
        return;
    }

    printf("Total de individuos da populacao : ");
   11588:	010000b4 	movhi	r4,2
   1158c:	21260504 	addi	r4,r4,-26604
   11590:	0017e580 	call	17e58 <printf>
    if (total_individuos < 1){
        printf("\nErro! O tamanho da populacao deve ser maior do que zero !!!\n");
        return;
    }

    printf("Total de descendentes a descartar : ");
   11594:	010000b4 	movhi	r4,2
   11598:	21260e04 	addi	r4,r4,-26568
   1159c:	0017e580 	call	17e58 <printf>
    if (descarte < 1){
        printf("\nErro! O total de descendentes a descartar deve ser maior do que zero !!!\n");
        return;
    }

    printf("Total de geracoes a evoluir : ");
   115a0:	010000b4 	movhi	r4,2
   115a4:	21261804 	addi	r4,r4,-26528
   115a8:	0017e580 	call	17e58 <printf>
    if (geracoes < 1){
        printf("\nErro! O total de geracoes a evoluir deve ser maior do que zero !!!\n");
        return;
    }

    printf("Probabilidade de mutacao : ");
   115ac:	010000b4 	movhi	r4,2
   115b0:	21262004 	addi	r4,r4,-26496
   115b4:	0017e580 	call	17e58 <printf>
    if (prob_mutacao < 0 || prob_mutacao > 1){
        printf("\nErro! A probabilidade de mutacao deve estar no intervalo entre 0 e 1 !!!\n");
        return;
    }

    executar(funcao, total_individuos, descarte, geracoes, prob_mutacao);
   115b8:	008f7374 	movhi	r2,15821
   115bc:	10b33344 	addi	r2,r2,-13107
   115c0:	d8800015 	stw	r2,0(sp)
   115c4:	01000044 	movi	r4,1
   115c8:	0140fa04 	movi	r5,1000
   115cc:	01801904 	movi	r6,100
   115d0:	01c00284 	movi	r7,10
   115d4:	00113280 	call	11328 <executar>

}
   115d8:	dfc00117 	ldw	ra,4(sp)
   115dc:	dec00204 	addi	sp,sp,8
   115e0:	f800283a 	ret

000115e4 <main>:

// ******************* MAIN ************************
int main(){
   115e4:	deffff04 	addi	sp,sp,-4
   115e8:	dfc00015 	stw	ra,0(sp)

    //int op = 1;

    //do{
        menu();
   115ec:	00115200 	call	11520 <menu>
        //printf("\nTecle:\n- 0 (Zero) para FINALIZAR;\n- qualquer digito (1-9) para Continuar:\n");
        //scanf("%d",&op);
    //} while (op != 0);

    return 0;
}
   115f0:	0005883a 	mov	r2,zero
   115f4:	dfc00017 	ldw	ra,0(sp)
   115f8:	dec00104 	addi	sp,sp,4
   115fc:	f800283a 	ret

00011600 <cos>:
   11600:	00a00034 	movhi	r2,32768
   11604:	defffa04 	addi	sp,sp,-24
   11608:	10bfffc4 	addi	r2,r2,-1
   1160c:	00cffa74 	movhi	r3,16361
   11610:	dfc00515 	stw	ra,20(sp)
   11614:	2884703a 	and	r2,r5,r2
   11618:	18c87ec4 	addi	r3,r3,8699
   1161c:	280f883a 	mov	r7,r5
   11620:	1880170e 	bge	r3,r2,11680 <cos+0x80>
   11624:	00dffc34 	movhi	r3,32752
   11628:	18ffffc4 	addi	r3,r3,-1
   1162c:	1880050e 	bge	r3,r2,11644 <cos+0x44>
   11630:	200d883a 	mov	r6,r4
   11634:	0016a040 	call	16a04 <__subdf3>
   11638:	dfc00517 	ldw	ra,20(sp)
   1163c:	dec00604 	addi	sp,sp,24
   11640:	f800283a 	ret
   11644:	d9800104 	addi	r6,sp,4
   11648:	001181c0 	call	1181c <__ieee754_rem_pio2>
   1164c:	108000cc 	andi	r2,r2,3
   11650:	00c00044 	movi	r3,1
   11654:	10c01726 	beq	r2,r3,116b4 <cos+0xb4>
   11658:	01000084 	movi	r4,2
   1165c:	11000e26 	beq	r2,r4,11698 <cos+0x98>
   11660:	10001c26 	beq	r2,zero,116d4 <cos+0xd4>
   11664:	d9000117 	ldw	r4,4(sp)
   11668:	d9400217 	ldw	r5,8(sp)
   1166c:	d9800317 	ldw	r6,12(sp)
   11670:	d9c00417 	ldw	r7,16(sp)
   11674:	d8c00015 	stw	r3,0(sp)
   11678:	00134200 	call	13420 <__kernel_sin>
   1167c:	003fee06 	br	11638 <_gp+0xfffef5d4>
   11680:	000d883a 	mov	r6,zero
   11684:	000f883a 	mov	r7,zero
   11688:	001224c0 	call	1224c <__kernel_cos>
   1168c:	dfc00517 	ldw	ra,20(sp)
   11690:	dec00604 	addi	sp,sp,24
   11694:	f800283a 	ret
   11698:	d9000117 	ldw	r4,4(sp)
   1169c:	d9400217 	ldw	r5,8(sp)
   116a0:	d9800317 	ldw	r6,12(sp)
   116a4:	d9c00417 	ldw	r7,16(sp)
   116a8:	001224c0 	call	1224c <__kernel_cos>
   116ac:	18e0003c 	xorhi	r3,r3,32768
   116b0:	003fe106 	br	11638 <_gp+0xfffef5d4>
   116b4:	d9000117 	ldw	r4,4(sp)
   116b8:	d9400217 	ldw	r5,8(sp)
   116bc:	d9800317 	ldw	r6,12(sp)
   116c0:	d9c00417 	ldw	r7,16(sp)
   116c4:	d8800015 	stw	r2,0(sp)
   116c8:	00134200 	call	13420 <__kernel_sin>
   116cc:	18e0003c 	xorhi	r3,r3,32768
   116d0:	003fd906 	br	11638 <_gp+0xfffef5d4>
   116d4:	d9000117 	ldw	r4,4(sp)
   116d8:	d9400217 	ldw	r5,8(sp)
   116dc:	d9800317 	ldw	r6,12(sp)
   116e0:	d9c00417 	ldw	r7,16(sp)
   116e4:	001224c0 	call	1224c <__kernel_cos>
   116e8:	003fd306 	br	11638 <_gp+0xfffef5d4>

000116ec <sqrt>:
   116ec:	defff104 	addi	sp,sp,-60
   116f0:	dd000d15 	stw	r20,52(sp)
   116f4:	050000b4 	movhi	r20,2
   116f8:	dcc00c15 	stw	r19,48(sp)
   116fc:	dc800b15 	stw	r18,44(sp)
   11700:	dc400a15 	stw	r17,40(sp)
   11704:	dc000915 	stw	r16,36(sp)
   11708:	dfc00e15 	stw	ra,56(sp)
   1170c:	a5281904 	addi	r20,r20,-24476
   11710:	2027883a 	mov	r19,r4
   11714:	2825883a 	mov	r18,r5
   11718:	0011fb80 	call	11fb8 <__ieee754_sqrt>
   1171c:	1821883a 	mov	r16,r3
   11720:	a0c00017 	ldw	r3,0(r20)
   11724:	1023883a 	mov	r17,r2
   11728:	00bfffc4 	movi	r2,-1
   1172c:	18800a26 	beq	r3,r2,11758 <sqrt+0x6c>
   11730:	9809883a 	mov	r4,r19
   11734:	900b883a 	mov	r5,r18
   11738:	00138f00 	call	138f0 <__fpclassifyd>
   1173c:	10000626 	beq	r2,zero,11758 <sqrt+0x6c>
   11740:	9809883a 	mov	r4,r19
   11744:	900b883a 	mov	r5,r18
   11748:	000d883a 	mov	r6,zero
   1174c:	000f883a 	mov	r7,zero
   11750:	00160b80 	call	160b8 <__ledf2>
   11754:	10000a16 	blt	r2,zero,11780 <sqrt+0x94>
   11758:	8805883a 	mov	r2,r17
   1175c:	8007883a 	mov	r3,r16
   11760:	dfc00e17 	ldw	ra,56(sp)
   11764:	dd000d17 	ldw	r20,52(sp)
   11768:	dcc00c17 	ldw	r19,48(sp)
   1176c:	dc800b17 	ldw	r18,44(sp)
   11770:	dc400a17 	ldw	r17,40(sp)
   11774:	dc000917 	ldw	r16,36(sp)
   11778:	dec00f04 	addi	sp,sp,60
   1177c:	f800283a 	ret
   11780:	00800044 	movi	r2,1
   11784:	d8800015 	stw	r2,0(sp)
   11788:	a4000017 	ldw	r16,0(r20)
   1178c:	008000b4 	movhi	r2,2
   11790:	10a62704 	addi	r2,r2,-26468
   11794:	d8800115 	stw	r2,4(sp)
   11798:	d8000815 	stw	zero,32(sp)
   1179c:	dcc00415 	stw	r19,16(sp)
   117a0:	dc800515 	stw	r18,20(sp)
   117a4:	dcc00215 	stw	r19,8(sp)
   117a8:	dc800315 	stw	r18,12(sp)
   117ac:	80000a1e 	bne	r16,zero,117d8 <sqrt+0xec>
   117b0:	d8000615 	stw	zero,24(sp)
   117b4:	d8000715 	stw	zero,28(sp)
   117b8:	d809883a 	mov	r4,sp
   117bc:	00139640 	call	13964 <matherr>
   117c0:	10000e26 	beq	r2,zero,117fc <sqrt+0x110>
   117c4:	d8800817 	ldw	r2,32(sp)
   117c8:	1000101e 	bne	r2,zero,1180c <sqrt+0x120>
   117cc:	d8800617 	ldw	r2,24(sp)
   117d0:	d8c00717 	ldw	r3,28(sp)
   117d4:	003fe206 	br	11760 <_gp+0xfffef6fc>
   117d8:	0009883a 	mov	r4,zero
   117dc:	000b883a 	mov	r5,zero
   117e0:	000d883a 	mov	r6,zero
   117e4:	000f883a 	mov	r7,zero
   117e8:	00155d40 	call	155d4 <__divdf3>
   117ec:	d8800615 	stw	r2,24(sp)
   117f0:	d8c00715 	stw	r3,28(sp)
   117f4:	00800084 	movi	r2,2
   117f8:	80bfef1e 	bne	r16,r2,117b8 <_gp+0xfffef754>
   117fc:	00177380 	call	17738 <__errno>
   11800:	00c00844 	movi	r3,33
   11804:	10c00015 	stw	r3,0(r2)
   11808:	003fee06 	br	117c4 <_gp+0xfffef760>
   1180c:	00177380 	call	17738 <__errno>
   11810:	d8c00817 	ldw	r3,32(sp)
   11814:	10c00015 	stw	r3,0(r2)
   11818:	003fec06 	br	117cc <_gp+0xfffef768>

0001181c <__ieee754_rem_pio2>:
   1181c:	02200034 	movhi	r8,32768
   11820:	deffea04 	addi	sp,sp,-88
   11824:	423fffc4 	addi	r8,r8,-1
   11828:	00cffa74 	movhi	r3,16361
   1182c:	ddc01315 	stw	r23,76(sp)
   11830:	dc400d15 	stw	r17,52(sp)
   11834:	dfc01515 	stw	ra,84(sp)
   11838:	df001415 	stw	fp,80(sp)
   1183c:	dd801215 	stw	r22,72(sp)
   11840:	dd401115 	stw	r21,68(sp)
   11844:	dd001015 	stw	r20,64(sp)
   11848:	dcc00f15 	stw	r19,60(sp)
   1184c:	dc800e15 	stw	r18,56(sp)
   11850:	dc000c15 	stw	r16,48(sp)
   11854:	2a2e703a 	and	r23,r5,r8
   11858:	18c87ec4 	addi	r3,r3,8699
   1185c:	2823883a 	mov	r17,r5
   11860:	1dc0790e 	bge	r3,r23,11a48 <__ieee754_rem_pio2+0x22c>
   11864:	009000f4 	movhi	r2,16387
   11868:	10b65ec4 	addi	r2,r2,-9861
   1186c:	3021883a 	mov	r16,r6
   11870:	2027883a 	mov	r19,r4
   11874:	15c02316 	blt	r2,r23,11904 <__ieee754_rem_pio2+0xe8>
   11878:	01cffe74 	movhi	r7,16377
   1187c:	39c87ec4 	addi	r7,r7,8699
   11880:	01951034 	movhi	r6,21568
   11884:	0141800e 	bge	zero,r5,11e88 <__ieee754_rem_pio2+0x66c>
   11888:	0016a040 	call	16a04 <__subdf3>
   1188c:	1025883a 	mov	r18,r2
   11890:	008ffe74 	movhi	r2,16377
   11894:	10887ec4 	addi	r2,r2,8699
   11898:	1823883a 	mov	r17,r3
   1189c:	b8808426 	beq	r23,r2,11ab0 <__ieee754_rem_pio2+0x294>
   118a0:	018698b4 	movhi	r6,6754
   118a4:	01cf7474 	movhi	r7,15825
   118a8:	3198cc44 	addi	r6,r6,25393
   118ac:	39ed1844 	addi	r7,r7,-19359
   118b0:	9009883a 	mov	r4,r18
   118b4:	180b883a 	mov	r5,r3
   118b8:	0016a040 	call	16a04 <__subdf3>
   118bc:	100d883a 	mov	r6,r2
   118c0:	180f883a 	mov	r7,r3
   118c4:	9009883a 	mov	r4,r18
   118c8:	880b883a 	mov	r5,r17
   118cc:	80800015 	stw	r2,0(r16)
   118d0:	80c00115 	stw	r3,4(r16)
   118d4:	0016a040 	call	16a04 <__subdf3>
   118d8:	018698b4 	movhi	r6,6754
   118dc:	01cf7474 	movhi	r7,15825
   118e0:	1009883a 	mov	r4,r2
   118e4:	180b883a 	mov	r5,r3
   118e8:	3198cc44 	addi	r6,r6,25393
   118ec:	39ed1844 	addi	r7,r7,-19359
   118f0:	0016a040 	call	16a04 <__subdf3>
   118f4:	80800215 	stw	r2,8(r16)
   118f8:	80c00315 	stw	r3,12(r16)
   118fc:	00800044 	movi	r2,1
   11900:	00005606 	br	11a5c <__ieee754_rem_pio2+0x240>
   11904:	00904e74 	movhi	r2,16697
   11908:	10887ec4 	addi	r2,r2,8699
   1190c:	15c0890e 	bge	r2,r23,11b34 <__ieee754_rem_pio2+0x318>
   11910:	009ffc34 	movhi	r2,32752
   11914:	10bfffc4 	addi	r2,r2,-1
   11918:	15c05c16 	blt	r2,r23,11a8c <__ieee754_rem_pio2+0x270>
   1191c:	b829d53a 	srai	r20,r23,20
   11920:	a53efa84 	addi	r20,r20,-1046
   11924:	a024953a 	slli	r18,r20,20
   11928:	bca5c83a 	sub	r18,r23,r18
   1192c:	900b883a 	mov	r5,r18
   11930:	00172d40 	call	172d4 <__fixdfsi>
   11934:	1009883a 	mov	r4,r2
   11938:	001735c0 	call	1735c <__floatsidf>
   1193c:	9809883a 	mov	r4,r19
   11940:	900b883a 	mov	r5,r18
   11944:	100d883a 	mov	r6,r2
   11948:	180f883a 	mov	r7,r3
   1194c:	d8800215 	stw	r2,8(sp)
   11950:	d8c00315 	stw	r3,12(sp)
   11954:	0016a040 	call	16a04 <__subdf3>
   11958:	000d883a 	mov	r6,zero
   1195c:	01d05c34 	movhi	r7,16752
   11960:	1009883a 	mov	r4,r2
   11964:	180b883a 	mov	r5,r3
   11968:	00161980 	call	16198 <__muldf3>
   1196c:	180b883a 	mov	r5,r3
   11970:	1009883a 	mov	r4,r2
   11974:	182b883a 	mov	r21,r3
   11978:	102d883a 	mov	r22,r2
   1197c:	00172d40 	call	172d4 <__fixdfsi>
   11980:	1009883a 	mov	r4,r2
   11984:	001735c0 	call	1735c <__floatsidf>
   11988:	100d883a 	mov	r6,r2
   1198c:	180f883a 	mov	r7,r3
   11990:	b009883a 	mov	r4,r22
   11994:	a80b883a 	mov	r5,r21
   11998:	1027883a 	mov	r19,r2
   1199c:	1825883a 	mov	r18,r3
   119a0:	d8800415 	stw	r2,16(sp)
   119a4:	d8c00515 	stw	r3,20(sp)
   119a8:	0016a040 	call	16a04 <__subdf3>
   119ac:	1009883a 	mov	r4,r2
   119b0:	180b883a 	mov	r5,r3
   119b4:	000d883a 	mov	r6,zero
   119b8:	01d05c34 	movhi	r7,16752
   119bc:	00161980 	call	16198 <__muldf3>
   119c0:	1009883a 	mov	r4,r2
   119c4:	180b883a 	mov	r5,r3
   119c8:	000d883a 	mov	r6,zero
   119cc:	000f883a 	mov	r7,zero
   119d0:	d8800615 	stw	r2,24(sp)
   119d4:	d8c00715 	stw	r3,28(sp)
   119d8:	0015f540 	call	15f54 <__eqdf2>
   119dc:	1001491e 	bne	r2,zero,11f04 <__ieee754_rem_pio2+0x6e8>
   119e0:	000f883a 	mov	r7,zero
   119e4:	9809883a 	mov	r4,r19
   119e8:	900b883a 	mov	r5,r18
   119ec:	000d883a 	mov	r6,zero
   119f0:	0015f540 	call	15f54 <__eqdf2>
   119f4:	100f003a 	cmpeq	r7,r2,zero
   119f8:	00800084 	movi	r2,2
   119fc:	11cfc83a 	sub	r7,r2,r7
   11a00:	00800084 	movi	r2,2
   11a04:	d8800015 	stw	r2,0(sp)
   11a08:	008000b4 	movhi	r2,2
   11a0c:	10a64904 	addi	r2,r2,-26332
   11a10:	d8800115 	stw	r2,4(sp)
   11a14:	d9000204 	addi	r4,sp,8
   11a18:	800b883a 	mov	r5,r16
   11a1c:	a00d883a 	mov	r6,r20
   11a20:	00126f00 	call	126f0 <__kernel_rem_pio2>
   11a24:	88000d0e 	bge	r17,zero,11a5c <__ieee754_rem_pio2+0x240>
   11a28:	81000117 	ldw	r4,4(r16)
   11a2c:	80c00317 	ldw	r3,12(r16)
   11a30:	0085c83a 	sub	r2,zero,r2
   11a34:	2120003c 	xorhi	r4,r4,32768
   11a38:	18e0003c 	xorhi	r3,r3,32768
   11a3c:	81000115 	stw	r4,4(r16)
   11a40:	80c00315 	stw	r3,12(r16)
   11a44:	00000506 	br	11a5c <__ieee754_rem_pio2+0x240>
   11a48:	31000015 	stw	r4,0(r6)
   11a4c:	31400115 	stw	r5,4(r6)
   11a50:	30000215 	stw	zero,8(r6)
   11a54:	30000315 	stw	zero,12(r6)
   11a58:	0005883a 	mov	r2,zero
   11a5c:	dfc01517 	ldw	ra,84(sp)
   11a60:	df001417 	ldw	fp,80(sp)
   11a64:	ddc01317 	ldw	r23,76(sp)
   11a68:	dd801217 	ldw	r22,72(sp)
   11a6c:	dd401117 	ldw	r21,68(sp)
   11a70:	dd001017 	ldw	r20,64(sp)
   11a74:	dcc00f17 	ldw	r19,60(sp)
   11a78:	dc800e17 	ldw	r18,56(sp)
   11a7c:	dc400d17 	ldw	r17,52(sp)
   11a80:	dc000c17 	ldw	r16,48(sp)
   11a84:	dec01604 	addi	sp,sp,88
   11a88:	f800283a 	ret
   11a8c:	200d883a 	mov	r6,r4
   11a90:	280f883a 	mov	r7,r5
   11a94:	0016a040 	call	16a04 <__subdf3>
   11a98:	80800215 	stw	r2,8(r16)
   11a9c:	80800015 	stw	r2,0(r16)
   11aa0:	80c00315 	stw	r3,12(r16)
   11aa4:	80c00115 	stw	r3,4(r16)
   11aa8:	0005883a 	mov	r2,zero
   11aac:	003feb06 	br	11a5c <_gp+0xfffef9f8>
   11ab0:	01cf7474 	movhi	r7,15825
   11ab4:	9009883a 	mov	r4,r18
   11ab8:	39ed1844 	addi	r7,r7,-19359
   11abc:	01869834 	movhi	r6,6752
   11ac0:	180b883a 	mov	r5,r3
   11ac4:	0016a040 	call	16a04 <__subdf3>
   11ac8:	018b80f4 	movhi	r6,11779
   11acc:	01cee8f4 	movhi	r7,15267
   11ad0:	1009883a 	mov	r4,r2
   11ad4:	180b883a 	mov	r5,r3
   11ad8:	319c1cc4 	addi	r6,r6,28787
   11adc:	39c66284 	addi	r7,r7,6538
   11ae0:	1025883a 	mov	r18,r2
   11ae4:	1823883a 	mov	r17,r3
   11ae8:	0016a040 	call	16a04 <__subdf3>
   11aec:	100d883a 	mov	r6,r2
   11af0:	180f883a 	mov	r7,r3
   11af4:	9009883a 	mov	r4,r18
   11af8:	880b883a 	mov	r5,r17
   11afc:	80800015 	stw	r2,0(r16)
   11b00:	80c00115 	stw	r3,4(r16)
   11b04:	0016a040 	call	16a04 <__subdf3>
   11b08:	018b80f4 	movhi	r6,11779
   11b0c:	01cee8f4 	movhi	r7,15267
   11b10:	1009883a 	mov	r4,r2
   11b14:	180b883a 	mov	r5,r3
   11b18:	319c1cc4 	addi	r6,r6,28787
   11b1c:	39c66284 	addi	r7,r7,6538
   11b20:	0016a040 	call	16a04 <__subdf3>
   11b24:	80800215 	stw	r2,8(r16)
   11b28:	80c00315 	stw	r3,12(r16)
   11b2c:	00800044 	movi	r2,1
   11b30:	003fca06 	br	11a5c <_gp+0xfffef9f8>
   11b34:	00136e80 	call	136e8 <fabs>
   11b38:	019b72b4 	movhi	r6,28106
   11b3c:	01cff934 	movhi	r7,16356
   11b40:	1009883a 	mov	r4,r2
   11b44:	180b883a 	mov	r5,r3
   11b48:	31b220c4 	addi	r6,r6,-14205
   11b4c:	39d7cc04 	addi	r7,r7,24368
   11b50:	102d883a 	mov	r22,r2
   11b54:	182b883a 	mov	r21,r3
   11b58:	00161980 	call	16198 <__muldf3>
   11b5c:	000d883a 	mov	r6,zero
   11b60:	01cff834 	movhi	r7,16352
   11b64:	1009883a 	mov	r4,r2
   11b68:	180b883a 	mov	r5,r3
   11b6c:	0014d380 	call	14d38 <__adddf3>
   11b70:	180b883a 	mov	r5,r3
   11b74:	1009883a 	mov	r4,r2
   11b78:	00172d40 	call	172d4 <__fixdfsi>
   11b7c:	1009883a 	mov	r4,r2
   11b80:	1025883a 	mov	r18,r2
   11b84:	001735c0 	call	1735c <__floatsidf>
   11b88:	01cffe74 	movhi	r7,16377
   11b8c:	1009883a 	mov	r4,r2
   11b90:	180b883a 	mov	r5,r3
   11b94:	39c87ec4 	addi	r7,r7,8699
   11b98:	01951034 	movhi	r6,21568
   11b9c:	1029883a 	mov	r20,r2
   11ba0:	1827883a 	mov	r19,r3
   11ba4:	00161980 	call	16198 <__muldf3>
   11ba8:	b009883a 	mov	r4,r22
   11bac:	a80b883a 	mov	r5,r21
   11bb0:	100d883a 	mov	r6,r2
   11bb4:	180f883a 	mov	r7,r3
   11bb8:	0016a040 	call	16a04 <__subdf3>
   11bbc:	018698b4 	movhi	r6,6754
   11bc0:	01cf7474 	movhi	r7,15825
   11bc4:	a009883a 	mov	r4,r20
   11bc8:	3198cc44 	addi	r6,r6,25393
   11bcc:	39ed1844 	addi	r7,r7,-19359
   11bd0:	980b883a 	mov	r5,r19
   11bd4:	1039883a 	mov	fp,r2
   11bd8:	d8c00815 	stw	r3,32(sp)
   11bdc:	00161980 	call	16198 <__muldf3>
   11be0:	010007c4 	movi	r4,31
   11be4:	e017883a 	mov	r11,fp
   11be8:	da800817 	ldw	r10,32(sp)
   11bec:	102d883a 	mov	r22,r2
   11bf0:	182b883a 	mov	r21,r3
   11bf4:	24802816 	blt	r4,r18,11c98 <__ieee754_rem_pio2+0x47c>
   11bf8:	927fffc4 	addi	r9,r18,-1
   11bfc:	4a53883a 	add	r9,r9,r9
   11c00:	010000b4 	movhi	r4,2
   11c04:	21262904 	addi	r4,r4,-26460
   11c08:	4a53883a 	add	r9,r9,r9
   11c0c:	2253883a 	add	r9,r4,r9
   11c10:	49000017 	ldw	r4,0(r9)
   11c14:	25c02026 	beq	r4,r23,11c98 <__ieee754_rem_pio2+0x47c>
   11c18:	e009883a 	mov	r4,fp
   11c1c:	500b883a 	mov	r5,r10
   11c20:	100d883a 	mov	r6,r2
   11c24:	180f883a 	mov	r7,r3
   11c28:	da800b15 	stw	r10,44(sp)
   11c2c:	df000a15 	stw	fp,40(sp)
   11c30:	0016a040 	call	16a04 <__subdf3>
   11c34:	da800b17 	ldw	r10,44(sp)
   11c38:	dac00a17 	ldw	r11,40(sp)
   11c3c:	1019883a 	mov	r12,r2
   11c40:	1813883a 	mov	r9,r3
   11c44:	80800015 	stw	r2,0(r16)
   11c48:	80c00115 	stw	r3,4(r16)
   11c4c:	600d883a 	mov	r6,r12
   11c50:	480f883a 	mov	r7,r9
   11c54:	5809883a 	mov	r4,r11
   11c58:	500b883a 	mov	r5,r10
   11c5c:	da400b15 	stw	r9,44(sp)
   11c60:	db000a15 	stw	r12,40(sp)
   11c64:	0016a040 	call	16a04 <__subdf3>
   11c68:	1009883a 	mov	r4,r2
   11c6c:	180b883a 	mov	r5,r3
   11c70:	b00d883a 	mov	r6,r22
   11c74:	a80f883a 	mov	r7,r21
   11c78:	0016a040 	call	16a04 <__subdf3>
   11c7c:	80800215 	stw	r2,8(r16)
   11c80:	80c00315 	stw	r3,12(r16)
   11c84:	da400b17 	ldw	r9,44(sp)
   11c88:	db000a17 	ldw	r12,40(sp)
   11c8c:	88009f16 	blt	r17,zero,11f0c <__ieee754_rem_pio2+0x6f0>
   11c90:	9005883a 	mov	r2,r18
   11c94:	003f7106 	br	11a5c <_gp+0xfffef9f8>
   11c98:	d9400817 	ldw	r5,32(sp)
   11c9c:	e009883a 	mov	r4,fp
   11ca0:	100d883a 	mov	r6,r2
   11ca4:	180f883a 	mov	r7,r3
   11ca8:	da800b15 	stw	r10,44(sp)
   11cac:	dac00a15 	stw	r11,40(sp)
   11cb0:	0016a040 	call	16a04 <__subdf3>
   11cb4:	1019883a 	mov	r12,r2
   11cb8:	1804d53a 	srli	r2,r3,20
   11cbc:	b811d53a 	srai	r8,r23,20
   11cc0:	1813883a 	mov	r9,r3
   11cc4:	1081ffcc 	andi	r2,r2,2047
   11cc8:	80c00115 	stw	r3,4(r16)
   11ccc:	83000015 	stw	r12,0(r16)
   11cd0:	4085c83a 	sub	r2,r8,r2
   11cd4:	00c00404 	movi	r3,16
   11cd8:	da800b17 	ldw	r10,44(sp)
   11cdc:	dac00a17 	ldw	r11,40(sp)
   11ce0:	18bfda0e 	bge	r3,r2,11c4c <_gp+0xfffefbe8>
   11ce4:	01cf7474 	movhi	r7,15825
   11ce8:	39ed1844 	addi	r7,r7,-19359
   11cec:	a009883a 	mov	r4,r20
   11cf0:	980b883a 	mov	r5,r19
   11cf4:	01869834 	movhi	r6,6752
   11cf8:	da000a15 	stw	r8,40(sp)
   11cfc:	00161980 	call	16198 <__muldf3>
   11d00:	d9400817 	ldw	r5,32(sp)
   11d04:	e009883a 	mov	r4,fp
   11d08:	100d883a 	mov	r6,r2
   11d0c:	180f883a 	mov	r7,r3
   11d10:	102d883a 	mov	r22,r2
   11d14:	182b883a 	mov	r21,r3
   11d18:	0016a040 	call	16a04 <__subdf3>
   11d1c:	d9400817 	ldw	r5,32(sp)
   11d20:	e009883a 	mov	r4,fp
   11d24:	100d883a 	mov	r6,r2
   11d28:	180f883a 	mov	r7,r3
   11d2c:	182f883a 	mov	r23,r3
   11d30:	d8800915 	stw	r2,36(sp)
   11d34:	0016a040 	call	16a04 <__subdf3>
   11d38:	b00d883a 	mov	r6,r22
   11d3c:	a80f883a 	mov	r7,r21
   11d40:	1009883a 	mov	r4,r2
   11d44:	180b883a 	mov	r5,r3
   11d48:	0016a040 	call	16a04 <__subdf3>
   11d4c:	018b80f4 	movhi	r6,11779
   11d50:	01cee8f4 	movhi	r7,15267
   11d54:	a009883a 	mov	r4,r20
   11d58:	980b883a 	mov	r5,r19
   11d5c:	319c1cc4 	addi	r6,r6,28787
   11d60:	39c66284 	addi	r7,r7,6538
   11d64:	102d883a 	mov	r22,r2
   11d68:	182b883a 	mov	r21,r3
   11d6c:	00161980 	call	16198 <__muldf3>
   11d70:	b00d883a 	mov	r6,r22
   11d74:	a80f883a 	mov	r7,r21
   11d78:	1009883a 	mov	r4,r2
   11d7c:	180b883a 	mov	r5,r3
   11d80:	0016a040 	call	16a04 <__subdf3>
   11d84:	d9000917 	ldw	r4,36(sp)
   11d88:	b80b883a 	mov	r5,r23
   11d8c:	100d883a 	mov	r6,r2
   11d90:	180f883a 	mov	r7,r3
   11d94:	102d883a 	mov	r22,r2
   11d98:	182b883a 	mov	r21,r3
   11d9c:	0016a040 	call	16a04 <__subdf3>
   11da0:	1019883a 	mov	r12,r2
   11da4:	1804d53a 	srli	r2,r3,20
   11da8:	da000a17 	ldw	r8,40(sp)
   11dac:	83000015 	stw	r12,0(r16)
   11db0:	1081ffcc 	andi	r2,r2,2047
   11db4:	4091c83a 	sub	r8,r8,r2
   11db8:	80c00115 	stw	r3,4(r16)
   11dbc:	00800c44 	movi	r2,49
   11dc0:	1813883a 	mov	r9,r3
   11dc4:	1200790e 	bge	r2,r8,11fac <__ieee754_rem_pio2+0x790>
   11dc8:	01cee8f4 	movhi	r7,15267
   11dcc:	39c66284 	addi	r7,r7,6538
   11dd0:	a009883a 	mov	r4,r20
   11dd4:	980b883a 	mov	r5,r19
   11dd8:	018b8034 	movhi	r6,11776
   11ddc:	00161980 	call	16198 <__muldf3>
   11de0:	d9000917 	ldw	r4,36(sp)
   11de4:	b80b883a 	mov	r5,r23
   11de8:	100d883a 	mov	r6,r2
   11dec:	180f883a 	mov	r7,r3
   11df0:	102d883a 	mov	r22,r2
   11df4:	182b883a 	mov	r21,r3
   11df8:	0016a040 	call	16a04 <__subdf3>
   11dfc:	d9000917 	ldw	r4,36(sp)
   11e00:	b80b883a 	mov	r5,r23
   11e04:	100d883a 	mov	r6,r2
   11e08:	180f883a 	mov	r7,r3
   11e0c:	d8c00b15 	stw	r3,44(sp)
   11e10:	d8800a15 	stw	r2,40(sp)
   11e14:	0016a040 	call	16a04 <__subdf3>
   11e18:	b00d883a 	mov	r6,r22
   11e1c:	a80f883a 	mov	r7,r21
   11e20:	1009883a 	mov	r4,r2
   11e24:	180b883a 	mov	r5,r3
   11e28:	0016a040 	call	16a04 <__subdf3>
   11e2c:	01894834 	movhi	r6,9504
   11e30:	01ce5f34 	movhi	r7,14716
   11e34:	a009883a 	mov	r4,r20
   11e38:	980b883a 	mov	r5,r19
   11e3c:	31927044 	addi	r6,r6,18881
   11e40:	39e0e684 	addi	r7,r7,-31846
   11e44:	102d883a 	mov	r22,r2
   11e48:	182b883a 	mov	r21,r3
   11e4c:	00161980 	call	16198 <__muldf3>
   11e50:	b00d883a 	mov	r6,r22
   11e54:	a80f883a 	mov	r7,r21
   11e58:	1009883a 	mov	r4,r2
   11e5c:	180b883a 	mov	r5,r3
   11e60:	0016a040 	call	16a04 <__subdf3>
   11e64:	dac00a17 	ldw	r11,40(sp)
   11e68:	da800b17 	ldw	r10,44(sp)
   11e6c:	102d883a 	mov	r22,r2
   11e70:	182b883a 	mov	r21,r3
   11e74:	5809883a 	mov	r4,r11
   11e78:	500b883a 	mov	r5,r10
   11e7c:	100d883a 	mov	r6,r2
   11e80:	180f883a 	mov	r7,r3
   11e84:	003f6a06 	br	11c30 <_gp+0xfffefbcc>
   11e88:	0014d380 	call	14d38 <__adddf3>
   11e8c:	1025883a 	mov	r18,r2
   11e90:	008ffe74 	movhi	r2,16377
   11e94:	10887ec4 	addi	r2,r2,8699
   11e98:	1823883a 	mov	r17,r3
   11e9c:	b8802226 	beq	r23,r2,11f28 <__ieee754_rem_pio2+0x70c>
   11ea0:	018698b4 	movhi	r6,6754
   11ea4:	01cf7474 	movhi	r7,15825
   11ea8:	3198cc44 	addi	r6,r6,25393
   11eac:	39ed1844 	addi	r7,r7,-19359
   11eb0:	9009883a 	mov	r4,r18
   11eb4:	180b883a 	mov	r5,r3
   11eb8:	0014d380 	call	14d38 <__adddf3>
   11ebc:	100d883a 	mov	r6,r2
   11ec0:	180f883a 	mov	r7,r3
   11ec4:	9009883a 	mov	r4,r18
   11ec8:	880b883a 	mov	r5,r17
   11ecc:	80800015 	stw	r2,0(r16)
   11ed0:	80c00115 	stw	r3,4(r16)
   11ed4:	0016a040 	call	16a04 <__subdf3>
   11ed8:	018698b4 	movhi	r6,6754
   11edc:	01cf7474 	movhi	r7,15825
   11ee0:	1009883a 	mov	r4,r2
   11ee4:	180b883a 	mov	r5,r3
   11ee8:	3198cc44 	addi	r6,r6,25393
   11eec:	39ed1844 	addi	r7,r7,-19359
   11ef0:	0014d380 	call	14d38 <__adddf3>
   11ef4:	80800215 	stw	r2,8(r16)
   11ef8:	80c00315 	stw	r3,12(r16)
   11efc:	00bfffc4 	movi	r2,-1
   11f00:	003ed606 	br	11a5c <_gp+0xfffef9f8>
   11f04:	01c000c4 	movi	r7,3
   11f08:	003ebd06 	br	11a00 <_gp+0xfffef99c>
   11f0c:	4a60003c 	xorhi	r9,r9,32768
   11f10:	18e0003c 	xorhi	r3,r3,32768
   11f14:	83000015 	stw	r12,0(r16)
   11f18:	82400115 	stw	r9,4(r16)
   11f1c:	80c00315 	stw	r3,12(r16)
   11f20:	0485c83a 	sub	r2,zero,r18
   11f24:	003ecd06 	br	11a5c <_gp+0xfffef9f8>
   11f28:	01cf7474 	movhi	r7,15825
   11f2c:	9009883a 	mov	r4,r18
   11f30:	39ed1844 	addi	r7,r7,-19359
   11f34:	01869834 	movhi	r6,6752
   11f38:	180b883a 	mov	r5,r3
   11f3c:	0014d380 	call	14d38 <__adddf3>
   11f40:	018b80f4 	movhi	r6,11779
   11f44:	01cee8f4 	movhi	r7,15267
   11f48:	1009883a 	mov	r4,r2
   11f4c:	180b883a 	mov	r5,r3
   11f50:	319c1cc4 	addi	r6,r6,28787
   11f54:	39c66284 	addi	r7,r7,6538
   11f58:	1025883a 	mov	r18,r2
   11f5c:	1823883a 	mov	r17,r3
   11f60:	0014d380 	call	14d38 <__adddf3>
   11f64:	100d883a 	mov	r6,r2
   11f68:	180f883a 	mov	r7,r3
   11f6c:	9009883a 	mov	r4,r18
   11f70:	880b883a 	mov	r5,r17
   11f74:	80800015 	stw	r2,0(r16)
   11f78:	80c00115 	stw	r3,4(r16)
   11f7c:	0016a040 	call	16a04 <__subdf3>
   11f80:	018b80f4 	movhi	r6,11779
   11f84:	01cee8f4 	movhi	r7,15267
   11f88:	1009883a 	mov	r4,r2
   11f8c:	180b883a 	mov	r5,r3
   11f90:	319c1cc4 	addi	r6,r6,28787
   11f94:	39c66284 	addi	r7,r7,6538
   11f98:	0014d380 	call	14d38 <__adddf3>
   11f9c:	80800215 	stw	r2,8(r16)
   11fa0:	80c00315 	stw	r3,12(r16)
   11fa4:	00bfffc4 	movi	r2,-1
   11fa8:	003eac06 	br	11a5c <_gp+0xfffef9f8>
   11fac:	dac00917 	ldw	r11,36(sp)
   11fb0:	b815883a 	mov	r10,r23
   11fb4:	003f2506 	br	11c4c <_gp+0xfffefbe8>

00011fb8 <__ieee754_sqrt>:
   11fb8:	defffd04 	addi	sp,sp,-12
   11fbc:	dc400115 	stw	r17,4(sp)
   11fc0:	dc000015 	stw	r16,0(sp)
   11fc4:	dfc00215 	stw	ra,8(sp)
   11fc8:	28dffc2c 	andhi	r3,r5,32752
   11fcc:	009ffc34 	movhi	r2,32752
   11fd0:	2821883a 	mov	r16,r5
   11fd4:	2023883a 	mov	r17,r4
   11fd8:	18807c26 	beq	r3,r2,121cc <__ieee754_sqrt+0x214>
   11fdc:	2011883a 	mov	r8,r4
   11fe0:	01405f0e 	bge	zero,r5,12160 <__ieee754_sqrt+0x1a8>
   11fe4:	2815d53a 	srai	r10,r5,20
   11fe8:	50006a26 	beq	r10,zero,12194 <__ieee754_sqrt+0x1dc>
   11fec:	00800434 	movhi	r2,16
   11ff0:	52bf0044 	addi	r10,r10,-1023
   11ff4:	10bfffc4 	addi	r2,r2,-1
   11ff8:	8084703a 	and	r2,r16,r2
   11ffc:	50c0004c 	andi	r3,r10,1
   12000:	10800434 	orhi	r2,r2,16
   12004:	18004f1e 	bne	r3,zero,12144 <__ieee754_sqrt+0x18c>
   12008:	4006d7fa 	srli	r3,r8,31
   1200c:	5015d07a 	srai	r10,r10,1
   12010:	1085883a 	add	r2,r2,r2
   12014:	10c5883a 	add	r2,r2,r3
   12018:	01800584 	movi	r6,22
   1201c:	4207883a 	add	r3,r8,r8
   12020:	0013883a 	mov	r9,zero
   12024:	000b883a 	mov	r5,zero
   12028:	01000834 	movhi	r4,32
   1202c:	290f883a 	add	r7,r5,r4
   12030:	1810d7fa 	srli	r8,r3,31
   12034:	31bfffc4 	addi	r6,r6,-1
   12038:	11c00316 	blt	r2,r7,12048 <__ieee754_sqrt+0x90>
   1203c:	11c5c83a 	sub	r2,r2,r7
   12040:	390b883a 	add	r5,r7,r4
   12044:	4913883a 	add	r9,r9,r4
   12048:	1085883a 	add	r2,r2,r2
   1204c:	1205883a 	add	r2,r2,r8
   12050:	18c7883a 	add	r3,r3,r3
   12054:	2008d07a 	srli	r4,r4,1
   12058:	303ff41e 	bne	r6,zero,1202c <_gp+0xfffeffc8>
   1205c:	01200034 	movhi	r4,32768
   12060:	01c00804 	movi	r7,32
   12064:	0011883a 	mov	r8,zero
   12068:	0017883a 	mov	r11,zero
   1206c:	201b883a 	mov	r13,r4
   12070:	00000806 	br	12094 <__ieee754_sqrt+0xdc>
   12074:	11401726 	beq	r2,r5,120d4 <__ieee754_sqrt+0x11c>
   12078:	180cd7fa 	srli	r6,r3,31
   1207c:	1085883a 	add	r2,r2,r2
   12080:	39ffffc4 	addi	r7,r7,-1
   12084:	1185883a 	add	r2,r2,r6
   12088:	18c7883a 	add	r3,r3,r3
   1208c:	2008d07a 	srli	r4,r4,1
   12090:	38001726 	beq	r7,zero,120f0 <__ieee754_sqrt+0x138>
   12094:	590d883a 	add	r6,r11,r4
   12098:	28bff60e 	bge	r5,r2,12074 <_gp+0xffff0010>
   1209c:	3320002c 	andhi	r12,r6,32768
   120a0:	3117883a 	add	r11,r6,r4
   120a4:	63400826 	beq	r12,r13,120c8 <__ieee754_sqrt+0x110>
   120a8:	2819883a 	mov	r12,r5
   120ac:	1145c83a 	sub	r2,r2,r5
   120b0:	1980012e 	bgeu	r3,r6,120b8 <__ieee754_sqrt+0x100>
   120b4:	10bfffc4 	addi	r2,r2,-1
   120b8:	1987c83a 	sub	r3,r3,r6
   120bc:	4111883a 	add	r8,r8,r4
   120c0:	600b883a 	mov	r5,r12
   120c4:	003fec06 	br	12078 <_gp+0xffff0014>
   120c8:	583ff716 	blt	r11,zero,120a8 <_gp+0xffff0044>
   120cc:	2b000044 	addi	r12,r5,1
   120d0:	003ff606 	br	120ac <_gp+0xffff0048>
   120d4:	19801936 	bltu	r3,r6,1213c <__ieee754_sqrt+0x184>
   120d8:	3320002c 	andhi	r12,r6,32768
   120dc:	3117883a 	add	r11,r6,r4
   120e0:	63404626 	beq	r12,r13,121fc <__ieee754_sqrt+0x244>
   120e4:	1019883a 	mov	r12,r2
   120e8:	0005883a 	mov	r2,zero
   120ec:	003ff206 	br	120b8 <_gp+0xffff0054>
   120f0:	10c4b03a 	or	r2,r2,r3
   120f4:	10000426 	beq	r2,zero,12108 <__ieee754_sqrt+0x150>
   120f8:	00bfffc4 	movi	r2,-1
   120fc:	40804326 	beq	r8,r2,1220c <__ieee754_sqrt+0x254>
   12100:	4080004c 	andi	r2,r8,1
   12104:	1211883a 	add	r8,r2,r8
   12108:	4004d07a 	srli	r2,r8,1
   1210c:	4807d07a 	srai	r3,r9,1
   12110:	010ff834 	movhi	r4,16352
   12114:	4a40004c 	andi	r9,r9,1
   12118:	1909883a 	add	r4,r3,r4
   1211c:	48000e1e 	bne	r9,zero,12158 <__ieee754_sqrt+0x1a0>
   12120:	5006953a 	slli	r3,r10,20
   12124:	1907883a 	add	r3,r3,r4
   12128:	dfc00217 	ldw	ra,8(sp)
   1212c:	dc400117 	ldw	r17,4(sp)
   12130:	dc000017 	ldw	r16,0(sp)
   12134:	dec00304 	addi	sp,sp,12
   12138:	f800283a 	ret
   1213c:	100b883a 	mov	r5,r2
   12140:	003fcd06 	br	12078 <_gp+0xffff0014>
   12144:	4006d7fa 	srli	r3,r8,31
   12148:	1085883a 	add	r2,r2,r2
   1214c:	4211883a 	add	r8,r8,r8
   12150:	10c5883a 	add	r2,r2,r3
   12154:	003fac06 	br	12008 <_gp+0xfffeffa4>
   12158:	10a00034 	orhi	r2,r2,32768
   1215c:	003ff006 	br	12120 <_gp+0xffff00bc>
   12160:	00a00034 	movhi	r2,32768
   12164:	10bfffc4 	addi	r2,r2,-1
   12168:	2884703a 	and	r2,r5,r2
   1216c:	1104b03a 	or	r2,r2,r4
   12170:	10001f26 	beq	r2,zero,121f0 <__ieee754_sqrt+0x238>
   12174:	28002c1e 	bne	r5,zero,12228 <__ieee754_sqrt+0x270>
   12178:	0015883a 	mov	r10,zero
   1217c:	4020d2fa 	srli	r16,r8,11
   12180:	52bffac4 	addi	r10,r10,-21
   12184:	4010957a 	slli	r8,r8,21
   12188:	803ffc26 	beq	r16,zero,1217c <_gp+0xffff0118>
   1218c:	8080042c 	andhi	r2,r16,16
   12190:	1000211e 	bne	r2,zero,12218 <__ieee754_sqrt+0x260>
   12194:	0005883a 	mov	r2,zero
   12198:	8421883a 	add	r16,r16,r16
   1219c:	80c0042c 	andhi	r3,r16,16
   121a0:	10800044 	addi	r2,r2,1
   121a4:	183ffc26 	beq	r3,zero,12198 <_gp+0xffff0134>
   121a8:	01000044 	movi	r4,1
   121ac:	00c00804 	movi	r3,32
   121b0:	2089c83a 	sub	r4,r4,r2
   121b4:	1887c83a 	sub	r3,r3,r2
   121b8:	40c6d83a 	srl	r3,r8,r3
   121bc:	5115883a 	add	r10,r10,r4
   121c0:	4090983a 	sll	r8,r8,r2
   121c4:	80e0b03a 	or	r16,r16,r3
   121c8:	003f8806 	br	11fec <_gp+0xfffeff88>
   121cc:	200d883a 	mov	r6,r4
   121d0:	280f883a 	mov	r7,r5
   121d4:	00161980 	call	16198 <__muldf3>
   121d8:	1009883a 	mov	r4,r2
   121dc:	180b883a 	mov	r5,r3
   121e0:	880d883a 	mov	r6,r17
   121e4:	800f883a 	mov	r7,r16
   121e8:	0014d380 	call	14d38 <__adddf3>
   121ec:	003fce06 	br	12128 <_gp+0xffff00c4>
   121f0:	2005883a 	mov	r2,r4
   121f4:	2807883a 	mov	r3,r5
   121f8:	003fcb06 	br	12128 <_gp+0xffff00c4>
   121fc:	583fb30e 	bge	r11,zero,120cc <_gp+0xffff0068>
   12200:	0005883a 	mov	r2,zero
   12204:	2819883a 	mov	r12,r5
   12208:	003fab06 	br	120b8 <_gp+0xffff0054>
   1220c:	4a400044 	addi	r9,r9,1
   12210:	0005883a 	mov	r2,zero
   12214:	003fbd06 	br	1210c <_gp+0xffff00a8>
   12218:	00c00804 	movi	r3,32
   1221c:	01000044 	movi	r4,1
   12220:	0005883a 	mov	r2,zero
   12224:	003fe406 	br	121b8 <_gp+0xffff0154>
   12228:	200d883a 	mov	r6,r4
   1222c:	280f883a 	mov	r7,r5
   12230:	0016a040 	call	16a04 <__subdf3>
   12234:	1009883a 	mov	r4,r2
   12238:	180b883a 	mov	r5,r3
   1223c:	100d883a 	mov	r6,r2
   12240:	180f883a 	mov	r7,r3
   12244:	00155d40 	call	155d4 <__divdf3>
   12248:	003fb706 	br	12128 <_gp+0xffff00c4>

0001224c <__kernel_cos>:
   1224c:	defff304 	addi	sp,sp,-52
   12250:	dc000315 	stw	r16,12(sp)
   12254:	04200034 	movhi	r16,32768
   12258:	843fffc4 	addi	r16,r16,-1
   1225c:	008f9034 	movhi	r2,15936
   12260:	df000b15 	stw	fp,44(sp)
   12264:	ddc00a15 	stw	r23,40(sp)
   12268:	dd800915 	stw	r22,36(sp)
   1226c:	dcc00615 	stw	r19,24(sp)
   12270:	dfc00c15 	stw	ra,48(sp)
   12274:	dd400815 	stw	r21,32(sp)
   12278:	dd000715 	stw	r20,28(sp)
   1227c:	dc800515 	stw	r18,20(sp)
   12280:	dc400415 	stw	r17,16(sp)
   12284:	2c20703a 	and	r16,r5,r16
   12288:	10bfffc4 	addi	r2,r2,-1
   1228c:	2827883a 	mov	r19,r5
   12290:	202d883a 	mov	r22,r4
   12294:	302f883a 	mov	r23,r6
   12298:	3839883a 	mov	fp,r7
   1229c:	14007516 	blt	r2,r16,12474 <__kernel_cos+0x228>
   122a0:	00172d40 	call	172d4 <__fixdfsi>
   122a4:	10010f26 	beq	r2,zero,126e4 <__kernel_cos+0x498>
   122a8:	b00d883a 	mov	r6,r22
   122ac:	980f883a 	mov	r7,r19
   122b0:	b009883a 	mov	r4,r22
   122b4:	980b883a 	mov	r5,r19
   122b8:	00161980 	call	16198 <__muldf3>
   122bc:	01afa234 	movhi	r6,48776
   122c0:	01ef6a74 	movhi	r7,48553
   122c4:	1009883a 	mov	r4,r2
   122c8:	180b883a 	mov	r5,r3
   122cc:	318e3504 	addi	r6,r6,14548
   122d0:	39feba44 	addi	r7,r7,-1303
   122d4:	102b883a 	mov	r21,r2
   122d8:	1829883a 	mov	r20,r3
   122dc:	00161980 	call	16198 <__muldf3>
   122e0:	01af6d74 	movhi	r6,48565
   122e4:	01cf88b4 	movhi	r7,15906
   122e8:	1009883a 	mov	r4,r2
   122ec:	180b883a 	mov	r5,r3
   122f0:	31ac7104 	addi	r6,r6,-20028
   122f4:	39fba784 	addi	r7,r7,-4450
   122f8:	0014d380 	call	14d38 <__adddf3>
   122fc:	1009883a 	mov	r4,r2
   12300:	180b883a 	mov	r5,r3
   12304:	a80d883a 	mov	r6,r21
   12308:	a00f883a 	mov	r7,r20
   1230c:	00161980 	call	16198 <__muldf3>
   12310:	01a02734 	movhi	r6,32924
   12314:	01cfa4b4 	movhi	r7,16018
   12318:	1009883a 	mov	r4,r2
   1231c:	180b883a 	mov	r5,r3
   12320:	3194ab44 	addi	r6,r6,21165
   12324:	39df93c4 	addi	r7,r7,32335
   12328:	0016a040 	call	16a04 <__subdf3>
   1232c:	1009883a 	mov	r4,r2
   12330:	180b883a 	mov	r5,r3
   12334:	a80d883a 	mov	r6,r21
   12338:	a00f883a 	mov	r7,r20
   1233c:	00161980 	call	16198 <__muldf3>
   12340:	018672f4 	movhi	r6,6603
   12344:	01cfbeb4 	movhi	r7,16122
   12348:	1009883a 	mov	r4,r2
   1234c:	180b883a 	mov	r5,r3
   12350:	31856404 	addi	r6,r6,5520
   12354:	39c06804 	addi	r7,r7,416
   12358:	0014d380 	call	14d38 <__adddf3>
   1235c:	1009883a 	mov	r4,r2
   12360:	180b883a 	mov	r5,r3
   12364:	a80d883a 	mov	r6,r21
   12368:	a00f883a 	mov	r7,r20
   1236c:	00161980 	call	16198 <__muldf3>
   12370:	0185b074 	movhi	r6,5825
   12374:	01cfd5f4 	movhi	r7,16215
   12378:	1009883a 	mov	r4,r2
   1237c:	180b883a 	mov	r5,r3
   12380:	31945dc4 	addi	r6,r6,20855
   12384:	39f05b04 	addi	r7,r7,-16020
   12388:	0016a040 	call	16a04 <__subdf3>
   1238c:	1009883a 	mov	r4,r2
   12390:	180b883a 	mov	r5,r3
   12394:	a80d883a 	mov	r6,r21
   12398:	a00f883a 	mov	r7,r20
   1239c:	00161980 	call	16198 <__muldf3>
   123a0:	01955574 	movhi	r6,21845
   123a4:	01cfe974 	movhi	r7,16293
   123a8:	1009883a 	mov	r4,r2
   123ac:	180b883a 	mov	r5,r3
   123b0:	31955304 	addi	r6,r6,21836
   123b4:	39d55544 	addi	r7,r7,21845
   123b8:	0014d380 	call	14d38 <__adddf3>
   123bc:	1009883a 	mov	r4,r2
   123c0:	180b883a 	mov	r5,r3
   123c4:	a80d883a 	mov	r6,r21
   123c8:	a00f883a 	mov	r7,r20
   123cc:	00161980 	call	16198 <__muldf3>
   123d0:	1017883a 	mov	r11,r2
   123d4:	1815883a 	mov	r10,r3
   123d8:	a809883a 	mov	r4,r21
   123dc:	a00b883a 	mov	r5,r20
   123e0:	000d883a 	mov	r6,zero
   123e4:	01cff834 	movhi	r7,16352
   123e8:	da800215 	stw	r10,8(sp)
   123ec:	dac00115 	stw	r11,4(sp)
   123f0:	00161980 	call	16198 <__muldf3>
   123f4:	dac00117 	ldw	r11,4(sp)
   123f8:	da800217 	ldw	r10,8(sp)
   123fc:	a809883a 	mov	r4,r21
   12400:	580d883a 	mov	r6,r11
   12404:	500f883a 	mov	r7,r10
   12408:	a00b883a 	mov	r5,r20
   1240c:	1023883a 	mov	r17,r2
   12410:	1821883a 	mov	r16,r3
   12414:	00161980 	call	16198 <__muldf3>
   12418:	b009883a 	mov	r4,r22
   1241c:	980b883a 	mov	r5,r19
   12420:	b80d883a 	mov	r6,r23
   12424:	e00f883a 	mov	r7,fp
   12428:	1029883a 	mov	r20,r2
   1242c:	1825883a 	mov	r18,r3
   12430:	00161980 	call	16198 <__muldf3>
   12434:	a009883a 	mov	r4,r20
   12438:	900b883a 	mov	r5,r18
   1243c:	100d883a 	mov	r6,r2
   12440:	180f883a 	mov	r7,r3
   12444:	0016a040 	call	16a04 <__subdf3>
   12448:	8809883a 	mov	r4,r17
   1244c:	800b883a 	mov	r5,r16
   12450:	100d883a 	mov	r6,r2
   12454:	180f883a 	mov	r7,r3
   12458:	0016a040 	call	16a04 <__subdf3>
   1245c:	0009883a 	mov	r4,zero
   12460:	014ffc34 	movhi	r5,16368
   12464:	100d883a 	mov	r6,r2
   12468:	180f883a 	mov	r7,r3
   1246c:	0016a040 	call	16a04 <__subdf3>
   12470:	00008b06 	br	126a0 <__kernel_cos+0x454>
   12474:	200d883a 	mov	r6,r4
   12478:	280f883a 	mov	r7,r5
   1247c:	00161980 	call	16198 <__muldf3>
   12480:	01afa234 	movhi	r6,48776
   12484:	01ef6a74 	movhi	r7,48553
   12488:	318e3504 	addi	r6,r6,14548
   1248c:	39feba44 	addi	r7,r7,-1303
   12490:	1009883a 	mov	r4,r2
   12494:	180b883a 	mov	r5,r3
   12498:	1025883a 	mov	r18,r2
   1249c:	1823883a 	mov	r17,r3
   124a0:	00161980 	call	16198 <__muldf3>
   124a4:	01af6d74 	movhi	r6,48565
   124a8:	01cf88b4 	movhi	r7,15906
   124ac:	1009883a 	mov	r4,r2
   124b0:	180b883a 	mov	r5,r3
   124b4:	31ac7104 	addi	r6,r6,-20028
   124b8:	39fba784 	addi	r7,r7,-4450
   124bc:	0014d380 	call	14d38 <__adddf3>
   124c0:	1009883a 	mov	r4,r2
   124c4:	180b883a 	mov	r5,r3
   124c8:	900d883a 	mov	r6,r18
   124cc:	880f883a 	mov	r7,r17
   124d0:	00161980 	call	16198 <__muldf3>
   124d4:	01a02734 	movhi	r6,32924
   124d8:	01cfa4b4 	movhi	r7,16018
   124dc:	1009883a 	mov	r4,r2
   124e0:	180b883a 	mov	r5,r3
   124e4:	3194ab44 	addi	r6,r6,21165
   124e8:	39df93c4 	addi	r7,r7,32335
   124ec:	0016a040 	call	16a04 <__subdf3>
   124f0:	1009883a 	mov	r4,r2
   124f4:	180b883a 	mov	r5,r3
   124f8:	900d883a 	mov	r6,r18
   124fc:	880f883a 	mov	r7,r17
   12500:	00161980 	call	16198 <__muldf3>
   12504:	018672f4 	movhi	r6,6603
   12508:	01cfbeb4 	movhi	r7,16122
   1250c:	1009883a 	mov	r4,r2
   12510:	180b883a 	mov	r5,r3
   12514:	31856404 	addi	r6,r6,5520
   12518:	39c06804 	addi	r7,r7,416
   1251c:	0014d380 	call	14d38 <__adddf3>
   12520:	1009883a 	mov	r4,r2
   12524:	180b883a 	mov	r5,r3
   12528:	900d883a 	mov	r6,r18
   1252c:	880f883a 	mov	r7,r17
   12530:	00161980 	call	16198 <__muldf3>
   12534:	0185b074 	movhi	r6,5825
   12538:	01cfd5f4 	movhi	r7,16215
   1253c:	1009883a 	mov	r4,r2
   12540:	180b883a 	mov	r5,r3
   12544:	31945dc4 	addi	r6,r6,20855
   12548:	39f05b04 	addi	r7,r7,-16020
   1254c:	0016a040 	call	16a04 <__subdf3>
   12550:	1009883a 	mov	r4,r2
   12554:	180b883a 	mov	r5,r3
   12558:	900d883a 	mov	r6,r18
   1255c:	880f883a 	mov	r7,r17
   12560:	00161980 	call	16198 <__muldf3>
   12564:	01955574 	movhi	r6,21845
   12568:	01cfe974 	movhi	r7,16293
   1256c:	1009883a 	mov	r4,r2
   12570:	180b883a 	mov	r5,r3
   12574:	31955304 	addi	r6,r6,21836
   12578:	39d55544 	addi	r7,r7,21845
   1257c:	0014d380 	call	14d38 <__adddf3>
   12580:	1009883a 	mov	r4,r2
   12584:	180b883a 	mov	r5,r3
   12588:	900d883a 	mov	r6,r18
   1258c:	880f883a 	mov	r7,r17
   12590:	00161980 	call	16198 <__muldf3>
   12594:	1013883a 	mov	r9,r2
   12598:	1017883a 	mov	r11,r2
   1259c:	008ff4f4 	movhi	r2,16339
   125a0:	108ccc84 	addi	r2,r2,13106
   125a4:	902b883a 	mov	r21,r18
   125a8:	8829883a 	mov	r20,r17
   125ac:	1811883a 	mov	r8,r3
   125b0:	1815883a 	mov	r10,r3
   125b4:	143f880e 	bge	r2,r16,123d8 <_gp+0xffff0374>
   125b8:	008ffa74 	movhi	r2,16361
   125bc:	14004416 	blt	r2,r16,126d0 <__kernel_cos+0x484>
   125c0:	00bff834 	movhi	r2,65504
   125c4:	80a1883a 	add	r16,r16,r2
   125c8:	0009883a 	mov	r4,zero
   125cc:	014ffc34 	movhi	r5,16368
   125d0:	000d883a 	mov	r6,zero
   125d4:	800f883a 	mov	r7,r16
   125d8:	da400115 	stw	r9,4(sp)
   125dc:	d8c00215 	stw	r3,8(sp)
   125e0:	0016a040 	call	16a04 <__subdf3>
   125e4:	da000217 	ldw	r8,8(sp)
   125e8:	da400117 	ldw	r9,4(sp)
   125ec:	102b883a 	mov	r21,r2
   125f0:	d8c00015 	stw	r3,0(sp)
   125f4:	9009883a 	mov	r4,r18
   125f8:	880b883a 	mov	r5,r17
   125fc:	000d883a 	mov	r6,zero
   12600:	01cff834 	movhi	r7,16352
   12604:	da000215 	stw	r8,8(sp)
   12608:	da400115 	stw	r9,4(sp)
   1260c:	00161980 	call	16198 <__muldf3>
   12610:	800f883a 	mov	r7,r16
   12614:	1009883a 	mov	r4,r2
   12618:	180b883a 	mov	r5,r3
   1261c:	000d883a 	mov	r6,zero
   12620:	0016a040 	call	16a04 <__subdf3>
   12624:	da400117 	ldw	r9,4(sp)
   12628:	da000217 	ldw	r8,8(sp)
   1262c:	9009883a 	mov	r4,r18
   12630:	480d883a 	mov	r6,r9
   12634:	400f883a 	mov	r7,r8
   12638:	880b883a 	mov	r5,r17
   1263c:	1029883a 	mov	r20,r2
   12640:	1821883a 	mov	r16,r3
   12644:	00161980 	call	16198 <__muldf3>
   12648:	b009883a 	mov	r4,r22
   1264c:	980b883a 	mov	r5,r19
   12650:	b80d883a 	mov	r6,r23
   12654:	e00f883a 	mov	r7,fp
   12658:	1025883a 	mov	r18,r2
   1265c:	1823883a 	mov	r17,r3
   12660:	00161980 	call	16198 <__muldf3>
   12664:	9009883a 	mov	r4,r18
   12668:	880b883a 	mov	r5,r17
   1266c:	100d883a 	mov	r6,r2
   12670:	180f883a 	mov	r7,r3
   12674:	0016a040 	call	16a04 <__subdf3>
   12678:	a009883a 	mov	r4,r20
   1267c:	800b883a 	mov	r5,r16
   12680:	100d883a 	mov	r6,r2
   12684:	180f883a 	mov	r7,r3
   12688:	0016a040 	call	16a04 <__subdf3>
   1268c:	d9400017 	ldw	r5,0(sp)
   12690:	a809883a 	mov	r4,r21
   12694:	100d883a 	mov	r6,r2
   12698:	180f883a 	mov	r7,r3
   1269c:	0016a040 	call	16a04 <__subdf3>
   126a0:	dfc00c17 	ldw	ra,48(sp)
   126a4:	df000b17 	ldw	fp,44(sp)
   126a8:	ddc00a17 	ldw	r23,40(sp)
   126ac:	dd800917 	ldw	r22,36(sp)
   126b0:	dd400817 	ldw	r21,32(sp)
   126b4:	dd000717 	ldw	r20,28(sp)
   126b8:	dcc00617 	ldw	r19,24(sp)
   126bc:	dc800517 	ldw	r18,20(sp)
   126c0:	dc400417 	ldw	r17,16(sp)
   126c4:	dc000317 	ldw	r16,12(sp)
   126c8:	dec00d04 	addi	sp,sp,52
   126cc:	f800283a 	ret
   126d0:	008ff9f4 	movhi	r2,16359
   126d4:	002b883a 	mov	r21,zero
   126d8:	d8800015 	stw	r2,0(sp)
   126dc:	040ff4b4 	movhi	r16,16338
   126e0:	003fc406 	br	125f4 <_gp+0xffff0590>
   126e4:	0005883a 	mov	r2,zero
   126e8:	00cffc34 	movhi	r3,16368
   126ec:	003fec06 	br	126a0 <_gp+0xffff063c>

000126f0 <__kernel_rem_pio2>:
   126f0:	deff5b04 	addi	sp,sp,-660
   126f4:	da00a517 	ldw	r8,660(sp)
   126f8:	00c000b4 	movhi	r3,2
   126fc:	18e69b04 	addi	r3,r3,-26004
   12700:	4205883a 	add	r2,r8,r8
   12704:	1085883a 	add	r2,r2,r2
   12708:	1885883a 	add	r2,r3,r2
   1270c:	d9008d15 	stw	r4,564(sp)
   12710:	d9409015 	stw	r5,576(sp)
   12714:	313fff44 	addi	r4,r6,-3
   12718:	01400604 	movi	r5,24
   1271c:	dd80a115 	stw	r22,644(sp)
   12720:	dc009b15 	stw	r16,620(sp)
   12724:	dfc0a415 	stw	ra,656(sp)
   12728:	df00a315 	stw	fp,652(sp)
   1272c:	ddc0a215 	stw	r23,648(sp)
   12730:	dd40a015 	stw	r21,640(sp)
   12734:	dd009f15 	stw	r20,636(sp)
   12738:	dcc09e15 	stw	r19,632(sp)
   1273c:	dc809d15 	stw	r18,628(sp)
   12740:	dc409c15 	stw	r17,624(sp)
   12744:	3021883a 	mov	r16,r6
   12748:	d9c09315 	stw	r7,588(sp)
   1274c:	15800017 	ldw	r22,0(r2)
   12750:	0013bc00 	call	13bc0 <__divsi3>
   12754:	da009317 	ldw	r8,588(sp)
   12758:	d8809215 	stw	r2,584(sp)
   1275c:	423fffc4 	addi	r8,r8,-1
   12760:	da008c15 	stw	r8,560(sp)
   12764:	10032c16 	blt	r2,zero,13418 <__kernel_rem_pio2+0xd28>
   12768:	da009217 	ldw	r8,584(sp)
   1276c:	01400604 	movi	r5,24
   12770:	0208303a 	nor	r4,zero,r8
   12774:	0013c800 	call	13c80 <__mulsi3>
   12778:	da008c17 	ldw	r8,560(sp)
   1277c:	1421883a 	add	r16,r2,r16
   12780:	d8809217 	ldw	r2,584(sp)
   12784:	4587883a 	add	r3,r8,r22
   12788:	dc008f15 	stw	r16,572(sp)
   1278c:	1223c83a 	sub	r17,r2,r8
   12790:	18001016 	blt	r3,zero,127d4 <__kernel_rem_pio2+0xe4>
   12794:	da00a617 	ldw	r8,664(sp)
   12798:	8c65883a 	add	r18,r17,r17
   1279c:	94a5883a 	add	r18,r18,r18
   127a0:	88c7883a 	add	r3,r17,r3
   127a4:	dcc05004 	addi	r19,sp,320
   127a8:	44a5883a 	add	r18,r8,r18
   127ac:	1c000044 	addi	r16,r3,1
   127b0:	88014616 	blt	r17,zero,12ccc <__kernel_rem_pio2+0x5dc>
   127b4:	91000017 	ldw	r4,0(r18)
   127b8:	001735c0 	call	1735c <__floatsidf>
   127bc:	98800015 	stw	r2,0(r19)
   127c0:	98c00115 	stw	r3,4(r19)
   127c4:	8c400044 	addi	r17,r17,1
   127c8:	9cc00204 	addi	r19,r19,8
   127cc:	94800104 	addi	r18,r18,4
   127d0:	8c3ff71e 	bne	r17,r16,127b0 <_gp+0xffff074c>
   127d4:	b0002116 	blt	r22,zero,1285c <__kernel_rem_pio2+0x16c>
   127d8:	da009317 	ldw	r8,588(sp)
   127dc:	b02490fa 	slli	r18,r22,3
   127e0:	d8805004 	addi	r2,sp,320
   127e4:	402e90fa 	slli	r23,r8,3
   127e8:	d823883a 	mov	r17,sp
   127ec:	dc004e04 	addi	r16,sp,312
   127f0:	14b9883a 	add	fp,r2,r18
   127f4:	da008c17 	ldw	r8,560(sp)
   127f8:	40015916 	blt	r8,zero,12d60 <__kernel_rem_pio2+0x670>
   127fc:	dcc08d17 	ldw	r19,564(sp)
   12800:	85e5883a 	add	r18,r16,r23
   12804:	002b883a 	mov	r21,zero
   12808:	0029883a 	mov	r20,zero
   1280c:	99000017 	ldw	r4,0(r19)
   12810:	99400117 	ldw	r5,4(r19)
   12814:	91800017 	ldw	r6,0(r18)
   12818:	91c00117 	ldw	r7,4(r18)
   1281c:	94bffe04 	addi	r18,r18,-8
   12820:	9cc00204 	addi	r19,r19,8
   12824:	00161980 	call	16198 <__muldf3>
   12828:	a809883a 	mov	r4,r21
   1282c:	a00b883a 	mov	r5,r20
   12830:	100d883a 	mov	r6,r2
   12834:	180f883a 	mov	r7,r3
   12838:	0014d380 	call	14d38 <__adddf3>
   1283c:	102b883a 	mov	r21,r2
   12840:	1829883a 	mov	r20,r3
   12844:	84bff11e 	bne	r16,r18,1280c <_gp+0xffff07a8>
   12848:	8d400015 	stw	r21,0(r17)
   1284c:	8d000115 	stw	r20,4(r17)
   12850:	84000204 	addi	r16,r16,8
   12854:	8c400204 	addi	r17,r17,8
   12858:	873fe61e 	bne	r16,fp,127f4 <_gp+0xffff0790>
   1285c:	b02090ba 	slli	r16,r22,2
   12860:	d9009317 	ldw	r4,588(sp)
   12864:	017ffe04 	movi	r5,-8
   12868:	8161883a 	add	r16,r16,r5
   1286c:	0013c800 	call	13c80 <__mulsi3>
   12870:	d8808e15 	stw	r2,568(sp)
   12874:	b0bfffc4 	addi	r2,r22,-1
   12878:	1085883a 	add	r2,r2,r2
   1287c:	da007804 	addi	r8,sp,480
   12880:	4411883a 	add	r8,r8,r16
   12884:	1085883a 	add	r2,r2,r2
   12888:	80c00104 	addi	r3,r16,4
   1288c:	d885883a 	add	r2,sp,r2
   12890:	da009515 	stw	r8,596(sp)
   12894:	da007804 	addi	r8,sp,480
   12898:	40d1883a 	add	r8,r8,r3
   1289c:	10807804 	addi	r2,r2,480
   128a0:	da009615 	stw	r8,600(sp)
   128a4:	b021883a 	mov	r16,r22
   128a8:	d8809715 	stw	r2,604(sp)
   128ac:	dd809415 	stw	r22,592(sp)
   128b0:	800490fa 	slli	r2,r16,3
   128b4:	d885883a 	add	r2,sp,r2
   128b8:	15c00017 	ldw	r23,0(r2)
   128bc:	15000117 	ldw	r20,4(r2)
   128c0:	04002d0e 	bge	zero,r16,12978 <__kernel_rem_pio2+0x288>
   128c4:	00880034 	movhi	r2,8192
   128c8:	10bfffc4 	addi	r2,r2,-1
   128cc:	80a5883a 	add	r18,r16,r2
   128d0:	902490fa 	slli	r18,r18,3
   128d4:	8423883a 	add	r17,r16,r16
   128d8:	8c63883a 	add	r17,r17,r17
   128dc:	dcc07804 	addi	r19,sp,480
   128e0:	dca5883a 	add	r18,sp,r18
   128e4:	9c63883a 	add	r17,r19,r17
   128e8:	000d883a 	mov	r6,zero
   128ec:	01cf9c34 	movhi	r7,15984
   128f0:	b809883a 	mov	r4,r23
   128f4:	a00b883a 	mov	r5,r20
   128f8:	00161980 	call	16198 <__muldf3>
   128fc:	180b883a 	mov	r5,r3
   12900:	1009883a 	mov	r4,r2
   12904:	00172d40 	call	172d4 <__fixdfsi>
   12908:	1009883a 	mov	r4,r2
   1290c:	001735c0 	call	1735c <__floatsidf>
   12910:	1009883a 	mov	r4,r2
   12914:	180b883a 	mov	r5,r3
   12918:	000d883a 	mov	r6,zero
   1291c:	01d05c34 	movhi	r7,16752
   12920:	102d883a 	mov	r22,r2
   12924:	182b883a 	mov	r21,r3
   12928:	00161980 	call	16198 <__muldf3>
   1292c:	b809883a 	mov	r4,r23
   12930:	a00b883a 	mov	r5,r20
   12934:	100d883a 	mov	r6,r2
   12938:	180f883a 	mov	r7,r3
   1293c:	0016a040 	call	16a04 <__subdf3>
   12940:	180b883a 	mov	r5,r3
   12944:	1009883a 	mov	r4,r2
   12948:	00172d40 	call	172d4 <__fixdfsi>
   1294c:	91800017 	ldw	r6,0(r18)
   12950:	91c00117 	ldw	r7,4(r18)
   12954:	98800015 	stw	r2,0(r19)
   12958:	b009883a 	mov	r4,r22
   1295c:	a80b883a 	mov	r5,r21
   12960:	0014d380 	call	14d38 <__adddf3>
   12964:	9cc00104 	addi	r19,r19,4
   12968:	102f883a 	mov	r23,r2
   1296c:	1829883a 	mov	r20,r3
   12970:	94bffe04 	addi	r18,r18,-8
   12974:	9c7fdc1e 	bne	r19,r17,128e8 <_gp+0xffff0884>
   12978:	d9808f17 	ldw	r6,572(sp)
   1297c:	a00b883a 	mov	r5,r20
   12980:	b809883a 	mov	r4,r23
   12984:	001396c0 	call	1396c <scalbn>
   12988:	000d883a 	mov	r6,zero
   1298c:	01cff034 	movhi	r7,16320
   12990:	1009883a 	mov	r4,r2
   12994:	180b883a 	mov	r5,r3
   12998:	1025883a 	mov	r18,r2
   1299c:	1823883a 	mov	r17,r3
   129a0:	00161980 	call	16198 <__muldf3>
   129a4:	1009883a 	mov	r4,r2
   129a8:	180b883a 	mov	r5,r3
   129ac:	00136fc0 	call	136fc <floor>
   129b0:	1009883a 	mov	r4,r2
   129b4:	180b883a 	mov	r5,r3
   129b8:	000d883a 	mov	r6,zero
   129bc:	01d00834 	movhi	r7,16416
   129c0:	00161980 	call	16198 <__muldf3>
   129c4:	100d883a 	mov	r6,r2
   129c8:	180f883a 	mov	r7,r3
   129cc:	9009883a 	mov	r4,r18
   129d0:	880b883a 	mov	r5,r17
   129d4:	0016a040 	call	16a04 <__subdf3>
   129d8:	180b883a 	mov	r5,r3
   129dc:	1009883a 	mov	r4,r2
   129e0:	1825883a 	mov	r18,r3
   129e4:	1027883a 	mov	r19,r2
   129e8:	00172d40 	call	172d4 <__fixdfsi>
   129ec:	1009883a 	mov	r4,r2
   129f0:	1023883a 	mov	r17,r2
   129f4:	001735c0 	call	1735c <__floatsidf>
   129f8:	9809883a 	mov	r4,r19
   129fc:	900b883a 	mov	r5,r18
   12a00:	100d883a 	mov	r6,r2
   12a04:	180f883a 	mov	r7,r3
   12a08:	0016a040 	call	16a04 <__subdf3>
   12a0c:	da008f17 	ldw	r8,572(sp)
   12a10:	1019883a 	mov	r12,r2
   12a14:	1029883a 	mov	r20,r2
   12a18:	1817883a 	mov	r11,r3
   12a1c:	0200ae0e 	bge	zero,r8,12cd8 <__kernel_rem_pio2+0x5e8>
   12a20:	80bfffc4 	addi	r2,r16,-1
   12a24:	1085883a 	add	r2,r2,r2
   12a28:	1085883a 	add	r2,r2,r2
   12a2c:	d885883a 	add	r2,sp,r2
   12a30:	10807804 	addi	r2,r2,480
   12a34:	11400017 	ldw	r5,0(r2)
   12a38:	01000604 	movi	r4,24
   12a3c:	2209c83a 	sub	r4,r4,r8
   12a40:	290dd83a 	sra	r6,r5,r4
   12a44:	048005c4 	movi	r18,23
   12a48:	9225c83a 	sub	r18,r18,r8
   12a4c:	3108983a 	sll	r4,r6,r4
   12a50:	89a3883a 	add	r17,r17,r6
   12a54:	2909c83a 	sub	r4,r5,r4
   12a58:	24a5d83a 	sra	r18,r4,r18
   12a5c:	11000015 	stw	r4,0(r2)
   12a60:	04802a0e 	bge	zero,r18,12b0c <__kernel_rem_pio2+0x41c>
   12a64:	8c400044 	addi	r17,r17,1
   12a68:	0400c40e 	bge	zero,r16,12d7c <__kernel_rem_pio2+0x68c>
   12a6c:	01404034 	movhi	r5,256
   12a70:	297fffc4 	addi	r5,r5,-1
   12a74:	da007804 	addi	r8,sp,480
   12a78:	0015883a 	mov	r10,zero
   12a7c:	0027883a 	mov	r19,zero
   12a80:	01004034 	movhi	r4,256
   12a84:	00000706 	br	12aa4 <__kernel_rem_pio2+0x3b4>
   12a88:	208dc83a 	sub	r6,r4,r2
   12a8c:	10000226 	beq	r2,zero,12a98 <__kernel_rem_pio2+0x3a8>
   12a90:	41800015 	stw	r6,0(r8)
   12a94:	04c00044 	movi	r19,1
   12a98:	52800044 	addi	r10,r10,1
   12a9c:	42000104 	addi	r8,r8,4
   12aa0:	5400080e 	bge	r10,r16,12ac4 <__kernel_rem_pio2+0x3d4>
   12aa4:	40800017 	ldw	r2,0(r8)
   12aa8:	983ff726 	beq	r19,zero,12a88 <_gp+0xffff0a24>
   12aac:	2885c83a 	sub	r2,r5,r2
   12ab0:	40800015 	stw	r2,0(r8)
   12ab4:	52800044 	addi	r10,r10,1
   12ab8:	04c00044 	movi	r19,1
   12abc:	42000104 	addi	r8,r8,4
   12ac0:	543ff816 	blt	r10,r16,12aa4 <_gp+0xffff0a40>
   12ac4:	da008f17 	ldw	r8,572(sp)
   12ac8:	02000e0e 	bge	zero,r8,12b04 <__kernel_rem_pio2+0x414>
   12acc:	00800044 	movi	r2,1
   12ad0:	40808a26 	beq	r8,r2,12cfc <__kernel_rem_pio2+0x60c>
   12ad4:	00800084 	movi	r2,2
   12ad8:	40800a1e 	bne	r8,r2,12b04 <__kernel_rem_pio2+0x414>
   12adc:	80bfffc4 	addi	r2,r16,-1
   12ae0:	1085883a 	add	r2,r2,r2
   12ae4:	1085883a 	add	r2,r2,r2
   12ae8:	d885883a 	add	r2,sp,r2
   12aec:	10807804 	addi	r2,r2,480
   12af0:	11400017 	ldw	r5,0(r2)
   12af4:	01001034 	movhi	r4,64
   12af8:	213fffc4 	addi	r4,r4,-1
   12afc:	2908703a 	and	r4,r5,r4
   12b00:	11000015 	stw	r4,0(r2)
   12b04:	00800084 	movi	r2,2
   12b08:	90805a26 	beq	r18,r2,12c74 <__kernel_rem_pio2+0x584>
   12b0c:	580b883a 	mov	r5,r11
   12b10:	a009883a 	mov	r4,r20
   12b14:	000d883a 	mov	r6,zero
   12b18:	000f883a 	mov	r7,zero
   12b1c:	dac09a15 	stw	r11,616(sp)
   12b20:	0015f540 	call	15f54 <__eqdf2>
   12b24:	dac09a17 	ldw	r11,616(sp)
   12b28:	1000961e 	bne	r2,zero,12d84 <__kernel_rem_pio2+0x694>
   12b2c:	da009417 	ldw	r8,592(sp)
   12b30:	817fffc4 	addi	r5,r16,-1
   12b34:	2a000b16 	blt	r5,r8,12b64 <__kernel_rem_pio2+0x474>
   12b38:	800490ba 	slli	r2,r16,2
   12b3c:	d9809617 	ldw	r6,600(sp)
   12b40:	d9007804 	addi	r4,sp,480
   12b44:	10bfff04 	addi	r2,r2,-4
   12b48:	0007883a 	mov	r3,zero
   12b4c:	2085883a 	add	r2,r4,r2
   12b50:	11000017 	ldw	r4,0(r2)
   12b54:	10bfff04 	addi	r2,r2,-4
   12b58:	1906b03a 	or	r3,r3,r4
   12b5c:	11bffc1e 	bne	r2,r6,12b50 <_gp+0xffff0aec>
   12b60:	18013c1e 	bne	r3,zero,13054 <__kernel_rem_pio2+0x964>
   12b64:	da009717 	ldw	r8,604(sp)
   12b68:	40800017 	ldw	r2,0(r8)
   12b6c:	1001371e 	bne	r2,zero,1304c <__kernel_rem_pio2+0x95c>
   12b70:	d8809517 	ldw	r2,596(sp)
   12b74:	00c00044 	movi	r3,1
   12b78:	10bfff04 	addi	r2,r2,-4
   12b7c:	11000117 	ldw	r4,4(r2)
   12b80:	18c00044 	addi	r3,r3,1
   12b84:	203ffc26 	beq	r4,zero,12b78 <_gp+0xffff0b14>
   12b88:	80c7883a 	add	r3,r16,r3
   12b8c:	80800044 	addi	r2,r16,1
   12b90:	d8c09115 	stw	r3,580(sp)
   12b94:	18803216 	blt	r3,r2,12c60 <__kernel_rem_pio2+0x570>
   12b98:	da009317 	ldw	r8,588(sp)
   12b9c:	8223883a 	add	r17,r16,r8
   12ba0:	da009117 	ldw	r8,580(sp)
   12ba4:	882290fa 	slli	r17,r17,3
   12ba8:	45000044 	addi	r20,r8,1
   12bac:	da009217 	ldw	r8,584(sp)
   12bb0:	a02890fa 	slli	r20,r20,3
   12bb4:	1227883a 	add	r19,r2,r8
   12bb8:	100490fa 	slli	r2,r2,3
   12bbc:	da00a617 	ldw	r8,664(sp)
   12bc0:	9ce7883a 	add	r19,r19,r19
   12bc4:	9ce7883a 	add	r19,r19,r19
   12bc8:	d8a5883a 	add	r18,sp,r2
   12bcc:	d8805004 	addi	r2,sp,320
   12bd0:	44e7883a 	add	r19,r8,r19
   12bd4:	1463883a 	add	r17,r2,r17
   12bd8:	dd29883a 	add	r20,sp,r20
   12bdc:	99000017 	ldw	r4,0(r19)
   12be0:	001735c0 	call	1735c <__floatsidf>
   12be4:	da008c17 	ldw	r8,560(sp)
   12be8:	88800015 	stw	r2,0(r17)
   12bec:	88c00115 	stw	r3,4(r17)
   12bf0:	40001d16 	blt	r8,zero,12c68 <__kernel_rem_pio2+0x578>
   12bf4:	da008e17 	ldw	r8,568(sp)
   12bf8:	dd808d17 	ldw	r22,564(sp)
   12bfc:	8821883a 	mov	r16,r17
   12c00:	8a2b883a 	add	r21,r17,r8
   12c04:	0039883a 	mov	fp,zero
   12c08:	002f883a 	mov	r23,zero
   12c0c:	b1000017 	ldw	r4,0(r22)
   12c10:	b1400117 	ldw	r5,4(r22)
   12c14:	81800017 	ldw	r6,0(r16)
   12c18:	81c00117 	ldw	r7,4(r16)
   12c1c:	843ffe04 	addi	r16,r16,-8
   12c20:	b5800204 	addi	r22,r22,8
   12c24:	00161980 	call	16198 <__muldf3>
   12c28:	e009883a 	mov	r4,fp
   12c2c:	b80b883a 	mov	r5,r23
   12c30:	100d883a 	mov	r6,r2
   12c34:	180f883a 	mov	r7,r3
   12c38:	0014d380 	call	14d38 <__adddf3>
   12c3c:	1039883a 	mov	fp,r2
   12c40:	182f883a 	mov	r23,r3
   12c44:	857ff11e 	bne	r16,r21,12c0c <_gp+0xffff0ba8>
   12c48:	97000015 	stw	fp,0(r18)
   12c4c:	95c00115 	stw	r23,4(r18)
   12c50:	94800204 	addi	r18,r18,8
   12c54:	9cc00104 	addi	r19,r19,4
   12c58:	8c400204 	addi	r17,r17,8
   12c5c:	953fdf1e 	bne	r18,r20,12bdc <_gp+0xffff0b78>
   12c60:	dc009117 	ldw	r16,580(sp)
   12c64:	003f1206 	br	128b0 <_gp+0xffff084c>
   12c68:	0039883a 	mov	fp,zero
   12c6c:	002f883a 	mov	r23,zero
   12c70:	003ff506 	br	12c48 <_gp+0xffff0be4>
   12c74:	0009883a 	mov	r4,zero
   12c78:	014ffc34 	movhi	r5,16368
   12c7c:	600d883a 	mov	r6,r12
   12c80:	180f883a 	mov	r7,r3
   12c84:	0016a040 	call	16a04 <__subdf3>
   12c88:	1029883a 	mov	r20,r2
   12c8c:	1817883a 	mov	r11,r3
   12c90:	983f9e26 	beq	r19,zero,12b0c <_gp+0xffff0aa8>
   12c94:	d9808f17 	ldw	r6,572(sp)
   12c98:	0009883a 	mov	r4,zero
   12c9c:	014ffc34 	movhi	r5,16368
   12ca0:	d8c09a15 	stw	r3,616(sp)
   12ca4:	001396c0 	call	1396c <scalbn>
   12ca8:	dac09a17 	ldw	r11,616(sp)
   12cac:	a009883a 	mov	r4,r20
   12cb0:	100d883a 	mov	r6,r2
   12cb4:	580b883a 	mov	r5,r11
   12cb8:	180f883a 	mov	r7,r3
   12cbc:	0016a040 	call	16a04 <__subdf3>
   12cc0:	1029883a 	mov	r20,r2
   12cc4:	1817883a 	mov	r11,r3
   12cc8:	003f9006 	br	12b0c <_gp+0xffff0aa8>
   12ccc:	0005883a 	mov	r2,zero
   12cd0:	0007883a 	mov	r3,zero
   12cd4:	003eb906 	br	127bc <_gp+0xffff0758>
   12cd8:	da008f17 	ldw	r8,572(sp)
   12cdc:	4000121e 	bne	r8,zero,12d28 <__kernel_rem_pio2+0x638>
   12ce0:	80bfffc4 	addi	r2,r16,-1
   12ce4:	1085883a 	add	r2,r2,r2
   12ce8:	1085883a 	add	r2,r2,r2
   12cec:	d885883a 	add	r2,sp,r2
   12cf0:	14807817 	ldw	r18,480(r2)
   12cf4:	9025d5fa 	srai	r18,r18,23
   12cf8:	003f5906 	br	12a60 <_gp+0xffff09fc>
   12cfc:	80bfffc4 	addi	r2,r16,-1
   12d00:	1085883a 	add	r2,r2,r2
   12d04:	1085883a 	add	r2,r2,r2
   12d08:	d885883a 	add	r2,sp,r2
   12d0c:	10807804 	addi	r2,r2,480
   12d10:	11000017 	ldw	r4,0(r2)
   12d14:	01402034 	movhi	r5,128
   12d18:	297fffc4 	addi	r5,r5,-1
   12d1c:	2148703a 	and	r4,r4,r5
   12d20:	11000015 	stw	r4,0(r2)
   12d24:	003f7706 	br	12b04 <_gp+0xffff0aa0>
   12d28:	180b883a 	mov	r5,r3
   12d2c:	1009883a 	mov	r4,r2
   12d30:	000d883a 	mov	r6,zero
   12d34:	01cff834 	movhi	r7,16352
   12d38:	d8c09915 	stw	r3,612(sp)
   12d3c:	d8c09a15 	stw	r3,616(sp)
   12d40:	d8809815 	stw	r2,608(sp)
   12d44:	0015fd80 	call	15fd8 <__gedf2>
   12d48:	d8c09917 	ldw	r3,612(sp)
   12d4c:	dac09a17 	ldw	r11,616(sp)
   12d50:	db009817 	ldw	r12,608(sp)
   12d54:	1000050e 	bge	r2,zero,12d6c <__kernel_rem_pio2+0x67c>
   12d58:	0025883a 	mov	r18,zero
   12d5c:	003f6b06 	br	12b0c <_gp+0xffff0aa8>
   12d60:	002b883a 	mov	r21,zero
   12d64:	0029883a 	mov	r20,zero
   12d68:	003eb706 	br	12848 <_gp+0xffff07e4>
   12d6c:	8c400044 	addi	r17,r17,1
   12d70:	0401960e 	bge	zero,r16,133cc <__kernel_rem_pio2+0xcdc>
   12d74:	04800084 	movi	r18,2
   12d78:	003f3c06 	br	12a6c <_gp+0xffff0a08>
   12d7c:	0027883a 	mov	r19,zero
   12d80:	003f5006 	br	12ac4 <_gp+0xffff0a60>
   12d84:	da008f17 	ldw	r8,572(sp)
   12d88:	a009883a 	mov	r4,r20
   12d8c:	580b883a 	mov	r5,r11
   12d90:	020dc83a 	sub	r6,zero,r8
   12d94:	dc808c15 	stw	r18,560(sp)
   12d98:	dd809417 	ldw	r22,592(sp)
   12d9c:	dc408e15 	stw	r17,568(sp)
   12da0:	001396c0 	call	1396c <scalbn>
   12da4:	1009883a 	mov	r4,r2
   12da8:	180b883a 	mov	r5,r3
   12dac:	000d883a 	mov	r6,zero
   12db0:	01d05c34 	movhi	r7,16752
   12db4:	1029883a 	mov	r20,r2
   12db8:	182f883a 	mov	r23,r3
   12dbc:	0015fd80 	call	15fd8 <__gedf2>
   12dc0:	10018b16 	blt	r2,zero,133f0 <__kernel_rem_pio2+0xd00>
   12dc4:	01cf9c34 	movhi	r7,15984
   12dc8:	000d883a 	mov	r6,zero
   12dcc:	a009883a 	mov	r4,r20
   12dd0:	b80b883a 	mov	r5,r23
   12dd4:	00161980 	call	16198 <__muldf3>
   12dd8:	180b883a 	mov	r5,r3
   12ddc:	1009883a 	mov	r4,r2
   12de0:	00172d40 	call	172d4 <__fixdfsi>
   12de4:	840d883a 	add	r6,r16,r16
   12de8:	318d883a 	add	r6,r6,r6
   12dec:	1009883a 	mov	r4,r2
   12df0:	d9a7883a 	add	r19,sp,r6
   12df4:	102b883a 	mov	r21,r2
   12df8:	001735c0 	call	1735c <__floatsidf>
   12dfc:	1009883a 	mov	r4,r2
   12e00:	180b883a 	mov	r5,r3
   12e04:	000d883a 	mov	r6,zero
   12e08:	01d05c34 	movhi	r7,16752
   12e0c:	00161980 	call	16198 <__muldf3>
   12e10:	a009883a 	mov	r4,r20
   12e14:	b80b883a 	mov	r5,r23
   12e18:	100d883a 	mov	r6,r2
   12e1c:	180f883a 	mov	r7,r3
   12e20:	0016a040 	call	16a04 <__subdf3>
   12e24:	180b883a 	mov	r5,r3
   12e28:	1009883a 	mov	r4,r2
   12e2c:	00172d40 	call	172d4 <__fixdfsi>
   12e30:	da008f17 	ldw	r8,572(sp)
   12e34:	84400044 	addi	r17,r16,1
   12e38:	8c47883a 	add	r3,r17,r17
   12e3c:	9cc07804 	addi	r19,r19,480
   12e40:	18c7883a 	add	r3,r3,r3
   12e44:	98800015 	stw	r2,0(r19)
   12e48:	d8c7883a 	add	r3,sp,r3
   12e4c:	42000604 	addi	r8,r8,24
   12e50:	da008f15 	stw	r8,572(sp)
   12e54:	1d407815 	stw	r21,480(r3)
   12e58:	d9808f17 	ldw	r6,572(sp)
   12e5c:	0009883a 	mov	r4,zero
   12e60:	014ffc34 	movhi	r5,16368
   12e64:	001396c0 	call	1396c <scalbn>
   12e68:	1029883a 	mov	r20,r2
   12e6c:	182b883a 	mov	r21,r3
   12e70:	88006e16 	blt	r17,zero,1302c <__kernel_rem_pio2+0x93c>
   12e74:	881090fa 	slli	r8,r17,3
   12e78:	d8c07804 	addi	r3,sp,480
   12e7c:	dc3ffe04 	addi	r16,sp,-8
   12e80:	da008d15 	stw	r8,564(sp)
   12e84:	d8808d17 	ldw	r2,564(sp)
   12e88:	8c51883a 	add	r8,r17,r17
   12e8c:	4211883a 	add	r8,r8,r8
   12e90:	d8a7883a 	add	r19,sp,r2
   12e94:	1a2f883a 	add	r23,r3,r8
   12e98:	9839883a 	mov	fp,r19
   12e9c:	b9000017 	ldw	r4,0(r23)
   12ea0:	e73ffe04 	addi	fp,fp,-8
   12ea4:	bdffff04 	addi	r23,r23,-4
   12ea8:	001735c0 	call	1735c <__floatsidf>
   12eac:	a00d883a 	mov	r6,r20
   12eb0:	a80f883a 	mov	r7,r21
   12eb4:	1009883a 	mov	r4,r2
   12eb8:	180b883a 	mov	r5,r3
   12ebc:	00161980 	call	16198 <__muldf3>
   12ec0:	a009883a 	mov	r4,r20
   12ec4:	a80b883a 	mov	r5,r21
   12ec8:	e0800215 	stw	r2,8(fp)
   12ecc:	e0c00315 	stw	r3,12(fp)
   12ed0:	000d883a 	mov	r6,zero
   12ed4:	01cf9c34 	movhi	r7,15984
   12ed8:	00161980 	call	16198 <__muldf3>
   12edc:	1029883a 	mov	r20,r2
   12ee0:	182b883a 	mov	r21,r3
   12ee4:	e43fed1e 	bne	fp,r16,12e9c <_gp+0xffff0e38>
   12ee8:	8a000044 	addi	r8,r17,1
   12eec:	0029883a 	mov	r20,zero
   12ef0:	4039883a 	mov	fp,r8
   12ef4:	dc408f15 	stw	r17,572(sp)
   12ef8:	b0004916 	blt	r22,zero,13020 <__kernel_rem_pio2+0x930>
   12efc:	a0004816 	blt	r20,zero,13020 <__kernel_rem_pio2+0x930>
   12f00:	040000b4 	movhi	r16,2
   12f04:	84268b04 	addi	r16,r16,-26068
   12f08:	982b883a 	mov	r21,r19
   12f0c:	0023883a 	mov	r17,zero
   12f10:	002f883a 	mov	r23,zero
   12f14:	0025883a 	mov	r18,zero
   12f18:	00000206 	br	12f24 <__kernel_rem_pio2+0x834>
   12f1c:	ad400204 	addi	r21,r21,8
   12f20:	a4800f16 	blt	r20,r18,12f60 <__kernel_rem_pio2+0x870>
   12f24:	81000017 	ldw	r4,0(r16)
   12f28:	81400117 	ldw	r5,4(r16)
   12f2c:	a9800017 	ldw	r6,0(r21)
   12f30:	a9c00117 	ldw	r7,4(r21)
   12f34:	94800044 	addi	r18,r18,1
   12f38:	84000204 	addi	r16,r16,8
   12f3c:	00161980 	call	16198 <__muldf3>
   12f40:	8809883a 	mov	r4,r17
   12f44:	b80b883a 	mov	r5,r23
   12f48:	100d883a 	mov	r6,r2
   12f4c:	180f883a 	mov	r7,r3
   12f50:	0014d380 	call	14d38 <__adddf3>
   12f54:	1023883a 	mov	r17,r2
   12f58:	182f883a 	mov	r23,r3
   12f5c:	b4bfef0e 	bge	r22,r18,12f1c <_gp+0xffff0eb8>
   12f60:	a00490fa 	slli	r2,r20,3
   12f64:	a5000044 	addi	r20,r20,1
   12f68:	9cfffe04 	addi	r19,r19,-8
   12f6c:	d885883a 	add	r2,sp,r2
   12f70:	10802804 	addi	r2,r2,160
   12f74:	14400015 	stw	r17,0(r2)
   12f78:	15c00115 	stw	r23,4(r2)
   12f7c:	a73fde1e 	bne	r20,fp,12ef8 <_gp+0xffff0e94>
   12f80:	da00a517 	ldw	r8,660(sp)
   12f84:	00800084 	movi	r2,2
   12f88:	dc408f17 	ldw	r17,572(sp)
   12f8c:	12007316 	blt	r2,r8,1315c <__kernel_rem_pio2+0xa6c>
   12f90:	02004816 	blt	zero,r8,130b4 <__kernel_rem_pio2+0x9c4>
   12f94:	4000141e 	bne	r8,zero,12fe8 <__kernel_rem_pio2+0x8f8>
   12f98:	da008d17 	ldw	r8,564(sp)
   12f9c:	d8802804 	addi	r2,sp,160
   12fa0:	0007883a 	mov	r3,zero
   12fa4:	1221883a 	add	r16,r2,r8
   12fa8:	04ffffc4 	movi	r19,-1
   12fac:	0005883a 	mov	r2,zero
   12fb0:	81800017 	ldw	r6,0(r16)
   12fb4:	81c00117 	ldw	r7,4(r16)
   12fb8:	1009883a 	mov	r4,r2
   12fbc:	180b883a 	mov	r5,r3
   12fc0:	8c7fffc4 	addi	r17,r17,-1
   12fc4:	0014d380 	call	14d38 <__adddf3>
   12fc8:	843ffe04 	addi	r16,r16,-8
   12fcc:	8cfff81e 	bne	r17,r19,12fb0 <_gp+0xffff0f4c>
   12fd0:	da008c17 	ldw	r8,560(sp)
   12fd4:	40000126 	beq	r8,zero,12fdc <__kernel_rem_pio2+0x8ec>
   12fd8:	18e0003c 	xorhi	r3,r3,32768
   12fdc:	da009017 	ldw	r8,576(sp)
   12fe0:	40800015 	stw	r2,0(r8)
   12fe4:	40c00115 	stw	r3,4(r8)
   12fe8:	da008e17 	ldw	r8,568(sp)
   12fec:	408001cc 	andi	r2,r8,7
   12ff0:	dfc0a417 	ldw	ra,656(sp)
   12ff4:	df00a317 	ldw	fp,652(sp)
   12ff8:	ddc0a217 	ldw	r23,648(sp)
   12ffc:	dd80a117 	ldw	r22,644(sp)
   13000:	dd40a017 	ldw	r21,640(sp)
   13004:	dd009f17 	ldw	r20,636(sp)
   13008:	dcc09e17 	ldw	r19,632(sp)
   1300c:	dc809d17 	ldw	r18,628(sp)
   13010:	dc409c17 	ldw	r17,624(sp)
   13014:	dc009b17 	ldw	r16,620(sp)
   13018:	dec0a504 	addi	sp,sp,660
   1301c:	f800283a 	ret
   13020:	0023883a 	mov	r17,zero
   13024:	002f883a 	mov	r23,zero
   13028:	003fcd06 	br	12f60 <_gp+0xffff0efc>
   1302c:	da00a517 	ldw	r8,660(sp)
   13030:	00800084 	movi	r2,2
   13034:	1200d216 	blt	r2,r8,13380 <__kernel_rem_pio2+0xc90>
   13038:	0200c016 	blt	zero,r8,1333c <__kernel_rem_pio2+0xc4c>
   1303c:	403fea1e 	bne	r8,zero,12fe8 <_gp+0xffff0f84>
   13040:	0005883a 	mov	r2,zero
   13044:	0007883a 	mov	r3,zero
   13048:	003fe106 	br	12fd0 <_gp+0xffff0f6c>
   1304c:	00c00044 	movi	r3,1
   13050:	003ecd06 	br	12b88 <_gp+0xffff0b24>
   13054:	2945883a 	add	r2,r5,r5
   13058:	da008f17 	ldw	r8,572(sp)
   1305c:	1085883a 	add	r2,r2,r2
   13060:	d885883a 	add	r2,sp,r2
   13064:	10807817 	ldw	r2,480(r2)
   13068:	423ffa04 	addi	r8,r8,-24
   1306c:	dc408e15 	stw	r17,568(sp)
   13070:	dc808c15 	stw	r18,560(sp)
   13074:	da008f15 	stw	r8,572(sp)
   13078:	dd809417 	ldw	r22,592(sp)
   1307c:	2823883a 	mov	r17,r5
   13080:	103f751e 	bne	r2,zero,12e58 <_gp+0xffff0df4>
   13084:	280490ba 	slli	r2,r5,2
   13088:	d8c07804 	addi	r3,sp,480
   1308c:	10bfff04 	addi	r2,r2,-4
   13090:	1885883a 	add	r2,r3,r2
   13094:	4007883a 	mov	r3,r8
   13098:	10bfff04 	addi	r2,r2,-4
   1309c:	11000117 	ldw	r4,4(r2)
   130a0:	8c7fffc4 	addi	r17,r17,-1
   130a4:	18fffa04 	addi	r3,r3,-24
   130a8:	203ffb26 	beq	r4,zero,13098 <_gp+0xffff1034>
   130ac:	d8c08f15 	stw	r3,572(sp)
   130b0:	003f6906 	br	12e58 <_gp+0xffff0df4>
   130b4:	da008d17 	ldw	r8,564(sp)
   130b8:	d8802804 	addi	r2,sp,160
   130bc:	dcc02604 	addi	r19,sp,152
   130c0:	1221883a 	add	r16,r2,r8
   130c4:	0007883a 	mov	r3,zero
   130c8:	0005883a 	mov	r2,zero
   130cc:	81800017 	ldw	r6,0(r16)
   130d0:	81c00117 	ldw	r7,4(r16)
   130d4:	1009883a 	mov	r4,r2
   130d8:	843ffe04 	addi	r16,r16,-8
   130dc:	180b883a 	mov	r5,r3
   130e0:	0014d380 	call	14d38 <__adddf3>
   130e4:	84fff91e 	bne	r16,r19,130cc <_gp+0xffff1068>
   130e8:	da008c17 	ldw	r8,560(sp)
   130ec:	d9002817 	ldw	r4,160(sp)
   130f0:	d9402917 	ldw	r5,164(sp)
   130f4:	40009726 	beq	r8,zero,13354 <__kernel_rem_pio2+0xc64>
   130f8:	da009017 	ldw	r8,576(sp)
   130fc:	19a0003c 	xorhi	r6,r3,32768
   13100:	180f883a 	mov	r7,r3
   13104:	41800115 	stw	r6,4(r8)
   13108:	40800015 	stw	r2,0(r8)
   1310c:	100d883a 	mov	r6,r2
   13110:	0016a040 	call	16a04 <__subdf3>
   13114:	04400c0e 	bge	zero,r17,13148 <__kernel_rem_pio2+0xa58>
   13118:	dc002a04 	addi	r16,sp,168
   1311c:	04c00044 	movi	r19,1
   13120:	81800017 	ldw	r6,0(r16)
   13124:	81c00117 	ldw	r7,4(r16)
   13128:	1009883a 	mov	r4,r2
   1312c:	180b883a 	mov	r5,r3
   13130:	9cc00044 	addi	r19,r19,1
   13134:	0014d380 	call	14d38 <__adddf3>
   13138:	84000204 	addi	r16,r16,8
   1313c:	8cfff80e 	bge	r17,r19,13120 <_gp+0xffff10bc>
   13140:	da008c17 	ldw	r8,560(sp)
   13144:	40000126 	beq	r8,zero,1314c <__kernel_rem_pio2+0xa5c>
   13148:	18e0003c 	xorhi	r3,r3,32768
   1314c:	da009017 	ldw	r8,576(sp)
   13150:	40800215 	stw	r2,8(r8)
   13154:	40c00315 	stw	r3,12(r8)
   13158:	003fa306 	br	12fe8 <_gp+0xffff0f84>
   1315c:	da00a517 	ldw	r8,660(sp)
   13160:	008000c4 	movi	r2,3
   13164:	40bfa01e 	bne	r8,r2,12fe8 <_gp+0xffff0f84>
   13168:	0440880e 	bge	zero,r17,1338c <__kernel_rem_pio2+0xc9c>
   1316c:	da008d17 	ldw	r8,564(sp)
   13170:	882690fa 	slli	r19,r17,3
   13174:	dd402804 	addi	r21,sp,160
   13178:	da05883a 	add	r2,sp,r8
   1317c:	10802804 	addi	r2,r2,160
   13180:	15c00017 	ldw	r23,0(r2)
   13184:	15800117 	ldw	r22,4(r2)
   13188:	9829883a 	mov	r20,r19
   1318c:	9cfffe04 	addi	r19,r19,-8
   13190:	ace7883a 	add	r19,r21,r19
   13194:	ad29883a 	add	r20,r21,r20
   13198:	dac02604 	addi	r11,sp,152
   1319c:	8811883a 	mov	r8,r17
   131a0:	9c400017 	ldw	r17,0(r19)
   131a4:	9f000117 	ldw	fp,4(r19)
   131a8:	b809883a 	mov	r4,r23
   131ac:	b00b883a 	mov	r5,r22
   131b0:	880d883a 	mov	r6,r17
   131b4:	e00f883a 	mov	r7,fp
   131b8:	da009815 	stw	r8,608(sp)
   131bc:	dac09a15 	stw	r11,616(sp)
   131c0:	0014d380 	call	14d38 <__adddf3>
   131c4:	8809883a 	mov	r4,r17
   131c8:	e00b883a 	mov	r5,fp
   131cc:	100d883a 	mov	r6,r2
   131d0:	180f883a 	mov	r7,r3
   131d4:	1025883a 	mov	r18,r2
   131d8:	1821883a 	mov	r16,r3
   131dc:	0016a040 	call	16a04 <__subdf3>
   131e0:	b809883a 	mov	r4,r23
   131e4:	b00b883a 	mov	r5,r22
   131e8:	100d883a 	mov	r6,r2
   131ec:	180f883a 	mov	r7,r3
   131f0:	0014d380 	call	14d38 <__adddf3>
   131f4:	dac09a17 	ldw	r11,616(sp)
   131f8:	a0800015 	stw	r2,0(r20)
   131fc:	a0c00115 	stw	r3,4(r20)
   13200:	9c800015 	stw	r18,0(r19)
   13204:	9c000115 	stw	r16,4(r19)
   13208:	9cfffe04 	addi	r19,r19,-8
   1320c:	a53ffe04 	addi	r20,r20,-8
   13210:	902f883a 	mov	r23,r18
   13214:	802d883a 	mov	r22,r16
   13218:	da009817 	ldw	r8,608(sp)
   1321c:	9affe01e 	bne	r19,r11,131a0 <_gp+0xffff113c>
   13220:	00800044 	movi	r2,1
   13224:	1200590e 	bge	r2,r8,1338c <__kernel_rem_pio2+0xc9c>
   13228:	402290fa 	slli	r17,r8,3
   1322c:	da008d17 	ldw	r8,564(sp)
   13230:	8c3ffe04 	addi	r16,r17,-8
   13234:	da05883a 	add	r2,sp,r8
   13238:	10802804 	addi	r2,r2,160
   1323c:	15800017 	ldw	r22,0(r2)
   13240:	15000117 	ldw	r20,4(r2)
   13244:	ac63883a 	add	r17,r21,r17
   13248:	ac21883a 	add	r16,r21,r16
   1324c:	8827883a 	mov	r19,r17
   13250:	8811883a 	mov	r8,r17
   13254:	84400017 	ldw	r17,0(r16)
   13258:	87000117 	ldw	fp,4(r16)
   1325c:	b00d883a 	mov	r6,r22
   13260:	a00f883a 	mov	r7,r20
   13264:	8809883a 	mov	r4,r17
   13268:	e00b883a 	mov	r5,fp
   1326c:	da009815 	stw	r8,608(sp)
   13270:	0014d380 	call	14d38 <__adddf3>
   13274:	8809883a 	mov	r4,r17
   13278:	e00b883a 	mov	r5,fp
   1327c:	100d883a 	mov	r6,r2
   13280:	180f883a 	mov	r7,r3
   13284:	102f883a 	mov	r23,r2
   13288:	1825883a 	mov	r18,r3
   1328c:	0016a040 	call	16a04 <__subdf3>
   13290:	b00d883a 	mov	r6,r22
   13294:	a00f883a 	mov	r7,r20
   13298:	1009883a 	mov	r4,r2
   1329c:	180b883a 	mov	r5,r3
   132a0:	0014d380 	call	14d38 <__adddf3>
   132a4:	98800015 	stw	r2,0(r19)
   132a8:	98c00115 	stw	r3,4(r19)
   132ac:	85c00015 	stw	r23,0(r16)
   132b0:	84800115 	stw	r18,4(r16)
   132b4:	843ffe04 	addi	r16,r16,-8
   132b8:	9cfffe04 	addi	r19,r19,-8
   132bc:	b82d883a 	mov	r22,r23
   132c0:	9029883a 	mov	r20,r18
   132c4:	da009817 	ldw	r8,608(sp)
   132c8:	ac3fe21e 	bne	r21,r16,13254 <_gp+0xffff11f0>
   132cc:	4023883a 	mov	r17,r8
   132d0:	dc002a04 	addi	r16,sp,168
   132d4:	0005883a 	mov	r2,zero
   132d8:	0007883a 	mov	r3,zero
   132dc:	89800017 	ldw	r6,0(r17)
   132e0:	89c00117 	ldw	r7,4(r17)
   132e4:	1009883a 	mov	r4,r2
   132e8:	8c7ffe04 	addi	r17,r17,-8
   132ec:	180b883a 	mov	r5,r3
   132f0:	0014d380 	call	14d38 <__adddf3>
   132f4:	8c3ff91e 	bne	r17,r16,132dc <_gp+0xffff1278>
   132f8:	da008c17 	ldw	r8,560(sp)
   132fc:	40002726 	beq	r8,zero,1339c <__kernel_rem_pio2+0xcac>
   13300:	d9002b17 	ldw	r4,172(sp)
   13304:	d9402917 	ldw	r5,164(sp)
   13308:	d9802a17 	ldw	r6,168(sp)
   1330c:	da009017 	ldw	r8,576(sp)
   13310:	d9c02817 	ldw	r7,160(sp)
   13314:	2960003c 	xorhi	r5,r5,32768
   13318:	2120003c 	xorhi	r4,r4,32768
   1331c:	18e0003c 	xorhi	r3,r3,32768
   13320:	41c00015 	stw	r7,0(r8)
   13324:	41400115 	stw	r5,4(r8)
   13328:	41800215 	stw	r6,8(r8)
   1332c:	41000315 	stw	r4,12(r8)
   13330:	40800415 	stw	r2,16(r8)
   13334:	40c00515 	stw	r3,20(r8)
   13338:	003f2b06 	br	12fe8 <_gp+0xffff0f84>
   1333c:	da008c17 	ldw	r8,560(sp)
   13340:	0005883a 	mov	r2,zero
   13344:	0007883a 	mov	r3,zero
   13348:	d9002817 	ldw	r4,160(sp)
   1334c:	d9402917 	ldw	r5,164(sp)
   13350:	403f691e 	bne	r8,zero,130f8 <_gp+0xffff1094>
   13354:	da009017 	ldw	r8,576(sp)
   13358:	100d883a 	mov	r6,r2
   1335c:	180f883a 	mov	r7,r3
   13360:	40800015 	stw	r2,0(r8)
   13364:	40c00115 	stw	r3,4(r8)
   13368:	0016a040 	call	16a04 <__subdf3>
   1336c:	047f6a16 	blt	zero,r17,13118 <_gp+0xffff10b4>
   13370:	da009017 	ldw	r8,576(sp)
   13374:	40800215 	stw	r2,8(r8)
   13378:	40c00315 	stw	r3,12(r8)
   1337c:	003f1a06 	br	12fe8 <_gp+0xffff0f84>
   13380:	da00a517 	ldw	r8,660(sp)
   13384:	008000c4 	movi	r2,3
   13388:	40bf171e 	bne	r8,r2,12fe8 <_gp+0xffff0f84>
   1338c:	da008c17 	ldw	r8,560(sp)
   13390:	0005883a 	mov	r2,zero
   13394:	0007883a 	mov	r3,zero
   13398:	403fd91e 	bne	r8,zero,13300 <_gp+0xffff129c>
   1339c:	da009017 	ldw	r8,576(sp)
   133a0:	d9802817 	ldw	r6,160(sp)
   133a4:	d9402a17 	ldw	r5,168(sp)
   133a8:	d9002b17 	ldw	r4,172(sp)
   133ac:	41800015 	stw	r6,0(r8)
   133b0:	d9802917 	ldw	r6,164(sp)
   133b4:	41400215 	stw	r5,8(r8)
   133b8:	41000315 	stw	r4,12(r8)
   133bc:	41800115 	stw	r6,4(r8)
   133c0:	40800415 	stw	r2,16(r8)
   133c4:	40c00515 	stw	r3,20(r8)
   133c8:	003f0706 	br	12fe8 <_gp+0xffff0f84>
   133cc:	a00d883a 	mov	r6,r20
   133d0:	580f883a 	mov	r7,r11
   133d4:	0009883a 	mov	r4,zero
   133d8:	014ffc34 	movhi	r5,16368
   133dc:	0016a040 	call	16a04 <__subdf3>
   133e0:	1029883a 	mov	r20,r2
   133e4:	1817883a 	mov	r11,r3
   133e8:	04800084 	movi	r18,2
   133ec:	003dc706 	br	12b0c <_gp+0xffff0aa8>
   133f0:	840d883a 	add	r6,r16,r16
   133f4:	318d883a 	add	r6,r6,r6
   133f8:	d9a3883a 	add	r17,sp,r6
   133fc:	a009883a 	mov	r4,r20
   13400:	b80b883a 	mov	r5,r23
   13404:	8c407804 	addi	r17,r17,480
   13408:	00172d40 	call	172d4 <__fixdfsi>
   1340c:	88800015 	stw	r2,0(r17)
   13410:	8023883a 	mov	r17,r16
   13414:	003e9006 	br	12e58 <_gp+0xffff0df4>
   13418:	d8009215 	stw	zero,584(sp)
   1341c:	003cd206 	br	12768 <_gp+0xffff0704>

00013420 <__kernel_sin>:
   13420:	00a00034 	movhi	r2,32768
   13424:	defff404 	addi	sp,sp,-48
   13428:	10bfffc4 	addi	r2,r2,-1
   1342c:	00cf9034 	movhi	r3,15936
   13430:	ddc00915 	stw	r23,36(sp)
   13434:	dd800815 	stw	r22,32(sp)
   13438:	dc400315 	stw	r17,12(sp)
   1343c:	dc000215 	stw	r16,8(sp)
   13440:	dfc00b15 	stw	ra,44(sp)
   13444:	df000a15 	stw	fp,40(sp)
   13448:	dd400715 	stw	r21,28(sp)
   1344c:	dd000615 	stw	r20,24(sp)
   13450:	dcc00515 	stw	r19,20(sp)
   13454:	dc800415 	stw	r18,16(sp)
   13458:	2884703a 	and	r2,r5,r2
   1345c:	18ffffc4 	addi	r3,r3,-1
   13460:	2821883a 	mov	r16,r5
   13464:	2023883a 	mov	r17,r4
   13468:	302f883a 	mov	r23,r6
   1346c:	382d883a 	mov	r22,r7
   13470:	18800216 	blt	r3,r2,1347c <__kernel_sin+0x5c>
   13474:	00172d40 	call	172d4 <__fixdfsi>
   13478:	10009826 	beq	r2,zero,136dc <__kernel_sin+0x2bc>
   1347c:	8809883a 	mov	r4,r17
   13480:	800b883a 	mov	r5,r16
   13484:	880d883a 	mov	r6,r17
   13488:	800f883a 	mov	r7,r16
   1348c:	00161980 	call	16198 <__muldf3>
   13490:	1009883a 	mov	r4,r2
   13494:	180b883a 	mov	r5,r3
   13498:	880d883a 	mov	r6,r17
   1349c:	800f883a 	mov	r7,r16
   134a0:	1027883a 	mov	r19,r2
   134a4:	1825883a 	mov	r18,r3
   134a8:	00161980 	call	16198 <__muldf3>
   134ac:	0196b434 	movhi	r6,23248
   134b0:	01cf79b4 	movhi	r7,15846
   134b4:	9809883a 	mov	r4,r19
   134b8:	900b883a 	mov	r5,r18
   134bc:	31b55f04 	addi	r6,r6,-10884
   134c0:	39f64e84 	addi	r7,r7,-9926
   134c4:	102b883a 	mov	r21,r2
   134c8:	1829883a 	mov	r20,r3
   134cc:	00161980 	call	16198 <__muldf3>
   134d0:	01a28b34 	movhi	r6,35372
   134d4:	01cf96f4 	movhi	r7,15963
   134d8:	1009883a 	mov	r4,r2
   134dc:	180b883a 	mov	r5,r3
   134e0:	31a73ac4 	addi	r6,r6,-25365
   134e4:	39f97984 	addi	r7,r7,-6682
   134e8:	0016a040 	call	16a04 <__subdf3>
   134ec:	1009883a 	mov	r4,r2
   134f0:	180b883a 	mov	r5,r3
   134f4:	980d883a 	mov	r6,r19
   134f8:	900f883a 	mov	r7,r18
   134fc:	00161980 	call	16198 <__muldf3>
   13500:	0195ecb4 	movhi	r6,22450
   13504:	01cfb1f4 	movhi	r7,16071
   13508:	1009883a 	mov	r4,r2
   1350c:	180b883a 	mov	r5,r3
   13510:	31bf9f44 	addi	r6,r6,-387
   13514:	39c778c4 	addi	r7,r7,7651
   13518:	0014d380 	call	14d38 <__adddf3>
   1351c:	1009883a 	mov	r4,r2
   13520:	180b883a 	mov	r5,r3
   13524:	980d883a 	mov	r6,r19
   13528:	900f883a 	mov	r7,r18
   1352c:	00161980 	call	16198 <__muldf3>
   13530:	01867074 	movhi	r6,6593
   13534:	01cfcab4 	movhi	r7,16170
   13538:	1009883a 	mov	r4,r2
   1353c:	180b883a 	mov	r5,r3
   13540:	31987544 	addi	r6,r6,25045
   13544:	39c06804 	addi	r7,r7,416
   13548:	0016a040 	call	16a04 <__subdf3>
   1354c:	1009883a 	mov	r4,r2
   13550:	180b883a 	mov	r5,r3
   13554:	980d883a 	mov	r6,r19
   13558:	900f883a 	mov	r7,r18
   1355c:	00161980 	call	16198 <__muldf3>
   13560:	01844474 	movhi	r6,4369
   13564:	01cfe074 	movhi	r7,16257
   13568:	1009883a 	mov	r4,r2
   1356c:	180b883a 	mov	r5,r3
   13570:	31be2984 	addi	r6,r6,-1882
   13574:	39c44444 	addi	r7,r7,4369
   13578:	0014d380 	call	14d38 <__adddf3>
   1357c:	d9000c17 	ldw	r4,48(sp)
   13580:	1839883a 	mov	fp,r3
   13584:	20003e26 	beq	r4,zero,13680 <__kernel_sin+0x260>
   13588:	b809883a 	mov	r4,r23
   1358c:	b00b883a 	mov	r5,r22
   13590:	000d883a 	mov	r6,zero
   13594:	01cff834 	movhi	r7,16352
   13598:	d8800015 	stw	r2,0(sp)
   1359c:	00161980 	call	16198 <__muldf3>
   135a0:	da000017 	ldw	r8,0(sp)
   135a4:	a809883a 	mov	r4,r21
   135a8:	a00b883a 	mov	r5,r20
   135ac:	400d883a 	mov	r6,r8
   135b0:	e00f883a 	mov	r7,fp
   135b4:	d8c00115 	stw	r3,4(sp)
   135b8:	d8800015 	stw	r2,0(sp)
   135bc:	00161980 	call	16198 <__muldf3>
   135c0:	da800017 	ldw	r10,0(sp)
   135c4:	da400117 	ldw	r9,4(sp)
   135c8:	100d883a 	mov	r6,r2
   135cc:	5009883a 	mov	r4,r10
   135d0:	480b883a 	mov	r5,r9
   135d4:	180f883a 	mov	r7,r3
   135d8:	0016a040 	call	16a04 <__subdf3>
   135dc:	980d883a 	mov	r6,r19
   135e0:	900f883a 	mov	r7,r18
   135e4:	1009883a 	mov	r4,r2
   135e8:	180b883a 	mov	r5,r3
   135ec:	00161980 	call	16198 <__muldf3>
   135f0:	1009883a 	mov	r4,r2
   135f4:	180b883a 	mov	r5,r3
   135f8:	b80d883a 	mov	r6,r23
   135fc:	b00f883a 	mov	r7,r22
   13600:	0016a040 	call	16a04 <__subdf3>
   13604:	01955574 	movhi	r6,21845
   13608:	01cff174 	movhi	r7,16325
   1360c:	a809883a 	mov	r4,r21
   13610:	a00b883a 	mov	r5,r20
   13614:	31955244 	addi	r6,r6,21833
   13618:	39d55544 	addi	r7,r7,21845
   1361c:	1027883a 	mov	r19,r2
   13620:	1825883a 	mov	r18,r3
   13624:	00161980 	call	16198 <__muldf3>
   13628:	9809883a 	mov	r4,r19
   1362c:	900b883a 	mov	r5,r18
   13630:	100d883a 	mov	r6,r2
   13634:	180f883a 	mov	r7,r3
   13638:	0014d380 	call	14d38 <__adddf3>
   1363c:	8809883a 	mov	r4,r17
   13640:	800b883a 	mov	r5,r16
   13644:	100d883a 	mov	r6,r2
   13648:	180f883a 	mov	r7,r3
   1364c:	0016a040 	call	16a04 <__subdf3>
   13650:	dfc00b17 	ldw	ra,44(sp)
   13654:	df000a17 	ldw	fp,40(sp)
   13658:	ddc00917 	ldw	r23,36(sp)
   1365c:	dd800817 	ldw	r22,32(sp)
   13660:	dd400717 	ldw	r21,28(sp)
   13664:	dd000617 	ldw	r20,24(sp)
   13668:	dcc00517 	ldw	r19,20(sp)
   1366c:	dc800417 	ldw	r18,16(sp)
   13670:	dc400317 	ldw	r17,12(sp)
   13674:	dc000217 	ldw	r16,8(sp)
   13678:	dec00c04 	addi	sp,sp,48
   1367c:	f800283a 	ret
   13680:	9809883a 	mov	r4,r19
   13684:	900b883a 	mov	r5,r18
   13688:	100d883a 	mov	r6,r2
   1368c:	180f883a 	mov	r7,r3
   13690:	00161980 	call	16198 <__muldf3>
   13694:	01955574 	movhi	r6,21845
   13698:	01cff174 	movhi	r7,16325
   1369c:	1009883a 	mov	r4,r2
   136a0:	180b883a 	mov	r5,r3
   136a4:	31955244 	addi	r6,r6,21833
   136a8:	39d55544 	addi	r7,r7,21845
   136ac:	0016a040 	call	16a04 <__subdf3>
   136b0:	a80d883a 	mov	r6,r21
   136b4:	a00f883a 	mov	r7,r20
   136b8:	1009883a 	mov	r4,r2
   136bc:	180b883a 	mov	r5,r3
   136c0:	00161980 	call	16198 <__muldf3>
   136c4:	1009883a 	mov	r4,r2
   136c8:	180b883a 	mov	r5,r3
   136cc:	880d883a 	mov	r6,r17
   136d0:	800f883a 	mov	r7,r16
   136d4:	0014d380 	call	14d38 <__adddf3>
   136d8:	003fdd06 	br	13650 <_gp+0xffff15ec>
   136dc:	8805883a 	mov	r2,r17
   136e0:	8007883a 	mov	r3,r16
   136e4:	003fda06 	br	13650 <_gp+0xffff15ec>

000136e8 <fabs>:
   136e8:	00e00034 	movhi	r3,32768
   136ec:	18ffffc4 	addi	r3,r3,-1
   136f0:	2005883a 	mov	r2,r4
   136f4:	28c6703a 	and	r3,r5,r3
   136f8:	f800283a 	ret

000136fc <floor>:
   136fc:	defff904 	addi	sp,sp,-28
   13700:	dc800215 	stw	r18,8(sp)
   13704:	2825d53a 	srai	r18,r5,20
   13708:	dd000415 	stw	r20,16(sp)
   1370c:	dcc00315 	stw	r19,12(sp)
   13710:	9481ffcc 	andi	r18,r18,2047
   13714:	dc400115 	stw	r17,4(sp)
   13718:	dc000015 	stw	r16,0(sp)
   1371c:	dfc00615 	stw	ra,24(sp)
   13720:	dd400515 	stw	r21,20(sp)
   13724:	94ff0044 	addi	r19,r18,-1023
   13728:	018004c4 	movi	r6,19
   1372c:	2821883a 	mov	r16,r5
   13730:	2005883a 	mov	r2,r4
   13734:	280f883a 	mov	r7,r5
   13738:	2829883a 	mov	r20,r5
   1373c:	2023883a 	mov	r17,r4
   13740:	34c01916 	blt	r6,r19,137a8 <floor+0xac>
   13744:	98003d16 	blt	r19,zero,1383c <floor+0x140>
   13748:	04800434 	movhi	r18,16
   1374c:	94bfffc4 	addi	r18,r18,-1
   13750:	94e5d83a 	sra	r18,r18,r19
   13754:	914c703a 	and	r6,r18,r5
   13758:	310cb03a 	or	r6,r6,r4
   1375c:	30001626 	beq	r6,zero,137b8 <floor+0xbc>
   13760:	01a20034 	movhi	r6,34816
   13764:	01df8e34 	movhi	r7,32312
   13768:	319d6704 	addi	r6,r6,30108
   1376c:	39f90f04 	addi	r7,r7,-7108
   13770:	0014d380 	call	14d38 <__adddf3>
   13774:	1009883a 	mov	r4,r2
   13778:	180b883a 	mov	r5,r3
   1377c:	000d883a 	mov	r6,zero
   13780:	000f883a 	mov	r7,zero
   13784:	0015fd80 	call	15fd8 <__gedf2>
   13788:	0080040e 	bge	zero,r2,1379c <floor+0xa0>
   1378c:	80003d16 	blt	r16,zero,13884 <floor+0x188>
   13790:	04a0303a 	nor	r16,zero,r18
   13794:	a420703a 	and	r16,r20,r16
   13798:	0023883a 	mov	r17,zero
   1379c:	8805883a 	mov	r2,r17
   137a0:	8007883a 	mov	r3,r16
   137a4:	00000506 	br	137bc <floor+0xc0>
   137a8:	01800cc4 	movi	r6,51
   137ac:	34c00c0e 	bge	r6,r19,137e0 <floor+0xe4>
   137b0:	01810004 	movi	r6,1024
   137b4:	99803026 	beq	r19,r6,13878 <floor+0x17c>
   137b8:	3807883a 	mov	r3,r7
   137bc:	dfc00617 	ldw	ra,24(sp)
   137c0:	dd400517 	ldw	r21,20(sp)
   137c4:	dd000417 	ldw	r20,16(sp)
   137c8:	dcc00317 	ldw	r19,12(sp)
   137cc:	dc800217 	ldw	r18,8(sp)
   137d0:	dc400117 	ldw	r17,4(sp)
   137d4:	dc000017 	ldw	r16,0(sp)
   137d8:	dec00704 	addi	sp,sp,28
   137dc:	f800283a 	ret
   137e0:	01bfffc4 	movi	r6,-1
   137e4:	957efb44 	addi	r21,r18,-1043
   137e8:	356ad83a 	srl	r21,r6,r21
   137ec:	a90c703a 	and	r6,r21,r4
   137f0:	303ff126 	beq	r6,zero,137b8 <_gp+0xffff1754>
   137f4:	01a20034 	movhi	r6,34816
   137f8:	01df8e34 	movhi	r7,32312
   137fc:	319d6704 	addi	r6,r6,30108
   13800:	39f90f04 	addi	r7,r7,-7108
   13804:	0014d380 	call	14d38 <__adddf3>
   13808:	1009883a 	mov	r4,r2
   1380c:	180b883a 	mov	r5,r3
   13810:	000d883a 	mov	r6,zero
   13814:	000f883a 	mov	r7,zero
   13818:	0015fd80 	call	15fd8 <__gedf2>
   1381c:	00bfdf0e 	bge	zero,r2,1379c <_gp+0xffff1738>
   13820:	80001c16 	blt	r16,zero,13894 <floor+0x198>
   13824:	056a303a 	nor	r21,zero,r21
   13828:	a021883a 	mov	r16,r20
   1382c:	8d62703a 	and	r17,r17,r21
   13830:	8805883a 	mov	r2,r17
   13834:	8007883a 	mov	r3,r16
   13838:	003fe006 	br	137bc <_gp+0xffff1758>
   1383c:	01a20034 	movhi	r6,34816
   13840:	01df8e34 	movhi	r7,32312
   13844:	319d6704 	addi	r6,r6,30108
   13848:	39f90f04 	addi	r7,r7,-7108
   1384c:	0014d380 	call	14d38 <__adddf3>
   13850:	1009883a 	mov	r4,r2
   13854:	180b883a 	mov	r5,r3
   13858:	000d883a 	mov	r6,zero
   1385c:	000f883a 	mov	r7,zero
   13860:	0015fd80 	call	15fd8 <__gedf2>
   13864:	00bfcd0e 	bge	zero,r2,1379c <_gp+0xffff1738>
   13868:	80001516 	blt	r16,zero,138c0 <floor+0x1c4>
   1386c:	0023883a 	mov	r17,zero
   13870:	0021883a 	mov	r16,zero
   13874:	003fc906 	br	1379c <_gp+0xffff1738>
   13878:	200d883a 	mov	r6,r4
   1387c:	0014d380 	call	14d38 <__adddf3>
   13880:	003fce06 	br	137bc <_gp+0xffff1758>
   13884:	00800434 	movhi	r2,16
   13888:	14e7d83a 	sra	r19,r2,r19
   1388c:	84e9883a 	add	r20,r16,r19
   13890:	003fbf06 	br	13790 <_gp+0xffff172c>
   13894:	00800504 	movi	r2,20
   13898:	98801326 	beq	r19,r2,138e8 <floor+0x1ec>
   1389c:	00810cc4 	movi	r2,1075
   138a0:	14a5c83a 	sub	r18,r2,r18
   138a4:	00800044 	movi	r2,1
   138a8:	1484983a 	sll	r2,r2,r18
   138ac:	1445883a 	add	r2,r2,r17
   138b0:	14400b2e 	bgeu	r2,r17,138e0 <floor+0x1e4>
   138b4:	85000044 	addi	r20,r16,1
   138b8:	1023883a 	mov	r17,r2
   138bc:	003fd906 	br	13824 <_gp+0xffff17c0>
   138c0:	00a00034 	movhi	r2,32768
   138c4:	10bfffc4 	addi	r2,r2,-1
   138c8:	8084703a 	and	r2,r16,r2
   138cc:	1462b03a 	or	r17,r2,r17
   138d0:	883fb226 	beq	r17,zero,1379c <_gp+0xffff1738>
   138d4:	0023883a 	mov	r17,zero
   138d8:	042ffc34 	movhi	r16,49136
   138dc:	003faf06 	br	1379c <_gp+0xffff1738>
   138e0:	1023883a 	mov	r17,r2
   138e4:	003fcf06 	br	13824 <_gp+0xffff17c0>
   138e8:	85000044 	addi	r20,r16,1
   138ec:	003fcd06 	br	13824 <_gp+0xffff17c0>

000138f0 <__fpclassifyd>:
   138f0:	00a00034 	movhi	r2,32768
   138f4:	10bfffc4 	addi	r2,r2,-1
   138f8:	2884703a 	and	r2,r5,r2
   138fc:	10000726 	beq	r2,zero,1391c <__fpclassifyd+0x2c>
   13900:	00fffc34 	movhi	r3,65520
   13904:	019ff834 	movhi	r6,32736
   13908:	28c7883a 	add	r3,r5,r3
   1390c:	31bfffc4 	addi	r6,r6,-1
   13910:	30c00536 	bltu	r6,r3,13928 <__fpclassifyd+0x38>
   13914:	00800104 	movi	r2,4
   13918:	f800283a 	ret
   1391c:	2000021e 	bne	r4,zero,13928 <__fpclassifyd+0x38>
   13920:	00800084 	movi	r2,2
   13924:	f800283a 	ret
   13928:	00dffc34 	movhi	r3,32752
   1392c:	019ff834 	movhi	r6,32736
   13930:	28cb883a 	add	r5,r5,r3
   13934:	31bfffc4 	addi	r6,r6,-1
   13938:	317ff62e 	bgeu	r6,r5,13914 <_gp+0xffff18b0>
   1393c:	01400434 	movhi	r5,16
   13940:	297fffc4 	addi	r5,r5,-1
   13944:	28800236 	bltu	r5,r2,13950 <__fpclassifyd+0x60>
   13948:	008000c4 	movi	r2,3
   1394c:	f800283a 	ret
   13950:	10c00226 	beq	r2,r3,1395c <__fpclassifyd+0x6c>
   13954:	0005883a 	mov	r2,zero
   13958:	f800283a 	ret
   1395c:	2005003a 	cmpeq	r2,r4,zero
   13960:	f800283a 	ret

00013964 <matherr>:
   13964:	0005883a 	mov	r2,zero
   13968:	f800283a 	ret

0001396c <scalbn>:
   1396c:	2a1ffc2c 	andhi	r8,r5,32752
   13970:	4011d53a 	srai	r8,r8,20
   13974:	defffe04 	addi	sp,sp,-8
   13978:	dc000015 	stw	r16,0(sp)
   1397c:	dfc00115 	stw	ra,4(sp)
   13980:	280f883a 	mov	r7,r5
   13984:	2015883a 	mov	r10,r4
   13988:	3021883a 	mov	r16,r6
   1398c:	4000251e 	bne	r8,zero,13a24 <scalbn+0xb8>
   13990:	00a00034 	movhi	r2,32768
   13994:	10bfffc4 	addi	r2,r2,-1
   13998:	2884703a 	and	r2,r5,r2
   1399c:	1104b03a 	or	r2,r2,r4
   139a0:	10003126 	beq	r2,zero,13a68 <scalbn+0xfc>
   139a4:	01d0d434 	movhi	r7,17232
   139a8:	000d883a 	mov	r6,zero
   139ac:	00161980 	call	16198 <__muldf3>
   139b0:	013ffff4 	movhi	r4,65535
   139b4:	210f2c04 	addi	r4,r4,15536
   139b8:	1015883a 	mov	r10,r2
   139bc:	180f883a 	mov	r7,r3
   139c0:	81002f16 	blt	r16,r4,13a80 <scalbn+0x114>
   139c4:	1a5ffc2c 	andhi	r9,r3,32752
   139c8:	4813d53a 	srai	r9,r9,20
   139cc:	0081ff84 	movi	r2,2046
   139d0:	180d883a 	mov	r6,r3
   139d4:	4a3ff284 	addi	r8,r9,-54
   139d8:	4411883a 	add	r8,r8,r16
   139dc:	1200170e 	bge	r2,r8,13a3c <scalbn+0xd0>
   139e0:	01220034 	movhi	r4,34816
   139e4:	015f8e34 	movhi	r5,32312
   139e8:	500d883a 	mov	r6,r10
   139ec:	211d6704 	addi	r4,r4,30108
   139f0:	29790f04 	addi	r5,r5,-7108
   139f4:	0013b380 	call	13b38 <copysign>
   139f8:	01a20034 	movhi	r6,34816
   139fc:	01df8e34 	movhi	r7,32312
   13a00:	1009883a 	mov	r4,r2
   13a04:	180b883a 	mov	r5,r3
   13a08:	319d6704 	addi	r6,r6,30108
   13a0c:	39f90f04 	addi	r7,r7,-7108
   13a10:	00161980 	call	16198 <__muldf3>
   13a14:	dfc00117 	ldw	ra,4(sp)
   13a18:	dc000017 	ldw	r16,0(sp)
   13a1c:	dec00204 	addi	sp,sp,8
   13a20:	f800283a 	ret
   13a24:	0081ffc4 	movi	r2,2047
   13a28:	280d883a 	mov	r6,r5
   13a2c:	40803126 	beq	r8,r2,13af4 <scalbn+0x188>
   13a30:	4411883a 	add	r8,r8,r16
   13a34:	0081ff84 	movi	r2,2046
   13a38:	123fe916 	blt	r2,r8,139e0 <_gp+0xffff197c>
   13a3c:	02001b0e 	bge	zero,r8,13aac <scalbn+0x140>
   13a40:	4010953a 	slli	r8,r8,20
   13a44:	00e00434 	movhi	r3,32784
   13a48:	18ffffc4 	addi	r3,r3,-1
   13a4c:	30ce703a 	and	r7,r6,r3
   13a50:	5005883a 	mov	r2,r10
   13a54:	41c6b03a 	or	r3,r8,r7
   13a58:	dfc00117 	ldw	ra,4(sp)
   13a5c:	dc000017 	ldw	r16,0(sp)
   13a60:	dec00204 	addi	sp,sp,8
   13a64:	f800283a 	ret
   13a68:	2005883a 	mov	r2,r4
   13a6c:	2807883a 	mov	r3,r5
   13a70:	dfc00117 	ldw	ra,4(sp)
   13a74:	dc000017 	ldw	r16,0(sp)
   13a78:	dec00204 	addi	sp,sp,8
   13a7c:	f800283a 	ret
   13a80:	01b0be74 	movhi	r6,49913
   13a84:	01c06974 	movhi	r7,421
   13a88:	31bcd644 	addi	r6,r6,-3239
   13a8c:	39db87c4 	addi	r7,r7,28191
   13a90:	1009883a 	mov	r4,r2
   13a94:	180b883a 	mov	r5,r3
   13a98:	00161980 	call	16198 <__muldf3>
   13a9c:	dfc00117 	ldw	ra,4(sp)
   13aa0:	dc000017 	ldw	r16,0(sp)
   13aa4:	dec00204 	addi	sp,sp,8
   13aa8:	f800283a 	ret
   13aac:	00bff2c4 	movi	r2,-53
   13ab0:	4080160e 	bge	r8,r2,13b0c <scalbn+0x1a0>
   13ab4:	00b0d414 	movui	r2,50000
   13ab8:	143fc916 	blt	r2,r16,139e0 <_gp+0xffff197c>
   13abc:	0130be74 	movhi	r4,49913
   13ac0:	01406974 	movhi	r5,421
   13ac4:	500d883a 	mov	r6,r10
   13ac8:	213cd644 	addi	r4,r4,-3239
   13acc:	295b87c4 	addi	r5,r5,28191
   13ad0:	0013b380 	call	13b38 <copysign>
   13ad4:	01b0be74 	movhi	r6,49913
   13ad8:	01c06974 	movhi	r7,421
   13adc:	1009883a 	mov	r4,r2
   13ae0:	180b883a 	mov	r5,r3
   13ae4:	31bcd644 	addi	r6,r6,-3239
   13ae8:	39db87c4 	addi	r7,r7,28191
   13aec:	00161980 	call	16198 <__muldf3>
   13af0:	003fd906 	br	13a58 <_gp+0xffff19f4>
   13af4:	200d883a 	mov	r6,r4
   13af8:	0014d380 	call	14d38 <__adddf3>
   13afc:	dfc00117 	ldw	ra,4(sp)
   13b00:	dc000017 	ldw	r16,0(sp)
   13b04:	dec00204 	addi	sp,sp,8
   13b08:	f800283a 	ret
   13b0c:	42000d84 	addi	r8,r8,54
   13b10:	4012953a 	slli	r9,r8,20
   13b14:	01e00434 	movhi	r7,32784
   13b18:	39ffffc4 	addi	r7,r7,-1
   13b1c:	31ca703a 	and	r5,r6,r7
   13b20:	5009883a 	mov	r4,r10
   13b24:	494ab03a 	or	r5,r9,r5
   13b28:	000d883a 	mov	r6,zero
   13b2c:	01cf2434 	movhi	r7,15504
   13b30:	00161980 	call	16198 <__muldf3>
   13b34:	003fc806 	br	13a58 <_gp+0xffff19f4>

00013b38 <copysign>:
   13b38:	2005883a 	mov	r2,r4
   13b3c:	01200034 	movhi	r4,32768
   13b40:	213fffc4 	addi	r4,r4,-1
   13b44:	38e0002c 	andhi	r3,r7,32768
   13b48:	290a703a 	and	r5,r5,r4
   13b4c:	1946b03a 	or	r3,r3,r5
   13b50:	f800283a 	ret

00013b54 <udivmodsi4>:
   13b54:	2900182e 	bgeu	r5,r4,13bb8 <udivmodsi4+0x64>
   13b58:	28001716 	blt	r5,zero,13bb8 <udivmodsi4+0x64>
   13b5c:	00800804 	movi	r2,32
   13b60:	00c00044 	movi	r3,1
   13b64:	00000206 	br	13b70 <udivmodsi4+0x1c>
   13b68:	10001126 	beq	r2,zero,13bb0 <udivmodsi4+0x5c>
   13b6c:	28000516 	blt	r5,zero,13b84 <udivmodsi4+0x30>
   13b70:	294b883a 	add	r5,r5,r5
   13b74:	10bfffc4 	addi	r2,r2,-1
   13b78:	18c7883a 	add	r3,r3,r3
   13b7c:	293ffa36 	bltu	r5,r4,13b68 <_gp+0xffff1b04>
   13b80:	18000b26 	beq	r3,zero,13bb0 <udivmodsi4+0x5c>
   13b84:	0005883a 	mov	r2,zero
   13b88:	21400236 	bltu	r4,r5,13b94 <udivmodsi4+0x40>
   13b8c:	2149c83a 	sub	r4,r4,r5
   13b90:	10c4b03a 	or	r2,r2,r3
   13b94:	1806d07a 	srli	r3,r3,1
   13b98:	280ad07a 	srli	r5,r5,1
   13b9c:	183ffa1e 	bne	r3,zero,13b88 <_gp+0xffff1b24>
   13ba0:	3000011e 	bne	r6,zero,13ba8 <udivmodsi4+0x54>
   13ba4:	f800283a 	ret
   13ba8:	2005883a 	mov	r2,r4
   13bac:	f800283a 	ret
   13bb0:	0005883a 	mov	r2,zero
   13bb4:	003ffa06 	br	13ba0 <_gp+0xffff1b3c>
   13bb8:	00c00044 	movi	r3,1
   13bbc:	003ff106 	br	13b84 <_gp+0xffff1b20>

00013bc0 <__divsi3>:
   13bc0:	defffe04 	addi	sp,sp,-8
   13bc4:	dfc00115 	stw	ra,4(sp)
   13bc8:	dc000015 	stw	r16,0(sp)
   13bcc:	20000b16 	blt	r4,zero,13bfc <__divsi3+0x3c>
   13bd0:	0021883a 	mov	r16,zero
   13bd4:	28000c16 	blt	r5,zero,13c08 <__divsi3+0x48>
   13bd8:	000d883a 	mov	r6,zero
   13bdc:	0013b540 	call	13b54 <udivmodsi4>
   13be0:	0407c83a 	sub	r3,zero,r16
   13be4:	1884f03a 	xor	r2,r3,r2
   13be8:	1405883a 	add	r2,r2,r16
   13bec:	dfc00117 	ldw	ra,4(sp)
   13bf0:	dc000017 	ldw	r16,0(sp)
   13bf4:	dec00204 	addi	sp,sp,8
   13bf8:	f800283a 	ret
   13bfc:	0109c83a 	sub	r4,zero,r4
   13c00:	04000044 	movi	r16,1
   13c04:	283ff40e 	bge	r5,zero,13bd8 <_gp+0xffff1b74>
   13c08:	014bc83a 	sub	r5,zero,r5
   13c0c:	8400005c 	xori	r16,r16,1
   13c10:	003ff106 	br	13bd8 <_gp+0xffff1b74>

00013c14 <__modsi3>:
   13c14:	defffd04 	addi	sp,sp,-12
   13c18:	dfc00215 	stw	ra,8(sp)
   13c1c:	dc400115 	stw	r17,4(sp)
   13c20:	dc000015 	stw	r16,0(sp)
   13c24:	20000c16 	blt	r4,zero,13c58 <__modsi3+0x44>
   13c28:	0023883a 	mov	r17,zero
   13c2c:	0021883a 	mov	r16,zero
   13c30:	28000d16 	blt	r5,zero,13c68 <__modsi3+0x54>
   13c34:	01800044 	movi	r6,1
   13c38:	0013b540 	call	13b54 <udivmodsi4>
   13c3c:	1404f03a 	xor	r2,r2,r16
   13c40:	8885883a 	add	r2,r17,r2
   13c44:	dfc00217 	ldw	ra,8(sp)
   13c48:	dc400117 	ldw	r17,4(sp)
   13c4c:	dc000017 	ldw	r16,0(sp)
   13c50:	dec00304 	addi	sp,sp,12
   13c54:	f800283a 	ret
   13c58:	0109c83a 	sub	r4,zero,r4
   13c5c:	04400044 	movi	r17,1
   13c60:	043fffc4 	movi	r16,-1
   13c64:	283ff30e 	bge	r5,zero,13c34 <_gp+0xffff1bd0>
   13c68:	014bc83a 	sub	r5,zero,r5
   13c6c:	003ff106 	br	13c34 <_gp+0xffff1bd0>

00013c70 <__udivsi3>:
   13c70:	000d883a 	mov	r6,zero
   13c74:	0013b541 	jmpi	13b54 <udivmodsi4>

00013c78 <__umodsi3>:
   13c78:	01800044 	movi	r6,1
   13c7c:	0013b541 	jmpi	13b54 <udivmodsi4>

00013c80 <__mulsi3>:
   13c80:	0005883a 	mov	r2,zero
   13c84:	20000726 	beq	r4,zero,13ca4 <__mulsi3+0x24>
   13c88:	20c0004c 	andi	r3,r4,1
   13c8c:	2008d07a 	srli	r4,r4,1
   13c90:	18000126 	beq	r3,zero,13c98 <__mulsi3+0x18>
   13c94:	1145883a 	add	r2,r2,r5
   13c98:	294b883a 	add	r5,r5,r5
   13c9c:	203ffa1e 	bne	r4,zero,13c88 <_gp+0xffff1c24>
   13ca0:	f800283a 	ret
   13ca4:	f800283a 	ret

00013ca8 <__addsf3>:
   13ca8:	defffc04 	addi	sp,sp,-16
   13cac:	2004d7fa 	srli	r2,r4,31
   13cb0:	280ed5fa 	srli	r7,r5,23
   13cb4:	dc000015 	stw	r16,0(sp)
   13cb8:	01802034 	movhi	r6,128
   13cbc:	2020d5fa 	srli	r16,r4,23
   13cc0:	31bfffc4 	addi	r6,r6,-1
   13cc4:	2810d7fa 	srli	r8,r5,31
   13cc8:	3108703a 	and	r4,r6,r4
   13ccc:	dc800215 	stw	r18,8(sp)
   13cd0:	314c703a 	and	r6,r6,r5
   13cd4:	84003fcc 	andi	r16,r16,255
   13cd8:	200690fa 	slli	r3,r4,3
   13cdc:	dfc00315 	stw	ra,12(sp)
   13ce0:	39003fcc 	andi	r4,r7,255
   13ce4:	dc400115 	stw	r17,4(sp)
   13ce8:	14803fcc 	andi	r18,r2,255
   13cec:	300c90fa 	slli	r6,r6,3
   13cf0:	810bc83a 	sub	r5,r16,r4
   13cf4:	92004826 	beq	r18,r8,13e18 <__addsf3+0x170>
   13cf8:	01406c0e 	bge	zero,r5,13eac <__addsf3+0x204>
   13cfc:	20001e1e 	bne	r4,zero,13d78 <__addsf3+0xd0>
   13d00:	3000611e 	bne	r6,zero,13e88 <__addsf3+0x1e0>
   13d04:	188001cc 	andi	r2,r3,7
   13d08:	10000426 	beq	r2,zero,13d1c <__addsf3+0x74>
   13d0c:	190003cc 	andi	r4,r3,15
   13d10:	00800104 	movi	r2,4
   13d14:	20800126 	beq	r4,r2,13d1c <__addsf3+0x74>
   13d18:	18c00104 	addi	r3,r3,4
   13d1c:	1901002c 	andhi	r4,r3,1024
   13d20:	9005883a 	mov	r2,r18
   13d24:	20003426 	beq	r4,zero,13df8 <__addsf3+0x150>
   13d28:	81400044 	addi	r5,r16,1
   13d2c:	01003fc4 	movi	r4,255
   13d30:	29006926 	beq	r5,r4,13ed8 <__addsf3+0x230>
   13d34:	180691ba 	slli	r3,r3,6
   13d38:	1808d27a 	srli	r4,r3,9
   13d3c:	29403fcc 	andi	r5,r5,255
   13d40:	280a95fa 	slli	r5,r5,23
   13d44:	10803fcc 	andi	r2,r2,255
   13d48:	00c02034 	movhi	r3,128
   13d4c:	100497fa 	slli	r2,r2,31
   13d50:	18ffffc4 	addi	r3,r3,-1
   13d54:	20c6703a 	and	r3,r4,r3
   13d58:	1946b03a 	or	r3,r3,r5
   13d5c:	1884b03a 	or	r2,r3,r2
   13d60:	dfc00317 	ldw	ra,12(sp)
   13d64:	dc800217 	ldw	r18,8(sp)
   13d68:	dc400117 	ldw	r17,4(sp)
   13d6c:	dc000017 	ldw	r16,0(sp)
   13d70:	dec00404 	addi	sp,sp,16
   13d74:	f800283a 	ret
   13d78:	00803fc4 	movi	r2,255
   13d7c:	80bfe126 	beq	r16,r2,13d04 <_gp+0xffff1ca0>
   13d80:	31810034 	orhi	r6,r6,1024
   13d84:	008006c4 	movi	r2,27
   13d88:	11405b0e 	bge	r2,r5,13ef8 <__addsf3+0x250>
   13d8c:	01400044 	movi	r5,1
   13d90:	1947c83a 	sub	r3,r3,r5
   13d94:	1881002c 	andhi	r2,r3,1024
   13d98:	10001426 	beq	r2,zero,13dec <__addsf3+0x144>
   13d9c:	04410034 	movhi	r17,1024
   13da0:	8c7fffc4 	addi	r17,r17,-1
   13da4:	1c62703a 	and	r17,r3,r17
   13da8:	8809883a 	mov	r4,r17
   13dac:	00176d40 	call	176d4 <__clzsi2>
   13db0:	10bffec4 	addi	r2,r2,-5
   13db4:	88a2983a 	sll	r17,r17,r2
   13db8:	14004a16 	blt	r2,r16,13ee4 <__addsf3+0x23c>
   13dbc:	140bc83a 	sub	r5,r2,r16
   13dc0:	00c007c4 	movi	r3,31
   13dc4:	1947c83a 	sub	r3,r3,r5
   13dc8:	88c6983a 	sll	r3,r17,r3
   13dcc:	29400044 	addi	r5,r5,1
   13dd0:	8962d83a 	srl	r17,r17,r5
   13dd4:	1806c03a 	cmpne	r3,r3,zero
   13dd8:	0021883a 	mov	r16,zero
   13ddc:	1c46b03a 	or	r3,r3,r17
   13de0:	003fc806 	br	13d04 <_gp+0xffff1ca0>
   13de4:	1000e526 	beq	r2,zero,1417c <__addsf3+0x4d4>
   13de8:	1007883a 	mov	r3,r2
   13dec:	188001cc 	andi	r2,r3,7
   13df0:	103fc61e 	bne	r2,zero,13d0c <_gp+0xffff1ca8>
   13df4:	9005883a 	mov	r2,r18
   13df8:	01003fc4 	movi	r4,255
   13dfc:	1806d0fa 	srli	r3,r3,3
   13e00:	81001a26 	beq	r16,r4,13e6c <__addsf3+0x1c4>
   13e04:	01002034 	movhi	r4,128
   13e08:	213fffc4 	addi	r4,r4,-1
   13e0c:	800b883a 	mov	r5,r16
   13e10:	1908703a 	and	r4,r3,r4
   13e14:	003fc906 	br	13d3c <_gp+0xffff1cd8>
   13e18:	01403e0e 	bge	zero,r5,13f14 <__addsf3+0x26c>
   13e1c:	20001e26 	beq	r4,zero,13e98 <__addsf3+0x1f0>
   13e20:	01003fc4 	movi	r4,255
   13e24:	813fb726 	beq	r16,r4,13d04 <_gp+0xffff1ca0>
   13e28:	31810034 	orhi	r6,r6,1024
   13e2c:	010006c4 	movi	r4,27
   13e30:	2140570e 	bge	r4,r5,13f90 <__addsf3+0x2e8>
   13e34:	01400044 	movi	r5,1
   13e38:	1947883a 	add	r3,r3,r5
   13e3c:	1901002c 	andhi	r4,r3,1024
   13e40:	203fea26 	beq	r4,zero,13dec <_gp+0xffff1d88>
   13e44:	84000044 	addi	r16,r16,1
   13e48:	01003fc4 	movi	r4,255
   13e4c:	81007526 	beq	r16,r4,14024 <__addsf3+0x37c>
   13e50:	00bf0034 	movhi	r2,64512
   13e54:	10bfffc4 	addi	r2,r2,-1
   13e58:	1900004c 	andi	r4,r3,1
   13e5c:	1886703a 	and	r3,r3,r2
   13e60:	1806d07a 	srli	r3,r3,1
   13e64:	1906b03a 	or	r3,r3,r4
   13e68:	003fa606 	br	13d04 <_gp+0xffff1ca0>
   13e6c:	18001a26 	beq	r3,zero,13ed8 <__addsf3+0x230>
   13e70:	19001034 	orhi	r4,r3,64
   13e74:	00c02034 	movhi	r3,128
   13e78:	18ffffc4 	addi	r3,r3,-1
   13e7c:	017fffc4 	movi	r5,-1
   13e80:	20c8703a 	and	r4,r4,r3
   13e84:	003fad06 	br	13d3c <_gp+0xffff1cd8>
   13e88:	297fffc4 	addi	r5,r5,-1
   13e8c:	28002c1e 	bne	r5,zero,13f40 <__addsf3+0x298>
   13e90:	1987c83a 	sub	r3,r3,r6
   13e94:	003fbf06 	br	13d94 <_gp+0xffff1d30>
   13e98:	303f9a26 	beq	r6,zero,13d04 <_gp+0xffff1ca0>
   13e9c:	297fffc4 	addi	r5,r5,-1
   13ea0:	28004b1e 	bne	r5,zero,13fd0 <__addsf3+0x328>
   13ea4:	1987883a 	add	r3,r3,r6
   13ea8:	003fe406 	br	13e3c <_gp+0xffff1dd8>
   13eac:	2800271e 	bne	r5,zero,13f4c <__addsf3+0x2a4>
   13eb0:	80800044 	addi	r2,r16,1
   13eb4:	10803fcc 	andi	r2,r2,255
   13eb8:	01000044 	movi	r4,1
   13ebc:	2080520e 	bge	r4,r2,14008 <__addsf3+0x360>
   13ec0:	19a3c83a 	sub	r17,r3,r6
   13ec4:	8881002c 	andhi	r2,r17,1024
   13ec8:	10002c26 	beq	r2,zero,13f7c <__addsf3+0x2d4>
   13ecc:	30e3c83a 	sub	r17,r6,r3
   13ed0:	4025883a 	mov	r18,r8
   13ed4:	003fb406 	br	13da8 <_gp+0xffff1d44>
   13ed8:	017fffc4 	movi	r5,-1
   13edc:	0009883a 	mov	r4,zero
   13ee0:	003f9606 	br	13d3c <_gp+0xffff1cd8>
   13ee4:	00ff0034 	movhi	r3,64512
   13ee8:	18ffffc4 	addi	r3,r3,-1
   13eec:	80a1c83a 	sub	r16,r16,r2
   13ef0:	88c6703a 	and	r3,r17,r3
   13ef4:	003f8306 	br	13d04 <_gp+0xffff1ca0>
   13ef8:	00800804 	movi	r2,32
   13efc:	1145c83a 	sub	r2,r2,r5
   13f00:	3084983a 	sll	r2,r6,r2
   13f04:	314cd83a 	srl	r6,r6,r5
   13f08:	100ac03a 	cmpne	r5,r2,zero
   13f0c:	298ab03a 	or	r5,r5,r6
   13f10:	003f9f06 	br	13d90 <_gp+0xffff1d2c>
   13f14:	2800451e 	bne	r5,zero,1402c <__addsf3+0x384>
   13f18:	81000044 	addi	r4,r16,1
   13f1c:	21c03fcc 	andi	r7,r4,255
   13f20:	01400044 	movi	r5,1
   13f24:	29c02d0e 	bge	r5,r7,13fdc <__addsf3+0x334>
   13f28:	01403fc4 	movi	r5,255
   13f2c:	21403c26 	beq	r4,r5,14020 <__addsf3+0x378>
   13f30:	30c7883a 	add	r3,r6,r3
   13f34:	1806d07a 	srli	r3,r3,1
   13f38:	2021883a 	mov	r16,r4
   13f3c:	003f7106 	br	13d04 <_gp+0xffff1ca0>
   13f40:	00803fc4 	movi	r2,255
   13f44:	80bf8f1e 	bne	r16,r2,13d84 <_gp+0xffff1d20>
   13f48:	003f6e06 	br	13d04 <_gp+0xffff1ca0>
   13f4c:	80001726 	beq	r16,zero,13fac <__addsf3+0x304>
   13f50:	00803fc4 	movi	r2,255
   13f54:	20801a26 	beq	r4,r2,13fc0 <__addsf3+0x318>
   13f58:	014bc83a 	sub	r5,zero,r5
   13f5c:	18c10034 	orhi	r3,r3,1024
   13f60:	008006c4 	movi	r2,27
   13f64:	1140430e 	bge	r2,r5,14074 <__addsf3+0x3cc>
   13f68:	00c00044 	movi	r3,1
   13f6c:	30c7c83a 	sub	r3,r6,r3
   13f70:	2021883a 	mov	r16,r4
   13f74:	4025883a 	mov	r18,r8
   13f78:	003f8606 	br	13d94 <_gp+0xffff1d30>
   13f7c:	883f8a1e 	bne	r17,zero,13da8 <_gp+0xffff1d44>
   13f80:	0007883a 	mov	r3,zero
   13f84:	0005883a 	mov	r2,zero
   13f88:	0021883a 	mov	r16,zero
   13f8c:	003f9a06 	br	13df8 <_gp+0xffff1d94>
   13f90:	01000804 	movi	r4,32
   13f94:	2149c83a 	sub	r4,r4,r5
   13f98:	3108983a 	sll	r4,r6,r4
   13f9c:	314cd83a 	srl	r6,r6,r5
   13fa0:	200ac03a 	cmpne	r5,r4,zero
   13fa4:	298ab03a 	or	r5,r5,r6
   13fa8:	003fa306 	br	13e38 <_gp+0xffff1dd4>
   13fac:	18000426 	beq	r3,zero,13fc0 <__addsf3+0x318>
   13fb0:	014a303a 	nor	r5,zero,r5
   13fb4:	283fed26 	beq	r5,zero,13f6c <_gp+0xffff1f08>
   13fb8:	00803fc4 	movi	r2,255
   13fbc:	20bfe81e 	bne	r4,r2,13f60 <_gp+0xffff1efc>
   13fc0:	3007883a 	mov	r3,r6
   13fc4:	2021883a 	mov	r16,r4
   13fc8:	4025883a 	mov	r18,r8
   13fcc:	003f4d06 	br	13d04 <_gp+0xffff1ca0>
   13fd0:	01003fc4 	movi	r4,255
   13fd4:	813f951e 	bne	r16,r4,13e2c <_gp+0xffff1dc8>
   13fd8:	003f4a06 	br	13d04 <_gp+0xffff1ca0>
   13fdc:	8000471e 	bne	r16,zero,140fc <__addsf3+0x454>
   13fe0:	18006126 	beq	r3,zero,14168 <__addsf3+0x4c0>
   13fe4:	303f4726 	beq	r6,zero,13d04 <_gp+0xffff1ca0>
   13fe8:	1987883a 	add	r3,r3,r6
   13fec:	1881002c 	andhi	r2,r3,1024
   13ff0:	103f7e26 	beq	r2,zero,13dec <_gp+0xffff1d88>
   13ff4:	00bf0034 	movhi	r2,64512
   13ff8:	10bfffc4 	addi	r2,r2,-1
   13ffc:	2821883a 	mov	r16,r5
   14000:	1886703a 	and	r3,r3,r2
   14004:	003f3f06 	br	13d04 <_gp+0xffff1ca0>
   14008:	8000141e 	bne	r16,zero,1405c <__addsf3+0x3b4>
   1400c:	1800311e 	bne	r3,zero,140d4 <__addsf3+0x42c>
   14010:	30004626 	beq	r6,zero,1412c <__addsf3+0x484>
   14014:	3007883a 	mov	r3,r6
   14018:	4025883a 	mov	r18,r8
   1401c:	003f3906 	br	13d04 <_gp+0xffff1ca0>
   14020:	2021883a 	mov	r16,r4
   14024:	0007883a 	mov	r3,zero
   14028:	003f7306 	br	13df8 <_gp+0xffff1d94>
   1402c:	8000181e 	bne	r16,zero,14090 <__addsf3+0x3e8>
   14030:	18002f26 	beq	r3,zero,140f0 <__addsf3+0x448>
   14034:	014a303a 	nor	r5,zero,r5
   14038:	28000526 	beq	r5,zero,14050 <__addsf3+0x3a8>
   1403c:	01c03fc4 	movi	r7,255
   14040:	21c02b26 	beq	r4,r7,140f0 <__addsf3+0x448>
   14044:	01c006c4 	movi	r7,27
   14048:	3940400e 	bge	r7,r5,1414c <__addsf3+0x4a4>
   1404c:	00c00044 	movi	r3,1
   14050:	1987883a 	add	r3,r3,r6
   14054:	2021883a 	mov	r16,r4
   14058:	003f7806 	br	13e3c <_gp+0xffff1dd8>
   1405c:	1800111e 	bne	r3,zero,140a4 <__addsf3+0x3fc>
   14060:	30003526 	beq	r6,zero,14138 <__addsf3+0x490>
   14064:	3007883a 	mov	r3,r6
   14068:	4025883a 	mov	r18,r8
   1406c:	04003fc4 	movi	r16,255
   14070:	003f2406 	br	13d04 <_gp+0xffff1ca0>
   14074:	00800804 	movi	r2,32
   14078:	1145c83a 	sub	r2,r2,r5
   1407c:	1884983a 	sll	r2,r3,r2
   14080:	194ad83a 	srl	r5,r3,r5
   14084:	1006c03a 	cmpne	r3,r2,zero
   14088:	1946b03a 	or	r3,r3,r5
   1408c:	003fb706 	br	13f6c <_gp+0xffff1f08>
   14090:	01c03fc4 	movi	r7,255
   14094:	21c01626 	beq	r4,r7,140f0 <__addsf3+0x448>
   14098:	014bc83a 	sub	r5,zero,r5
   1409c:	18c10034 	orhi	r3,r3,1024
   140a0:	003fe806 	br	14044 <_gp+0xffff1fe0>
   140a4:	30001f26 	beq	r6,zero,14124 <__addsf3+0x47c>
   140a8:	1806d0fa 	srli	r3,r3,3
   140ac:	1880102c 	andhi	r2,r3,64
   140b0:	10000526 	beq	r2,zero,140c8 <__addsf3+0x420>
   140b4:	300cd0fa 	srli	r6,r6,3
   140b8:	3080102c 	andhi	r2,r6,64
   140bc:	1000021e 	bne	r2,zero,140c8 <__addsf3+0x420>
   140c0:	3007883a 	mov	r3,r6
   140c4:	4025883a 	mov	r18,r8
   140c8:	180690fa 	slli	r3,r3,3
   140cc:	04003fc4 	movi	r16,255
   140d0:	003f0c06 	br	13d04 <_gp+0xffff1ca0>
   140d4:	303f0b26 	beq	r6,zero,13d04 <_gp+0xffff1ca0>
   140d8:	1985c83a 	sub	r2,r3,r6
   140dc:	1101002c 	andhi	r4,r2,1024
   140e0:	203f4026 	beq	r4,zero,13de4 <_gp+0xffff1d80>
   140e4:	30c7c83a 	sub	r3,r6,r3
   140e8:	4025883a 	mov	r18,r8
   140ec:	003f0506 	br	13d04 <_gp+0xffff1ca0>
   140f0:	3007883a 	mov	r3,r6
   140f4:	2021883a 	mov	r16,r4
   140f8:	003f0206 	br	13d04 <_gp+0xffff1ca0>
   140fc:	18001c26 	beq	r3,zero,14170 <__addsf3+0x4c8>
   14100:	30000826 	beq	r6,zero,14124 <__addsf3+0x47c>
   14104:	1806d0fa 	srli	r3,r3,3
   14108:	1880102c 	andhi	r2,r3,64
   1410c:	103fee26 	beq	r2,zero,140c8 <_gp+0xffff2064>
   14110:	300cd0fa 	srli	r6,r6,3
   14114:	3080102c 	andhi	r2,r6,64
   14118:	103feb1e 	bne	r2,zero,140c8 <_gp+0xffff2064>
   1411c:	3007883a 	mov	r3,r6
   14120:	003fe906 	br	140c8 <_gp+0xffff2064>
   14124:	04003fc4 	movi	r16,255
   14128:	003ef606 	br	13d04 <_gp+0xffff1ca0>
   1412c:	8007883a 	mov	r3,r16
   14130:	0005883a 	mov	r2,zero
   14134:	003f3006 	br	13df8 <_gp+0xffff1d94>
   14138:	00c10034 	movhi	r3,1024
   1413c:	0005883a 	mov	r2,zero
   14140:	18fffe04 	addi	r3,r3,-8
   14144:	04003fc4 	movi	r16,255
   14148:	003f2b06 	br	13df8 <_gp+0xffff1d94>
   1414c:	01c00804 	movi	r7,32
   14150:	394fc83a 	sub	r7,r7,r5
   14154:	19ce983a 	sll	r7,r3,r7
   14158:	194ad83a 	srl	r5,r3,r5
   1415c:	3806c03a 	cmpne	r3,r7,zero
   14160:	1946b03a 	or	r3,r3,r5
   14164:	003fba06 	br	14050 <_gp+0xffff1fec>
   14168:	3007883a 	mov	r3,r6
   1416c:	003ee506 	br	13d04 <_gp+0xffff1ca0>
   14170:	3007883a 	mov	r3,r6
   14174:	04003fc4 	movi	r16,255
   14178:	003ee206 	br	13d04 <_gp+0xffff1ca0>
   1417c:	0007883a 	mov	r3,zero
   14180:	0005883a 	mov	r2,zero
   14184:	003f1c06 	br	13df8 <_gp+0xffff1d94>

00014188 <__lesf2>:
   14188:	2004d5fa 	srli	r2,r4,23
   1418c:	280cd5fa 	srli	r6,r5,23
   14190:	00c02034 	movhi	r3,128
   14194:	18ffffc4 	addi	r3,r3,-1
   14198:	10803fcc 	andi	r2,r2,255
   1419c:	01c03fc4 	movi	r7,255
   141a0:	1910703a 	and	r8,r3,r4
   141a4:	31803fcc 	andi	r6,r6,255
   141a8:	1946703a 	and	r3,r3,r5
   141ac:	2008d7fa 	srli	r4,r4,31
   141b0:	280ad7fa 	srli	r5,r5,31
   141b4:	11c00a26 	beq	r2,r7,141e0 <__lesf2+0x58>
   141b8:	31c01526 	beq	r6,r7,14210 <__lesf2+0x88>
   141bc:	10000a1e 	bne	r2,zero,141e8 <__lesf2+0x60>
   141c0:	4013003a 	cmpeq	r9,r8,zero
   141c4:	480f883a 	mov	r7,r9
   141c8:	30000d26 	beq	r6,zero,14200 <__lesf2+0x78>
   141cc:	29403fcc 	andi	r5,r5,255
   141d0:	38001426 	beq	r7,zero,14224 <__lesf2+0x9c>
   141d4:	2800081e 	bne	r5,zero,141f8 <__lesf2+0x70>
   141d8:	00bfffc4 	movi	r2,-1
   141dc:	f800283a 	ret
   141e0:	40000c1e 	bne	r8,zero,14214 <__lesf2+0x8c>
   141e4:	30800a26 	beq	r6,r2,14210 <__lesf2+0x88>
   141e8:	30000d1e 	bne	r6,zero,14220 <__lesf2+0x98>
   141ec:	000f883a 	mov	r7,zero
   141f0:	183ff61e 	bne	r3,zero,141cc <_gp+0xffff2168>
   141f4:	203ff81e 	bne	r4,zero,141d8 <_gp+0xffff2174>
   141f8:	00800044 	movi	r2,1
   141fc:	f800283a 	ret
   14200:	183ff21e 	bne	r3,zero,141cc <_gp+0xffff2168>
   14204:	483ffb26 	beq	r9,zero,141f4 <_gp+0xffff2190>
   14208:	0005883a 	mov	r2,zero
   1420c:	f800283a 	ret
   14210:	18000226 	beq	r3,zero,1421c <__lesf2+0x94>
   14214:	00800084 	movi	r2,2
   14218:	f800283a 	ret
   1421c:	103fe826 	beq	r2,zero,141c0 <_gp+0xffff215c>
   14220:	29403fcc 	andi	r5,r5,255
   14224:	217ff31e 	bne	r4,r5,141f4 <_gp+0xffff2190>
   14228:	30bff216 	blt	r6,r2,141f4 <_gp+0xffff2190>
   1422c:	11800216 	blt	r2,r6,14238 <__lesf2+0xb0>
   14230:	1a3ff036 	bltu	r3,r8,141f4 <_gp+0xffff2190>
   14234:	40fff42e 	bgeu	r8,r3,14208 <_gp+0xffff21a4>
   14238:	203fe726 	beq	r4,zero,141d8 <_gp+0xffff2174>
   1423c:	003fee06 	br	141f8 <_gp+0xffff2194>

00014240 <__mulsf3>:
   14240:	defff504 	addi	sp,sp,-44
   14244:	dc400215 	stw	r17,8(sp)
   14248:	2022d5fa 	srli	r17,r4,23
   1424c:	dd400615 	stw	r21,24(sp)
   14250:	202ad7fa 	srli	r21,r4,31
   14254:	dc000115 	stw	r16,4(sp)
   14258:	04002034 	movhi	r16,128
   1425c:	df000915 	stw	fp,36(sp)
   14260:	dd000515 	stw	r20,20(sp)
   14264:	843fffc4 	addi	r16,r16,-1
   14268:	dfc00a15 	stw	ra,40(sp)
   1426c:	ddc00815 	stw	r23,32(sp)
   14270:	dd800715 	stw	r22,28(sp)
   14274:	dcc00415 	stw	r19,16(sp)
   14278:	dc800315 	stw	r18,12(sp)
   1427c:	8c403fcc 	andi	r17,r17,255
   14280:	8120703a 	and	r16,r16,r4
   14284:	a829883a 	mov	r20,r21
   14288:	af003fcc 	andi	fp,r21,255
   1428c:	88005026 	beq	r17,zero,143d0 <__mulsf3+0x190>
   14290:	00803fc4 	movi	r2,255
   14294:	88802f26 	beq	r17,r2,14354 <__mulsf3+0x114>
   14298:	84002034 	orhi	r16,r16,128
   1429c:	802090fa 	slli	r16,r16,3
   142a0:	8c7fe044 	addi	r17,r17,-127
   142a4:	0025883a 	mov	r18,zero
   142a8:	002f883a 	mov	r23,zero
   142ac:	2804d5fa 	srli	r2,r5,23
   142b0:	282cd7fa 	srli	r22,r5,31
   142b4:	01002034 	movhi	r4,128
   142b8:	213fffc4 	addi	r4,r4,-1
   142bc:	10803fcc 	andi	r2,r2,255
   142c0:	2166703a 	and	r19,r4,r5
   142c4:	b1803fcc 	andi	r6,r22,255
   142c8:	10004926 	beq	r2,zero,143f0 <__mulsf3+0x1b0>
   142cc:	00c03fc4 	movi	r3,255
   142d0:	10c04326 	beq	r2,r3,143e0 <__mulsf3+0x1a0>
   142d4:	99402034 	orhi	r5,r19,128
   142d8:	282690fa 	slli	r19,r5,3
   142dc:	10bfe044 	addi	r2,r2,-127
   142e0:	000b883a 	mov	r5,zero
   142e4:	88a3883a 	add	r17,r17,r2
   142e8:	2c86b03a 	or	r3,r5,r18
   142ec:	008003c4 	movi	r2,15
   142f0:	adaaf03a 	xor	r21,r21,r22
   142f4:	8c800044 	addi	r18,r17,1
   142f8:	10c06536 	bltu	r2,r3,14490 <__mulsf3+0x250>
   142fc:	180690ba 	slli	r3,r3,2
   14300:	01000074 	movhi	r4,1
   14304:	2110c504 	addi	r4,r4,17172
   14308:	1907883a 	add	r3,r3,r4
   1430c:	18800017 	ldw	r2,0(r3)
   14310:	1000683a 	jmp	r2
   14314:	00014490 	cmplti	zero,zero,1298
   14318:	00014588 	cmpgei	zero,zero,1302
   1431c:	00014588 	cmpgei	zero,zero,1302
   14320:	00014598 	cmpnei	zero,zero,1302
   14324:	00014364 	muli	zero,zero,1293
   14328:	00014364 	muli	zero,zero,1293
   1432c:	0001447c 	xorhi	zero,zero,1297
   14330:	00014598 	cmpnei	zero,zero,1302
   14334:	00014364 	muli	zero,zero,1293
   14338:	0001447c 	xorhi	zero,zero,1297
   1433c:	00014364 	muli	zero,zero,1293
   14340:	00014598 	cmpnei	zero,zero,1302
   14344:	00014368 	cmpgeui	zero,zero,1293
   14348:	00014368 	cmpgeui	zero,zero,1293
   1434c:	00014368 	cmpgeui	zero,zero,1293
   14350:	000145a8 	cmpgeui	zero,zero,1302
   14354:	8000311e 	bne	r16,zero,1441c <__mulsf3+0x1dc>
   14358:	04800204 	movi	r18,8
   1435c:	05c00084 	movi	r23,2
   14360:	003fd206 	br	142ac <_gp+0xffff2248>
   14364:	a839883a 	mov	fp,r21
   14368:	00800084 	movi	r2,2
   1436c:	b880231e 	bne	r23,r2,143fc <__mulsf3+0x1bc>
   14370:	e500004c 	andi	r20,fp,1
   14374:	00ffffc4 	movi	r3,-1
   14378:	0009883a 	mov	r4,zero
   1437c:	18c03fcc 	andi	r3,r3,255
   14380:	180695fa 	slli	r3,r3,23
   14384:	a0803fcc 	andi	r2,r20,255
   14388:	04002034 	movhi	r16,128
   1438c:	100497fa 	slli	r2,r2,31
   14390:	843fffc4 	addi	r16,r16,-1
   14394:	2420703a 	and	r16,r4,r16
   14398:	80e0b03a 	or	r16,r16,r3
   1439c:	8084b03a 	or	r2,r16,r2
   143a0:	dfc00a17 	ldw	ra,40(sp)
   143a4:	df000917 	ldw	fp,36(sp)
   143a8:	ddc00817 	ldw	r23,32(sp)
   143ac:	dd800717 	ldw	r22,28(sp)
   143b0:	dd400617 	ldw	r21,24(sp)
   143b4:	dd000517 	ldw	r20,20(sp)
   143b8:	dcc00417 	ldw	r19,16(sp)
   143bc:	dc800317 	ldw	r18,12(sp)
   143c0:	dc400217 	ldw	r17,8(sp)
   143c4:	dc000117 	ldw	r16,4(sp)
   143c8:	dec00b04 	addi	sp,sp,44
   143cc:	f800283a 	ret
   143d0:	8000151e 	bne	r16,zero,14428 <__mulsf3+0x1e8>
   143d4:	04800104 	movi	r18,4
   143d8:	05c00044 	movi	r23,1
   143dc:	003fb306 	br	142ac <_gp+0xffff2248>
   143e0:	980b003a 	cmpeq	r5,r19,zero
   143e4:	00c000c4 	movi	r3,3
   143e8:	194bc83a 	sub	r5,r3,r5
   143ec:	003fbd06 	br	142e4 <_gp+0xffff2280>
   143f0:	9800181e 	bne	r19,zero,14454 <__mulsf3+0x214>
   143f4:	01400044 	movi	r5,1
   143f8:	003fba06 	br	142e4 <_gp+0xffff2280>
   143fc:	008000c4 	movi	r2,3
   14400:	b8809d26 	beq	r23,r2,14678 <__mulsf3+0x438>
   14404:	00800044 	movi	r2,1
   14408:	b880821e 	bne	r23,r2,14614 <__mulsf3+0x3d4>
   1440c:	e0a8703a 	and	r20,fp,r2
   14410:	0007883a 	mov	r3,zero
   14414:	0009883a 	mov	r4,zero
   14418:	003fd806 	br	1437c <_gp+0xffff2318>
   1441c:	04800304 	movi	r18,12
   14420:	05c000c4 	movi	r23,3
   14424:	003fa106 	br	142ac <_gp+0xffff2248>
   14428:	8009883a 	mov	r4,r16
   1442c:	d9400015 	stw	r5,0(sp)
   14430:	00176d40 	call	176d4 <__clzsi2>
   14434:	10fffec4 	addi	r3,r2,-5
   14438:	047fe284 	movi	r17,-118
   1443c:	80e0983a 	sll	r16,r16,r3
   14440:	88a3c83a 	sub	r17,r17,r2
   14444:	0025883a 	mov	r18,zero
   14448:	002f883a 	mov	r23,zero
   1444c:	d9400017 	ldw	r5,0(sp)
   14450:	003f9606 	br	142ac <_gp+0xffff2248>
   14454:	9809883a 	mov	r4,r19
   14458:	d9800015 	stw	r6,0(sp)
   1445c:	00176d40 	call	176d4 <__clzsi2>
   14460:	10fffec4 	addi	r3,r2,-5
   14464:	98e6983a 	sll	r19,r19,r3
   14468:	00ffe284 	movi	r3,-118
   1446c:	1885c83a 	sub	r2,r3,r2
   14470:	000b883a 	mov	r5,zero
   14474:	d9800017 	ldw	r6,0(sp)
   14478:	003f9a06 	br	142e4 <_gp+0xffff2280>
   1447c:	01002034 	movhi	r4,128
   14480:	0029883a 	mov	r20,zero
   14484:	213fffc4 	addi	r4,r4,-1
   14488:	00ffffc4 	movi	r3,-1
   1448c:	003fbb06 	br	1437c <_gp+0xffff2318>
   14490:	802ed43a 	srli	r23,r16,16
   14494:	982cd43a 	srli	r22,r19,16
   14498:	843fffcc 	andi	r16,r16,65535
   1449c:	9cffffcc 	andi	r19,r19,65535
   144a0:	9809883a 	mov	r4,r19
   144a4:	800b883a 	mov	r5,r16
   144a8:	0013c800 	call	13c80 <__mulsi3>
   144ac:	9809883a 	mov	r4,r19
   144b0:	b80b883a 	mov	r5,r23
   144b4:	1029883a 	mov	r20,r2
   144b8:	0013c800 	call	13c80 <__mulsi3>
   144bc:	b80b883a 	mov	r5,r23
   144c0:	b009883a 	mov	r4,r22
   144c4:	1027883a 	mov	r19,r2
   144c8:	0013c800 	call	13c80 <__mulsi3>
   144cc:	b009883a 	mov	r4,r22
   144d0:	800b883a 	mov	r5,r16
   144d4:	102f883a 	mov	r23,r2
   144d8:	0013c800 	call	13c80 <__mulsi3>
   144dc:	a008d43a 	srli	r4,r20,16
   144e0:	9885883a 	add	r2,r19,r2
   144e4:	1107883a 	add	r3,r2,r4
   144e8:	1cc0022e 	bgeu	r3,r19,144f4 <__mulsf3+0x2b4>
   144ec:	00800074 	movhi	r2,1
   144f0:	b8af883a 	add	r23,r23,r2
   144f4:	1820943a 	slli	r16,r3,16
   144f8:	a53fffcc 	andi	r20,r20,65535
   144fc:	1806d43a 	srli	r3,r3,16
   14500:	8529883a 	add	r20,r16,r20
   14504:	a02091ba 	slli	r16,r20,6
   14508:	b8c7883a 	add	r3,r23,r3
   1450c:	a028d6ba 	srli	r20,r20,26
   14510:	180691ba 	slli	r3,r3,6
   14514:	8020c03a 	cmpne	r16,r16,zero
   14518:	8520b03a 	or	r16,r16,r20
   1451c:	80e0b03a 	or	r16,r16,r3
   14520:	8082002c 	andhi	r2,r16,2048
   14524:	10000426 	beq	r2,zero,14538 <__mulsf3+0x2f8>
   14528:	8004d07a 	srli	r2,r16,1
   1452c:	8400004c 	andi	r16,r16,1
   14530:	9023883a 	mov	r17,r18
   14534:	80a0b03a 	or	r16,r16,r2
   14538:	88c01fc4 	addi	r3,r17,127
   1453c:	00c02d0e 	bge	zero,r3,145f4 <__mulsf3+0x3b4>
   14540:	808001cc 	andi	r2,r16,7
   14544:	10000426 	beq	r2,zero,14558 <__mulsf3+0x318>
   14548:	810003cc 	andi	r4,r16,15
   1454c:	00800104 	movi	r2,4
   14550:	20800126 	beq	r4,r2,14558 <__mulsf3+0x318>
   14554:	80a1883a 	add	r16,r16,r2
   14558:	8082002c 	andhi	r2,r16,2048
   1455c:	10000426 	beq	r2,zero,14570 <__mulsf3+0x330>
   14560:	00be0034 	movhi	r2,63488
   14564:	10bfffc4 	addi	r2,r2,-1
   14568:	88c02004 	addi	r3,r17,128
   1456c:	80a0703a 	and	r16,r16,r2
   14570:	00803f84 	movi	r2,254
   14574:	10c01b0e 	bge	r2,r3,145e4 <__mulsf3+0x3a4>
   14578:	ad00004c 	andi	r20,r21,1
   1457c:	00ffffc4 	movi	r3,-1
   14580:	0009883a 	mov	r4,zero
   14584:	003f7d06 	br	1437c <_gp+0xffff2318>
   14588:	9821883a 	mov	r16,r19
   1458c:	a839883a 	mov	fp,r21
   14590:	282f883a 	mov	r23,r5
   14594:	003f7406 	br	14368 <_gp+0xffff2304>
   14598:	9821883a 	mov	r16,r19
   1459c:	3039883a 	mov	fp,r6
   145a0:	282f883a 	mov	r23,r5
   145a4:	003f7006 	br	14368 <_gp+0xffff2304>
   145a8:	8080102c 	andhi	r2,r16,64
   145ac:	10000826 	beq	r2,zero,145d0 <__mulsf3+0x390>
   145b0:	9880102c 	andhi	r2,r19,64
   145b4:	1000061e 	bne	r2,zero,145d0 <__mulsf3+0x390>
   145b8:	00802034 	movhi	r2,128
   145bc:	99001034 	orhi	r4,r19,64
   145c0:	10bfffc4 	addi	r2,r2,-1
   145c4:	b029883a 	mov	r20,r22
   145c8:	2088703a 	and	r4,r4,r2
   145cc:	003fae06 	br	14488 <_gp+0xffff2424>
   145d0:	00802034 	movhi	r2,128
   145d4:	81001034 	orhi	r4,r16,64
   145d8:	10bfffc4 	addi	r2,r2,-1
   145dc:	2088703a 	and	r4,r4,r2
   145e0:	003fa906 	br	14488 <_gp+0xffff2424>
   145e4:	802091ba 	slli	r16,r16,6
   145e8:	ad00004c 	andi	r20,r21,1
   145ec:	8008d27a 	srli	r4,r16,9
   145f0:	003f6206 	br	1437c <_gp+0xffff2318>
   145f4:	00ffe084 	movi	r3,-126
   145f8:	1c47c83a 	sub	r3,r3,r17
   145fc:	008006c4 	movi	r2,27
   14600:	10c0070e 	bge	r2,r3,14620 <__mulsf3+0x3e0>
   14604:	ad00004c 	andi	r20,r21,1
   14608:	0007883a 	mov	r3,zero
   1460c:	0009883a 	mov	r4,zero
   14610:	003f5a06 	br	1437c <_gp+0xffff2318>
   14614:	9023883a 	mov	r17,r18
   14618:	e02b883a 	mov	r21,fp
   1461c:	003fc606 	br	14538 <_gp+0xffff24d4>
   14620:	88802784 	addi	r2,r17,158
   14624:	8084983a 	sll	r2,r16,r2
   14628:	80e0d83a 	srl	r16,r16,r3
   1462c:	1004c03a 	cmpne	r2,r2,zero
   14630:	1404b03a 	or	r2,r2,r16
   14634:	10c001cc 	andi	r3,r2,7
   14638:	18000426 	beq	r3,zero,1464c <__mulsf3+0x40c>
   1463c:	110003cc 	andi	r4,r2,15
   14640:	00c00104 	movi	r3,4
   14644:	20c00126 	beq	r4,r3,1464c <__mulsf3+0x40c>
   14648:	10c5883a 	add	r2,r2,r3
   1464c:	10c1002c 	andhi	r3,r2,1024
   14650:	18000426 	beq	r3,zero,14664 <__mulsf3+0x424>
   14654:	ad00004c 	andi	r20,r21,1
   14658:	00c00044 	movi	r3,1
   1465c:	0009883a 	mov	r4,zero
   14660:	003f4606 	br	1437c <_gp+0xffff2318>
   14664:	100491ba 	slli	r2,r2,6
   14668:	ad00004c 	andi	r20,r21,1
   1466c:	0007883a 	mov	r3,zero
   14670:	1008d27a 	srli	r4,r2,9
   14674:	003f4106 	br	1437c <_gp+0xffff2318>
   14678:	00802034 	movhi	r2,128
   1467c:	81001034 	orhi	r4,r16,64
   14680:	10bfffc4 	addi	r2,r2,-1
   14684:	e500004c 	andi	r20,fp,1
   14688:	2088703a 	and	r4,r4,r2
   1468c:	003f7e06 	br	14488 <_gp+0xffff2424>

00014690 <__subsf3>:
   14690:	defffc04 	addi	sp,sp,-16
   14694:	280ed5fa 	srli	r7,r5,23
   14698:	02002034 	movhi	r8,128
   1469c:	280d883a 	mov	r6,r5
   146a0:	423fffc4 	addi	r8,r8,-1
   146a4:	200ad5fa 	srli	r5,r4,23
   146a8:	dc400115 	stw	r17,4(sp)
   146ac:	2022d7fa 	srli	r17,r4,31
   146b0:	4108703a 	and	r4,r8,r4
   146b4:	dc000015 	stw	r16,0(sp)
   146b8:	4190703a 	and	r8,r8,r6
   146bc:	200690fa 	slli	r3,r4,3
   146c0:	dfc00315 	stw	ra,12(sp)
   146c4:	dc800215 	stw	r18,8(sp)
   146c8:	39c03fcc 	andi	r7,r7,255
   146cc:	01003fc4 	movi	r4,255
   146d0:	8805883a 	mov	r2,r17
   146d4:	2c003fcc 	andi	r16,r5,255
   146d8:	8c403fcc 	andi	r17,r17,255
   146dc:	300cd7fa 	srli	r6,r6,31
   146e0:	401090fa 	slli	r8,r8,3
   146e4:	39006126 	beq	r7,r4,1486c <__subsf3+0x1dc>
   146e8:	3180005c 	xori	r6,r6,1
   146ec:	89804926 	beq	r17,r6,14814 <__subsf3+0x184>
   146f0:	81c5c83a 	sub	r2,r16,r7
   146f4:	0080710e 	bge	zero,r2,148bc <__subsf3+0x22c>
   146f8:	38001e1e 	bne	r7,zero,14774 <__subsf3+0xe4>
   146fc:	4000651e 	bne	r8,zero,14894 <__subsf3+0x204>
   14700:	188001cc 	andi	r2,r3,7
   14704:	10000426 	beq	r2,zero,14718 <__subsf3+0x88>
   14708:	190003cc 	andi	r4,r3,15
   1470c:	00800104 	movi	r2,4
   14710:	20800126 	beq	r4,r2,14718 <__subsf3+0x88>
   14714:	18c00104 	addi	r3,r3,4
   14718:	1901002c 	andhi	r4,r3,1024
   1471c:	8880004c 	andi	r2,r17,1
   14720:	20003426 	beq	r4,zero,147f4 <__subsf3+0x164>
   14724:	81400044 	addi	r5,r16,1
   14728:	01003fc4 	movi	r4,255
   1472c:	29006e26 	beq	r5,r4,148e8 <__subsf3+0x258>
   14730:	180691ba 	slli	r3,r3,6
   14734:	1808d27a 	srli	r4,r3,9
   14738:	29403fcc 	andi	r5,r5,255
   1473c:	280a95fa 	slli	r5,r5,23
   14740:	10803fcc 	andi	r2,r2,255
   14744:	00c02034 	movhi	r3,128
   14748:	100497fa 	slli	r2,r2,31
   1474c:	18ffffc4 	addi	r3,r3,-1
   14750:	20c6703a 	and	r3,r4,r3
   14754:	1946b03a 	or	r3,r3,r5
   14758:	1884b03a 	or	r2,r3,r2
   1475c:	dfc00317 	ldw	ra,12(sp)
   14760:	dc800217 	ldw	r18,8(sp)
   14764:	dc400117 	ldw	r17,4(sp)
   14768:	dc000017 	ldw	r16,0(sp)
   1476c:	dec00404 	addi	sp,sp,16
   14770:	f800283a 	ret
   14774:	01003fc4 	movi	r4,255
   14778:	813fe126 	beq	r16,r4,14700 <_gp+0xffff269c>
   1477c:	42010034 	orhi	r8,r8,1024
   14780:	010006c4 	movi	r4,27
   14784:	2080600e 	bge	r4,r2,14908 <__subsf3+0x278>
   14788:	02000044 	movi	r8,1
   1478c:	1a07c83a 	sub	r3,r3,r8
   14790:	1881002c 	andhi	r2,r3,1024
   14794:	10001426 	beq	r2,zero,147e8 <__subsf3+0x158>
   14798:	04810034 	movhi	r18,1024
   1479c:	94bfffc4 	addi	r18,r18,-1
   147a0:	1ca4703a 	and	r18,r3,r18
   147a4:	9009883a 	mov	r4,r18
   147a8:	00176d40 	call	176d4 <__clzsi2>
   147ac:	10bffec4 	addi	r2,r2,-5
   147b0:	90a4983a 	sll	r18,r18,r2
   147b4:	14004f16 	blt	r2,r16,148f4 <__subsf3+0x264>
   147b8:	140bc83a 	sub	r5,r2,r16
   147bc:	00c007c4 	movi	r3,31
   147c0:	1947c83a 	sub	r3,r3,r5
   147c4:	90c6983a 	sll	r3,r18,r3
   147c8:	29400044 	addi	r5,r5,1
   147cc:	9164d83a 	srl	r18,r18,r5
   147d0:	1806c03a 	cmpne	r3,r3,zero
   147d4:	0021883a 	mov	r16,zero
   147d8:	1c86b03a 	or	r3,r3,r18
   147dc:	003fc806 	br	14700 <_gp+0xffff269c>
   147e0:	1000e726 	beq	r2,zero,14b80 <__subsf3+0x4f0>
   147e4:	1007883a 	mov	r3,r2
   147e8:	188001cc 	andi	r2,r3,7
   147ec:	103fc61e 	bne	r2,zero,14708 <_gp+0xffff26a4>
   147f0:	8880004c 	andi	r2,r17,1
   147f4:	01003fc4 	movi	r4,255
   147f8:	1806d0fa 	srli	r3,r3,3
   147fc:	81001e26 	beq	r16,r4,14878 <__subsf3+0x1e8>
   14800:	01002034 	movhi	r4,128
   14804:	213fffc4 	addi	r4,r4,-1
   14808:	800b883a 	mov	r5,r16
   1480c:	1908703a 	and	r4,r3,r4
   14810:	003fc906 	br	14738 <_gp+0xffff26d4>
   14814:	81c9c83a 	sub	r4,r16,r7
   14818:	0100420e 	bge	zero,r4,14924 <__subsf3+0x294>
   1481c:	38002226 	beq	r7,zero,148a8 <__subsf3+0x218>
   14820:	01403fc4 	movi	r5,255
   14824:	817fb626 	beq	r16,r5,14700 <_gp+0xffff269c>
   14828:	42010034 	orhi	r8,r8,1024
   1482c:	014006c4 	movi	r5,27
   14830:	2900580e 	bge	r5,r4,14994 <__subsf3+0x304>
   14834:	01000044 	movi	r4,1
   14838:	1907883a 	add	r3,r3,r4
   1483c:	1901002c 	andhi	r4,r3,1024
   14840:	203fe926 	beq	r4,zero,147e8 <_gp+0xffff2784>
   14844:	84000044 	addi	r16,r16,1
   14848:	01003fc4 	movi	r4,255
   1484c:	81007626 	beq	r16,r4,14a28 <__subsf3+0x398>
   14850:	00bf0034 	movhi	r2,64512
   14854:	10bfffc4 	addi	r2,r2,-1
   14858:	1900004c 	andi	r4,r3,1
   1485c:	1886703a 	and	r3,r3,r2
   14860:	1806d07a 	srli	r3,r3,1
   14864:	1906b03a 	or	r3,r3,r4
   14868:	003fa506 	br	14700 <_gp+0xffff269c>
   1486c:	403f9e26 	beq	r8,zero,146e8 <_gp+0xffff2684>
   14870:	31803fcc 	andi	r6,r6,255
   14874:	003f9d06 	br	146ec <_gp+0xffff2688>
   14878:	18001b26 	beq	r3,zero,148e8 <__subsf3+0x258>
   1487c:	19001034 	orhi	r4,r3,64
   14880:	00c02034 	movhi	r3,128
   14884:	18ffffc4 	addi	r3,r3,-1
   14888:	017fffc4 	movi	r5,-1
   1488c:	20c8703a 	and	r4,r4,r3
   14890:	003fa906 	br	14738 <_gp+0xffff26d4>
   14894:	10bfffc4 	addi	r2,r2,-1
   14898:	103fbc26 	beq	r2,zero,1478c <_gp+0xffff2728>
   1489c:	01003fc4 	movi	r4,255
   148a0:	813fb71e 	bne	r16,r4,14780 <_gp+0xffff271c>
   148a4:	003f9606 	br	14700 <_gp+0xffff269c>
   148a8:	403f9526 	beq	r8,zero,14700 <_gp+0xffff269c>
   148ac:	213fffc4 	addi	r4,r4,-1
   148b0:	2000481e 	bne	r4,zero,149d4 <__subsf3+0x344>
   148b4:	1a07883a 	add	r3,r3,r8
   148b8:	003fe006 	br	1483c <_gp+0xffff27d8>
   148bc:	1000241e 	bne	r2,zero,14950 <__subsf3+0x2c0>
   148c0:	80800044 	addi	r2,r16,1
   148c4:	10803fcc 	andi	r2,r2,255
   148c8:	01000044 	movi	r4,1
   148cc:	20804f0e 	bge	r4,r2,14a0c <__subsf3+0x37c>
   148d0:	1a25c83a 	sub	r18,r3,r8
   148d4:	9081002c 	andhi	r2,r18,1024
   148d8:	10002926 	beq	r2,zero,14980 <__subsf3+0x2f0>
   148dc:	40e5c83a 	sub	r18,r8,r3
   148e0:	3023883a 	mov	r17,r6
   148e4:	003faf06 	br	147a4 <_gp+0xffff2740>
   148e8:	017fffc4 	movi	r5,-1
   148ec:	0009883a 	mov	r4,zero
   148f0:	003f9106 	br	14738 <_gp+0xffff26d4>
   148f4:	00ff0034 	movhi	r3,64512
   148f8:	18ffffc4 	addi	r3,r3,-1
   148fc:	80a1c83a 	sub	r16,r16,r2
   14900:	90c6703a 	and	r3,r18,r3
   14904:	003f7e06 	br	14700 <_gp+0xffff269c>
   14908:	01000804 	movi	r4,32
   1490c:	2089c83a 	sub	r4,r4,r2
   14910:	4108983a 	sll	r4,r8,r4
   14914:	4090d83a 	srl	r8,r8,r2
   14918:	2004c03a 	cmpne	r2,r4,zero
   1491c:	1210b03a 	or	r8,r2,r8
   14920:	003f9a06 	br	1478c <_gp+0xffff2728>
   14924:	2000421e 	bne	r4,zero,14a30 <__subsf3+0x3a0>
   14928:	81000044 	addi	r4,r16,1
   1492c:	21803fcc 	andi	r6,r4,255
   14930:	01400044 	movi	r5,1
   14934:	29802a0e 	bge	r5,r6,149e0 <__subsf3+0x350>
   14938:	01403fc4 	movi	r5,255
   1493c:	21403926 	beq	r4,r5,14a24 <__subsf3+0x394>
   14940:	40c7883a 	add	r3,r8,r3
   14944:	1806d07a 	srli	r3,r3,1
   14948:	2021883a 	mov	r16,r4
   1494c:	003f6c06 	br	14700 <_gp+0xffff269c>
   14950:	80001726 	beq	r16,zero,149b0 <__subsf3+0x320>
   14954:	01003fc4 	movi	r4,255
   14958:	39001a26 	beq	r7,r4,149c4 <__subsf3+0x334>
   1495c:	0085c83a 	sub	r2,zero,r2
   14960:	18c10034 	orhi	r3,r3,1024
   14964:	010006c4 	movi	r4,27
   14968:	2080430e 	bge	r4,r2,14a78 <__subsf3+0x3e8>
   1496c:	00c00044 	movi	r3,1
   14970:	40c7c83a 	sub	r3,r8,r3
   14974:	3821883a 	mov	r16,r7
   14978:	3023883a 	mov	r17,r6
   1497c:	003f8406 	br	14790 <_gp+0xffff272c>
   14980:	903f881e 	bne	r18,zero,147a4 <_gp+0xffff2740>
   14984:	0007883a 	mov	r3,zero
   14988:	0005883a 	mov	r2,zero
   1498c:	0021883a 	mov	r16,zero
   14990:	003f9806 	br	147f4 <_gp+0xffff2790>
   14994:	01400804 	movi	r5,32
   14998:	290bc83a 	sub	r5,r5,r4
   1499c:	414a983a 	sll	r5,r8,r5
   149a0:	4110d83a 	srl	r8,r8,r4
   149a4:	2808c03a 	cmpne	r4,r5,zero
   149a8:	2208b03a 	or	r4,r4,r8
   149ac:	003fa206 	br	14838 <_gp+0xffff27d4>
   149b0:	18000426 	beq	r3,zero,149c4 <__subsf3+0x334>
   149b4:	0084303a 	nor	r2,zero,r2
   149b8:	103fed26 	beq	r2,zero,14970 <_gp+0xffff290c>
   149bc:	01003fc4 	movi	r4,255
   149c0:	393fe81e 	bne	r7,r4,14964 <_gp+0xffff2900>
   149c4:	4007883a 	mov	r3,r8
   149c8:	3821883a 	mov	r16,r7
   149cc:	3023883a 	mov	r17,r6
   149d0:	003f4b06 	br	14700 <_gp+0xffff269c>
   149d4:	01403fc4 	movi	r5,255
   149d8:	817f941e 	bne	r16,r5,1482c <_gp+0xffff27c8>
   149dc:	003f4806 	br	14700 <_gp+0xffff269c>
   149e0:	8000471e 	bne	r16,zero,14b00 <__subsf3+0x470>
   149e4:	18006126 	beq	r3,zero,14b6c <__subsf3+0x4dc>
   149e8:	403f4526 	beq	r8,zero,14700 <_gp+0xffff269c>
   149ec:	1a07883a 	add	r3,r3,r8
   149f0:	1881002c 	andhi	r2,r3,1024
   149f4:	103f7c26 	beq	r2,zero,147e8 <_gp+0xffff2784>
   149f8:	00bf0034 	movhi	r2,64512
   149fc:	10bfffc4 	addi	r2,r2,-1
   14a00:	2821883a 	mov	r16,r5
   14a04:	1886703a 	and	r3,r3,r2
   14a08:	003f3d06 	br	14700 <_gp+0xffff269c>
   14a0c:	8000141e 	bne	r16,zero,14a60 <__subsf3+0x3d0>
   14a10:	1800311e 	bne	r3,zero,14ad8 <__subsf3+0x448>
   14a14:	40004626 	beq	r8,zero,14b30 <__subsf3+0x4a0>
   14a18:	4007883a 	mov	r3,r8
   14a1c:	3023883a 	mov	r17,r6
   14a20:	003f3706 	br	14700 <_gp+0xffff269c>
   14a24:	2021883a 	mov	r16,r4
   14a28:	0007883a 	mov	r3,zero
   14a2c:	003f7106 	br	147f4 <_gp+0xffff2790>
   14a30:	8000181e 	bne	r16,zero,14a94 <__subsf3+0x404>
   14a34:	18002f26 	beq	r3,zero,14af4 <__subsf3+0x464>
   14a38:	0108303a 	nor	r4,zero,r4
   14a3c:	20000526 	beq	r4,zero,14a54 <__subsf3+0x3c4>
   14a40:	01403fc4 	movi	r5,255
   14a44:	39402b26 	beq	r7,r5,14af4 <__subsf3+0x464>
   14a48:	014006c4 	movi	r5,27
   14a4c:	2900400e 	bge	r5,r4,14b50 <__subsf3+0x4c0>
   14a50:	00c00044 	movi	r3,1
   14a54:	1a07883a 	add	r3,r3,r8
   14a58:	3821883a 	mov	r16,r7
   14a5c:	003f7706 	br	1483c <_gp+0xffff27d8>
   14a60:	1800111e 	bne	r3,zero,14aa8 <__subsf3+0x418>
   14a64:	40003526 	beq	r8,zero,14b3c <__subsf3+0x4ac>
   14a68:	4007883a 	mov	r3,r8
   14a6c:	3023883a 	mov	r17,r6
   14a70:	04003fc4 	movi	r16,255
   14a74:	003f2206 	br	14700 <_gp+0xffff269c>
   14a78:	01000804 	movi	r4,32
   14a7c:	2089c83a 	sub	r4,r4,r2
   14a80:	1908983a 	sll	r4,r3,r4
   14a84:	1884d83a 	srl	r2,r3,r2
   14a88:	2006c03a 	cmpne	r3,r4,zero
   14a8c:	1886b03a 	or	r3,r3,r2
   14a90:	003fb706 	br	14970 <_gp+0xffff290c>
   14a94:	01403fc4 	movi	r5,255
   14a98:	39401626 	beq	r7,r5,14af4 <__subsf3+0x464>
   14a9c:	0109c83a 	sub	r4,zero,r4
   14aa0:	18c10034 	orhi	r3,r3,1024
   14aa4:	003fe806 	br	14a48 <_gp+0xffff29e4>
   14aa8:	40001f26 	beq	r8,zero,14b28 <__subsf3+0x498>
   14aac:	1806d0fa 	srli	r3,r3,3
   14ab0:	1880102c 	andhi	r2,r3,64
   14ab4:	10000526 	beq	r2,zero,14acc <__subsf3+0x43c>
   14ab8:	4010d0fa 	srli	r8,r8,3
   14abc:	4080102c 	andhi	r2,r8,64
   14ac0:	1000021e 	bne	r2,zero,14acc <__subsf3+0x43c>
   14ac4:	4007883a 	mov	r3,r8
   14ac8:	3023883a 	mov	r17,r6
   14acc:	180690fa 	slli	r3,r3,3
   14ad0:	04003fc4 	movi	r16,255
   14ad4:	003f0a06 	br	14700 <_gp+0xffff269c>
   14ad8:	403f0926 	beq	r8,zero,14700 <_gp+0xffff269c>
   14adc:	1a05c83a 	sub	r2,r3,r8
   14ae0:	1101002c 	andhi	r4,r2,1024
   14ae4:	203f3e26 	beq	r4,zero,147e0 <_gp+0xffff277c>
   14ae8:	40c7c83a 	sub	r3,r8,r3
   14aec:	3023883a 	mov	r17,r6
   14af0:	003f0306 	br	14700 <_gp+0xffff269c>
   14af4:	4007883a 	mov	r3,r8
   14af8:	3821883a 	mov	r16,r7
   14afc:	003f0006 	br	14700 <_gp+0xffff269c>
   14b00:	18001c26 	beq	r3,zero,14b74 <__subsf3+0x4e4>
   14b04:	40000826 	beq	r8,zero,14b28 <__subsf3+0x498>
   14b08:	1806d0fa 	srli	r3,r3,3
   14b0c:	1880102c 	andhi	r2,r3,64
   14b10:	103fee26 	beq	r2,zero,14acc <_gp+0xffff2a68>
   14b14:	4010d0fa 	srli	r8,r8,3
   14b18:	4080102c 	andhi	r2,r8,64
   14b1c:	103feb1e 	bne	r2,zero,14acc <_gp+0xffff2a68>
   14b20:	4007883a 	mov	r3,r8
   14b24:	003fe906 	br	14acc <_gp+0xffff2a68>
   14b28:	04003fc4 	movi	r16,255
   14b2c:	003ef406 	br	14700 <_gp+0xffff269c>
   14b30:	8007883a 	mov	r3,r16
   14b34:	0005883a 	mov	r2,zero
   14b38:	003f2e06 	br	147f4 <_gp+0xffff2790>
   14b3c:	00c10034 	movhi	r3,1024
   14b40:	0005883a 	mov	r2,zero
   14b44:	18fffe04 	addi	r3,r3,-8
   14b48:	04003fc4 	movi	r16,255
   14b4c:	003f2906 	br	147f4 <_gp+0xffff2790>
   14b50:	01400804 	movi	r5,32
   14b54:	290bc83a 	sub	r5,r5,r4
   14b58:	194a983a 	sll	r5,r3,r5
   14b5c:	1908d83a 	srl	r4,r3,r4
   14b60:	2806c03a 	cmpne	r3,r5,zero
   14b64:	1906b03a 	or	r3,r3,r4
   14b68:	003fba06 	br	14a54 <_gp+0xffff29f0>
   14b6c:	4007883a 	mov	r3,r8
   14b70:	003ee306 	br	14700 <_gp+0xffff269c>
   14b74:	4007883a 	mov	r3,r8
   14b78:	04003fc4 	movi	r16,255
   14b7c:	003ee006 	br	14700 <_gp+0xffff269c>
   14b80:	0007883a 	mov	r3,zero
   14b84:	0005883a 	mov	r2,zero
   14b88:	003f1a06 	br	147f4 <_gp+0xffff2790>

00014b8c <__fixsfsi>:
   14b8c:	2006d5fa 	srli	r3,r4,23
   14b90:	00802034 	movhi	r2,128
   14b94:	10bfffc4 	addi	r2,r2,-1
   14b98:	18c03fcc 	andi	r3,r3,255
   14b9c:	01401f84 	movi	r5,126
   14ba0:	1104703a 	and	r2,r2,r4
   14ba4:	2008d7fa 	srli	r4,r4,31
   14ba8:	28c0110e 	bge	r5,r3,14bf0 <__fixsfsi+0x64>
   14bac:	01402744 	movi	r5,157
   14bb0:	28c00b16 	blt	r5,r3,14be0 <__fixsfsi+0x54>
   14bb4:	01402544 	movi	r5,149
   14bb8:	10802034 	orhi	r2,r2,128
   14bbc:	28c00e16 	blt	r5,r3,14bf8 <__fixsfsi+0x6c>
   14bc0:	01402584 	movi	r5,150
   14bc4:	28c7c83a 	sub	r3,r5,r3
   14bc8:	10c6d83a 	srl	r3,r2,r3
   14bcc:	21003fcc 	andi	r4,r4,255
   14bd0:	0105c83a 	sub	r2,zero,r4
   14bd4:	1886f03a 	xor	r3,r3,r2
   14bd8:	1905883a 	add	r2,r3,r4
   14bdc:	f800283a 	ret
   14be0:	00a00034 	movhi	r2,32768
   14be4:	10bfffc4 	addi	r2,r2,-1
   14be8:	2085883a 	add	r2,r4,r2
   14bec:	f800283a 	ret
   14bf0:	0005883a 	mov	r2,zero
   14bf4:	f800283a 	ret
   14bf8:	18ffda84 	addi	r3,r3,-150
   14bfc:	10c6983a 	sll	r3,r2,r3
   14c00:	003ff206 	br	14bcc <_gp+0xffff2b68>

00014c04 <__floatsisf>:
   14c04:	defffd04 	addi	sp,sp,-12
   14c08:	dc000015 	stw	r16,0(sp)
   14c0c:	dfc00215 	stw	ra,8(sp)
   14c10:	dc400115 	stw	r17,4(sp)
   14c14:	2021883a 	mov	r16,r4
   14c18:	20003a26 	beq	r4,zero,14d04 <__floatsisf+0x100>
   14c1c:	2022d7fa 	srli	r17,r4,31
   14c20:	88000126 	beq	r17,zero,14c28 <__floatsisf+0x24>
   14c24:	0121c83a 	sub	r16,zero,r4
   14c28:	8009883a 	mov	r4,r16
   14c2c:	00176d40 	call	176d4 <__clzsi2>
   14c30:	00c02784 	movi	r3,158
   14c34:	1887c83a 	sub	r3,r3,r2
   14c38:	01802584 	movi	r6,150
   14c3c:	800b883a 	mov	r5,r16
   14c40:	30c01616 	blt	r6,r3,14c9c <__floatsisf+0x98>
   14c44:	01000204 	movi	r4,8
   14c48:	2080020e 	bge	r4,r2,14c54 <__floatsisf+0x50>
   14c4c:	10bffe04 	addi	r2,r2,-8
   14c50:	80a0983a 	sll	r16,r16,r2
   14c54:	00802034 	movhi	r2,128
   14c58:	10bfffc4 	addi	r2,r2,-1
   14c5c:	8809883a 	mov	r4,r17
   14c60:	80a0703a 	and	r16,r16,r2
   14c64:	18803fcc 	andi	r2,r3,255
   14c68:	100695fa 	slli	r3,r2,23
   14c6c:	20803fcc 	andi	r2,r4,255
   14c70:	100897fa 	slli	r4,r2,31
   14c74:	00802034 	movhi	r2,128
   14c78:	10bfffc4 	addi	r2,r2,-1
   14c7c:	8084703a 	and	r2,r16,r2
   14c80:	10c4b03a 	or	r2,r2,r3
   14c84:	1104b03a 	or	r2,r2,r4
   14c88:	dfc00217 	ldw	ra,8(sp)
   14c8c:	dc400117 	ldw	r17,4(sp)
   14c90:	dc000017 	ldw	r16,0(sp)
   14c94:	dec00304 	addi	sp,sp,12
   14c98:	f800283a 	ret
   14c9c:	01002644 	movi	r4,153
   14ca0:	20c01c16 	blt	r4,r3,14d14 <__floatsisf+0x110>
   14ca4:	01000144 	movi	r4,5
   14ca8:	2080020e 	bge	r4,r2,14cb4 <__floatsisf+0xb0>
   14cac:	113ffec4 	addi	r4,r2,-5
   14cb0:	290a983a 	sll	r5,r5,r4
   14cb4:	043f0034 	movhi	r16,64512
   14cb8:	843fffc4 	addi	r16,r16,-1
   14cbc:	298001cc 	andi	r6,r5,7
   14cc0:	2c20703a 	and	r16,r5,r16
   14cc4:	30000426 	beq	r6,zero,14cd8 <__floatsisf+0xd4>
   14cc8:	294003cc 	andi	r5,r5,15
   14ccc:	01000104 	movi	r4,4
   14cd0:	29000126 	beq	r5,r4,14cd8 <__floatsisf+0xd4>
   14cd4:	8121883a 	add	r16,r16,r4
   14cd8:	8101002c 	andhi	r4,r16,1024
   14cdc:	20000526 	beq	r4,zero,14cf4 <__floatsisf+0xf0>
   14ce0:	00c027c4 	movi	r3,159
   14ce4:	1887c83a 	sub	r3,r3,r2
   14ce8:	00bf0034 	movhi	r2,64512
   14cec:	10bfffc4 	addi	r2,r2,-1
   14cf0:	80a0703a 	and	r16,r16,r2
   14cf4:	802091ba 	slli	r16,r16,6
   14cf8:	8809883a 	mov	r4,r17
   14cfc:	8020d27a 	srli	r16,r16,9
   14d00:	003fd806 	br	14c64 <_gp+0xffff2c00>
   14d04:	0009883a 	mov	r4,zero
   14d08:	0007883a 	mov	r3,zero
   14d0c:	0021883a 	mov	r16,zero
   14d10:	003fd406 	br	14c64 <_gp+0xffff2c00>
   14d14:	01800144 	movi	r6,5
   14d18:	110006c4 	addi	r4,r2,27
   14d1c:	8108983a 	sll	r4,r16,r4
   14d20:	308fc83a 	sub	r7,r6,r2
   14d24:	81cad83a 	srl	r5,r16,r7
   14d28:	2008c03a 	cmpne	r4,r4,zero
   14d2c:	214ab03a 	or	r5,r4,r5
   14d30:	30bfe00e 	bge	r6,r2,14cb4 <_gp+0xffff2c50>
   14d34:	003fdd06 	br	14cac <_gp+0xffff2c48>

00014d38 <__adddf3>:
   14d38:	02000434 	movhi	r8,16
   14d3c:	423fffc4 	addi	r8,r8,-1
   14d40:	defffb04 	addi	sp,sp,-20
   14d44:	2a12703a 	and	r9,r5,r8
   14d48:	2806d7fa 	srli	r3,r5,31
   14d4c:	3a10703a 	and	r8,r7,r8
   14d50:	3804d53a 	srli	r2,r7,20
   14d54:	3014d77a 	srli	r10,r6,29
   14d58:	dc000015 	stw	r16,0(sp)
   14d5c:	481290fa 	slli	r9,r9,3
   14d60:	2820d53a 	srli	r16,r5,20
   14d64:	401090fa 	slli	r8,r8,3
   14d68:	200ad77a 	srli	r5,r4,29
   14d6c:	380ed7fa 	srli	r7,r7,31
   14d70:	dc800215 	stw	r18,8(sp)
   14d74:	dc400115 	stw	r17,4(sp)
   14d78:	dfc00415 	stw	ra,16(sp)
   14d7c:	dcc00315 	stw	r19,12(sp)
   14d80:	1c803fcc 	andi	r18,r3,255
   14d84:	8401ffcc 	andi	r16,r16,2047
   14d88:	494ab03a 	or	r5,r9,r5
   14d8c:	202290fa 	slli	r17,r4,3
   14d90:	1081ffcc 	andi	r2,r2,2047
   14d94:	4290b03a 	or	r8,r8,r10
   14d98:	300c90fa 	slli	r6,r6,3
   14d9c:	91c07026 	beq	r18,r7,14f60 <__adddf3+0x228>
   14da0:	8087c83a 	sub	r3,r16,r2
   14da4:	00c0b30e 	bge	zero,r3,15074 <__adddf3+0x33c>
   14da8:	10002a1e 	bne	r2,zero,14e54 <__adddf3+0x11c>
   14dac:	4184b03a 	or	r2,r8,r6
   14db0:	1000991e 	bne	r2,zero,15018 <__adddf3+0x2e0>
   14db4:	888001cc 	andi	r2,r17,7
   14db8:	10005b26 	beq	r2,zero,14f28 <__adddf3+0x1f0>
   14dbc:	88c003cc 	andi	r3,r17,15
   14dc0:	00800104 	movi	r2,4
   14dc4:	18805826 	beq	r3,r2,14f28 <__adddf3+0x1f0>
   14dc8:	89800104 	addi	r6,r17,4
   14dcc:	3463803a 	cmpltu	r17,r6,r17
   14dd0:	2c4b883a 	add	r5,r5,r17
   14dd4:	2880202c 	andhi	r2,r5,128
   14dd8:	9007883a 	mov	r3,r18
   14ddc:	3023883a 	mov	r17,r6
   14de0:	10005426 	beq	r2,zero,14f34 <__adddf3+0x1fc>
   14de4:	84000044 	addi	r16,r16,1
   14de8:	0081ffc4 	movi	r2,2047
   14dec:	8080c126 	beq	r16,r2,150f4 <__adddf3+0x3bc>
   14df0:	013fe034 	movhi	r4,65408
   14df4:	213fffc4 	addi	r4,r4,-1
   14df8:	290a703a 	and	r5,r5,r4
   14dfc:	2804977a 	slli	r2,r5,29
   14e00:	280a927a 	slli	r5,r5,9
   14e04:	8822d0fa 	srli	r17,r17,3
   14e08:	8401ffcc 	andi	r16,r16,2047
   14e0c:	2808d33a 	srli	r4,r5,12
   14e10:	1444b03a 	or	r2,r2,r17
   14e14:	8401ffcc 	andi	r16,r16,2047
   14e18:	800a953a 	slli	r5,r16,20
   14e1c:	18c03fcc 	andi	r3,r3,255
   14e20:	04000434 	movhi	r16,16
   14e24:	180697fa 	slli	r3,r3,31
   14e28:	843fffc4 	addi	r16,r16,-1
   14e2c:	2420703a 	and	r16,r4,r16
   14e30:	8160b03a 	or	r16,r16,r5
   14e34:	80c6b03a 	or	r3,r16,r3
   14e38:	dfc00417 	ldw	ra,16(sp)
   14e3c:	dcc00317 	ldw	r19,12(sp)
   14e40:	dc800217 	ldw	r18,8(sp)
   14e44:	dc400117 	ldw	r17,4(sp)
   14e48:	dc000017 	ldw	r16,0(sp)
   14e4c:	dec00504 	addi	sp,sp,20
   14e50:	f800283a 	ret
   14e54:	0081ffc4 	movi	r2,2047
   14e58:	80bfd626 	beq	r16,r2,14db4 <_gp+0xffff2d50>
   14e5c:	42002034 	orhi	r8,r8,128
   14e60:	00800e04 	movi	r2,56
   14e64:	10c0a616 	blt	r2,r3,15100 <__adddf3+0x3c8>
   14e68:	008007c4 	movi	r2,31
   14e6c:	10c0c916 	blt	r2,r3,15194 <__adddf3+0x45c>
   14e70:	00800804 	movi	r2,32
   14e74:	10c5c83a 	sub	r2,r2,r3
   14e78:	408e983a 	sll	r7,r8,r2
   14e7c:	30c8d83a 	srl	r4,r6,r3
   14e80:	3084983a 	sll	r2,r6,r2
   14e84:	40c6d83a 	srl	r3,r8,r3
   14e88:	390cb03a 	or	r6,r7,r4
   14e8c:	1004c03a 	cmpne	r2,r2,zero
   14e90:	308cb03a 	or	r6,r6,r2
   14e94:	898dc83a 	sub	r6,r17,r6
   14e98:	89a3803a 	cmpltu	r17,r17,r6
   14e9c:	28cbc83a 	sub	r5,r5,r3
   14ea0:	2c4bc83a 	sub	r5,r5,r17
   14ea4:	3023883a 	mov	r17,r6
   14ea8:	2880202c 	andhi	r2,r5,128
   14eac:	10006d26 	beq	r2,zero,15064 <__adddf3+0x32c>
   14eb0:	04c02034 	movhi	r19,128
   14eb4:	9cffffc4 	addi	r19,r19,-1
   14eb8:	2ce6703a 	and	r19,r5,r19
   14ebc:	98007e26 	beq	r19,zero,150b8 <__adddf3+0x380>
   14ec0:	9809883a 	mov	r4,r19
   14ec4:	00176d40 	call	176d4 <__clzsi2>
   14ec8:	10fffe04 	addi	r3,r2,-8
   14ecc:	010007c4 	movi	r4,31
   14ed0:	20c07f16 	blt	r4,r3,150d0 <__adddf3+0x398>
   14ed4:	01400a04 	movi	r5,40
   14ed8:	2885c83a 	sub	r2,r5,r2
   14edc:	888ad83a 	srl	r5,r17,r2
   14ee0:	98e6983a 	sll	r19,r19,r3
   14ee4:	88e2983a 	sll	r17,r17,r3
   14ee8:	2ce6b03a 	or	r19,r5,r19
   14eec:	1c007c16 	blt	r3,r16,150e0 <__adddf3+0x3a8>
   14ef0:	1c21c83a 	sub	r16,r3,r16
   14ef4:	81400044 	addi	r5,r16,1
   14ef8:	00c007c4 	movi	r3,31
   14efc:	19409816 	blt	r3,r5,15160 <__adddf3+0x428>
   14f00:	1c21c83a 	sub	r16,r3,r16
   14f04:	8c08983a 	sll	r4,r17,r16
   14f08:	8946d83a 	srl	r3,r17,r5
   14f0c:	9c20983a 	sll	r16,r19,r16
   14f10:	2008c03a 	cmpne	r4,r4,zero
   14f14:	994ad83a 	srl	r5,r19,r5
   14f18:	1c06b03a 	or	r3,r3,r16
   14f1c:	1922b03a 	or	r17,r3,r4
   14f20:	0021883a 	mov	r16,zero
   14f24:	003fa306 	br	14db4 <_gp+0xffff2d50>
   14f28:	2880202c 	andhi	r2,r5,128
   14f2c:	9007883a 	mov	r3,r18
   14f30:	103fac1e 	bne	r2,zero,14de4 <_gp+0xffff2d80>
   14f34:	2804977a 	slli	r2,r5,29
   14f38:	8822d0fa 	srli	r17,r17,3
   14f3c:	0101ffc4 	movi	r4,2047
   14f40:	280ad0fa 	srli	r5,r5,3
   14f44:	1444b03a 	or	r2,r2,r17
   14f48:	81002c26 	beq	r16,r4,14ffc <__adddf3+0x2c4>
   14f4c:	8120703a 	and	r16,r16,r4
   14f50:	01000434 	movhi	r4,16
   14f54:	213fffc4 	addi	r4,r4,-1
   14f58:	2908703a 	and	r4,r5,r4
   14f5c:	003fad06 	br	14e14 <_gp+0xffff2db0>
   14f60:	8089c83a 	sub	r4,r16,r2
   14f64:	01006a0e 	bge	zero,r4,15110 <__adddf3+0x3d8>
   14f68:	10003326 	beq	r2,zero,15038 <__adddf3+0x300>
   14f6c:	0081ffc4 	movi	r2,2047
   14f70:	80bf9026 	beq	r16,r2,14db4 <_gp+0xffff2d50>
   14f74:	42002034 	orhi	r8,r8,128
   14f78:	00800e04 	movi	r2,56
   14f7c:	1100b116 	blt	r2,r4,15244 <__adddf3+0x50c>
   14f80:	008007c4 	movi	r2,31
   14f84:	1100e216 	blt	r2,r4,15310 <__adddf3+0x5d8>
   14f88:	00800804 	movi	r2,32
   14f8c:	1105c83a 	sub	r2,r2,r4
   14f90:	4092983a 	sll	r9,r8,r2
   14f94:	310ed83a 	srl	r7,r6,r4
   14f98:	3084983a 	sll	r2,r6,r2
   14f9c:	4110d83a 	srl	r8,r8,r4
   14fa0:	49ccb03a 	or	r6,r9,r7
   14fa4:	1004c03a 	cmpne	r2,r2,zero
   14fa8:	308cb03a 	or	r6,r6,r2
   14fac:	344d883a 	add	r6,r6,r17
   14fb0:	3463803a 	cmpltu	r17,r6,r17
   14fb4:	414b883a 	add	r5,r8,r5
   14fb8:	2c4b883a 	add	r5,r5,r17
   14fbc:	3023883a 	mov	r17,r6
   14fc0:	2880202c 	andhi	r2,r5,128
   14fc4:	10002726 	beq	r2,zero,15064 <__adddf3+0x32c>
   14fc8:	84000044 	addi	r16,r16,1
   14fcc:	0081ffc4 	movi	r2,2047
   14fd0:	8080ae26 	beq	r16,r2,1528c <__adddf3+0x554>
   14fd4:	00bfe034 	movhi	r2,65408
   14fd8:	10bfffc4 	addi	r2,r2,-1
   14fdc:	288a703a 	and	r5,r5,r2
   14fe0:	880cd07a 	srli	r6,r17,1
   14fe4:	280897fa 	slli	r4,r5,31
   14fe8:	88c0004c 	andi	r3,r17,1
   14fec:	30e2b03a 	or	r17,r6,r3
   14ff0:	280ad07a 	srli	r5,r5,1
   14ff4:	8922b03a 	or	r17,r17,r4
   14ff8:	003f6e06 	br	14db4 <_gp+0xffff2d50>
   14ffc:	1148b03a 	or	r4,r2,r5
   15000:	20003c26 	beq	r4,zero,150f4 <__adddf3+0x3bc>
   15004:	29000234 	orhi	r4,r5,8
   15008:	01400434 	movhi	r5,16
   1500c:	297fffc4 	addi	r5,r5,-1
   15010:	2148703a 	and	r4,r4,r5
   15014:	003f7f06 	br	14e14 <_gp+0xffff2db0>
   15018:	18ffffc4 	addi	r3,r3,-1
   1501c:	18004d1e 	bne	r3,zero,15154 <__adddf3+0x41c>
   15020:	898dc83a 	sub	r6,r17,r6
   15024:	89a3803a 	cmpltu	r17,r17,r6
   15028:	2a0bc83a 	sub	r5,r5,r8
   1502c:	2c4bc83a 	sub	r5,r5,r17
   15030:	3023883a 	mov	r17,r6
   15034:	003f9c06 	br	14ea8 <_gp+0xffff2e44>
   15038:	4184b03a 	or	r2,r8,r6
   1503c:	103f5d26 	beq	r2,zero,14db4 <_gp+0xffff2d50>
   15040:	213fffc4 	addi	r4,r4,-1
   15044:	203fd926 	beq	r4,zero,14fac <_gp+0xffff2f48>
   15048:	0081ffc4 	movi	r2,2047
   1504c:	80bfca1e 	bne	r16,r2,14f78 <_gp+0xffff2f14>
   15050:	003f5806 	br	14db4 <_gp+0xffff2d50>
   15054:	10c8b03a 	or	r4,r2,r3
   15058:	20008b26 	beq	r4,zero,15288 <__adddf3+0x550>
   1505c:	100b883a 	mov	r5,r2
   15060:	1823883a 	mov	r17,r3
   15064:	888001cc 	andi	r2,r17,7
   15068:	103f541e 	bne	r2,zero,14dbc <_gp+0xffff2d58>
   1506c:	9007883a 	mov	r3,r18
   15070:	003fb006 	br	14f34 <_gp+0xffff2ed0>
   15074:	1800531e 	bne	r3,zero,151c4 <__adddf3+0x48c>
   15078:	80800044 	addi	r2,r16,1
   1507c:	1081ffcc 	andi	r2,r2,2047
   15080:	00c00044 	movi	r3,1
   15084:	1880990e 	bge	r3,r2,152ec <__adddf3+0x5b4>
   15088:	8985c83a 	sub	r2,r17,r6
   1508c:	8887803a 	cmpltu	r3,r17,r2
   15090:	2a27c83a 	sub	r19,r5,r8
   15094:	98e7c83a 	sub	r19,r19,r3
   15098:	98c0202c 	andhi	r3,r19,128
   1509c:	18006226 	beq	r3,zero,15228 <__adddf3+0x4f0>
   150a0:	3463c83a 	sub	r17,r6,r17
   150a4:	4151c83a 	sub	r8,r8,r5
   150a8:	344d803a 	cmpltu	r6,r6,r17
   150ac:	41a7c83a 	sub	r19,r8,r6
   150b0:	3825883a 	mov	r18,r7
   150b4:	983f821e 	bne	r19,zero,14ec0 <_gp+0xffff2e5c>
   150b8:	8809883a 	mov	r4,r17
   150bc:	00176d40 	call	176d4 <__clzsi2>
   150c0:	10800804 	addi	r2,r2,32
   150c4:	10fffe04 	addi	r3,r2,-8
   150c8:	010007c4 	movi	r4,31
   150cc:	20ff810e 	bge	r4,r3,14ed4 <_gp+0xffff2e70>
   150d0:	14fff604 	addi	r19,r2,-40
   150d4:	8ce6983a 	sll	r19,r17,r19
   150d8:	0023883a 	mov	r17,zero
   150dc:	1c3f840e 	bge	r3,r16,14ef0 <_gp+0xffff2e8c>
   150e0:	017fe034 	movhi	r5,65408
   150e4:	297fffc4 	addi	r5,r5,-1
   150e8:	80e1c83a 	sub	r16,r16,r3
   150ec:	994a703a 	and	r5,r19,r5
   150f0:	003f3006 	br	14db4 <_gp+0xffff2d50>
   150f4:	0009883a 	mov	r4,zero
   150f8:	0005883a 	mov	r2,zero
   150fc:	003f4506 	br	14e14 <_gp+0xffff2db0>
   15100:	418cb03a 	or	r6,r8,r6
   15104:	300cc03a 	cmpne	r6,r6,zero
   15108:	0007883a 	mov	r3,zero
   1510c:	003f6106 	br	14e94 <_gp+0xffff2e30>
   15110:	2000921e 	bne	r4,zero,1535c <__adddf3+0x624>
   15114:	80800044 	addi	r2,r16,1
   15118:	11c1ffcc 	andi	r7,r2,2047
   1511c:	01000044 	movi	r4,1
   15120:	21c0610e 	bge	r4,r7,152a8 <__adddf3+0x570>
   15124:	0101ffc4 	movi	r4,2047
   15128:	1100a326 	beq	r2,r4,153b8 <__adddf3+0x680>
   1512c:	344d883a 	add	r6,r6,r17
   15130:	3463803a 	cmpltu	r17,r6,r17
   15134:	414b883a 	add	r5,r8,r5
   15138:	2c4b883a 	add	r5,r5,r17
   1513c:	282297fa 	slli	r17,r5,31
   15140:	300cd07a 	srli	r6,r6,1
   15144:	280ad07a 	srli	r5,r5,1
   15148:	1021883a 	mov	r16,r2
   1514c:	89a2b03a 	or	r17,r17,r6
   15150:	003f1806 	br	14db4 <_gp+0xffff2d50>
   15154:	0081ffc4 	movi	r2,2047
   15158:	80bf411e 	bne	r16,r2,14e60 <_gp+0xffff2dfc>
   1515c:	003f1506 	br	14db4 <_gp+0xffff2d50>
   15160:	80bff844 	addi	r2,r16,-31
   15164:	00c00804 	movi	r3,32
   15168:	9884d83a 	srl	r2,r19,r2
   1516c:	28c04a26 	beq	r5,r3,15298 <__adddf3+0x560>
   15170:	00c00fc4 	movi	r3,63
   15174:	1c21c83a 	sub	r16,r3,r16
   15178:	9c26983a 	sll	r19,r19,r16
   1517c:	9c62b03a 	or	r17,r19,r17
   15180:	8822c03a 	cmpne	r17,r17,zero
   15184:	88a2b03a 	or	r17,r17,r2
   15188:	000b883a 	mov	r5,zero
   1518c:	0021883a 	mov	r16,zero
   15190:	003fb406 	br	15064 <_gp+0xffff3000>
   15194:	18bff804 	addi	r2,r3,-32
   15198:	01000804 	movi	r4,32
   1519c:	4084d83a 	srl	r2,r8,r2
   151a0:	19003f26 	beq	r3,r4,152a0 <__adddf3+0x568>
   151a4:	01001004 	movi	r4,64
   151a8:	20c7c83a 	sub	r3,r4,r3
   151ac:	40d0983a 	sll	r8,r8,r3
   151b0:	418cb03a 	or	r6,r8,r6
   151b4:	300cc03a 	cmpne	r6,r6,zero
   151b8:	308cb03a 	or	r6,r6,r2
   151bc:	0007883a 	mov	r3,zero
   151c0:	003f3406 	br	14e94 <_gp+0xffff2e30>
   151c4:	80002326 	beq	r16,zero,15254 <__adddf3+0x51c>
   151c8:	0101ffc4 	movi	r4,2047
   151cc:	11005e26 	beq	r2,r4,15348 <__adddf3+0x610>
   151d0:	00c7c83a 	sub	r3,zero,r3
   151d4:	29402034 	orhi	r5,r5,128
   151d8:	01000e04 	movi	r4,56
   151dc:	20c07216 	blt	r4,r3,153a8 <__adddf3+0x670>
   151e0:	010007c4 	movi	r4,31
   151e4:	20c0ce16 	blt	r4,r3,15520 <__adddf3+0x7e8>
   151e8:	01000804 	movi	r4,32
   151ec:	20c9c83a 	sub	r4,r4,r3
   151f0:	2914983a 	sll	r10,r5,r4
   151f4:	88d2d83a 	srl	r9,r17,r3
   151f8:	8908983a 	sll	r4,r17,r4
   151fc:	28c6d83a 	srl	r3,r5,r3
   15200:	5262b03a 	or	r17,r10,r9
   15204:	2008c03a 	cmpne	r4,r4,zero
   15208:	8922b03a 	or	r17,r17,r4
   1520c:	3463c83a 	sub	r17,r6,r17
   15210:	40c7c83a 	sub	r3,r8,r3
   15214:	344d803a 	cmpltu	r6,r6,r17
   15218:	198bc83a 	sub	r5,r3,r6
   1521c:	1021883a 	mov	r16,r2
   15220:	3825883a 	mov	r18,r7
   15224:	003f2006 	br	14ea8 <_gp+0xffff2e44>
   15228:	9886b03a 	or	r3,r19,r2
   1522c:	1800141e 	bne	r3,zero,15280 <__adddf3+0x548>
   15230:	0007883a 	mov	r3,zero
   15234:	000b883a 	mov	r5,zero
   15238:	0023883a 	mov	r17,zero
   1523c:	0021883a 	mov	r16,zero
   15240:	003f3c06 	br	14f34 <_gp+0xffff2ed0>
   15244:	418cb03a 	or	r6,r8,r6
   15248:	300cc03a 	cmpne	r6,r6,zero
   1524c:	0011883a 	mov	r8,zero
   15250:	003f5606 	br	14fac <_gp+0xffff2f48>
   15254:	2c48b03a 	or	r4,r5,r17
   15258:	20003b26 	beq	r4,zero,15348 <__adddf3+0x610>
   1525c:	00c6303a 	nor	r3,zero,r3
   15260:	1800371e 	bne	r3,zero,15340 <__adddf3+0x608>
   15264:	3463c83a 	sub	r17,r6,r17
   15268:	414bc83a 	sub	r5,r8,r5
   1526c:	344d803a 	cmpltu	r6,r6,r17
   15270:	298bc83a 	sub	r5,r5,r6
   15274:	1021883a 	mov	r16,r2
   15278:	3825883a 	mov	r18,r7
   1527c:	003f0a06 	br	14ea8 <_gp+0xffff2e44>
   15280:	1023883a 	mov	r17,r2
   15284:	003f0d06 	br	14ebc <_gp+0xffff2e58>
   15288:	0007883a 	mov	r3,zero
   1528c:	000b883a 	mov	r5,zero
   15290:	0023883a 	mov	r17,zero
   15294:	003f2706 	br	14f34 <_gp+0xffff2ed0>
   15298:	0027883a 	mov	r19,zero
   1529c:	003fb706 	br	1517c <_gp+0xffff3118>
   152a0:	0011883a 	mov	r8,zero
   152a4:	003fc206 	br	151b0 <_gp+0xffff314c>
   152a8:	2c44b03a 	or	r2,r5,r17
   152ac:	8000871e 	bne	r16,zero,154cc <__adddf3+0x794>
   152b0:	1000b126 	beq	r2,zero,15578 <__adddf3+0x840>
   152b4:	4184b03a 	or	r2,r8,r6
   152b8:	103ebe26 	beq	r2,zero,14db4 <_gp+0xffff2d50>
   152bc:	3445883a 	add	r2,r6,r17
   152c0:	1463803a 	cmpltu	r17,r2,r17
   152c4:	414b883a 	add	r5,r8,r5
   152c8:	2c4b883a 	add	r5,r5,r17
   152cc:	28c0202c 	andhi	r3,r5,128
   152d0:	1023883a 	mov	r17,r2
   152d4:	183f6326 	beq	r3,zero,15064 <_gp+0xffff3000>
   152d8:	00bfe034 	movhi	r2,65408
   152dc:	10bfffc4 	addi	r2,r2,-1
   152e0:	2021883a 	mov	r16,r4
   152e4:	288a703a 	and	r5,r5,r2
   152e8:	003eb206 	br	14db4 <_gp+0xffff2d50>
   152ec:	2c44b03a 	or	r2,r5,r17
   152f0:	8000251e 	bne	r16,zero,15388 <__adddf3+0x650>
   152f4:	10004b1e 	bne	r2,zero,15424 <__adddf3+0x6ec>
   152f8:	4184b03a 	or	r2,r8,r6
   152fc:	103fe226 	beq	r2,zero,15288 <_gp+0xffff3224>
   15300:	400b883a 	mov	r5,r8
   15304:	3023883a 	mov	r17,r6
   15308:	3825883a 	mov	r18,r7
   1530c:	003ea906 	br	14db4 <_gp+0xffff2d50>
   15310:	20bff804 	addi	r2,r4,-32
   15314:	01c00804 	movi	r7,32
   15318:	4084d83a 	srl	r2,r8,r2
   1531c:	21c07e26 	beq	r4,r7,15518 <__adddf3+0x7e0>
   15320:	01c01004 	movi	r7,64
   15324:	3909c83a 	sub	r4,r7,r4
   15328:	4110983a 	sll	r8,r8,r4
   1532c:	418cb03a 	or	r6,r8,r6
   15330:	300cc03a 	cmpne	r6,r6,zero
   15334:	308cb03a 	or	r6,r6,r2
   15338:	0011883a 	mov	r8,zero
   1533c:	003f1b06 	br	14fac <_gp+0xffff2f48>
   15340:	0101ffc4 	movi	r4,2047
   15344:	113fa41e 	bne	r2,r4,151d8 <_gp+0xffff3174>
   15348:	400b883a 	mov	r5,r8
   1534c:	3023883a 	mov	r17,r6
   15350:	1021883a 	mov	r16,r2
   15354:	3825883a 	mov	r18,r7
   15358:	003e9606 	br	14db4 <_gp+0xffff2d50>
   1535c:	80001a1e 	bne	r16,zero,153c8 <__adddf3+0x690>
   15360:	2c4eb03a 	or	r7,r5,r17
   15364:	38005526 	beq	r7,zero,154bc <__adddf3+0x784>
   15368:	0108303a 	nor	r4,zero,r4
   1536c:	2000511e 	bne	r4,zero,154b4 <__adddf3+0x77c>
   15370:	89a3883a 	add	r17,r17,r6
   15374:	414b883a 	add	r5,r8,r5
   15378:	898d803a 	cmpltu	r6,r17,r6
   1537c:	298b883a 	add	r5,r5,r6
   15380:	1021883a 	mov	r16,r2
   15384:	003f0e06 	br	14fc0 <_gp+0xffff2f5c>
   15388:	1000341e 	bne	r2,zero,1545c <__adddf3+0x724>
   1538c:	4184b03a 	or	r2,r8,r6
   15390:	10006f26 	beq	r2,zero,15550 <__adddf3+0x818>
   15394:	400b883a 	mov	r5,r8
   15398:	3023883a 	mov	r17,r6
   1539c:	3825883a 	mov	r18,r7
   153a0:	0401ffc4 	movi	r16,2047
   153a4:	003e8306 	br	14db4 <_gp+0xffff2d50>
   153a8:	2c62b03a 	or	r17,r5,r17
   153ac:	8822c03a 	cmpne	r17,r17,zero
   153b0:	0007883a 	mov	r3,zero
   153b4:	003f9506 	br	1520c <_gp+0xffff31a8>
   153b8:	1021883a 	mov	r16,r2
   153bc:	000b883a 	mov	r5,zero
   153c0:	0023883a 	mov	r17,zero
   153c4:	003edb06 	br	14f34 <_gp+0xffff2ed0>
   153c8:	01c1ffc4 	movi	r7,2047
   153cc:	11c03b26 	beq	r2,r7,154bc <__adddf3+0x784>
   153d0:	0109c83a 	sub	r4,zero,r4
   153d4:	29402034 	orhi	r5,r5,128
   153d8:	01c00e04 	movi	r7,56
   153dc:	39006216 	blt	r7,r4,15568 <__adddf3+0x830>
   153e0:	01c007c4 	movi	r7,31
   153e4:	39006b16 	blt	r7,r4,15594 <__adddf3+0x85c>
   153e8:	01c00804 	movi	r7,32
   153ec:	390fc83a 	sub	r7,r7,r4
   153f0:	29d4983a 	sll	r10,r5,r7
   153f4:	8912d83a 	srl	r9,r17,r4
   153f8:	89ce983a 	sll	r7,r17,r7
   153fc:	2908d83a 	srl	r4,r5,r4
   15400:	5262b03a 	or	r17,r10,r9
   15404:	380ac03a 	cmpne	r5,r7,zero
   15408:	8962b03a 	or	r17,r17,r5
   1540c:	89a3883a 	add	r17,r17,r6
   15410:	2211883a 	add	r8,r4,r8
   15414:	898d803a 	cmpltu	r6,r17,r6
   15418:	418b883a 	add	r5,r8,r6
   1541c:	1021883a 	mov	r16,r2
   15420:	003ee706 	br	14fc0 <_gp+0xffff2f5c>
   15424:	4184b03a 	or	r2,r8,r6
   15428:	103e6226 	beq	r2,zero,14db4 <_gp+0xffff2d50>
   1542c:	8987c83a 	sub	r3,r17,r6
   15430:	88c9803a 	cmpltu	r4,r17,r3
   15434:	2a05c83a 	sub	r2,r5,r8
   15438:	1105c83a 	sub	r2,r2,r4
   1543c:	1100202c 	andhi	r4,r2,128
   15440:	203f0426 	beq	r4,zero,15054 <_gp+0xffff2ff0>
   15444:	3463c83a 	sub	r17,r6,r17
   15448:	414bc83a 	sub	r5,r8,r5
   1544c:	344d803a 	cmpltu	r6,r6,r17
   15450:	298bc83a 	sub	r5,r5,r6
   15454:	3825883a 	mov	r18,r7
   15458:	003e5606 	br	14db4 <_gp+0xffff2d50>
   1545c:	4184b03a 	or	r2,r8,r6
   15460:	10002b26 	beq	r2,zero,15510 <__adddf3+0x7d8>
   15464:	2804d0fa 	srli	r2,r5,3
   15468:	8822d0fa 	srli	r17,r17,3
   1546c:	280a977a 	slli	r5,r5,29
   15470:	10c0022c 	andhi	r3,r2,8
   15474:	2c62b03a 	or	r17,r5,r17
   15478:	18000826 	beq	r3,zero,1549c <__adddf3+0x764>
   1547c:	4008d0fa 	srli	r4,r8,3
   15480:	20c0022c 	andhi	r3,r4,8
   15484:	1800051e 	bne	r3,zero,1549c <__adddf3+0x764>
   15488:	300cd0fa 	srli	r6,r6,3
   1548c:	4010977a 	slli	r8,r8,29
   15490:	2005883a 	mov	r2,r4
   15494:	3825883a 	mov	r18,r7
   15498:	41a2b03a 	or	r17,r8,r6
   1549c:	880ad77a 	srli	r5,r17,29
   154a0:	100490fa 	slli	r2,r2,3
   154a4:	882290fa 	slli	r17,r17,3
   154a8:	0401ffc4 	movi	r16,2047
   154ac:	288ab03a 	or	r5,r5,r2
   154b0:	003e4006 	br	14db4 <_gp+0xffff2d50>
   154b4:	01c1ffc4 	movi	r7,2047
   154b8:	11ffc71e 	bne	r2,r7,153d8 <_gp+0xffff3374>
   154bc:	400b883a 	mov	r5,r8
   154c0:	3023883a 	mov	r17,r6
   154c4:	1021883a 	mov	r16,r2
   154c8:	003e3a06 	br	14db4 <_gp+0xffff2d50>
   154cc:	10002d26 	beq	r2,zero,15584 <__adddf3+0x84c>
   154d0:	4184b03a 	or	r2,r8,r6
   154d4:	10000e26 	beq	r2,zero,15510 <__adddf3+0x7d8>
   154d8:	2804d0fa 	srli	r2,r5,3
   154dc:	8822d0fa 	srli	r17,r17,3
   154e0:	280a977a 	slli	r5,r5,29
   154e4:	10c0022c 	andhi	r3,r2,8
   154e8:	2c62b03a 	or	r17,r5,r17
   154ec:	183feb26 	beq	r3,zero,1549c <_gp+0xffff3438>
   154f0:	4008d0fa 	srli	r4,r8,3
   154f4:	20c0022c 	andhi	r3,r4,8
   154f8:	183fe81e 	bne	r3,zero,1549c <_gp+0xffff3438>
   154fc:	300cd0fa 	srli	r6,r6,3
   15500:	4010977a 	slli	r8,r8,29
   15504:	2005883a 	mov	r2,r4
   15508:	41a2b03a 	or	r17,r8,r6
   1550c:	003fe306 	br	1549c <_gp+0xffff3438>
   15510:	0401ffc4 	movi	r16,2047
   15514:	003e2706 	br	14db4 <_gp+0xffff2d50>
   15518:	0011883a 	mov	r8,zero
   1551c:	003f8306 	br	1532c <_gp+0xffff32c8>
   15520:	193ff804 	addi	r4,r3,-32
   15524:	02400804 	movi	r9,32
   15528:	2908d83a 	srl	r4,r5,r4
   1552c:	1a402526 	beq	r3,r9,155c4 <__adddf3+0x88c>
   15530:	02401004 	movi	r9,64
   15534:	48c7c83a 	sub	r3,r9,r3
   15538:	28ca983a 	sll	r5,r5,r3
   1553c:	2c62b03a 	or	r17,r5,r17
   15540:	8822c03a 	cmpne	r17,r17,zero
   15544:	8922b03a 	or	r17,r17,r4
   15548:	0007883a 	mov	r3,zero
   1554c:	003f2f06 	br	1520c <_gp+0xffff31a8>
   15550:	01402034 	movhi	r5,128
   15554:	0007883a 	mov	r3,zero
   15558:	297fffc4 	addi	r5,r5,-1
   1555c:	047ffe04 	movi	r17,-8
   15560:	0401ffc4 	movi	r16,2047
   15564:	003e7306 	br	14f34 <_gp+0xffff2ed0>
   15568:	2c62b03a 	or	r17,r5,r17
   1556c:	8822c03a 	cmpne	r17,r17,zero
   15570:	0009883a 	mov	r4,zero
   15574:	003fa506 	br	1540c <_gp+0xffff33a8>
   15578:	400b883a 	mov	r5,r8
   1557c:	3023883a 	mov	r17,r6
   15580:	003e0c06 	br	14db4 <_gp+0xffff2d50>
   15584:	400b883a 	mov	r5,r8
   15588:	3023883a 	mov	r17,r6
   1558c:	0401ffc4 	movi	r16,2047
   15590:	003e0806 	br	14db4 <_gp+0xffff2d50>
   15594:	21fff804 	addi	r7,r4,-32
   15598:	02400804 	movi	r9,32
   1559c:	29ced83a 	srl	r7,r5,r7
   155a0:	22400a26 	beq	r4,r9,155cc <__adddf3+0x894>
   155a4:	02401004 	movi	r9,64
   155a8:	4909c83a 	sub	r4,r9,r4
   155ac:	290a983a 	sll	r5,r5,r4
   155b0:	2c62b03a 	or	r17,r5,r17
   155b4:	8822c03a 	cmpne	r17,r17,zero
   155b8:	89e2b03a 	or	r17,r17,r7
   155bc:	0009883a 	mov	r4,zero
   155c0:	003f9206 	br	1540c <_gp+0xffff33a8>
   155c4:	000b883a 	mov	r5,zero
   155c8:	003fdc06 	br	1553c <_gp+0xffff34d8>
   155cc:	000b883a 	mov	r5,zero
   155d0:	003ff706 	br	155b0 <_gp+0xffff354c>

000155d4 <__divdf3>:
   155d4:	defff004 	addi	sp,sp,-64
   155d8:	dc800815 	stw	r18,32(sp)
   155dc:	2824d53a 	srli	r18,r5,20
   155e0:	dd800c15 	stw	r22,48(sp)
   155e4:	282cd7fa 	srli	r22,r5,31
   155e8:	dc000615 	stw	r16,24(sp)
   155ec:	04000434 	movhi	r16,16
   155f0:	df000e15 	stw	fp,56(sp)
   155f4:	dd000a15 	stw	r20,40(sp)
   155f8:	dcc00915 	stw	r19,36(sp)
   155fc:	dc400715 	stw	r17,28(sp)
   15600:	843fffc4 	addi	r16,r16,-1
   15604:	dfc00f15 	stw	ra,60(sp)
   15608:	ddc00d15 	stw	r23,52(sp)
   1560c:	dd400b15 	stw	r21,44(sp)
   15610:	9481ffcc 	andi	r18,r18,2047
   15614:	2029883a 	mov	r20,r4
   15618:	2027883a 	mov	r19,r4
   1561c:	2c22703a 	and	r17,r5,r16
   15620:	b7003fcc 	andi	fp,r22,255
   15624:	90005e26 	beq	r18,zero,157a0 <__divdf3+0x1cc>
   15628:	0081ffc4 	movi	r2,2047
   1562c:	90803526 	beq	r18,r2,15704 <__divdf3+0x130>
   15630:	8c000434 	orhi	r16,r17,16
   15634:	2004d77a 	srli	r2,r4,29
   15638:	802090fa 	slli	r16,r16,3
   1563c:	202690fa 	slli	r19,r4,3
   15640:	94bf0044 	addi	r18,r18,-1023
   15644:	80a2b03a 	or	r17,r16,r2
   15648:	0029883a 	mov	r20,zero
   1564c:	0011883a 	mov	r8,zero
   15650:	380ad53a 	srli	r5,r7,20
   15654:	382ed7fa 	srli	r23,r7,31
   15658:	04000434 	movhi	r16,16
   1565c:	843fffc4 	addi	r16,r16,-1
   15660:	2941ffcc 	andi	r5,r5,2047
   15664:	302b883a 	mov	r21,r6
   15668:	3c20703a 	and	r16,r7,r16
   1566c:	ba403fcc 	andi	r9,r23,255
   15670:	28006726 	beq	r5,zero,15810 <__divdf3+0x23c>
   15674:	0081ffc4 	movi	r2,2047
   15678:	28805f26 	beq	r5,r2,157f8 <__divdf3+0x224>
   1567c:	84000434 	orhi	r16,r16,16
   15680:	3004d77a 	srli	r2,r6,29
   15684:	802090fa 	slli	r16,r16,3
   15688:	302a90fa 	slli	r21,r6,3
   1568c:	297f0044 	addi	r5,r5,-1023
   15690:	80a0b03a 	or	r16,r16,r2
   15694:	000f883a 	mov	r7,zero
   15698:	3d06b03a 	or	r3,r7,r20
   1569c:	180690ba 	slli	r3,r3,2
   156a0:	00800074 	movhi	r2,1
   156a4:	1095b104 	addi	r2,r2,22212
   156a8:	1885883a 	add	r2,r3,r2
   156ac:	10800017 	ldw	r2,0(r2)
   156b0:	b5c8f03a 	xor	r4,r22,r23
   156b4:	200d883a 	mov	r6,r4
   156b8:	25003fcc 	andi	r20,r4,255
   156bc:	9165c83a 	sub	r18,r18,r5
   156c0:	1000683a 	jmp	r2
   156c4:	0001590c 	andi	zero,zero,1380
   156c8:	0001573c 	xorhi	zero,zero,1372
   156cc:	000158d0 	cmplti	zero,zero,1379
   156d0:	00015720 	cmpeqi	zero,zero,1372
   156d4:	000158d0 	cmplti	zero,zero,1379
   156d8:	000158a4 	muli	zero,zero,1378
   156dc:	000158d0 	cmplti	zero,zero,1379
   156e0:	00015720 	cmpeqi	zero,zero,1372
   156e4:	0001573c 	xorhi	zero,zero,1372
   156e8:	0001573c 	xorhi	zero,zero,1372
   156ec:	000158a4 	muli	zero,zero,1378
   156f0:	00015720 	cmpeqi	zero,zero,1372
   156f4:	00015730 	cmpltui	zero,zero,1372
   156f8:	00015730 	cmpltui	zero,zero,1372
   156fc:	00015730 	cmpltui	zero,zero,1372
   15700:	000158e0 	cmpeqi	zero,zero,1379
   15704:	8904b03a 	or	r2,r17,r4
   15708:	1000631e 	bne	r2,zero,15898 <__divdf3+0x2c4>
   1570c:	05000204 	movi	r20,8
   15710:	0023883a 	mov	r17,zero
   15714:	0027883a 	mov	r19,zero
   15718:	02000084 	movi	r8,2
   1571c:	003fcc06 	br	15650 <_gp+0xffff35ec>
   15720:	8023883a 	mov	r17,r16
   15724:	a827883a 	mov	r19,r21
   15728:	4839883a 	mov	fp,r9
   1572c:	3811883a 	mov	r8,r7
   15730:	00800084 	movi	r2,2
   15734:	4081531e 	bne	r8,r2,15c84 <__divdf3+0x6b0>
   15738:	e029883a 	mov	r20,fp
   1573c:	a180004c 	andi	r6,r20,1
   15740:	0201ffc4 	movi	r8,2047
   15744:	000b883a 	mov	r5,zero
   15748:	0027883a 	mov	r19,zero
   1574c:	4010953a 	slli	r8,r8,20
   15750:	30c03fcc 	andi	r3,r6,255
   15754:	04000434 	movhi	r16,16
   15758:	180697fa 	slli	r3,r3,31
   1575c:	843fffc4 	addi	r16,r16,-1
   15760:	2c20703a 	and	r16,r5,r16
   15764:	8220b03a 	or	r16,r16,r8
   15768:	80c6b03a 	or	r3,r16,r3
   1576c:	9805883a 	mov	r2,r19
   15770:	dfc00f17 	ldw	ra,60(sp)
   15774:	df000e17 	ldw	fp,56(sp)
   15778:	ddc00d17 	ldw	r23,52(sp)
   1577c:	dd800c17 	ldw	r22,48(sp)
   15780:	dd400b17 	ldw	r21,44(sp)
   15784:	dd000a17 	ldw	r20,40(sp)
   15788:	dcc00917 	ldw	r19,36(sp)
   1578c:	dc800817 	ldw	r18,32(sp)
   15790:	dc400717 	ldw	r17,28(sp)
   15794:	dc000617 	ldw	r16,24(sp)
   15798:	dec01004 	addi	sp,sp,64
   1579c:	f800283a 	ret
   157a0:	8904b03a 	or	r2,r17,r4
   157a4:	10003726 	beq	r2,zero,15884 <__divdf3+0x2b0>
   157a8:	88014d26 	beq	r17,zero,15ce0 <__divdf3+0x70c>
   157ac:	8809883a 	mov	r4,r17
   157b0:	d9800215 	stw	r6,8(sp)
   157b4:	d9c00515 	stw	r7,20(sp)
   157b8:	00176d40 	call	176d4 <__clzsi2>
   157bc:	d9800217 	ldw	r6,8(sp)
   157c0:	d9c00517 	ldw	r7,20(sp)
   157c4:	1007883a 	mov	r3,r2
   157c8:	01000a04 	movi	r4,40
   157cc:	1cfffe04 	addi	r19,r3,-8
   157d0:	20c9c83a 	sub	r4,r4,r3
   157d4:	8cca983a 	sll	r5,r17,r19
   157d8:	a108d83a 	srl	r4,r20,r4
   157dc:	a4e6983a 	sll	r19,r20,r19
   157e0:	2162b03a 	or	r17,r4,r5
   157e4:	04bf0344 	movi	r18,-1011
   157e8:	90e5c83a 	sub	r18,r18,r3
   157ec:	0029883a 	mov	r20,zero
   157f0:	0011883a 	mov	r8,zero
   157f4:	003f9606 	br	15650 <_gp+0xffff35ec>
   157f8:	8184b03a 	or	r2,r16,r6
   157fc:	10001f1e 	bne	r2,zero,1587c <__divdf3+0x2a8>
   15800:	0021883a 	mov	r16,zero
   15804:	002b883a 	mov	r21,zero
   15808:	01c00084 	movi	r7,2
   1580c:	003fa206 	br	15698 <_gp+0xffff3634>
   15810:	8184b03a 	or	r2,r16,r6
   15814:	10001526 	beq	r2,zero,1586c <__divdf3+0x298>
   15818:	80013d26 	beq	r16,zero,15d10 <__divdf3+0x73c>
   1581c:	8009883a 	mov	r4,r16
   15820:	d9800215 	stw	r6,8(sp)
   15824:	da000315 	stw	r8,12(sp)
   15828:	da400415 	stw	r9,16(sp)
   1582c:	00176d40 	call	176d4 <__clzsi2>
   15830:	d9800217 	ldw	r6,8(sp)
   15834:	da000317 	ldw	r8,12(sp)
   15838:	da400417 	ldw	r9,16(sp)
   1583c:	1007883a 	mov	r3,r2
   15840:	01000a04 	movi	r4,40
   15844:	1d7ffe04 	addi	r21,r3,-8
   15848:	20c9c83a 	sub	r4,r4,r3
   1584c:	8560983a 	sll	r16,r16,r21
   15850:	3108d83a 	srl	r4,r6,r4
   15854:	356a983a 	sll	r21,r6,r21
   15858:	2420b03a 	or	r16,r4,r16
   1585c:	017f0344 	movi	r5,-1011
   15860:	28cbc83a 	sub	r5,r5,r3
   15864:	000f883a 	mov	r7,zero
   15868:	003f8b06 	br	15698 <_gp+0xffff3634>
   1586c:	0021883a 	mov	r16,zero
   15870:	002b883a 	mov	r21,zero
   15874:	01c00044 	movi	r7,1
   15878:	003f8706 	br	15698 <_gp+0xffff3634>
   1587c:	01c000c4 	movi	r7,3
   15880:	003f8506 	br	15698 <_gp+0xffff3634>
   15884:	05000104 	movi	r20,4
   15888:	0023883a 	mov	r17,zero
   1588c:	0027883a 	mov	r19,zero
   15890:	02000044 	movi	r8,1
   15894:	003f6e06 	br	15650 <_gp+0xffff35ec>
   15898:	05000304 	movi	r20,12
   1589c:	020000c4 	movi	r8,3
   158a0:	003f6b06 	br	15650 <_gp+0xffff35ec>
   158a4:	01400434 	movhi	r5,16
   158a8:	000d883a 	mov	r6,zero
   158ac:	297fffc4 	addi	r5,r5,-1
   158b0:	04ffffc4 	movi	r19,-1
   158b4:	0201ffc4 	movi	r8,2047
   158b8:	003fa406 	br	1574c <_gp+0xffff36e8>
   158bc:	043f0084 	movi	r16,-1022
   158c0:	84a1c83a 	sub	r16,r16,r18
   158c4:	00800e04 	movi	r2,56
   158c8:	14014d0e 	bge	r2,r16,15e00 <__divdf3+0x82c>
   158cc:	a180004c 	andi	r6,r20,1
   158d0:	0011883a 	mov	r8,zero
   158d4:	000b883a 	mov	r5,zero
   158d8:	0027883a 	mov	r19,zero
   158dc:	003f9b06 	br	1574c <_gp+0xffff36e8>
   158e0:	8880022c 	andhi	r2,r17,8
   158e4:	1000f026 	beq	r2,zero,15ca8 <__divdf3+0x6d4>
   158e8:	8080022c 	andhi	r2,r16,8
   158ec:	1000ee1e 	bne	r2,zero,15ca8 <__divdf3+0x6d4>
   158f0:	00800434 	movhi	r2,16
   158f4:	81400234 	orhi	r5,r16,8
   158f8:	10bfffc4 	addi	r2,r2,-1
   158fc:	b80d883a 	mov	r6,r23
   15900:	288a703a 	and	r5,r5,r2
   15904:	a827883a 	mov	r19,r21
   15908:	003fea06 	br	158b4 <_gp+0xffff3850>
   1590c:	84411c36 	bltu	r16,r17,15d80 <__divdf3+0x7ac>
   15910:	8c011a26 	beq	r17,r16,15d7c <__divdf3+0x7a8>
   15914:	94bfffc4 	addi	r18,r18,-1
   15918:	dcc00015 	stw	r19,0(sp)
   1591c:	8811883a 	mov	r8,r17
   15920:	002d883a 	mov	r22,zero
   15924:	a80cd63a 	srli	r6,r21,24
   15928:	8020923a 	slli	r16,r16,8
   1592c:	a82a923a 	slli	r21,r21,8
   15930:	4009883a 	mov	r4,r8
   15934:	342eb03a 	or	r23,r6,r16
   15938:	dd400115 	stw	r21,4(sp)
   1593c:	b82ad43a 	srli	r21,r23,16
   15940:	da000315 	stw	r8,12(sp)
   15944:	bcffffcc 	andi	r19,r23,65535
   15948:	a80b883a 	mov	r5,r21
   1594c:	0013c700 	call	13c70 <__udivsi3>
   15950:	1009883a 	mov	r4,r2
   15954:	980b883a 	mov	r5,r19
   15958:	1023883a 	mov	r17,r2
   1595c:	0013c800 	call	13c80 <__mulsi3>
   15960:	da000317 	ldw	r8,12(sp)
   15964:	a80b883a 	mov	r5,r21
   15968:	1039883a 	mov	fp,r2
   1596c:	4009883a 	mov	r4,r8
   15970:	0013c780 	call	13c78 <__umodsi3>
   15974:	d8c00017 	ldw	r3,0(sp)
   15978:	1004943a 	slli	r2,r2,16
   1597c:	1810d43a 	srli	r8,r3,16
   15980:	120eb03a 	or	r7,r2,r8
   15984:	3f00062e 	bgeu	r7,fp,159a0 <__divdf3+0x3cc>
   15988:	3dcf883a 	add	r7,r7,r23
   1598c:	88bfffc4 	addi	r2,r17,-1
   15990:	3dc10a36 	bltu	r7,r23,15dbc <__divdf3+0x7e8>
   15994:	3f01092e 	bgeu	r7,fp,15dbc <__divdf3+0x7e8>
   15998:	8c7fff84 	addi	r17,r17,-2
   1599c:	3dcf883a 	add	r7,r7,r23
   159a0:	3f39c83a 	sub	fp,r7,fp
   159a4:	e009883a 	mov	r4,fp
   159a8:	a80b883a 	mov	r5,r21
   159ac:	0013c700 	call	13c70 <__udivsi3>
   159b0:	1009883a 	mov	r4,r2
   159b4:	980b883a 	mov	r5,r19
   159b8:	1021883a 	mov	r16,r2
   159bc:	0013c800 	call	13c80 <__mulsi3>
   159c0:	e009883a 	mov	r4,fp
   159c4:	a80b883a 	mov	r5,r21
   159c8:	d8800315 	stw	r2,12(sp)
   159cc:	0013c780 	call	13c78 <__umodsi3>
   159d0:	d9000017 	ldw	r4,0(sp)
   159d4:	1004943a 	slli	r2,r2,16
   159d8:	da000317 	ldw	r8,12(sp)
   159dc:	20ffffcc 	andi	r3,r4,65535
   159e0:	10ceb03a 	or	r7,r2,r3
   159e4:	3a00062e 	bgeu	r7,r8,15a00 <__divdf3+0x42c>
   159e8:	3dcf883a 	add	r7,r7,r23
   159ec:	80bfffc4 	addi	r2,r16,-1
   159f0:	3dc0f036 	bltu	r7,r23,15db4 <__divdf3+0x7e0>
   159f4:	3a00ef2e 	bgeu	r7,r8,15db4 <__divdf3+0x7e0>
   159f8:	843fff84 	addi	r16,r16,-2
   159fc:	3dcf883a 	add	r7,r7,r23
   15a00:	d8c00117 	ldw	r3,4(sp)
   15a04:	8822943a 	slli	r17,r17,16
   15a08:	3a0fc83a 	sub	r7,r7,r8
   15a0c:	1806d43a 	srli	r3,r3,16
   15a10:	8462b03a 	or	r17,r16,r17
   15a14:	8affffcc 	andi	r11,r17,65535
   15a18:	d8c00015 	stw	r3,0(sp)
   15a1c:	d8c00117 	ldw	r3,4(sp)
   15a20:	8820d43a 	srli	r16,r17,16
   15a24:	5809883a 	mov	r4,r11
   15a28:	1f3fffcc 	andi	fp,r3,65535
   15a2c:	e00b883a 	mov	r5,fp
   15a30:	d9c00515 	stw	r7,20(sp)
   15a34:	dac00215 	stw	r11,8(sp)
   15a38:	0013c800 	call	13c80 <__mulsi3>
   15a3c:	8009883a 	mov	r4,r16
   15a40:	e00b883a 	mov	r5,fp
   15a44:	d8800415 	stw	r2,16(sp)
   15a48:	0013c800 	call	13c80 <__mulsi3>
   15a4c:	d9400017 	ldw	r5,0(sp)
   15a50:	8009883a 	mov	r4,r16
   15a54:	d8800315 	stw	r2,12(sp)
   15a58:	0013c800 	call	13c80 <__mulsi3>
   15a5c:	dac00217 	ldw	r11,8(sp)
   15a60:	d9400017 	ldw	r5,0(sp)
   15a64:	d8800215 	stw	r2,8(sp)
   15a68:	5809883a 	mov	r4,r11
   15a6c:	0013c800 	call	13c80 <__mulsi3>
   15a70:	da400417 	ldw	r9,16(sp)
   15a74:	da800317 	ldw	r10,12(sp)
   15a78:	d9c00517 	ldw	r7,20(sp)
   15a7c:	480ad43a 	srli	r5,r9,16
   15a80:	5085883a 	add	r2,r10,r2
   15a84:	db000217 	ldw	r12,8(sp)
   15a88:	1151883a 	add	r8,r2,r5
   15a8c:	4280022e 	bgeu	r8,r10,15a98 <__divdf3+0x4c4>
   15a90:	00800074 	movhi	r2,1
   15a94:	6099883a 	add	r12,r12,r2
   15a98:	400ad43a 	srli	r5,r8,16
   15a9c:	4010943a 	slli	r8,r8,16
   15aa0:	4c3fffcc 	andi	r16,r9,65535
   15aa4:	6149883a 	add	r4,r12,r5
   15aa8:	4411883a 	add	r8,r8,r16
   15aac:	3900a736 	bltu	r7,r4,15d4c <__divdf3+0x778>
   15ab0:	3900c426 	beq	r7,r4,15dc4 <__divdf3+0x7f0>
   15ab4:	3909c83a 	sub	r4,r7,r4
   15ab8:	b221c83a 	sub	r16,r22,r8
   15abc:	b42d803a 	cmpltu	r22,r22,r16
   15ac0:	25adc83a 	sub	r22,r4,r22
   15ac4:	b5c0c626 	beq	r22,r23,15de0 <__divdf3+0x80c>
   15ac8:	b009883a 	mov	r4,r22
   15acc:	a80b883a 	mov	r5,r21
   15ad0:	0013c700 	call	13c70 <__udivsi3>
   15ad4:	1009883a 	mov	r4,r2
   15ad8:	980b883a 	mov	r5,r19
   15adc:	d8800315 	stw	r2,12(sp)
   15ae0:	0013c800 	call	13c80 <__mulsi3>
   15ae4:	a80b883a 	mov	r5,r21
   15ae8:	b009883a 	mov	r4,r22
   15aec:	d8800415 	stw	r2,16(sp)
   15af0:	0013c780 	call	13c78 <__umodsi3>
   15af4:	1004943a 	slli	r2,r2,16
   15af8:	800ed43a 	srli	r7,r16,16
   15afc:	da400417 	ldw	r9,16(sp)
   15b00:	da000317 	ldw	r8,12(sp)
   15b04:	11cab03a 	or	r5,r2,r7
   15b08:	2a40062e 	bgeu	r5,r9,15b24 <__divdf3+0x550>
   15b0c:	2dcb883a 	add	r5,r5,r23
   15b10:	40bfffc4 	addi	r2,r8,-1
   15b14:	2dc0b436 	bltu	r5,r23,15de8 <__divdf3+0x814>
   15b18:	2a40b32e 	bgeu	r5,r9,15de8 <__divdf3+0x814>
   15b1c:	423fff84 	addi	r8,r8,-2
   15b20:	2dcb883a 	add	r5,r5,r23
   15b24:	2a6dc83a 	sub	r22,r5,r9
   15b28:	b009883a 	mov	r4,r22
   15b2c:	a80b883a 	mov	r5,r21
   15b30:	da000315 	stw	r8,12(sp)
   15b34:	0013c700 	call	13c70 <__udivsi3>
   15b38:	980b883a 	mov	r5,r19
   15b3c:	1009883a 	mov	r4,r2
   15b40:	d8800415 	stw	r2,16(sp)
   15b44:	0013c800 	call	13c80 <__mulsi3>
   15b48:	b009883a 	mov	r4,r22
   15b4c:	a80b883a 	mov	r5,r21
   15b50:	1027883a 	mov	r19,r2
   15b54:	0013c780 	call	13c78 <__umodsi3>
   15b58:	1004943a 	slli	r2,r2,16
   15b5c:	843fffcc 	andi	r16,r16,65535
   15b60:	da000317 	ldw	r8,12(sp)
   15b64:	140eb03a 	or	r7,r2,r16
   15b68:	da400417 	ldw	r9,16(sp)
   15b6c:	3cc0062e 	bgeu	r7,r19,15b88 <__divdf3+0x5b4>
   15b70:	3dcf883a 	add	r7,r7,r23
   15b74:	48bfffc4 	addi	r2,r9,-1
   15b78:	3dc09d36 	bltu	r7,r23,15df0 <__divdf3+0x81c>
   15b7c:	3cc09c2e 	bgeu	r7,r19,15df0 <__divdf3+0x81c>
   15b80:	4a7fff84 	addi	r9,r9,-2
   15b84:	3dcf883a 	add	r7,r7,r23
   15b88:	4010943a 	slli	r8,r8,16
   15b8c:	3cebc83a 	sub	r21,r7,r19
   15b90:	e00b883a 	mov	r5,fp
   15b94:	4a26b03a 	or	r19,r9,r8
   15b98:	99ffffcc 	andi	r7,r19,65535
   15b9c:	9820d43a 	srli	r16,r19,16
   15ba0:	3809883a 	mov	r4,r7
   15ba4:	d9c00515 	stw	r7,20(sp)
   15ba8:	0013c800 	call	13c80 <__mulsi3>
   15bac:	8009883a 	mov	r4,r16
   15bb0:	e00b883a 	mov	r5,fp
   15bb4:	102d883a 	mov	r22,r2
   15bb8:	0013c800 	call	13c80 <__mulsi3>
   15bbc:	d9400017 	ldw	r5,0(sp)
   15bc0:	8009883a 	mov	r4,r16
   15bc4:	1039883a 	mov	fp,r2
   15bc8:	0013c800 	call	13c80 <__mulsi3>
   15bcc:	d9c00517 	ldw	r7,20(sp)
   15bd0:	d9400017 	ldw	r5,0(sp)
   15bd4:	1021883a 	mov	r16,r2
   15bd8:	3809883a 	mov	r4,r7
   15bdc:	0013c800 	call	13c80 <__mulsi3>
   15be0:	b008d43a 	srli	r4,r22,16
   15be4:	e085883a 	add	r2,fp,r2
   15be8:	1109883a 	add	r4,r2,r4
   15bec:	2700022e 	bgeu	r4,fp,15bf8 <__divdf3+0x624>
   15bf0:	00800074 	movhi	r2,1
   15bf4:	80a1883a 	add	r16,r16,r2
   15bf8:	200ad43a 	srli	r5,r4,16
   15bfc:	2008943a 	slli	r4,r4,16
   15c00:	b5bfffcc 	andi	r22,r22,65535
   15c04:	8145883a 	add	r2,r16,r5
   15c08:	2589883a 	add	r4,r4,r22
   15c0c:	a8802c36 	bltu	r21,r2,15cc0 <__divdf3+0x6ec>
   15c10:	a880a426 	beq	r21,r2,15ea4 <__divdf3+0x8d0>
   15c14:	9cc00054 	ori	r19,r19,1
   15c18:	9200ffc4 	addi	r8,r18,1023
   15c1c:	023f270e 	bge	zero,r8,158bc <_gp+0xffff3858>
   15c20:	988001cc 	andi	r2,r19,7
   15c24:	10000726 	beq	r2,zero,15c44 <__divdf3+0x670>
   15c28:	990003cc 	andi	r4,r19,15
   15c2c:	00800104 	movi	r2,4
   15c30:	20800426 	beq	r4,r2,15c44 <__divdf3+0x670>
   15c34:	9885883a 	add	r2,r19,r2
   15c38:	14e7803a 	cmpltu	r19,r2,r19
   15c3c:	8ce3883a 	add	r17,r17,r19
   15c40:	1027883a 	mov	r19,r2
   15c44:	8880402c 	andhi	r2,r17,256
   15c48:	10000426 	beq	r2,zero,15c5c <__divdf3+0x688>
   15c4c:	00bfc034 	movhi	r2,65280
   15c50:	10bfffc4 	addi	r2,r2,-1
   15c54:	92010004 	addi	r8,r18,1024
   15c58:	88a2703a 	and	r17,r17,r2
   15c5c:	0081ff84 	movi	r2,2046
   15c60:	123eb616 	blt	r2,r8,1573c <_gp+0xffff36d8>
   15c64:	9826d0fa 	srli	r19,r19,3
   15c68:	8804977a 	slli	r2,r17,29
   15c6c:	8820927a 	slli	r16,r17,9
   15c70:	4201ffcc 	andi	r8,r8,2047
   15c74:	14e6b03a 	or	r19,r2,r19
   15c78:	800ad33a 	srli	r5,r16,12
   15c7c:	a180004c 	andi	r6,r20,1
   15c80:	003eb206 	br	1574c <_gp+0xffff36e8>
   15c84:	008000c4 	movi	r2,3
   15c88:	4080ac26 	beq	r8,r2,15f3c <__divdf3+0x968>
   15c8c:	00800044 	movi	r2,1
   15c90:	4080591e 	bne	r8,r2,15df8 <__divdf3+0x824>
   15c94:	e00d883a 	mov	r6,fp
   15c98:	0011883a 	mov	r8,zero
   15c9c:	000b883a 	mov	r5,zero
   15ca0:	0027883a 	mov	r19,zero
   15ca4:	003ea906 	br	1574c <_gp+0xffff36e8>
   15ca8:	00800434 	movhi	r2,16
   15cac:	89400234 	orhi	r5,r17,8
   15cb0:	10bfffc4 	addi	r2,r2,-1
   15cb4:	b00d883a 	mov	r6,r22
   15cb8:	288a703a 	and	r5,r5,r2
   15cbc:	003efd06 	br	158b4 <_gp+0xffff3850>
   15cc0:	adcf883a 	add	r7,r21,r23
   15cc4:	997fffc4 	addi	r5,r19,-1
   15cc8:	3dc0412e 	bgeu	r7,r23,15dd0 <__divdf3+0x7fc>
   15ccc:	2827883a 	mov	r19,r5
   15cd0:	38bfd01e 	bne	r7,r2,15c14 <_gp+0xffff3bb0>
   15cd4:	d8c00117 	ldw	r3,4(sp)
   15cd8:	193fce1e 	bne	r3,r4,15c14 <_gp+0xffff3bb0>
   15cdc:	003fce06 	br	15c18 <_gp+0xffff3bb4>
   15ce0:	d9800215 	stw	r6,8(sp)
   15ce4:	d9c00515 	stw	r7,20(sp)
   15ce8:	00176d40 	call	176d4 <__clzsi2>
   15cec:	10c00804 	addi	r3,r2,32
   15cf0:	010009c4 	movi	r4,39
   15cf4:	d9800217 	ldw	r6,8(sp)
   15cf8:	d9c00517 	ldw	r7,20(sp)
   15cfc:	20feb20e 	bge	r4,r3,157c8 <_gp+0xffff3764>
   15d00:	117ffe04 	addi	r5,r2,-8
   15d04:	a162983a 	sll	r17,r20,r5
   15d08:	0027883a 	mov	r19,zero
   15d0c:	003eb506 	br	157e4 <_gp+0xffff3780>
   15d10:	3009883a 	mov	r4,r6
   15d14:	d9800215 	stw	r6,8(sp)
   15d18:	da000315 	stw	r8,12(sp)
   15d1c:	da400415 	stw	r9,16(sp)
   15d20:	00176d40 	call	176d4 <__clzsi2>
   15d24:	10c00804 	addi	r3,r2,32
   15d28:	010009c4 	movi	r4,39
   15d2c:	d9800217 	ldw	r6,8(sp)
   15d30:	da000317 	ldw	r8,12(sp)
   15d34:	da400417 	ldw	r9,16(sp)
   15d38:	20fec10e 	bge	r4,r3,15840 <_gp+0xffff37dc>
   15d3c:	10bffe04 	addi	r2,r2,-8
   15d40:	a8a0983a 	sll	r16,r21,r2
   15d44:	002b883a 	mov	r21,zero
   15d48:	003ec406 	br	1585c <_gp+0xffff37f8>
   15d4c:	d8c00117 	ldw	r3,4(sp)
   15d50:	b0ed883a 	add	r22,r22,r3
   15d54:	b0c5803a 	cmpltu	r2,r22,r3
   15d58:	15c5883a 	add	r2,r2,r23
   15d5c:	11cf883a 	add	r7,r2,r7
   15d60:	88bfffc4 	addi	r2,r17,-1
   15d64:	b9c00d2e 	bgeu	r23,r7,15d9c <__divdf3+0x7c8>
   15d68:	39003f36 	bltu	r7,r4,15e68 <__divdf3+0x894>
   15d6c:	21c06a26 	beq	r4,r7,15f18 <__divdf3+0x944>
   15d70:	3909c83a 	sub	r4,r7,r4
   15d74:	1023883a 	mov	r17,r2
   15d78:	003f4f06 	br	15ab8 <_gp+0xffff3a54>
   15d7c:	9d7ee536 	bltu	r19,r21,15914 <_gp+0xffff38b0>
   15d80:	982ed07a 	srli	r23,r19,1
   15d84:	880497fa 	slli	r2,r17,31
   15d88:	8810d07a 	srli	r8,r17,1
   15d8c:	982c97fa 	slli	r22,r19,31
   15d90:	b884b03a 	or	r2,r23,r2
   15d94:	d8800015 	stw	r2,0(sp)
   15d98:	003ee206 	br	15924 <_gp+0xffff38c0>
   15d9c:	3dfff41e 	bne	r7,r23,15d70 <_gp+0xffff3d0c>
   15da0:	d8c00117 	ldw	r3,4(sp)
   15da4:	b0fff02e 	bgeu	r22,r3,15d68 <_gp+0xffff3d04>
   15da8:	b909c83a 	sub	r4,r23,r4
   15dac:	1023883a 	mov	r17,r2
   15db0:	003f4106 	br	15ab8 <_gp+0xffff3a54>
   15db4:	1021883a 	mov	r16,r2
   15db8:	003f1106 	br	15a00 <_gp+0xffff399c>
   15dbc:	1023883a 	mov	r17,r2
   15dc0:	003ef706 	br	159a0 <_gp+0xffff393c>
   15dc4:	b23fe136 	bltu	r22,r8,15d4c <_gp+0xffff3ce8>
   15dc8:	0009883a 	mov	r4,zero
   15dcc:	003f3a06 	br	15ab8 <_gp+0xffff3a54>
   15dd0:	38802c36 	bltu	r7,r2,15e84 <__divdf3+0x8b0>
   15dd4:	11c05326 	beq	r2,r7,15f24 <__divdf3+0x950>
   15dd8:	2827883a 	mov	r19,r5
   15ddc:	003f8d06 	br	15c14 <_gp+0xffff3bb0>
   15de0:	04ffffc4 	movi	r19,-1
   15de4:	003f8c06 	br	15c18 <_gp+0xffff3bb4>
   15de8:	1011883a 	mov	r8,r2
   15dec:	003f4d06 	br	15b24 <_gp+0xffff3ac0>
   15df0:	1013883a 	mov	r9,r2
   15df4:	003f6406 	br	15b88 <_gp+0xffff3b24>
   15df8:	e029883a 	mov	r20,fp
   15dfc:	003f8606 	br	15c18 <_gp+0xffff3bb4>
   15e00:	008007c4 	movi	r2,31
   15e04:	14002a16 	blt	r2,r16,15eb0 <__divdf3+0x8dc>
   15e08:	91410784 	addi	r5,r18,1054
   15e0c:	9c0cd83a 	srl	r6,r19,r16
   15e10:	8948983a 	sll	r4,r17,r5
   15e14:	9944983a 	sll	r2,r19,r5
   15e18:	8c20d83a 	srl	r16,r17,r16
   15e1c:	3108b03a 	or	r4,r6,r4
   15e20:	1004c03a 	cmpne	r2,r2,zero
   15e24:	2084b03a 	or	r2,r4,r2
   15e28:	110001cc 	andi	r4,r2,7
   15e2c:	20000726 	beq	r4,zero,15e4c <__divdf3+0x878>
   15e30:	114003cc 	andi	r5,r2,15
   15e34:	01000104 	movi	r4,4
   15e38:	29000426 	beq	r5,r4,15e4c <__divdf3+0x878>
   15e3c:	11000104 	addi	r4,r2,4
   15e40:	2085803a 	cmpltu	r2,r4,r2
   15e44:	80a1883a 	add	r16,r16,r2
   15e48:	2005883a 	mov	r2,r4
   15e4c:	8100202c 	andhi	r4,r16,128
   15e50:	20002d26 	beq	r4,zero,15f08 <__divdf3+0x934>
   15e54:	a180004c 	andi	r6,r20,1
   15e58:	02000044 	movi	r8,1
   15e5c:	000b883a 	mov	r5,zero
   15e60:	0027883a 	mov	r19,zero
   15e64:	003e3906 	br	1574c <_gp+0xffff36e8>
   15e68:	d8c00117 	ldw	r3,4(sp)
   15e6c:	8c7fff84 	addi	r17,r17,-2
   15e70:	b0ed883a 	add	r22,r22,r3
   15e74:	b0c5803a 	cmpltu	r2,r22,r3
   15e78:	15c5883a 	add	r2,r2,r23
   15e7c:	11cf883a 	add	r7,r2,r7
   15e80:	003f0c06 	br	15ab4 <_gp+0xffff3a50>
   15e84:	d8c00117 	ldw	r3,4(sp)
   15e88:	997fff84 	addi	r5,r19,-2
   15e8c:	18d1883a 	add	r8,r3,r3
   15e90:	40c7803a 	cmpltu	r3,r8,r3
   15e94:	1dcd883a 	add	r6,r3,r23
   15e98:	398f883a 	add	r7,r7,r6
   15e9c:	da000115 	stw	r8,4(sp)
   15ea0:	003f8a06 	br	15ccc <_gp+0xffff3c68>
   15ea4:	203f861e 	bne	r4,zero,15cc0 <_gp+0xffff3c5c>
   15ea8:	d8000115 	stw	zero,4(sp)
   15eac:	003f8906 	br	15cd4 <_gp+0xffff3c70>
   15eb0:	00bef884 	movi	r2,-1054
   15eb4:	1485c83a 	sub	r2,r2,r18
   15eb8:	01000804 	movi	r4,32
   15ebc:	8884d83a 	srl	r2,r17,r2
   15ec0:	81001c26 	beq	r16,r4,15f34 <__divdf3+0x960>
   15ec4:	91010f84 	addi	r4,r18,1086
   15ec8:	8908983a 	sll	r4,r17,r4
   15ecc:	24c8b03a 	or	r4,r4,r19
   15ed0:	2008c03a 	cmpne	r4,r4,zero
   15ed4:	2084b03a 	or	r2,r4,r2
   15ed8:	140001cc 	andi	r16,r2,7
   15edc:	8000061e 	bne	r16,zero,15ef8 <__divdf3+0x924>
   15ee0:	000b883a 	mov	r5,zero
   15ee4:	1004d0fa 	srli	r2,r2,3
   15ee8:	a180004c 	andi	r6,r20,1
   15eec:	0011883a 	mov	r8,zero
   15ef0:	1426b03a 	or	r19,r2,r16
   15ef4:	003e1506 	br	1574c <_gp+0xffff36e8>
   15ef8:	114003cc 	andi	r5,r2,15
   15efc:	01000104 	movi	r4,4
   15f00:	0021883a 	mov	r16,zero
   15f04:	293fcd1e 	bne	r5,r4,15e3c <_gp+0xffff3dd8>
   15f08:	800a927a 	slli	r5,r16,9
   15f0c:	8020977a 	slli	r16,r16,29
   15f10:	280ad33a 	srli	r5,r5,12
   15f14:	003ff306 	br	15ee4 <_gp+0xffff3e80>
   15f18:	b23fd336 	bltu	r22,r8,15e68 <_gp+0xffff3e04>
   15f1c:	1023883a 	mov	r17,r2
   15f20:	003fa906 	br	15dc8 <_gp+0xffff3d64>
   15f24:	d8c00117 	ldw	r3,4(sp)
   15f28:	193fd636 	bltu	r3,r4,15e84 <_gp+0xffff3e20>
   15f2c:	2827883a 	mov	r19,r5
   15f30:	003f6806 	br	15cd4 <_gp+0xffff3c70>
   15f34:	0009883a 	mov	r4,zero
   15f38:	003fe406 	br	15ecc <_gp+0xffff3e68>
   15f3c:	00800434 	movhi	r2,16
   15f40:	89400234 	orhi	r5,r17,8
   15f44:	10bfffc4 	addi	r2,r2,-1
   15f48:	e00d883a 	mov	r6,fp
   15f4c:	288a703a 	and	r5,r5,r2
   15f50:	003e5806 	br	158b4 <_gp+0xffff3850>

00015f54 <__eqdf2>:
   15f54:	2804d53a 	srli	r2,r5,20
   15f58:	3806d53a 	srli	r3,r7,20
   15f5c:	02000434 	movhi	r8,16
   15f60:	423fffc4 	addi	r8,r8,-1
   15f64:	1081ffcc 	andi	r2,r2,2047
   15f68:	0241ffc4 	movi	r9,2047
   15f6c:	2a14703a 	and	r10,r5,r8
   15f70:	18c1ffcc 	andi	r3,r3,2047
   15f74:	3a10703a 	and	r8,r7,r8
   15f78:	280ad7fa 	srli	r5,r5,31
   15f7c:	380ed7fa 	srli	r7,r7,31
   15f80:	12400f26 	beq	r2,r9,15fc0 <__eqdf2+0x6c>
   15f84:	0241ffc4 	movi	r9,2047
   15f88:	1a400326 	beq	r3,r9,15f98 <__eqdf2+0x44>
   15f8c:	10c00526 	beq	r2,r3,15fa4 <__eqdf2+0x50>
   15f90:	00800044 	movi	r2,1
   15f94:	f800283a 	ret
   15f98:	4192b03a 	or	r9,r8,r6
   15f9c:	483ffc1e 	bne	r9,zero,15f90 <_gp+0xffff3f2c>
   15fa0:	10fffb1e 	bne	r2,r3,15f90 <_gp+0xffff3f2c>
   15fa4:	523ffa1e 	bne	r10,r8,15f90 <_gp+0xffff3f2c>
   15fa8:	21bff91e 	bne	r4,r6,15f90 <_gp+0xffff3f2c>
   15fac:	29c00826 	beq	r5,r7,15fd0 <__eqdf2+0x7c>
   15fb0:	103ff71e 	bne	r2,zero,15f90 <_gp+0xffff3f2c>
   15fb4:	5104b03a 	or	r2,r10,r4
   15fb8:	1004c03a 	cmpne	r2,r2,zero
   15fbc:	f800283a 	ret
   15fc0:	5112b03a 	or	r9,r10,r4
   15fc4:	483fef26 	beq	r9,zero,15f84 <_gp+0xffff3f20>
   15fc8:	00800044 	movi	r2,1
   15fcc:	f800283a 	ret
   15fd0:	0005883a 	mov	r2,zero
   15fd4:	f800283a 	ret

00015fd8 <__gedf2>:
   15fd8:	2804d53a 	srli	r2,r5,20
   15fdc:	3806d53a 	srli	r3,r7,20
   15fe0:	02000434 	movhi	r8,16
   15fe4:	423fffc4 	addi	r8,r8,-1
   15fe8:	0241ffc4 	movi	r9,2047
   15fec:	1081ffcc 	andi	r2,r2,2047
   15ff0:	2a14703a 	and	r10,r5,r8
   15ff4:	1a46703a 	and	r3,r3,r9
   15ff8:	3a10703a 	and	r8,r7,r8
   15ffc:	280ad7fa 	srli	r5,r5,31
   16000:	380ed7fa 	srli	r7,r7,31
   16004:	12400b26 	beq	r2,r9,16034 <__gedf2+0x5c>
   16008:	1a401626 	beq	r3,r9,16064 <__gedf2+0x8c>
   1600c:	10000c1e 	bne	r2,zero,16040 <__gedf2+0x68>
   16010:	5112b03a 	or	r9,r10,r4
   16014:	4813003a 	cmpeq	r9,r9,zero
   16018:	4817883a 	mov	r11,r9
   1601c:	18000c1e 	bne	r3,zero,16050 <__gedf2+0x78>
   16020:	4198b03a 	or	r12,r8,r6
   16024:	60000a1e 	bne	r12,zero,16050 <__gedf2+0x78>
   16028:	48001326 	beq	r9,zero,16078 <__gedf2+0xa0>
   1602c:	0005883a 	mov	r2,zero
   16030:	f800283a 	ret
   16034:	5112b03a 	or	r9,r10,r4
   16038:	4800191e 	bne	r9,zero,160a0 <__gedf2+0xc8>
   1603c:	18800926 	beq	r3,r2,16064 <__gedf2+0x8c>
   16040:	18000b1e 	bne	r3,zero,16070 <__gedf2+0x98>
   16044:	4192b03a 	or	r9,r8,r6
   16048:	0017883a 	mov	r11,zero
   1604c:	48000a26 	beq	r9,zero,16078 <__gedf2+0xa0>
   16050:	39c03fcc 	andi	r7,r7,255
   16054:	58000726 	beq	r11,zero,16074 <__gedf2+0x9c>
   16058:	3800081e 	bne	r7,zero,1607c <__gedf2+0xa4>
   1605c:	00bfffc4 	movi	r2,-1
   16060:	f800283a 	ret
   16064:	4192b03a 	or	r9,r8,r6
   16068:	48000d1e 	bne	r9,zero,160a0 <__gedf2+0xc8>
   1606c:	103fe826 	beq	r2,zero,16010 <_gp+0xffff3fac>
   16070:	39c03fcc 	andi	r7,r7,255
   16074:	29c00326 	beq	r5,r7,16084 <__gedf2+0xac>
   16078:	283ff81e 	bne	r5,zero,1605c <_gp+0xffff3ff8>
   1607c:	00800044 	movi	r2,1
   16080:	f800283a 	ret
   16084:	18bffc16 	blt	r3,r2,16078 <_gp+0xffff4014>
   16088:	10c00316 	blt	r2,r3,16098 <__gedf2+0xc0>
   1608c:	42bffa36 	bltu	r8,r10,16078 <_gp+0xffff4014>
   16090:	52000526 	beq	r10,r8,160a8 <__gedf2+0xd0>
   16094:	523fe52e 	bgeu	r10,r8,1602c <_gp+0xffff3fc8>
   16098:	283ff026 	beq	r5,zero,1605c <_gp+0xffff3ff8>
   1609c:	003ff706 	br	1607c <_gp+0xffff4018>
   160a0:	00bfff84 	movi	r2,-2
   160a4:	f800283a 	ret
   160a8:	313ff336 	bltu	r6,r4,16078 <_gp+0xffff4014>
   160ac:	21bfdf2e 	bgeu	r4,r6,1602c <_gp+0xffff3fc8>
   160b0:	283fea26 	beq	r5,zero,1605c <_gp+0xffff3ff8>
   160b4:	003ff106 	br	1607c <_gp+0xffff4018>

000160b8 <__ledf2>:
   160b8:	2804d53a 	srli	r2,r5,20
   160bc:	3810d53a 	srli	r8,r7,20
   160c0:	00c00434 	movhi	r3,16
   160c4:	18ffffc4 	addi	r3,r3,-1
   160c8:	0241ffc4 	movi	r9,2047
   160cc:	1081ffcc 	andi	r2,r2,2047
   160d0:	28d4703a 	and	r10,r5,r3
   160d4:	4250703a 	and	r8,r8,r9
   160d8:	38c6703a 	and	r3,r7,r3
   160dc:	280ad7fa 	srli	r5,r5,31
   160e0:	380ed7fa 	srli	r7,r7,31
   160e4:	12400b26 	beq	r2,r9,16114 <__ledf2+0x5c>
   160e8:	42401926 	beq	r8,r9,16150 <__ledf2+0x98>
   160ec:	10000c1e 	bne	r2,zero,16120 <__ledf2+0x68>
   160f0:	5112b03a 	or	r9,r10,r4
   160f4:	4813003a 	cmpeq	r9,r9,zero
   160f8:	4817883a 	mov	r11,r9
   160fc:	40000f26 	beq	r8,zero,1613c <__ledf2+0x84>
   16100:	39c03fcc 	andi	r7,r7,255
   16104:	58001826 	beq	r11,zero,16168 <__ledf2+0xb0>
   16108:	38000a1e 	bne	r7,zero,16134 <__ledf2+0x7c>
   1610c:	00bfffc4 	movi	r2,-1
   16110:	f800283a 	ret
   16114:	5112b03a 	or	r9,r10,r4
   16118:	48000f1e 	bne	r9,zero,16158 <__ledf2+0xa0>
   1611c:	40800c26 	beq	r8,r2,16150 <__ledf2+0x98>
   16120:	4000101e 	bne	r8,zero,16164 <__ledf2+0xac>
   16124:	1992b03a 	or	r9,r3,r6
   16128:	0017883a 	mov	r11,zero
   1612c:	483ff41e 	bne	r9,zero,16100 <_gp+0xffff409c>
   16130:	283ff61e 	bne	r5,zero,1610c <_gp+0xffff40a8>
   16134:	00800044 	movi	r2,1
   16138:	f800283a 	ret
   1613c:	1998b03a 	or	r12,r3,r6
   16140:	603fef1e 	bne	r12,zero,16100 <_gp+0xffff409c>
   16144:	483ffa26 	beq	r9,zero,16130 <_gp+0xffff40cc>
   16148:	0005883a 	mov	r2,zero
   1614c:	f800283a 	ret
   16150:	1992b03a 	or	r9,r3,r6
   16154:	48000226 	beq	r9,zero,16160 <__ledf2+0xa8>
   16158:	00800084 	movi	r2,2
   1615c:	f800283a 	ret
   16160:	103fe326 	beq	r2,zero,160f0 <_gp+0xffff408c>
   16164:	39c03fcc 	andi	r7,r7,255
   16168:	29fff11e 	bne	r5,r7,16130 <_gp+0xffff40cc>
   1616c:	40bff016 	blt	r8,r2,16130 <_gp+0xffff40cc>
   16170:	12000316 	blt	r2,r8,16180 <__ledf2+0xc8>
   16174:	1abfee36 	bltu	r3,r10,16130 <_gp+0xffff40cc>
   16178:	50c00326 	beq	r10,r3,16188 <__ledf2+0xd0>
   1617c:	50fff22e 	bgeu	r10,r3,16148 <_gp+0xffff40e4>
   16180:	283fe226 	beq	r5,zero,1610c <_gp+0xffff40a8>
   16184:	003feb06 	br	16134 <_gp+0xffff40d0>
   16188:	313fe936 	bltu	r6,r4,16130 <_gp+0xffff40cc>
   1618c:	21bfee2e 	bgeu	r4,r6,16148 <_gp+0xffff40e4>
   16190:	283fde26 	beq	r5,zero,1610c <_gp+0xffff40a8>
   16194:	003fe706 	br	16134 <_gp+0xffff40d0>

00016198 <__muldf3>:
   16198:	deffee04 	addi	sp,sp,-72
   1619c:	dd000c15 	stw	r20,48(sp)
   161a0:	2828d53a 	srli	r20,r5,20
   161a4:	dd400d15 	stw	r21,52(sp)
   161a8:	282ad7fa 	srli	r21,r5,31
   161ac:	dc000815 	stw	r16,32(sp)
   161b0:	04000434 	movhi	r16,16
   161b4:	ddc00f15 	stw	r23,60(sp)
   161b8:	dcc00b15 	stw	r19,44(sp)
   161bc:	dc800a15 	stw	r18,40(sp)
   161c0:	843fffc4 	addi	r16,r16,-1
   161c4:	dfc01115 	stw	ra,68(sp)
   161c8:	df001015 	stw	fp,64(sp)
   161cc:	dd800e15 	stw	r22,56(sp)
   161d0:	dc400915 	stw	r17,36(sp)
   161d4:	a501ffcc 	andi	r20,r20,2047
   161d8:	2025883a 	mov	r18,r4
   161dc:	202f883a 	mov	r23,r4
   161e0:	2c20703a 	and	r16,r5,r16
   161e4:	a827883a 	mov	r19,r21
   161e8:	aa403fcc 	andi	r9,r21,255
   161ec:	a0005926 	beq	r20,zero,16354 <__muldf3+0x1bc>
   161f0:	0081ffc4 	movi	r2,2047
   161f4:	a0803426 	beq	r20,r2,162c8 <__muldf3+0x130>
   161f8:	84000434 	orhi	r16,r16,16
   161fc:	2004d77a 	srli	r2,r4,29
   16200:	802090fa 	slli	r16,r16,3
   16204:	202e90fa 	slli	r23,r4,3
   16208:	a53f0044 	addi	r20,r20,-1023
   1620c:	80a0b03a 	or	r16,r16,r2
   16210:	000b883a 	mov	r5,zero
   16214:	0039883a 	mov	fp,zero
   16218:	3806d53a 	srli	r3,r7,20
   1621c:	382cd7fa 	srli	r22,r7,31
   16220:	00800434 	movhi	r2,16
   16224:	10bfffc4 	addi	r2,r2,-1
   16228:	18c1ffcc 	andi	r3,r3,2047
   1622c:	3025883a 	mov	r18,r6
   16230:	38a2703a 	and	r17,r7,r2
   16234:	b2803fcc 	andi	r10,r22,255
   16238:	18006426 	beq	r3,zero,163cc <__muldf3+0x234>
   1623c:	0081ffc4 	movi	r2,2047
   16240:	18805c26 	beq	r3,r2,163b4 <__muldf3+0x21c>
   16244:	8c400434 	orhi	r17,r17,16
   16248:	3004d77a 	srli	r2,r6,29
   1624c:	882290fa 	slli	r17,r17,3
   16250:	302490fa 	slli	r18,r6,3
   16254:	18ff0044 	addi	r3,r3,-1023
   16258:	88a2b03a 	or	r17,r17,r2
   1625c:	000f883a 	mov	r7,zero
   16260:	394ab03a 	or	r5,r7,r5
   16264:	280a90ba 	slli	r5,r5,2
   16268:	00800074 	movhi	r2,1
   1626c:	1098a204 	addi	r2,r2,25224
   16270:	288b883a 	add	r5,r5,r2
   16274:	28800017 	ldw	r2,0(r5)
   16278:	a0c7883a 	add	r3,r20,r3
   1627c:	b54cf03a 	xor	r6,r22,r21
   16280:	1a000044 	addi	r8,r3,1
   16284:	1000683a 	jmp	r2
   16288:	000164cc 	andi	zero,zero,1427
   1628c:	000164b8 	rdprs	zero,zero,1426
   16290:	000164b8 	rdprs	zero,zero,1426
   16294:	000164a4 	muli	zero,zero,1426
   16298:	000162e4 	muli	zero,zero,1419
   1629c:	000162e4 	muli	zero,zero,1419
   162a0:	0001648c 	andi	zero,zero,1426
   162a4:	000164a4 	muli	zero,zero,1426
   162a8:	000162e4 	muli	zero,zero,1419
   162ac:	0001648c 	andi	zero,zero,1426
   162b0:	000162e4 	muli	zero,zero,1419
   162b4:	000164a4 	muli	zero,zero,1426
   162b8:	000162e8 	cmpgeui	zero,zero,1419
   162bc:	000162e8 	cmpgeui	zero,zero,1419
   162c0:	000162e8 	cmpgeui	zero,zero,1419
   162c4:	00016808 	cmpgei	zero,zero,1440
   162c8:	8104b03a 	or	r2,r16,r4
   162cc:	10006c1e 	bne	r2,zero,16480 <__muldf3+0x2e8>
   162d0:	01400204 	movi	r5,8
   162d4:	0021883a 	mov	r16,zero
   162d8:	002f883a 	mov	r23,zero
   162dc:	07000084 	movi	fp,2
   162e0:	003fcd06 	br	16218 <_gp+0xffff41b4>
   162e4:	3013883a 	mov	r9,r6
   162e8:	00800084 	movi	r2,2
   162ec:	e080501e 	bne	fp,r2,16430 <__muldf3+0x298>
   162f0:	4cc0004c 	andi	r19,r9,1
   162f4:	0101ffc4 	movi	r4,2047
   162f8:	0021883a 	mov	r16,zero
   162fc:	002f883a 	mov	r23,zero
   16300:	2008953a 	slli	r4,r4,20
   16304:	98c03fcc 	andi	r3,r19,255
   16308:	04400434 	movhi	r17,16
   1630c:	8c7fffc4 	addi	r17,r17,-1
   16310:	180697fa 	slli	r3,r3,31
   16314:	8460703a 	and	r16,r16,r17
   16318:	8120b03a 	or	r16,r16,r4
   1631c:	80c6b03a 	or	r3,r16,r3
   16320:	b805883a 	mov	r2,r23
   16324:	dfc01117 	ldw	ra,68(sp)
   16328:	df001017 	ldw	fp,64(sp)
   1632c:	ddc00f17 	ldw	r23,60(sp)
   16330:	dd800e17 	ldw	r22,56(sp)
   16334:	dd400d17 	ldw	r21,52(sp)
   16338:	dd000c17 	ldw	r20,48(sp)
   1633c:	dcc00b17 	ldw	r19,44(sp)
   16340:	dc800a17 	ldw	r18,40(sp)
   16344:	dc400917 	ldw	r17,36(sp)
   16348:	dc000817 	ldw	r16,32(sp)
   1634c:	dec01204 	addi	sp,sp,72
   16350:	f800283a 	ret
   16354:	8104b03a 	or	r2,r16,r4
   16358:	10004426 	beq	r2,zero,1646c <__muldf3+0x2d4>
   1635c:	80014b26 	beq	r16,zero,1688c <__muldf3+0x6f4>
   16360:	8009883a 	mov	r4,r16
   16364:	d9800715 	stw	r6,28(sp)
   16368:	d9c00215 	stw	r7,8(sp)
   1636c:	da400415 	stw	r9,16(sp)
   16370:	00176d40 	call	176d4 <__clzsi2>
   16374:	d9800717 	ldw	r6,28(sp)
   16378:	d9c00217 	ldw	r7,8(sp)
   1637c:	da400417 	ldw	r9,16(sp)
   16380:	1007883a 	mov	r3,r2
   16384:	01000a04 	movi	r4,40
   16388:	1dfffe04 	addi	r23,r3,-8
   1638c:	20c9c83a 	sub	r4,r4,r3
   16390:	85e0983a 	sll	r16,r16,r23
   16394:	9108d83a 	srl	r4,r18,r4
   16398:	95ee983a 	sll	r23,r18,r23
   1639c:	2420b03a 	or	r16,r4,r16
   163a0:	053f0344 	movi	r20,-1011
   163a4:	a0e9c83a 	sub	r20,r20,r3
   163a8:	000b883a 	mov	r5,zero
   163ac:	0039883a 	mov	fp,zero
   163b0:	003f9906 	br	16218 <_gp+0xffff41b4>
   163b4:	8984b03a 	or	r2,r17,r6
   163b8:	10002a1e 	bne	r2,zero,16464 <__muldf3+0x2cc>
   163bc:	0023883a 	mov	r17,zero
   163c0:	0025883a 	mov	r18,zero
   163c4:	01c00084 	movi	r7,2
   163c8:	003fa506 	br	16260 <_gp+0xffff41fc>
   163cc:	8984b03a 	or	r2,r17,r6
   163d0:	10002026 	beq	r2,zero,16454 <__muldf3+0x2bc>
   163d4:	88011c26 	beq	r17,zero,16848 <__muldf3+0x6b0>
   163d8:	8809883a 	mov	r4,r17
   163dc:	d9400215 	stw	r5,8(sp)
   163e0:	d9800715 	stw	r6,28(sp)
   163e4:	da400415 	stw	r9,16(sp)
   163e8:	da800315 	stw	r10,12(sp)
   163ec:	00176d40 	call	176d4 <__clzsi2>
   163f0:	d9400217 	ldw	r5,8(sp)
   163f4:	d9800717 	ldw	r6,28(sp)
   163f8:	da400417 	ldw	r9,16(sp)
   163fc:	da800317 	ldw	r10,12(sp)
   16400:	1007883a 	mov	r3,r2
   16404:	01000a04 	movi	r4,40
   16408:	1cbffe04 	addi	r18,r3,-8
   1640c:	20c9c83a 	sub	r4,r4,r3
   16410:	8ca2983a 	sll	r17,r17,r18
   16414:	3108d83a 	srl	r4,r6,r4
   16418:	34a4983a 	sll	r18,r6,r18
   1641c:	2462b03a 	or	r17,r4,r17
   16420:	00bf0344 	movi	r2,-1011
   16424:	10c7c83a 	sub	r3,r2,r3
   16428:	000f883a 	mov	r7,zero
   1642c:	003f8c06 	br	16260 <_gp+0xffff41fc>
   16430:	008000c4 	movi	r2,3
   16434:	e0816d26 	beq	fp,r2,169ec <__muldf3+0x854>
   16438:	00800044 	movi	r2,1
   1643c:	e081321e 	bne	fp,r2,16908 <__muldf3+0x770>
   16440:	48a6703a 	and	r19,r9,r2
   16444:	0009883a 	mov	r4,zero
   16448:	0021883a 	mov	r16,zero
   1644c:	002f883a 	mov	r23,zero
   16450:	003fab06 	br	16300 <_gp+0xffff429c>
   16454:	0023883a 	mov	r17,zero
   16458:	0025883a 	mov	r18,zero
   1645c:	01c00044 	movi	r7,1
   16460:	003f7f06 	br	16260 <_gp+0xffff41fc>
   16464:	01c000c4 	movi	r7,3
   16468:	003f7d06 	br	16260 <_gp+0xffff41fc>
   1646c:	01400104 	movi	r5,4
   16470:	0021883a 	mov	r16,zero
   16474:	002f883a 	mov	r23,zero
   16478:	07000044 	movi	fp,1
   1647c:	003f6606 	br	16218 <_gp+0xffff41b4>
   16480:	01400304 	movi	r5,12
   16484:	070000c4 	movi	fp,3
   16488:	003f6306 	br	16218 <_gp+0xffff41b4>
   1648c:	04000434 	movhi	r16,16
   16490:	0027883a 	mov	r19,zero
   16494:	843fffc4 	addi	r16,r16,-1
   16498:	05ffffc4 	movi	r23,-1
   1649c:	0101ffc4 	movi	r4,2047
   164a0:	003f9706 	br	16300 <_gp+0xffff429c>
   164a4:	8821883a 	mov	r16,r17
   164a8:	902f883a 	mov	r23,r18
   164ac:	5013883a 	mov	r9,r10
   164b0:	3839883a 	mov	fp,r7
   164b4:	003f8c06 	br	162e8 <_gp+0xffff4284>
   164b8:	8821883a 	mov	r16,r17
   164bc:	902f883a 	mov	r23,r18
   164c0:	3013883a 	mov	r9,r6
   164c4:	3839883a 	mov	fp,r7
   164c8:	003f8706 	br	162e8 <_gp+0xffff4284>
   164cc:	b82ad43a 	srli	r21,r23,16
   164d0:	9038d43a 	srli	fp,r18,16
   164d4:	bdffffcc 	andi	r23,r23,65535
   164d8:	94bfffcc 	andi	r18,r18,65535
   164dc:	9009883a 	mov	r4,r18
   164e0:	b80b883a 	mov	r5,r23
   164e4:	d8c00515 	stw	r3,20(sp)
   164e8:	d9800715 	stw	r6,28(sp)
   164ec:	da000615 	stw	r8,24(sp)
   164f0:	0013c800 	call	13c80 <__mulsi3>
   164f4:	9009883a 	mov	r4,r18
   164f8:	a80b883a 	mov	r5,r21
   164fc:	1029883a 	mov	r20,r2
   16500:	0013c800 	call	13c80 <__mulsi3>
   16504:	e009883a 	mov	r4,fp
   16508:	a80b883a 	mov	r5,r21
   1650c:	102d883a 	mov	r22,r2
   16510:	0013c800 	call	13c80 <__mulsi3>
   16514:	e009883a 	mov	r4,fp
   16518:	b80b883a 	mov	r5,r23
   1651c:	1027883a 	mov	r19,r2
   16520:	0013c800 	call	13c80 <__mulsi3>
   16524:	a008d43a 	srli	r4,r20,16
   16528:	b085883a 	add	r2,r22,r2
   1652c:	d8c00517 	ldw	r3,20(sp)
   16530:	110f883a 	add	r7,r2,r4
   16534:	d9800717 	ldw	r6,28(sp)
   16538:	da000617 	ldw	r8,24(sp)
   1653c:	3d80022e 	bgeu	r7,r22,16548 <__muldf3+0x3b0>
   16540:	00800074 	movhi	r2,1
   16544:	98a7883a 	add	r19,r19,r2
   16548:	3804943a 	slli	r2,r7,16
   1654c:	380ed43a 	srli	r7,r7,16
   16550:	882cd43a 	srli	r22,r17,16
   16554:	a53fffcc 	andi	r20,r20,65535
   16558:	8c7fffcc 	andi	r17,r17,65535
   1655c:	1529883a 	add	r20,r2,r20
   16560:	8809883a 	mov	r4,r17
   16564:	b80b883a 	mov	r5,r23
   16568:	d8c00515 	stw	r3,20(sp)
   1656c:	d9800715 	stw	r6,28(sp)
   16570:	da000615 	stw	r8,24(sp)
   16574:	d9c00015 	stw	r7,0(sp)
   16578:	dd000115 	stw	r20,4(sp)
   1657c:	0013c800 	call	13c80 <__mulsi3>
   16580:	a80b883a 	mov	r5,r21
   16584:	8809883a 	mov	r4,r17
   16588:	d8800415 	stw	r2,16(sp)
   1658c:	0013c800 	call	13c80 <__mulsi3>
   16590:	a80b883a 	mov	r5,r21
   16594:	b009883a 	mov	r4,r22
   16598:	1029883a 	mov	r20,r2
   1659c:	0013c800 	call	13c80 <__mulsi3>
   165a0:	b009883a 	mov	r4,r22
   165a4:	b80b883a 	mov	r5,r23
   165a8:	102b883a 	mov	r21,r2
   165ac:	0013c800 	call	13c80 <__mulsi3>
   165b0:	da400417 	ldw	r9,16(sp)
   165b4:	a085883a 	add	r2,r20,r2
   165b8:	d8c00517 	ldw	r3,20(sp)
   165bc:	4808d43a 	srli	r4,r9,16
   165c0:	d9800717 	ldw	r6,28(sp)
   165c4:	da000617 	ldw	r8,24(sp)
   165c8:	1109883a 	add	r4,r2,r4
   165cc:	2500022e 	bgeu	r4,r20,165d8 <__muldf3+0x440>
   165d0:	00800074 	movhi	r2,1
   165d4:	a8ab883a 	add	r21,r21,r2
   165d8:	200e943a 	slli	r7,r4,16
   165dc:	2004d43a 	srli	r2,r4,16
   165e0:	802ed43a 	srli	r23,r16,16
   165e4:	843fffcc 	andi	r16,r16,65535
   165e8:	4d3fffcc 	andi	r20,r9,65535
   165ec:	9009883a 	mov	r4,r18
   165f0:	800b883a 	mov	r5,r16
   165f4:	3d29883a 	add	r20,r7,r20
   165f8:	d8c00515 	stw	r3,20(sp)
   165fc:	d9800715 	stw	r6,28(sp)
   16600:	da000615 	stw	r8,24(sp)
   16604:	a8ab883a 	add	r21,r21,r2
   16608:	0013c800 	call	13c80 <__mulsi3>
   1660c:	9009883a 	mov	r4,r18
   16610:	b80b883a 	mov	r5,r23
   16614:	d8800315 	stw	r2,12(sp)
   16618:	0013c800 	call	13c80 <__mulsi3>
   1661c:	e009883a 	mov	r4,fp
   16620:	b80b883a 	mov	r5,r23
   16624:	1025883a 	mov	r18,r2
   16628:	0013c800 	call	13c80 <__mulsi3>
   1662c:	e009883a 	mov	r4,fp
   16630:	800b883a 	mov	r5,r16
   16634:	d8800215 	stw	r2,8(sp)
   16638:	0013c800 	call	13c80 <__mulsi3>
   1663c:	da800317 	ldw	r10,12(sp)
   16640:	d9400017 	ldw	r5,0(sp)
   16644:	9085883a 	add	r2,r18,r2
   16648:	5008d43a 	srli	r4,r10,16
   1664c:	a153883a 	add	r9,r20,r5
   16650:	d8c00517 	ldw	r3,20(sp)
   16654:	1109883a 	add	r4,r2,r4
   16658:	d9800717 	ldw	r6,28(sp)
   1665c:	da000617 	ldw	r8,24(sp)
   16660:	dac00217 	ldw	r11,8(sp)
   16664:	2480022e 	bgeu	r4,r18,16670 <__muldf3+0x4d8>
   16668:	00800074 	movhi	r2,1
   1666c:	5897883a 	add	r11,r11,r2
   16670:	200e943a 	slli	r7,r4,16
   16674:	2038d43a 	srli	fp,r4,16
   16678:	52bfffcc 	andi	r10,r10,65535
   1667c:	3a8f883a 	add	r7,r7,r10
   16680:	8809883a 	mov	r4,r17
   16684:	800b883a 	mov	r5,r16
   16688:	d8c00515 	stw	r3,20(sp)
   1668c:	d9800715 	stw	r6,28(sp)
   16690:	d9c00215 	stw	r7,8(sp)
   16694:	da000615 	stw	r8,24(sp)
   16698:	da400415 	stw	r9,16(sp)
   1669c:	5f39883a 	add	fp,r11,fp
   166a0:	0013c800 	call	13c80 <__mulsi3>
   166a4:	8809883a 	mov	r4,r17
   166a8:	b80b883a 	mov	r5,r23
   166ac:	1025883a 	mov	r18,r2
   166b0:	0013c800 	call	13c80 <__mulsi3>
   166b4:	b009883a 	mov	r4,r22
   166b8:	b80b883a 	mov	r5,r23
   166bc:	d8800315 	stw	r2,12(sp)
   166c0:	0013c800 	call	13c80 <__mulsi3>
   166c4:	b009883a 	mov	r4,r22
   166c8:	800b883a 	mov	r5,r16
   166cc:	1023883a 	mov	r17,r2
   166d0:	0013c800 	call	13c80 <__mulsi3>
   166d4:	da800317 	ldw	r10,12(sp)
   166d8:	9008d43a 	srli	r4,r18,16
   166dc:	d8c00517 	ldw	r3,20(sp)
   166e0:	5085883a 	add	r2,r10,r2
   166e4:	1109883a 	add	r4,r2,r4
   166e8:	d9800717 	ldw	r6,28(sp)
   166ec:	d9c00217 	ldw	r7,8(sp)
   166f0:	da000617 	ldw	r8,24(sp)
   166f4:	da400417 	ldw	r9,16(sp)
   166f8:	2280022e 	bgeu	r4,r10,16704 <__muldf3+0x56c>
   166fc:	00800074 	movhi	r2,1
   16700:	88a3883a 	add	r17,r17,r2
   16704:	2004943a 	slli	r2,r4,16
   16708:	94bfffcc 	andi	r18,r18,65535
   1670c:	4ce7883a 	add	r19,r9,r19
   16710:	14a5883a 	add	r18,r2,r18
   16714:	9d29803a 	cmpltu	r20,r19,r20
   16718:	9565883a 	add	r18,r18,r21
   1671c:	9505883a 	add	r2,r18,r20
   16720:	99e7883a 	add	r19,r19,r7
   16724:	99cf803a 	cmpltu	r7,r19,r7
   16728:	e08b883a 	add	r5,fp,r2
   1672c:	2008d43a 	srli	r4,r4,16
   16730:	29ef883a 	add	r23,r5,r7
   16734:	1529803a 	cmpltu	r20,r2,r20
   16738:	956b803a 	cmpltu	r21,r18,r21
   1673c:	b9cf803a 	cmpltu	r7,r23,r7
   16740:	a564b03a 	or	r18,r20,r21
   16744:	2f39803a 	cmpltu	fp,r5,fp
   16748:	9125883a 	add	r18,r18,r4
   1674c:	3f38b03a 	or	fp,r7,fp
   16750:	9725883a 	add	r18,r18,fp
   16754:	9804927a 	slli	r2,r19,9
   16758:	9463883a 	add	r17,r18,r17
   1675c:	d9000117 	ldw	r4,4(sp)
   16760:	b820d5fa 	srli	r16,r23,23
   16764:	8822927a 	slli	r17,r17,9
   16768:	9826d5fa 	srli	r19,r19,23
   1676c:	1104b03a 	or	r2,r2,r4
   16770:	b82e927a 	slli	r23,r23,9
   16774:	1004c03a 	cmpne	r2,r2,zero
   16778:	8c20b03a 	or	r16,r17,r16
   1677c:	14e6b03a 	or	r19,r2,r19
   16780:	8080402c 	andhi	r2,r16,256
   16784:	9deeb03a 	or	r23,r19,r23
   16788:	10000726 	beq	r2,zero,167a8 <__muldf3+0x610>
   1678c:	b804d07a 	srli	r2,r23,1
   16790:	800697fa 	slli	r3,r16,31
   16794:	bdc0004c 	andi	r23,r23,1
   16798:	8020d07a 	srli	r16,r16,1
   1679c:	b8aeb03a 	or	r23,r23,r2
   167a0:	b8eeb03a 	or	r23,r23,r3
   167a4:	4007883a 	mov	r3,r8
   167a8:	1900ffc4 	addi	r4,r3,1023
   167ac:	01004d0e 	bge	zero,r4,168e4 <__muldf3+0x74c>
   167b0:	b88001cc 	andi	r2,r23,7
   167b4:	10000726 	beq	r2,zero,167d4 <__muldf3+0x63c>
   167b8:	b94003cc 	andi	r5,r23,15
   167bc:	00800104 	movi	r2,4
   167c0:	28800426 	beq	r5,r2,167d4 <__muldf3+0x63c>
   167c4:	b885883a 	add	r2,r23,r2
   167c8:	15ef803a 	cmpltu	r23,r2,r23
   167cc:	85e1883a 	add	r16,r16,r23
   167d0:	102f883a 	mov	r23,r2
   167d4:	8080402c 	andhi	r2,r16,256
   167d8:	10000426 	beq	r2,zero,167ec <__muldf3+0x654>
   167dc:	00bfc034 	movhi	r2,65280
   167e0:	10bfffc4 	addi	r2,r2,-1
   167e4:	19010004 	addi	r4,r3,1024
   167e8:	80a0703a 	and	r16,r16,r2
   167ec:	0081ff84 	movi	r2,2046
   167f0:	1100340e 	bge	r2,r4,168c4 <__muldf3+0x72c>
   167f4:	34c0004c 	andi	r19,r6,1
   167f8:	0101ffc4 	movi	r4,2047
   167fc:	0021883a 	mov	r16,zero
   16800:	002f883a 	mov	r23,zero
   16804:	003ebe06 	br	16300 <_gp+0xffff429c>
   16808:	8080022c 	andhi	r2,r16,8
   1680c:	10000926 	beq	r2,zero,16834 <__muldf3+0x69c>
   16810:	8880022c 	andhi	r2,r17,8
   16814:	1000071e 	bne	r2,zero,16834 <__muldf3+0x69c>
   16818:	00800434 	movhi	r2,16
   1681c:	8c000234 	orhi	r16,r17,8
   16820:	10bfffc4 	addi	r2,r2,-1
   16824:	b027883a 	mov	r19,r22
   16828:	80a0703a 	and	r16,r16,r2
   1682c:	902f883a 	mov	r23,r18
   16830:	003f1a06 	br	1649c <_gp+0xffff4438>
   16834:	00800434 	movhi	r2,16
   16838:	84000234 	orhi	r16,r16,8
   1683c:	10bfffc4 	addi	r2,r2,-1
   16840:	80a0703a 	and	r16,r16,r2
   16844:	003f1506 	br	1649c <_gp+0xffff4438>
   16848:	3009883a 	mov	r4,r6
   1684c:	d9400215 	stw	r5,8(sp)
   16850:	d9800715 	stw	r6,28(sp)
   16854:	da400415 	stw	r9,16(sp)
   16858:	da800315 	stw	r10,12(sp)
   1685c:	00176d40 	call	176d4 <__clzsi2>
   16860:	10c00804 	addi	r3,r2,32
   16864:	010009c4 	movi	r4,39
   16868:	d9400217 	ldw	r5,8(sp)
   1686c:	d9800717 	ldw	r6,28(sp)
   16870:	da400417 	ldw	r9,16(sp)
   16874:	da800317 	ldw	r10,12(sp)
   16878:	20fee20e 	bge	r4,r3,16404 <_gp+0xffff43a0>
   1687c:	147ffe04 	addi	r17,r2,-8
   16880:	9462983a 	sll	r17,r18,r17
   16884:	0025883a 	mov	r18,zero
   16888:	003ee506 	br	16420 <_gp+0xffff43bc>
   1688c:	d9800715 	stw	r6,28(sp)
   16890:	d9c00215 	stw	r7,8(sp)
   16894:	da400415 	stw	r9,16(sp)
   16898:	00176d40 	call	176d4 <__clzsi2>
   1689c:	10c00804 	addi	r3,r2,32
   168a0:	010009c4 	movi	r4,39
   168a4:	d9800717 	ldw	r6,28(sp)
   168a8:	d9c00217 	ldw	r7,8(sp)
   168ac:	da400417 	ldw	r9,16(sp)
   168b0:	20feb40e 	bge	r4,r3,16384 <_gp+0xffff4320>
   168b4:	143ffe04 	addi	r16,r2,-8
   168b8:	9420983a 	sll	r16,r18,r16
   168bc:	002f883a 	mov	r23,zero
   168c0:	003eb706 	br	163a0 <_gp+0xffff433c>
   168c4:	8004977a 	slli	r2,r16,29
   168c8:	b82ed0fa 	srli	r23,r23,3
   168cc:	8020927a 	slli	r16,r16,9
   168d0:	2101ffcc 	andi	r4,r4,2047
   168d4:	15eeb03a 	or	r23,r2,r23
   168d8:	8020d33a 	srli	r16,r16,12
   168dc:	34c0004c 	andi	r19,r6,1
   168e0:	003e8706 	br	16300 <_gp+0xffff429c>
   168e4:	00bf0084 	movi	r2,-1022
   168e8:	10c5c83a 	sub	r2,r2,r3
   168ec:	01000e04 	movi	r4,56
   168f0:	2080080e 	bge	r4,r2,16914 <__muldf3+0x77c>
   168f4:	34c0004c 	andi	r19,r6,1
   168f8:	0009883a 	mov	r4,zero
   168fc:	0021883a 	mov	r16,zero
   16900:	002f883a 	mov	r23,zero
   16904:	003e7e06 	br	16300 <_gp+0xffff429c>
   16908:	4007883a 	mov	r3,r8
   1690c:	480d883a 	mov	r6,r9
   16910:	003fa506 	br	167a8 <_gp+0xffff4744>
   16914:	010007c4 	movi	r4,31
   16918:	20801816 	blt	r4,r2,1697c <__muldf3+0x7e4>
   1691c:	18c10784 	addi	r3,r3,1054
   16920:	80c8983a 	sll	r4,r16,r3
   16924:	b88ad83a 	srl	r5,r23,r2
   16928:	b8c6983a 	sll	r3,r23,r3
   1692c:	80a0d83a 	srl	r16,r16,r2
   16930:	2908b03a 	or	r4,r5,r4
   16934:	1804c03a 	cmpne	r2,r3,zero
   16938:	2088b03a 	or	r4,r4,r2
   1693c:	208001cc 	andi	r2,r4,7
   16940:	10000726 	beq	r2,zero,16960 <__muldf3+0x7c8>
   16944:	20c003cc 	andi	r3,r4,15
   16948:	00800104 	movi	r2,4
   1694c:	18800426 	beq	r3,r2,16960 <__muldf3+0x7c8>
   16950:	20c00104 	addi	r3,r4,4
   16954:	1905803a 	cmpltu	r2,r3,r4
   16958:	80a1883a 	add	r16,r16,r2
   1695c:	1809883a 	mov	r4,r3
   16960:	8080202c 	andhi	r2,r16,128
   16964:	10001b26 	beq	r2,zero,169d4 <__muldf3+0x83c>
   16968:	34c0004c 	andi	r19,r6,1
   1696c:	01000044 	movi	r4,1
   16970:	0021883a 	mov	r16,zero
   16974:	002f883a 	mov	r23,zero
   16978:	003e6106 	br	16300 <_gp+0xffff429c>
   1697c:	013ef884 	movi	r4,-1054
   16980:	20c9c83a 	sub	r4,r4,r3
   16984:	01400804 	movi	r5,32
   16988:	8108d83a 	srl	r4,r16,r4
   1698c:	11401526 	beq	r2,r5,169e4 <__muldf3+0x84c>
   16990:	18c10f84 	addi	r3,r3,1086
   16994:	80e0983a 	sll	r16,r16,r3
   16998:	85eeb03a 	or	r23,r16,r23
   1699c:	b804c03a 	cmpne	r2,r23,zero
   169a0:	1108b03a 	or	r4,r2,r4
   169a4:	20c001cc 	andi	r3,r4,7
   169a8:	1800061e 	bne	r3,zero,169c4 <__muldf3+0x82c>
   169ac:	0021883a 	mov	r16,zero
   169b0:	202ed0fa 	srli	r23,r4,3
   169b4:	34c0004c 	andi	r19,r6,1
   169b8:	0009883a 	mov	r4,zero
   169bc:	b8eeb03a 	or	r23,r23,r3
   169c0:	003e4f06 	br	16300 <_gp+0xffff429c>
   169c4:	20c003cc 	andi	r3,r4,15
   169c8:	00800104 	movi	r2,4
   169cc:	0021883a 	mov	r16,zero
   169d0:	18bfdf1e 	bne	r3,r2,16950 <_gp+0xffff48ec>
   169d4:	8004927a 	slli	r2,r16,9
   169d8:	8006977a 	slli	r3,r16,29
   169dc:	1020d33a 	srli	r16,r2,12
   169e0:	003ff306 	br	169b0 <_gp+0xffff494c>
   169e4:	0021883a 	mov	r16,zero
   169e8:	003feb06 	br	16998 <_gp+0xffff4934>
   169ec:	00800434 	movhi	r2,16
   169f0:	84000234 	orhi	r16,r16,8
   169f4:	10bfffc4 	addi	r2,r2,-1
   169f8:	4cc0004c 	andi	r19,r9,1
   169fc:	80a0703a 	and	r16,r16,r2
   16a00:	003ea606 	br	1649c <_gp+0xffff4438>

00016a04 <__subdf3>:
   16a04:	00c00434 	movhi	r3,16
   16a08:	18ffffc4 	addi	r3,r3,-1
   16a0c:	defffb04 	addi	sp,sp,-20
   16a10:	28d2703a 	and	r9,r5,r3
   16a14:	3814d53a 	srli	r10,r7,20
   16a18:	38c6703a 	and	r3,r7,r3
   16a1c:	3004d77a 	srli	r2,r6,29
   16a20:	dc800215 	stw	r18,8(sp)
   16a24:	dc000015 	stw	r16,0(sp)
   16a28:	2824d7fa 	srli	r18,r5,31
   16a2c:	2820d53a 	srli	r16,r5,20
   16a30:	481290fa 	slli	r9,r9,3
   16a34:	200ad77a 	srli	r5,r4,29
   16a38:	180690fa 	slli	r3,r3,3
   16a3c:	dc400115 	stw	r17,4(sp)
   16a40:	dfc00415 	stw	ra,16(sp)
   16a44:	202290fa 	slli	r17,r4,3
   16a48:	dcc00315 	stw	r19,12(sp)
   16a4c:	5281ffcc 	andi	r10,r10,2047
   16a50:	0101ffc4 	movi	r4,2047
   16a54:	9011883a 	mov	r8,r18
   16a58:	8401ffcc 	andi	r16,r16,2047
   16a5c:	94803fcc 	andi	r18,r18,255
   16a60:	494ab03a 	or	r5,r9,r5
   16a64:	380ed7fa 	srli	r7,r7,31
   16a68:	1886b03a 	or	r3,r3,r2
   16a6c:	300c90fa 	slli	r6,r6,3
   16a70:	51009026 	beq	r10,r4,16cb4 <__subdf3+0x2b0>
   16a74:	39c0005c 	xori	r7,r7,1
   16a78:	8285c83a 	sub	r2,r16,r10
   16a7c:	91c06f26 	beq	r18,r7,16c3c <__subdf3+0x238>
   16a80:	0080b10e 	bge	zero,r2,16d48 <__subdf3+0x344>
   16a84:	50002a1e 	bne	r10,zero,16b30 <__subdf3+0x12c>
   16a88:	1988b03a 	or	r4,r3,r6
   16a8c:	2000941e 	bne	r4,zero,16ce0 <__subdf3+0x2dc>
   16a90:	888001cc 	andi	r2,r17,7
   16a94:	10005b26 	beq	r2,zero,16c04 <__subdf3+0x200>
   16a98:	88c003cc 	andi	r3,r17,15
   16a9c:	00800104 	movi	r2,4
   16aa0:	18805826 	beq	r3,r2,16c04 <__subdf3+0x200>
   16aa4:	88c00104 	addi	r3,r17,4
   16aa8:	1c63803a 	cmpltu	r17,r3,r17
   16aac:	2c4b883a 	add	r5,r5,r17
   16ab0:	2880202c 	andhi	r2,r5,128
   16ab4:	9200004c 	andi	r8,r18,1
   16ab8:	1823883a 	mov	r17,r3
   16abc:	10005426 	beq	r2,zero,16c10 <__subdf3+0x20c>
   16ac0:	84000044 	addi	r16,r16,1
   16ac4:	0081ffc4 	movi	r2,2047
   16ac8:	8080bf26 	beq	r16,r2,16dc8 <__subdf3+0x3c4>
   16acc:	013fe034 	movhi	r4,65408
   16ad0:	213fffc4 	addi	r4,r4,-1
   16ad4:	290a703a 	and	r5,r5,r4
   16ad8:	2804977a 	slli	r2,r5,29
   16adc:	280a927a 	slli	r5,r5,9
   16ae0:	8822d0fa 	srli	r17,r17,3
   16ae4:	8401ffcc 	andi	r16,r16,2047
   16ae8:	2808d33a 	srli	r4,r5,12
   16aec:	1444b03a 	or	r2,r2,r17
   16af0:	8401ffcc 	andi	r16,r16,2047
   16af4:	800a953a 	slli	r5,r16,20
   16af8:	40c03fcc 	andi	r3,r8,255
   16afc:	04000434 	movhi	r16,16
   16b00:	180697fa 	slli	r3,r3,31
   16b04:	843fffc4 	addi	r16,r16,-1
   16b08:	2420703a 	and	r16,r4,r16
   16b0c:	8160b03a 	or	r16,r16,r5
   16b10:	80c6b03a 	or	r3,r16,r3
   16b14:	dfc00417 	ldw	ra,16(sp)
   16b18:	dcc00317 	ldw	r19,12(sp)
   16b1c:	dc800217 	ldw	r18,8(sp)
   16b20:	dc400117 	ldw	r17,4(sp)
   16b24:	dc000017 	ldw	r16,0(sp)
   16b28:	dec00504 	addi	sp,sp,20
   16b2c:	f800283a 	ret
   16b30:	0101ffc4 	movi	r4,2047
   16b34:	813fd626 	beq	r16,r4,16a90 <_gp+0xffff4a2c>
   16b38:	18c02034 	orhi	r3,r3,128
   16b3c:	01000e04 	movi	r4,56
   16b40:	2080a416 	blt	r4,r2,16dd4 <__subdf3+0x3d0>
   16b44:	010007c4 	movi	r4,31
   16b48:	2080c716 	blt	r4,r2,16e68 <__subdf3+0x464>
   16b4c:	01000804 	movi	r4,32
   16b50:	2089c83a 	sub	r4,r4,r2
   16b54:	1910983a 	sll	r8,r3,r4
   16b58:	308ed83a 	srl	r7,r6,r2
   16b5c:	3108983a 	sll	r4,r6,r4
   16b60:	1884d83a 	srl	r2,r3,r2
   16b64:	41ccb03a 	or	r6,r8,r7
   16b68:	2008c03a 	cmpne	r4,r4,zero
   16b6c:	310cb03a 	or	r6,r6,r4
   16b70:	898dc83a 	sub	r6,r17,r6
   16b74:	89a3803a 	cmpltu	r17,r17,r6
   16b78:	288bc83a 	sub	r5,r5,r2
   16b7c:	2c4bc83a 	sub	r5,r5,r17
   16b80:	3023883a 	mov	r17,r6
   16b84:	2880202c 	andhi	r2,r5,128
   16b88:	10006b26 	beq	r2,zero,16d38 <__subdf3+0x334>
   16b8c:	04c02034 	movhi	r19,128
   16b90:	9cffffc4 	addi	r19,r19,-1
   16b94:	2ce6703a 	and	r19,r5,r19
   16b98:	98007c26 	beq	r19,zero,16d8c <__subdf3+0x388>
   16b9c:	9809883a 	mov	r4,r19
   16ba0:	00176d40 	call	176d4 <__clzsi2>
   16ba4:	10fffe04 	addi	r3,r2,-8
   16ba8:	010007c4 	movi	r4,31
   16bac:	20c07d16 	blt	r4,r3,16da4 <__subdf3+0x3a0>
   16bb0:	01400a04 	movi	r5,40
   16bb4:	2885c83a 	sub	r2,r5,r2
   16bb8:	888ad83a 	srl	r5,r17,r2
   16bbc:	98e6983a 	sll	r19,r19,r3
   16bc0:	88e2983a 	sll	r17,r17,r3
   16bc4:	2ce6b03a 	or	r19,r5,r19
   16bc8:	1c007a16 	blt	r3,r16,16db4 <__subdf3+0x3b0>
   16bcc:	1c21c83a 	sub	r16,r3,r16
   16bd0:	81400044 	addi	r5,r16,1
   16bd4:	00c007c4 	movi	r3,31
   16bd8:	19409616 	blt	r3,r5,16e34 <__subdf3+0x430>
   16bdc:	1c21c83a 	sub	r16,r3,r16
   16be0:	8c08983a 	sll	r4,r17,r16
   16be4:	8946d83a 	srl	r3,r17,r5
   16be8:	9c20983a 	sll	r16,r19,r16
   16bec:	2008c03a 	cmpne	r4,r4,zero
   16bf0:	994ad83a 	srl	r5,r19,r5
   16bf4:	1c06b03a 	or	r3,r3,r16
   16bf8:	1922b03a 	or	r17,r3,r4
   16bfc:	0021883a 	mov	r16,zero
   16c00:	003fa306 	br	16a90 <_gp+0xffff4a2c>
   16c04:	2880202c 	andhi	r2,r5,128
   16c08:	9200004c 	andi	r8,r18,1
   16c0c:	103fac1e 	bne	r2,zero,16ac0 <_gp+0xffff4a5c>
   16c10:	2804977a 	slli	r2,r5,29
   16c14:	8822d0fa 	srli	r17,r17,3
   16c18:	00c1ffc4 	movi	r3,2047
   16c1c:	280ad0fa 	srli	r5,r5,3
   16c20:	1444b03a 	or	r2,r2,r17
   16c24:	80c02726 	beq	r16,r3,16cc4 <__subdf3+0x2c0>
   16c28:	01000434 	movhi	r4,16
   16c2c:	213fffc4 	addi	r4,r4,-1
   16c30:	80e0703a 	and	r16,r16,r3
   16c34:	2908703a 	and	r4,r5,r4
   16c38:	003fad06 	br	16af0 <_gp+0xffff4a8c>
   16c3c:	0080690e 	bge	zero,r2,16de4 <__subdf3+0x3e0>
   16c40:	50002f26 	beq	r10,zero,16d00 <__subdf3+0x2fc>
   16c44:	0101ffc4 	movi	r4,2047
   16c48:	813f9126 	beq	r16,r4,16a90 <_gp+0xffff4a2c>
   16c4c:	18c02034 	orhi	r3,r3,128
   16c50:	01000e04 	movi	r4,56
   16c54:	2080b00e 	bge	r4,r2,16f18 <__subdf3+0x514>
   16c58:	198cb03a 	or	r6,r3,r6
   16c5c:	300ec03a 	cmpne	r7,r6,zero
   16c60:	0005883a 	mov	r2,zero
   16c64:	3c4f883a 	add	r7,r7,r17
   16c68:	3c63803a 	cmpltu	r17,r7,r17
   16c6c:	114b883a 	add	r5,r2,r5
   16c70:	2c4b883a 	add	r5,r5,r17
   16c74:	3823883a 	mov	r17,r7
   16c78:	2880202c 	andhi	r2,r5,128
   16c7c:	10002e26 	beq	r2,zero,16d38 <__subdf3+0x334>
   16c80:	84000044 	addi	r16,r16,1
   16c84:	0081ffc4 	movi	r2,2047
   16c88:	8080de26 	beq	r16,r2,17004 <__subdf3+0x600>
   16c8c:	00bfe034 	movhi	r2,65408
   16c90:	10bfffc4 	addi	r2,r2,-1
   16c94:	288a703a 	and	r5,r5,r2
   16c98:	880cd07a 	srli	r6,r17,1
   16c9c:	280897fa 	slli	r4,r5,31
   16ca0:	88c0004c 	andi	r3,r17,1
   16ca4:	30e2b03a 	or	r17,r6,r3
   16ca8:	280ad07a 	srli	r5,r5,1
   16cac:	8922b03a 	or	r17,r17,r4
   16cb0:	003f7706 	br	16a90 <_gp+0xffff4a2c>
   16cb4:	1984b03a 	or	r2,r3,r6
   16cb8:	103f6e26 	beq	r2,zero,16a74 <_gp+0xffff4a10>
   16cbc:	39c03fcc 	andi	r7,r7,255
   16cc0:	003f6d06 	br	16a78 <_gp+0xffff4a14>
   16cc4:	1146b03a 	or	r3,r2,r5
   16cc8:	18003f26 	beq	r3,zero,16dc8 <__subdf3+0x3c4>
   16ccc:	00c00434 	movhi	r3,16
   16cd0:	29000234 	orhi	r4,r5,8
   16cd4:	18ffffc4 	addi	r3,r3,-1
   16cd8:	20c8703a 	and	r4,r4,r3
   16cdc:	003f8406 	br	16af0 <_gp+0xffff4a8c>
   16ce0:	10bfffc4 	addi	r2,r2,-1
   16ce4:	1000501e 	bne	r2,zero,16e28 <__subdf3+0x424>
   16ce8:	898fc83a 	sub	r7,r17,r6
   16cec:	89e3803a 	cmpltu	r17,r17,r7
   16cf0:	28cbc83a 	sub	r5,r5,r3
   16cf4:	2c4bc83a 	sub	r5,r5,r17
   16cf8:	3823883a 	mov	r17,r7
   16cfc:	003fa106 	br	16b84 <_gp+0xffff4b20>
   16d00:	1988b03a 	or	r4,r3,r6
   16d04:	203f6226 	beq	r4,zero,16a90 <_gp+0xffff4a2c>
   16d08:	10bfffc4 	addi	r2,r2,-1
   16d0c:	10009b1e 	bne	r2,zero,16f7c <__subdf3+0x578>
   16d10:	344d883a 	add	r6,r6,r17
   16d14:	3463803a 	cmpltu	r17,r6,r17
   16d18:	194b883a 	add	r5,r3,r5
   16d1c:	2c4b883a 	add	r5,r5,r17
   16d20:	3023883a 	mov	r17,r6
   16d24:	003fd406 	br	16c78 <_gp+0xffff4c14>
   16d28:	1106b03a 	or	r3,r2,r4
   16d2c:	1800b426 	beq	r3,zero,17000 <__subdf3+0x5fc>
   16d30:	100b883a 	mov	r5,r2
   16d34:	2023883a 	mov	r17,r4
   16d38:	888001cc 	andi	r2,r17,7
   16d3c:	103f561e 	bne	r2,zero,16a98 <_gp+0xffff4a34>
   16d40:	9200004c 	andi	r8,r18,1
   16d44:	003fb206 	br	16c10 <_gp+0xffff4bac>
   16d48:	1000531e 	bne	r2,zero,16e98 <__subdf3+0x494>
   16d4c:	80800044 	addi	r2,r16,1
   16d50:	1081ffcc 	andi	r2,r2,2047
   16d54:	01000044 	movi	r4,1
   16d58:	2080a00e 	bge	r4,r2,16fdc <__subdf3+0x5d8>
   16d5c:	8985c83a 	sub	r2,r17,r6
   16d60:	8889803a 	cmpltu	r4,r17,r2
   16d64:	28e7c83a 	sub	r19,r5,r3
   16d68:	9927c83a 	sub	r19,r19,r4
   16d6c:	9900202c 	andhi	r4,r19,128
   16d70:	20006226 	beq	r4,zero,16efc <__subdf3+0x4f8>
   16d74:	3463c83a 	sub	r17,r6,r17
   16d78:	194bc83a 	sub	r5,r3,r5
   16d7c:	344d803a 	cmpltu	r6,r6,r17
   16d80:	29a7c83a 	sub	r19,r5,r6
   16d84:	3825883a 	mov	r18,r7
   16d88:	983f841e 	bne	r19,zero,16b9c <_gp+0xffff4b38>
   16d8c:	8809883a 	mov	r4,r17
   16d90:	00176d40 	call	176d4 <__clzsi2>
   16d94:	10800804 	addi	r2,r2,32
   16d98:	10fffe04 	addi	r3,r2,-8
   16d9c:	010007c4 	movi	r4,31
   16da0:	20ff830e 	bge	r4,r3,16bb0 <_gp+0xffff4b4c>
   16da4:	14fff604 	addi	r19,r2,-40
   16da8:	8ce6983a 	sll	r19,r17,r19
   16dac:	0023883a 	mov	r17,zero
   16db0:	1c3f860e 	bge	r3,r16,16bcc <_gp+0xffff4b68>
   16db4:	017fe034 	movhi	r5,65408
   16db8:	297fffc4 	addi	r5,r5,-1
   16dbc:	80e1c83a 	sub	r16,r16,r3
   16dc0:	994a703a 	and	r5,r19,r5
   16dc4:	003f3206 	br	16a90 <_gp+0xffff4a2c>
   16dc8:	0009883a 	mov	r4,zero
   16dcc:	0005883a 	mov	r2,zero
   16dd0:	003f4706 	br	16af0 <_gp+0xffff4a8c>
   16dd4:	198cb03a 	or	r6,r3,r6
   16dd8:	300cc03a 	cmpne	r6,r6,zero
   16ddc:	0005883a 	mov	r2,zero
   16de0:	003f6306 	br	16b70 <_gp+0xffff4b0c>
   16de4:	10009d1e 	bne	r2,zero,1705c <__subdf3+0x658>
   16de8:	81c00044 	addi	r7,r16,1
   16dec:	3881ffcc 	andi	r2,r7,2047
   16df0:	02400044 	movi	r9,1
   16df4:	4880680e 	bge	r9,r2,16f98 <__subdf3+0x594>
   16df8:	0081ffc4 	movi	r2,2047
   16dfc:	3880ae26 	beq	r7,r2,170b8 <__subdf3+0x6b4>
   16e00:	344d883a 	add	r6,r6,r17
   16e04:	3463803a 	cmpltu	r17,r6,r17
   16e08:	194b883a 	add	r5,r3,r5
   16e0c:	2c4b883a 	add	r5,r5,r17
   16e10:	282297fa 	slli	r17,r5,31
   16e14:	300cd07a 	srli	r6,r6,1
   16e18:	280ad07a 	srli	r5,r5,1
   16e1c:	3821883a 	mov	r16,r7
   16e20:	89a2b03a 	or	r17,r17,r6
   16e24:	003f1a06 	br	16a90 <_gp+0xffff4a2c>
   16e28:	0101ffc4 	movi	r4,2047
   16e2c:	813f431e 	bne	r16,r4,16b3c <_gp+0xffff4ad8>
   16e30:	003f1706 	br	16a90 <_gp+0xffff4a2c>
   16e34:	80bff844 	addi	r2,r16,-31
   16e38:	00c00804 	movi	r3,32
   16e3c:	9884d83a 	srl	r2,r19,r2
   16e40:	28c05126 	beq	r5,r3,16f88 <__subdf3+0x584>
   16e44:	00c00fc4 	movi	r3,63
   16e48:	1c21c83a 	sub	r16,r3,r16
   16e4c:	9c26983a 	sll	r19,r19,r16
   16e50:	9c62b03a 	or	r17,r19,r17
   16e54:	8822c03a 	cmpne	r17,r17,zero
   16e58:	88a2b03a 	or	r17,r17,r2
   16e5c:	000b883a 	mov	r5,zero
   16e60:	0021883a 	mov	r16,zero
   16e64:	003fb406 	br	16d38 <_gp+0xffff4cd4>
   16e68:	113ff804 	addi	r4,r2,-32
   16e6c:	01c00804 	movi	r7,32
   16e70:	1908d83a 	srl	r4,r3,r4
   16e74:	11c04626 	beq	r2,r7,16f90 <__subdf3+0x58c>
   16e78:	01c01004 	movi	r7,64
   16e7c:	3885c83a 	sub	r2,r7,r2
   16e80:	1884983a 	sll	r2,r3,r2
   16e84:	118cb03a 	or	r6,r2,r6
   16e88:	300cc03a 	cmpne	r6,r6,zero
   16e8c:	310cb03a 	or	r6,r6,r4
   16e90:	0005883a 	mov	r2,zero
   16e94:	003f3606 	br	16b70 <_gp+0xffff4b0c>
   16e98:	80002b26 	beq	r16,zero,16f48 <__subdf3+0x544>
   16e9c:	0101ffc4 	movi	r4,2047
   16ea0:	51006926 	beq	r10,r4,17048 <__subdf3+0x644>
   16ea4:	0085c83a 	sub	r2,zero,r2
   16ea8:	29402034 	orhi	r5,r5,128
   16eac:	01000e04 	movi	r4,56
   16eb0:	20807d16 	blt	r4,r2,170a8 <__subdf3+0x6a4>
   16eb4:	010007c4 	movi	r4,31
   16eb8:	2080d916 	blt	r4,r2,17220 <__subdf3+0x81c>
   16ebc:	01000804 	movi	r4,32
   16ec0:	2089c83a 	sub	r4,r4,r2
   16ec4:	2912983a 	sll	r9,r5,r4
   16ec8:	8890d83a 	srl	r8,r17,r2
   16ecc:	8908983a 	sll	r4,r17,r4
   16ed0:	2884d83a 	srl	r2,r5,r2
   16ed4:	4a22b03a 	or	r17,r9,r8
   16ed8:	2008c03a 	cmpne	r4,r4,zero
   16edc:	8922b03a 	or	r17,r17,r4
   16ee0:	3463c83a 	sub	r17,r6,r17
   16ee4:	1885c83a 	sub	r2,r3,r2
   16ee8:	344d803a 	cmpltu	r6,r6,r17
   16eec:	118bc83a 	sub	r5,r2,r6
   16ef0:	5021883a 	mov	r16,r10
   16ef4:	3825883a 	mov	r18,r7
   16ef8:	003f2206 	br	16b84 <_gp+0xffff4b20>
   16efc:	9886b03a 	or	r3,r19,r2
   16f00:	18001c1e 	bne	r3,zero,16f74 <__subdf3+0x570>
   16f04:	0011883a 	mov	r8,zero
   16f08:	000b883a 	mov	r5,zero
   16f0c:	0023883a 	mov	r17,zero
   16f10:	0021883a 	mov	r16,zero
   16f14:	003f3e06 	br	16c10 <_gp+0xffff4bac>
   16f18:	010007c4 	movi	r4,31
   16f1c:	20803c16 	blt	r4,r2,17010 <__subdf3+0x60c>
   16f20:	01000804 	movi	r4,32
   16f24:	2089c83a 	sub	r4,r4,r2
   16f28:	1912983a 	sll	r9,r3,r4
   16f2c:	308ed83a 	srl	r7,r6,r2
   16f30:	3108983a 	sll	r4,r6,r4
   16f34:	1884d83a 	srl	r2,r3,r2
   16f38:	49ceb03a 	or	r7,r9,r7
   16f3c:	2008c03a 	cmpne	r4,r4,zero
   16f40:	390eb03a 	or	r7,r7,r4
   16f44:	003f4706 	br	16c64 <_gp+0xffff4c00>
   16f48:	2c48b03a 	or	r4,r5,r17
   16f4c:	20003e26 	beq	r4,zero,17048 <__subdf3+0x644>
   16f50:	0084303a 	nor	r2,zero,r2
   16f54:	10003a1e 	bne	r2,zero,17040 <__subdf3+0x63c>
   16f58:	3463c83a 	sub	r17,r6,r17
   16f5c:	194bc83a 	sub	r5,r3,r5
   16f60:	344d803a 	cmpltu	r6,r6,r17
   16f64:	298bc83a 	sub	r5,r5,r6
   16f68:	5021883a 	mov	r16,r10
   16f6c:	3825883a 	mov	r18,r7
   16f70:	003f0406 	br	16b84 <_gp+0xffff4b20>
   16f74:	1023883a 	mov	r17,r2
   16f78:	003f0706 	br	16b98 <_gp+0xffff4b34>
   16f7c:	0101ffc4 	movi	r4,2047
   16f80:	813f331e 	bne	r16,r4,16c50 <_gp+0xffff4bec>
   16f84:	003ec206 	br	16a90 <_gp+0xffff4a2c>
   16f88:	0027883a 	mov	r19,zero
   16f8c:	003fb006 	br	16e50 <_gp+0xffff4dec>
   16f90:	0005883a 	mov	r2,zero
   16f94:	003fbb06 	br	16e84 <_gp+0xffff4e20>
   16f98:	2c44b03a 	or	r2,r5,r17
   16f9c:	80008b1e 	bne	r16,zero,171cc <__subdf3+0x7c8>
   16fa0:	1000b526 	beq	r2,zero,17278 <__subdf3+0x874>
   16fa4:	1984b03a 	or	r2,r3,r6
   16fa8:	103eb926 	beq	r2,zero,16a90 <_gp+0xffff4a2c>
   16fac:	3449883a 	add	r4,r6,r17
   16fb0:	2463803a 	cmpltu	r17,r4,r17
   16fb4:	194b883a 	add	r5,r3,r5
   16fb8:	2c4b883a 	add	r5,r5,r17
   16fbc:	2880202c 	andhi	r2,r5,128
   16fc0:	2023883a 	mov	r17,r4
   16fc4:	103f5c26 	beq	r2,zero,16d38 <_gp+0xffff4cd4>
   16fc8:	00bfe034 	movhi	r2,65408
   16fcc:	10bfffc4 	addi	r2,r2,-1
   16fd0:	4821883a 	mov	r16,r9
   16fd4:	288a703a 	and	r5,r5,r2
   16fd8:	003ead06 	br	16a90 <_gp+0xffff4a2c>
   16fdc:	2c44b03a 	or	r2,r5,r17
   16fe0:	8000291e 	bne	r16,zero,17088 <__subdf3+0x684>
   16fe4:	10004f1e 	bne	r2,zero,17124 <__subdf3+0x720>
   16fe8:	1984b03a 	or	r2,r3,r6
   16fec:	10000426 	beq	r2,zero,17000 <__subdf3+0x5fc>
   16ff0:	180b883a 	mov	r5,r3
   16ff4:	3023883a 	mov	r17,r6
   16ff8:	3825883a 	mov	r18,r7
   16ffc:	003ea406 	br	16a90 <_gp+0xffff4a2c>
   17000:	0011883a 	mov	r8,zero
   17004:	000b883a 	mov	r5,zero
   17008:	0023883a 	mov	r17,zero
   1700c:	003f0006 	br	16c10 <_gp+0xffff4bac>
   17010:	11fff804 	addi	r7,r2,-32
   17014:	19c8d83a 	srl	r4,r3,r7
   17018:	01c00804 	movi	r7,32
   1701c:	11c07e26 	beq	r2,r7,17218 <__subdf3+0x814>
   17020:	01c01004 	movi	r7,64
   17024:	3885c83a 	sub	r2,r7,r2
   17028:	1884983a 	sll	r2,r3,r2
   1702c:	118cb03a 	or	r6,r2,r6
   17030:	300ec03a 	cmpne	r7,r6,zero
   17034:	390eb03a 	or	r7,r7,r4
   17038:	0005883a 	mov	r2,zero
   1703c:	003f0906 	br	16c64 <_gp+0xffff4c00>
   17040:	0101ffc4 	movi	r4,2047
   17044:	513f991e 	bne	r10,r4,16eac <_gp+0xffff4e48>
   17048:	180b883a 	mov	r5,r3
   1704c:	3023883a 	mov	r17,r6
   17050:	5021883a 	mov	r16,r10
   17054:	3825883a 	mov	r18,r7
   17058:	003e8d06 	br	16a90 <_gp+0xffff4a2c>
   1705c:	80001a1e 	bne	r16,zero,170c8 <__subdf3+0x6c4>
   17060:	2c48b03a 	or	r4,r5,r17
   17064:	20005526 	beq	r4,zero,171bc <__subdf3+0x7b8>
   17068:	0084303a 	nor	r2,zero,r2
   1706c:	1000511e 	bne	r2,zero,171b4 <__subdf3+0x7b0>
   17070:	89a3883a 	add	r17,r17,r6
   17074:	194b883a 	add	r5,r3,r5
   17078:	898d803a 	cmpltu	r6,r17,r6
   1707c:	298b883a 	add	r5,r5,r6
   17080:	5021883a 	mov	r16,r10
   17084:	003efc06 	br	16c78 <_gp+0xffff4c14>
   17088:	1000341e 	bne	r2,zero,1715c <__subdf3+0x758>
   1708c:	1984b03a 	or	r2,r3,r6
   17090:	10006f26 	beq	r2,zero,17250 <__subdf3+0x84c>
   17094:	180b883a 	mov	r5,r3
   17098:	3023883a 	mov	r17,r6
   1709c:	3825883a 	mov	r18,r7
   170a0:	0401ffc4 	movi	r16,2047
   170a4:	003e7a06 	br	16a90 <_gp+0xffff4a2c>
   170a8:	2c62b03a 	or	r17,r5,r17
   170ac:	8822c03a 	cmpne	r17,r17,zero
   170b0:	0005883a 	mov	r2,zero
   170b4:	003f8a06 	br	16ee0 <_gp+0xffff4e7c>
   170b8:	3821883a 	mov	r16,r7
   170bc:	000b883a 	mov	r5,zero
   170c0:	0023883a 	mov	r17,zero
   170c4:	003ed206 	br	16c10 <_gp+0xffff4bac>
   170c8:	0101ffc4 	movi	r4,2047
   170cc:	51003b26 	beq	r10,r4,171bc <__subdf3+0x7b8>
   170d0:	0085c83a 	sub	r2,zero,r2
   170d4:	29402034 	orhi	r5,r5,128
   170d8:	01000e04 	movi	r4,56
   170dc:	20806216 	blt	r4,r2,17268 <__subdf3+0x864>
   170e0:	010007c4 	movi	r4,31
   170e4:	20806b16 	blt	r4,r2,17294 <__subdf3+0x890>
   170e8:	01000804 	movi	r4,32
   170ec:	2089c83a 	sub	r4,r4,r2
   170f0:	2912983a 	sll	r9,r5,r4
   170f4:	888ed83a 	srl	r7,r17,r2
   170f8:	8908983a 	sll	r4,r17,r4
   170fc:	2884d83a 	srl	r2,r5,r2
   17100:	49e2b03a 	or	r17,r9,r7
   17104:	2008c03a 	cmpne	r4,r4,zero
   17108:	8922b03a 	or	r17,r17,r4
   1710c:	89a3883a 	add	r17,r17,r6
   17110:	10c5883a 	add	r2,r2,r3
   17114:	898d803a 	cmpltu	r6,r17,r6
   17118:	118b883a 	add	r5,r2,r6
   1711c:	5021883a 	mov	r16,r10
   17120:	003ed506 	br	16c78 <_gp+0xffff4c14>
   17124:	1984b03a 	or	r2,r3,r6
   17128:	103e5926 	beq	r2,zero,16a90 <_gp+0xffff4a2c>
   1712c:	8989c83a 	sub	r4,r17,r6
   17130:	8911803a 	cmpltu	r8,r17,r4
   17134:	28c5c83a 	sub	r2,r5,r3
   17138:	1205c83a 	sub	r2,r2,r8
   1713c:	1200202c 	andhi	r8,r2,128
   17140:	403ef926 	beq	r8,zero,16d28 <_gp+0xffff4cc4>
   17144:	3463c83a 	sub	r17,r6,r17
   17148:	194bc83a 	sub	r5,r3,r5
   1714c:	344d803a 	cmpltu	r6,r6,r17
   17150:	298bc83a 	sub	r5,r5,r6
   17154:	3825883a 	mov	r18,r7
   17158:	003e4d06 	br	16a90 <_gp+0xffff4a2c>
   1715c:	1984b03a 	or	r2,r3,r6
   17160:	10002b26 	beq	r2,zero,17210 <__subdf3+0x80c>
   17164:	2808d0fa 	srli	r4,r5,3
   17168:	8822d0fa 	srli	r17,r17,3
   1716c:	280a977a 	slli	r5,r5,29
   17170:	2080022c 	andhi	r2,r4,8
   17174:	2c62b03a 	or	r17,r5,r17
   17178:	10000826 	beq	r2,zero,1719c <__subdf3+0x798>
   1717c:	1810d0fa 	srli	r8,r3,3
   17180:	4080022c 	andhi	r2,r8,8
   17184:	1000051e 	bne	r2,zero,1719c <__subdf3+0x798>
   17188:	300cd0fa 	srli	r6,r6,3
   1718c:	1804977a 	slli	r2,r3,29
   17190:	4009883a 	mov	r4,r8
   17194:	3825883a 	mov	r18,r7
   17198:	11a2b03a 	or	r17,r2,r6
   1719c:	880ad77a 	srli	r5,r17,29
   171a0:	200890fa 	slli	r4,r4,3
   171a4:	882290fa 	slli	r17,r17,3
   171a8:	0401ffc4 	movi	r16,2047
   171ac:	290ab03a 	or	r5,r5,r4
   171b0:	003e3706 	br	16a90 <_gp+0xffff4a2c>
   171b4:	0101ffc4 	movi	r4,2047
   171b8:	513fc71e 	bne	r10,r4,170d8 <_gp+0xffff5074>
   171bc:	180b883a 	mov	r5,r3
   171c0:	3023883a 	mov	r17,r6
   171c4:	5021883a 	mov	r16,r10
   171c8:	003e3106 	br	16a90 <_gp+0xffff4a2c>
   171cc:	10002d26 	beq	r2,zero,17284 <__subdf3+0x880>
   171d0:	1984b03a 	or	r2,r3,r6
   171d4:	10000e26 	beq	r2,zero,17210 <__subdf3+0x80c>
   171d8:	2808d0fa 	srli	r4,r5,3
   171dc:	8822d0fa 	srli	r17,r17,3
   171e0:	280a977a 	slli	r5,r5,29
   171e4:	2080022c 	andhi	r2,r4,8
   171e8:	2c62b03a 	or	r17,r5,r17
   171ec:	103feb26 	beq	r2,zero,1719c <_gp+0xffff5138>
   171f0:	180ed0fa 	srli	r7,r3,3
   171f4:	3880022c 	andhi	r2,r7,8
   171f8:	103fe81e 	bne	r2,zero,1719c <_gp+0xffff5138>
   171fc:	300cd0fa 	srli	r6,r6,3
   17200:	1804977a 	slli	r2,r3,29
   17204:	3809883a 	mov	r4,r7
   17208:	11a2b03a 	or	r17,r2,r6
   1720c:	003fe306 	br	1719c <_gp+0xffff5138>
   17210:	0401ffc4 	movi	r16,2047
   17214:	003e1e06 	br	16a90 <_gp+0xffff4a2c>
   17218:	0005883a 	mov	r2,zero
   1721c:	003f8306 	br	1702c <_gp+0xffff4fc8>
   17220:	113ff804 	addi	r4,r2,-32
   17224:	02000804 	movi	r8,32
   17228:	2908d83a 	srl	r4,r5,r4
   1722c:	12002526 	beq	r2,r8,172c4 <__subdf3+0x8c0>
   17230:	02001004 	movi	r8,64
   17234:	4085c83a 	sub	r2,r8,r2
   17238:	288a983a 	sll	r5,r5,r2
   1723c:	2c62b03a 	or	r17,r5,r17
   17240:	8822c03a 	cmpne	r17,r17,zero
   17244:	8922b03a 	or	r17,r17,r4
   17248:	0005883a 	mov	r2,zero
   1724c:	003f2406 	br	16ee0 <_gp+0xffff4e7c>
   17250:	01402034 	movhi	r5,128
   17254:	0011883a 	mov	r8,zero
   17258:	297fffc4 	addi	r5,r5,-1
   1725c:	047ffe04 	movi	r17,-8
   17260:	0401ffc4 	movi	r16,2047
   17264:	003e6a06 	br	16c10 <_gp+0xffff4bac>
   17268:	2c62b03a 	or	r17,r5,r17
   1726c:	8822c03a 	cmpne	r17,r17,zero
   17270:	0005883a 	mov	r2,zero
   17274:	003fa506 	br	1710c <_gp+0xffff50a8>
   17278:	180b883a 	mov	r5,r3
   1727c:	3023883a 	mov	r17,r6
   17280:	003e0306 	br	16a90 <_gp+0xffff4a2c>
   17284:	180b883a 	mov	r5,r3
   17288:	3023883a 	mov	r17,r6
   1728c:	0401ffc4 	movi	r16,2047
   17290:	003dff06 	br	16a90 <_gp+0xffff4a2c>
   17294:	113ff804 	addi	r4,r2,-32
   17298:	01c00804 	movi	r7,32
   1729c:	2908d83a 	srl	r4,r5,r4
   172a0:	11c00a26 	beq	r2,r7,172cc <__subdf3+0x8c8>
   172a4:	01c01004 	movi	r7,64
   172a8:	3885c83a 	sub	r2,r7,r2
   172ac:	288a983a 	sll	r5,r5,r2
   172b0:	2c62b03a 	or	r17,r5,r17
   172b4:	8822c03a 	cmpne	r17,r17,zero
   172b8:	8922b03a 	or	r17,r17,r4
   172bc:	0005883a 	mov	r2,zero
   172c0:	003f9206 	br	1710c <_gp+0xffff50a8>
   172c4:	000b883a 	mov	r5,zero
   172c8:	003fdc06 	br	1723c <_gp+0xffff51d8>
   172cc:	000b883a 	mov	r5,zero
   172d0:	003ff706 	br	172b0 <_gp+0xffff524c>

000172d4 <__fixdfsi>:
   172d4:	2806d53a 	srli	r3,r5,20
   172d8:	00800434 	movhi	r2,16
   172dc:	10bfffc4 	addi	r2,r2,-1
   172e0:	18c1ffcc 	andi	r3,r3,2047
   172e4:	0180ff84 	movi	r6,1022
   172e8:	2884703a 	and	r2,r5,r2
   172ec:	280ad7fa 	srli	r5,r5,31
   172f0:	30c0130e 	bge	r6,r3,17340 <__fixdfsi+0x6c>
   172f4:	01810744 	movi	r6,1053
   172f8:	30c00d16 	blt	r6,r3,17330 <__fixdfsi+0x5c>
   172fc:	01810cc4 	movi	r6,1075
   17300:	30cdc83a 	sub	r6,r6,r3
   17304:	01c007c4 	movi	r7,31
   17308:	10800434 	orhi	r2,r2,16
   1730c:	39800e0e 	bge	r7,r6,17348 <__fixdfsi+0x74>
   17310:	010104c4 	movi	r4,1043
   17314:	20c7c83a 	sub	r3,r4,r3
   17318:	10c6d83a 	srl	r3,r2,r3
   1731c:	29403fcc 	andi	r5,r5,255
   17320:	0145c83a 	sub	r2,zero,r5
   17324:	1884f03a 	xor	r2,r3,r2
   17328:	1145883a 	add	r2,r2,r5
   1732c:	f800283a 	ret
   17330:	00a00034 	movhi	r2,32768
   17334:	10bfffc4 	addi	r2,r2,-1
   17338:	2885883a 	add	r2,r5,r2
   1733c:	f800283a 	ret
   17340:	0005883a 	mov	r2,zero
   17344:	f800283a 	ret
   17348:	18fefb44 	addi	r3,r3,-1043
   1734c:	2188d83a 	srl	r4,r4,r6
   17350:	10c6983a 	sll	r3,r2,r3
   17354:	20c6b03a 	or	r3,r4,r3
   17358:	003ff006 	br	1731c <_gp+0xffff52b8>

0001735c <__floatsidf>:
   1735c:	defffd04 	addi	sp,sp,-12
   17360:	dc400115 	stw	r17,4(sp)
   17364:	dfc00215 	stw	ra,8(sp)
   17368:	dc000015 	stw	r16,0(sp)
   1736c:	2023883a 	mov	r17,r4
   17370:	20001426 	beq	r4,zero,173c4 <__floatsidf+0x68>
   17374:	2020d7fa 	srli	r16,r4,31
   17378:	80000126 	beq	r16,zero,17380 <__floatsidf+0x24>
   1737c:	0123c83a 	sub	r17,zero,r4
   17380:	8809883a 	mov	r4,r17
   17384:	00176d40 	call	176d4 <__clzsi2>
   17388:	01410784 	movi	r5,1054
   1738c:	00c00284 	movi	r3,10
   17390:	288bc83a 	sub	r5,r5,r2
   17394:	18801c16 	blt	r3,r2,17408 <__floatsidf+0xac>
   17398:	00c002c4 	movi	r3,11
   1739c:	1887c83a 	sub	r3,r3,r2
   173a0:	88c8d83a 	srl	r4,r17,r3
   173a4:	00c00434 	movhi	r3,16
   173a8:	18ffffc4 	addi	r3,r3,-1
   173ac:	10800544 	addi	r2,r2,21
   173b0:	20c8703a 	and	r4,r4,r3
   173b4:	8884983a 	sll	r2,r17,r2
   173b8:	28c1ffcc 	andi	r3,r5,2047
   173bc:	800d883a 	mov	r6,r16
   173c0:	00000406 	br	173d4 <__floatsidf+0x78>
   173c4:	000d883a 	mov	r6,zero
   173c8:	0007883a 	mov	r3,zero
   173cc:	0009883a 	mov	r4,zero
   173d0:	0005883a 	mov	r2,zero
   173d4:	180a953a 	slli	r5,r3,20
   173d8:	31803fcc 	andi	r6,r6,255
   173dc:	00c00434 	movhi	r3,16
   173e0:	300c97fa 	slli	r6,r6,31
   173e4:	18ffffc4 	addi	r3,r3,-1
   173e8:	20c6703a 	and	r3,r4,r3
   173ec:	1946b03a 	or	r3,r3,r5
   173f0:	1986b03a 	or	r3,r3,r6
   173f4:	dfc00217 	ldw	ra,8(sp)
   173f8:	dc400117 	ldw	r17,4(sp)
   173fc:	dc000017 	ldw	r16,0(sp)
   17400:	dec00304 	addi	sp,sp,12
   17404:	f800283a 	ret
   17408:	10fffd44 	addi	r3,r2,-11
   1740c:	88c8983a 	sll	r4,r17,r3
   17410:	00800434 	movhi	r2,16
   17414:	10bfffc4 	addi	r2,r2,-1
   17418:	2088703a 	and	r4,r4,r2
   1741c:	28c1ffcc 	andi	r3,r5,2047
   17420:	800d883a 	mov	r6,r16
   17424:	0005883a 	mov	r2,zero
   17428:	003fea06 	br	173d4 <_gp+0xffff5370>

0001742c <__extendsfdf2>:
   1742c:	200ad5fa 	srli	r5,r4,23
   17430:	defffd04 	addi	sp,sp,-12
   17434:	dc400115 	stw	r17,4(sp)
   17438:	29403fcc 	andi	r5,r5,255
   1743c:	29800044 	addi	r6,r5,1
   17440:	04402034 	movhi	r17,128
   17444:	dc000015 	stw	r16,0(sp)
   17448:	8c7fffc4 	addi	r17,r17,-1
   1744c:	dfc00215 	stw	ra,8(sp)
   17450:	31803fcc 	andi	r6,r6,255
   17454:	00800044 	movi	r2,1
   17458:	8922703a 	and	r17,r17,r4
   1745c:	2020d7fa 	srli	r16,r4,31
   17460:	1180110e 	bge	r2,r6,174a8 <__extendsfdf2+0x7c>
   17464:	880ed0fa 	srli	r7,r17,3
   17468:	8822977a 	slli	r17,r17,29
   1746c:	2940e004 	addi	r5,r5,896
   17470:	2941ffcc 	andi	r5,r5,2047
   17474:	280c953a 	slli	r6,r5,20
   17478:	01400434 	movhi	r5,16
   1747c:	800697fa 	slli	r3,r16,31
   17480:	297fffc4 	addi	r5,r5,-1
   17484:	394a703a 	and	r5,r7,r5
   17488:	298ab03a 	or	r5,r5,r6
   1748c:	8805883a 	mov	r2,r17
   17490:	28c6b03a 	or	r3,r5,r3
   17494:	dfc00217 	ldw	ra,8(sp)
   17498:	dc400117 	ldw	r17,4(sp)
   1749c:	dc000017 	ldw	r16,0(sp)
   174a0:	dec00304 	addi	sp,sp,12
   174a4:	f800283a 	ret
   174a8:	2800111e 	bne	r5,zero,174f0 <__extendsfdf2+0xc4>
   174ac:	88001c26 	beq	r17,zero,17520 <__extendsfdf2+0xf4>
   174b0:	8809883a 	mov	r4,r17
   174b4:	00176d40 	call	176d4 <__clzsi2>
   174b8:	00c00284 	movi	r3,10
   174bc:	18801b16 	blt	r3,r2,1752c <__extendsfdf2+0x100>
   174c0:	01c002c4 	movi	r7,11
   174c4:	388fc83a 	sub	r7,r7,r2
   174c8:	10c00544 	addi	r3,r2,21
   174cc:	89ced83a 	srl	r7,r17,r7
   174d0:	88e2983a 	sll	r17,r17,r3
   174d4:	0180e244 	movi	r6,905
   174d8:	308bc83a 	sub	r5,r6,r2
   174dc:	01800434 	movhi	r6,16
   174e0:	31bfffc4 	addi	r6,r6,-1
   174e4:	398e703a 	and	r7,r7,r6
   174e8:	2941ffcc 	andi	r5,r5,2047
   174ec:	003fe006 	br	17470 <_gp+0xffff540c>
   174f0:	88000826 	beq	r17,zero,17514 <__extendsfdf2+0xe8>
   174f4:	880ed0fa 	srli	r7,r17,3
   174f8:	00800434 	movhi	r2,16
   174fc:	10bfffc4 	addi	r2,r2,-1
   17500:	39c00234 	orhi	r7,r7,8
   17504:	8822977a 	slli	r17,r17,29
   17508:	388e703a 	and	r7,r7,r2
   1750c:	0141ffc4 	movi	r5,2047
   17510:	003fd706 	br	17470 <_gp+0xffff540c>
   17514:	0141ffc4 	movi	r5,2047
   17518:	000f883a 	mov	r7,zero
   1751c:	003fd406 	br	17470 <_gp+0xffff540c>
   17520:	000b883a 	mov	r5,zero
   17524:	000f883a 	mov	r7,zero
   17528:	003fd106 	br	17470 <_gp+0xffff540c>
   1752c:	11fffd44 	addi	r7,r2,-11
   17530:	89ce983a 	sll	r7,r17,r7
   17534:	0023883a 	mov	r17,zero
   17538:	003fe606 	br	174d4 <_gp+0xffff5470>

0001753c <__truncdfsf2>:
   1753c:	2810d53a 	srli	r8,r5,20
   17540:	01c00434 	movhi	r7,16
   17544:	39ffffc4 	addi	r7,r7,-1
   17548:	29ce703a 	and	r7,r5,r7
   1754c:	380e90fa 	slli	r7,r7,3
   17550:	4201ffcc 	andi	r8,r8,2047
   17554:	200cd77a 	srli	r6,r4,29
   17558:	42400044 	addi	r9,r8,1
   1755c:	4a41ffcc 	andi	r9,r9,2047
   17560:	00800044 	movi	r2,1
   17564:	398cb03a 	or	r6,r7,r6
   17568:	280ad7fa 	srli	r5,r5,31
   1756c:	200e90fa 	slli	r7,r4,3
   17570:	1240230e 	bge	r2,r9,17600 <__truncdfsf2+0xc4>
   17574:	40ff2004 	addi	r3,r8,-896
   17578:	00803f84 	movi	r2,254
   1757c:	10c01516 	blt	r2,r3,175d4 <__truncdfsf2+0x98>
   17580:	00c02d0e 	bge	zero,r3,17638 <__truncdfsf2+0xfc>
   17584:	200891ba 	slli	r4,r4,6
   17588:	300c90fa 	slli	r6,r6,3
   1758c:	380ed77a 	srli	r7,r7,29
   17590:	2008c03a 	cmpne	r4,r4,zero
   17594:	310cb03a 	or	r6,r6,r4
   17598:	31ccb03a 	or	r6,r6,r7
   1759c:	308001cc 	andi	r2,r6,7
   175a0:	10000426 	beq	r2,zero,175b4 <__truncdfsf2+0x78>
   175a4:	310003cc 	andi	r4,r6,15
   175a8:	00800104 	movi	r2,4
   175ac:	20800126 	beq	r4,r2,175b4 <__truncdfsf2+0x78>
   175b0:	31800104 	addi	r6,r6,4
   175b4:	3081002c 	andhi	r2,r6,1024
   175b8:	10002326 	beq	r2,zero,17648 <__truncdfsf2+0x10c>
   175bc:	18c00044 	addi	r3,r3,1
   175c0:	00803fc4 	movi	r2,255
   175c4:	18800326 	beq	r3,r2,175d4 <__truncdfsf2+0x98>
   175c8:	300c91ba 	slli	r6,r6,6
   175cc:	300cd27a 	srli	r6,r6,9
   175d0:	00000206 	br	175dc <__truncdfsf2+0xa0>
   175d4:	00ffffc4 	movi	r3,-1
   175d8:	000d883a 	mov	r6,zero
   175dc:	18c03fcc 	andi	r3,r3,255
   175e0:	180895fa 	slli	r4,r3,23
   175e4:	00c02034 	movhi	r3,128
   175e8:	280a97fa 	slli	r5,r5,31
   175ec:	18ffffc4 	addi	r3,r3,-1
   175f0:	30c6703a 	and	r3,r6,r3
   175f4:	1906b03a 	or	r3,r3,r4
   175f8:	1944b03a 	or	r2,r3,r5
   175fc:	f800283a 	ret
   17600:	4000071e 	bne	r8,zero,17620 <__truncdfsf2+0xe4>
   17604:	31ccb03a 	or	r6,r6,r7
   17608:	30000d1e 	bne	r6,zero,17640 <__truncdfsf2+0x104>
   1760c:	0007883a 	mov	r3,zero
   17610:	00802034 	movhi	r2,128
   17614:	10bfffc4 	addi	r2,r2,-1
   17618:	308c703a 	and	r6,r6,r2
   1761c:	003fef06 	br	175dc <_gp+0xffff5578>
   17620:	31c8b03a 	or	r4,r6,r7
   17624:	203feb26 	beq	r4,zero,175d4 <_gp+0xffff5570>
   17628:	300c90fa 	slli	r6,r6,3
   1762c:	00c03fc4 	movi	r3,255
   17630:	31808034 	orhi	r6,r6,512
   17634:	003fd906 	br	1759c <_gp+0xffff5538>
   17638:	00bffa44 	movi	r2,-23
   1763c:	1880090e 	bge	r3,r2,17664 <__truncdfsf2+0x128>
   17640:	01800144 	movi	r6,5
   17644:	0007883a 	mov	r3,zero
   17648:	00803fc4 	movi	r2,255
   1764c:	300cd0fa 	srli	r6,r6,3
   17650:	18bfef1e 	bne	r3,r2,17610 <_gp+0xffff55ac>
   17654:	303fdf26 	beq	r6,zero,175d4 <_gp+0xffff5570>
   17658:	31801034 	orhi	r6,r6,64
   1765c:	00ffffc4 	movi	r3,-1
   17660:	003feb06 	br	17610 <_gp+0xffff55ac>
   17664:	0080e784 	movi	r2,926
   17668:	1205c83a 	sub	r2,r2,r8
   1766c:	00c007c4 	movi	r3,31
   17670:	31802034 	orhi	r6,r6,128
   17674:	18800916 	blt	r3,r2,1769c <__truncdfsf2+0x160>
   17678:	423f2084 	addi	r8,r8,-894
   1767c:	3a06983a 	sll	r3,r7,r8
   17680:	3210983a 	sll	r8,r6,r8
   17684:	388ed83a 	srl	r7,r7,r2
   17688:	180cc03a 	cmpne	r6,r3,zero
   1768c:	418cb03a 	or	r6,r8,r6
   17690:	31ccb03a 	or	r6,r6,r7
   17694:	0007883a 	mov	r3,zero
   17698:	003fc006 	br	1759c <_gp+0xffff5538>
   1769c:	00c0df84 	movi	r3,894
   176a0:	1a07c83a 	sub	r3,r3,r8
   176a4:	01000804 	movi	r4,32
   176a8:	30c6d83a 	srl	r3,r6,r3
   176ac:	11000726 	beq	r2,r4,176cc <__truncdfsf2+0x190>
   176b0:	423f2884 	addi	r8,r8,-862
   176b4:	3210983a 	sll	r8,r6,r8
   176b8:	41ceb03a 	or	r7,r8,r7
   176bc:	380ec03a 	cmpne	r7,r7,zero
   176c0:	38ccb03a 	or	r6,r7,r3
   176c4:	0007883a 	mov	r3,zero
   176c8:	003fb406 	br	1759c <_gp+0xffff5538>
   176cc:	0011883a 	mov	r8,zero
   176d0:	003ff906 	br	176b8 <_gp+0xffff5654>

000176d4 <__clzsi2>:
   176d4:	00bfffd4 	movui	r2,65535
   176d8:	11000b36 	bltu	r2,r4,17708 <__clzsi2+0x34>
   176dc:	00803fc4 	movi	r2,255
   176e0:	1100122e 	bgeu	r2,r4,1772c <__clzsi2+0x58>
   176e4:	00c00204 	movi	r3,8
   176e8:	01400604 	movi	r5,24
   176ec:	20c8d83a 	srl	r4,r4,r3
   176f0:	008000b4 	movhi	r2,2
   176f4:	10a69f04 	addi	r2,r2,-25988
   176f8:	1109883a 	add	r4,r2,r4
   176fc:	20800003 	ldbu	r2,0(r4)
   17700:	2885c83a 	sub	r2,r5,r2
   17704:	f800283a 	ret
   17708:	00804034 	movhi	r2,256
   1770c:	10bfffc4 	addi	r2,r2,-1
   17710:	11000336 	bltu	r2,r4,17720 <__clzsi2+0x4c>
   17714:	00c00404 	movi	r3,16
   17718:	180b883a 	mov	r5,r3
   1771c:	003ff306 	br	176ec <_gp+0xffff5688>
   17720:	00c00604 	movi	r3,24
   17724:	01400204 	movi	r5,8
   17728:	003ff006 	br	176ec <_gp+0xffff5688>
   1772c:	0007883a 	mov	r3,zero
   17730:	01400804 	movi	r5,32
   17734:	003fed06 	br	176ec <_gp+0xffff5688>

00017738 <__errno>:
   17738:	008000b4 	movhi	r2,2
   1773c:	10a81b04 	addi	r2,r2,-24468
   17740:	10800017 	ldw	r2,0(r2)
   17744:	f800283a 	ret

00017748 <malloc>:
   17748:	008000b4 	movhi	r2,2
   1774c:	10a81b04 	addi	r2,r2,-24468
   17750:	200b883a 	mov	r5,r4
   17754:	11000017 	ldw	r4,0(r2)
   17758:	00177701 	jmpi	17770 <_malloc_r>

0001775c <free>:
   1775c:	008000b4 	movhi	r2,2
   17760:	10a81b04 	addi	r2,r2,-24468
   17764:	200b883a 	mov	r5,r4
   17768:	11000017 	ldw	r4,0(r2)
   1776c:	00187841 	jmpi	18784 <_free_r>

00017770 <_malloc_r>:
   17770:	defff604 	addi	sp,sp,-40
   17774:	dfc00915 	stw	ra,36(sp)
   17778:	df000815 	stw	fp,32(sp)
   1777c:	ddc00715 	stw	r23,28(sp)
   17780:	dd800615 	stw	r22,24(sp)
   17784:	dd400515 	stw	r21,20(sp)
   17788:	dd000415 	stw	r20,16(sp)
   1778c:	dcc00315 	stw	r19,12(sp)
   17790:	dc800215 	stw	r18,8(sp)
   17794:	dc400115 	stw	r17,4(sp)
   17798:	dc000015 	stw	r16,0(sp)
   1779c:	288002c4 	addi	r2,r5,11
   177a0:	00c00584 	movi	r3,22
   177a4:	1880042e 	bgeu	r3,r2,177b8 <_malloc_r+0x48>
   177a8:	047ffe04 	movi	r17,-8
   177ac:	1462703a 	and	r17,r2,r17
   177b0:	8800020e 	bge	r17,zero,177bc <_malloc_r+0x4c>
   177b4:	00000206 	br	177c0 <_malloc_r+0x50>
   177b8:	04400404 	movi	r17,16
   177bc:	8940032e 	bgeu	r17,r5,177cc <_malloc_r+0x5c>
   177c0:	00800304 	movi	r2,12
   177c4:	20800015 	stw	r2,0(r4)
   177c8:	00017206 	br	17d94 <_malloc_r+0x624>
   177cc:	2027883a 	mov	r19,r4
   177d0:	0018ee00 	call	18ee0 <__malloc_lock>
   177d4:	048000b4 	movhi	r18,2
   177d8:	00807dc4 	movi	r2,503
   177dc:	94a71704 	addi	r18,r18,-25508
   177e0:	14401536 	bltu	r2,r17,17838 <_malloc_r+0xc8>
   177e4:	8804d0fa 	srli	r2,r17,3
   177e8:	1087883a 	add	r3,r2,r2
   177ec:	18c7883a 	add	r3,r3,r3
   177f0:	18c7883a 	add	r3,r3,r3
   177f4:	90c7883a 	add	r3,r18,r3
   177f8:	1c000317 	ldw	r16,12(r3)
   177fc:	80c0031e 	bne	r16,r3,1780c <_malloc_r+0x9c>
   17800:	80c00204 	addi	r3,r16,8
   17804:	84000517 	ldw	r16,20(r16)
   17808:	80c00926 	beq	r16,r3,17830 <_malloc_r+0xc0>
   1780c:	80c00117 	ldw	r3,4(r16)
   17810:	00bfff04 	movi	r2,-4
   17814:	81000217 	ldw	r4,8(r16)
   17818:	1884703a 	and	r2,r3,r2
   1781c:	80c00317 	ldw	r3,12(r16)
   17820:	8085883a 	add	r2,r16,r2
   17824:	20c00315 	stw	r3,12(r4)
   17828:	19000215 	stw	r4,8(r3)
   1782c:	00002d06 	br	178e4 <_malloc_r+0x174>
   17830:	10800084 	addi	r2,r2,2
   17834:	00003506 	br	1790c <_malloc_r+0x19c>
   17838:	8804d27a 	srli	r2,r17,9
   1783c:	10001826 	beq	r2,zero,178a0 <_malloc_r+0x130>
   17840:	00c00104 	movi	r3,4
   17844:	18800336 	bltu	r3,r2,17854 <_malloc_r+0xe4>
   17848:	8804d1ba 	srli	r2,r17,6
   1784c:	10800e04 	addi	r2,r2,56
   17850:	00001606 	br	178ac <_malloc_r+0x13c>
   17854:	00c00504 	movi	r3,20
   17858:	18800236 	bltu	r3,r2,17864 <_malloc_r+0xf4>
   1785c:	108016c4 	addi	r2,r2,91
   17860:	00001206 	br	178ac <_malloc_r+0x13c>
   17864:	00c01504 	movi	r3,84
   17868:	18800336 	bltu	r3,r2,17878 <_malloc_r+0x108>
   1786c:	8804d33a 	srli	r2,r17,12
   17870:	10801b84 	addi	r2,r2,110
   17874:	00000d06 	br	178ac <_malloc_r+0x13c>
   17878:	00c05504 	movi	r3,340
   1787c:	18800336 	bltu	r3,r2,1788c <_malloc_r+0x11c>
   17880:	8804d3fa 	srli	r2,r17,15
   17884:	10801dc4 	addi	r2,r2,119
   17888:	00000806 	br	178ac <_malloc_r+0x13c>
   1788c:	00c15504 	movi	r3,1364
   17890:	18800536 	bltu	r3,r2,178a8 <_malloc_r+0x138>
   17894:	8804d4ba 	srli	r2,r17,18
   17898:	10801f04 	addi	r2,r2,124
   1789c:	00000306 	br	178ac <_malloc_r+0x13c>
   178a0:	00800fc4 	movi	r2,63
   178a4:	00000106 	br	178ac <_malloc_r+0x13c>
   178a8:	00801f84 	movi	r2,126
   178ac:	1087883a 	add	r3,r2,r2
   178b0:	18c7883a 	add	r3,r3,r3
   178b4:	18c7883a 	add	r3,r3,r3
   178b8:	90c7883a 	add	r3,r18,r3
   178bc:	1c000317 	ldw	r16,12(r3)
   178c0:	01bfff04 	movi	r6,-4
   178c4:	01c003c4 	movi	r7,15
   178c8:	00000906 	br	178f0 <_malloc_r+0x180>
   178cc:	28000716 	blt	r5,zero,178ec <_malloc_r+0x17c>
   178d0:	80800317 	ldw	r2,12(r16)
   178d4:	80c00217 	ldw	r3,8(r16)
   178d8:	18800315 	stw	r2,12(r3)
   178dc:	10c00215 	stw	r3,8(r2)
   178e0:	8105883a 	add	r2,r16,r4
   178e4:	10c00117 	ldw	r3,4(r2)
   178e8:	00013106 	br	17db0 <_malloc_r+0x640>
   178ec:	84000317 	ldw	r16,12(r16)
   178f0:	80c00526 	beq	r16,r3,17908 <_malloc_r+0x198>
   178f4:	81000117 	ldw	r4,4(r16)
   178f8:	2188703a 	and	r4,r4,r6
   178fc:	244bc83a 	sub	r5,r4,r17
   17900:	397ff20e 	bge	r7,r5,178cc <_gp+0xffff5868>
   17904:	10bfffc4 	addi	r2,r2,-1
   17908:	10800044 	addi	r2,r2,1
   1790c:	010000b4 	movhi	r4,2
   17910:	94000417 	ldw	r16,16(r18)
   17914:	21271704 	addi	r4,r4,-25508
   17918:	21800204 	addi	r6,r4,8
   1791c:	81805c26 	beq	r16,r6,17a90 <_malloc_r+0x320>
   17920:	81400117 	ldw	r5,4(r16)
   17924:	00ffff04 	movi	r3,-4
   17928:	01c003c4 	movi	r7,15
   1792c:	28c6703a 	and	r3,r5,r3
   17930:	1c4bc83a 	sub	r5,r3,r17
   17934:	3940060e 	bge	r7,r5,17950 <_malloc_r+0x1e0>
   17938:	88800054 	ori	r2,r17,1
   1793c:	8447883a 	add	r3,r16,r17
   17940:	80800115 	stw	r2,4(r16)
   17944:	20c00515 	stw	r3,20(r4)
   17948:	20c00415 	stw	r3,16(r4)
   1794c:	00007706 	br	17b2c <_malloc_r+0x3bc>
   17950:	21800515 	stw	r6,20(r4)
   17954:	21800415 	stw	r6,16(r4)
   17958:	28000516 	blt	r5,zero,17970 <_malloc_r+0x200>
   1795c:	80c7883a 	add	r3,r16,r3
   17960:	18800117 	ldw	r2,4(r3)
   17964:	10800054 	ori	r2,r2,1
   17968:	18800115 	stw	r2,4(r3)
   1796c:	00011206 	br	17db8 <_malloc_r+0x648>
   17970:	01407fc4 	movi	r5,511
   17974:	28c01136 	bltu	r5,r3,179bc <_malloc_r+0x24c>
   17978:	1806d0fa 	srli	r3,r3,3
   1797c:	01400044 	movi	r5,1
   17980:	180fd0ba 	srai	r7,r3,2
   17984:	18c7883a 	add	r3,r3,r3
   17988:	18c7883a 	add	r3,r3,r3
   1798c:	29ce983a 	sll	r7,r5,r7
   17990:	21400117 	ldw	r5,4(r4)
   17994:	18c7883a 	add	r3,r3,r3
   17998:	394ab03a 	or	r5,r7,r5
   1799c:	21400115 	stw	r5,4(r4)
   179a0:	1909883a 	add	r4,r3,r4
   179a4:	20c00217 	ldw	r3,8(r4)
   179a8:	81000315 	stw	r4,12(r16)
   179ac:	80c00215 	stw	r3,8(r16)
   179b0:	24000215 	stw	r16,8(r4)
   179b4:	1c000315 	stw	r16,12(r3)
   179b8:	00003506 	br	17a90 <_malloc_r+0x320>
   179bc:	180ad27a 	srli	r5,r3,9
   179c0:	01000104 	movi	r4,4
   179c4:	21400336 	bltu	r4,r5,179d4 <_malloc_r+0x264>
   179c8:	180ad1ba 	srli	r5,r3,6
   179cc:	29400e04 	addi	r5,r5,56
   179d0:	00001406 	br	17a24 <_malloc_r+0x2b4>
   179d4:	01000504 	movi	r4,20
   179d8:	21400236 	bltu	r4,r5,179e4 <_malloc_r+0x274>
   179dc:	294016c4 	addi	r5,r5,91
   179e0:	00001006 	br	17a24 <_malloc_r+0x2b4>
   179e4:	01001504 	movi	r4,84
   179e8:	21400336 	bltu	r4,r5,179f8 <_malloc_r+0x288>
   179ec:	180ad33a 	srli	r5,r3,12
   179f0:	29401b84 	addi	r5,r5,110
   179f4:	00000b06 	br	17a24 <_malloc_r+0x2b4>
   179f8:	01005504 	movi	r4,340
   179fc:	21400336 	bltu	r4,r5,17a0c <_malloc_r+0x29c>
   17a00:	180ad3fa 	srli	r5,r3,15
   17a04:	29401dc4 	addi	r5,r5,119
   17a08:	00000606 	br	17a24 <_malloc_r+0x2b4>
   17a0c:	01015504 	movi	r4,1364
   17a10:	21400336 	bltu	r4,r5,17a20 <_malloc_r+0x2b0>
   17a14:	180ad4ba 	srli	r5,r3,18
   17a18:	29401f04 	addi	r5,r5,124
   17a1c:	00000106 	br	17a24 <_malloc_r+0x2b4>
   17a20:	01401f84 	movi	r5,126
   17a24:	2949883a 	add	r4,r5,r5
   17a28:	2109883a 	add	r4,r4,r4
   17a2c:	2109883a 	add	r4,r4,r4
   17a30:	9109883a 	add	r4,r18,r4
   17a34:	21c00217 	ldw	r7,8(r4)
   17a38:	020000b4 	movhi	r8,2
   17a3c:	42271704 	addi	r8,r8,-25508
   17a40:	3900081e 	bne	r7,r4,17a64 <_malloc_r+0x2f4>
   17a44:	280bd0ba 	srai	r5,r5,2
   17a48:	00c00044 	movi	r3,1
   17a4c:	194a983a 	sll	r5,r3,r5
   17a50:	40c00117 	ldw	r3,4(r8)
   17a54:	28cab03a 	or	r5,r5,r3
   17a58:	41400115 	stw	r5,4(r8)
   17a5c:	3807883a 	mov	r3,r7
   17a60:	00000706 	br	17a80 <_malloc_r+0x310>
   17a64:	023fff04 	movi	r8,-4
   17a68:	39400117 	ldw	r5,4(r7)
   17a6c:	2a0a703a 	and	r5,r5,r8
   17a70:	1940022e 	bgeu	r3,r5,17a7c <_malloc_r+0x30c>
   17a74:	39c00217 	ldw	r7,8(r7)
   17a78:	393ffb1e 	bne	r7,r4,17a68 <_gp+0xffff5a04>
   17a7c:	38c00317 	ldw	r3,12(r7)
   17a80:	80c00315 	stw	r3,12(r16)
   17a84:	81c00215 	stw	r7,8(r16)
   17a88:	1c000215 	stw	r16,8(r3)
   17a8c:	3c000315 	stw	r16,12(r7)
   17a90:	1007d0ba 	srai	r3,r2,2
   17a94:	02000044 	movi	r8,1
   17a98:	40d0983a 	sll	r8,r8,r3
   17a9c:	90c00117 	ldw	r3,4(r18)
   17aa0:	1a004d36 	bltu	r3,r8,17bd8 <_malloc_r+0x468>
   17aa4:	40c8703a 	and	r4,r8,r3
   17aa8:	2000061e 	bne	r4,zero,17ac4 <_malloc_r+0x354>
   17aac:	013fff04 	movi	r4,-4
   17ab0:	1104703a 	and	r2,r2,r4
   17ab4:	4211883a 	add	r8,r8,r8
   17ab8:	40c8703a 	and	r4,r8,r3
   17abc:	10800104 	addi	r2,r2,4
   17ac0:	203ffc26 	beq	r4,zero,17ab4 <_gp+0xffff5a50>
   17ac4:	02bfff04 	movi	r10,-4
   17ac8:	02c003c4 	movi	r11,15
   17acc:	1087883a 	add	r3,r2,r2
   17ad0:	18c7883a 	add	r3,r3,r3
   17ad4:	18c7883a 	add	r3,r3,r3
   17ad8:	90c7883a 	add	r3,r18,r3
   17adc:	19c00304 	addi	r7,r3,12
   17ae0:	1013883a 	mov	r9,r2
   17ae4:	3b3ffd04 	addi	r12,r7,-12
   17ae8:	3c000017 	ldw	r16,0(r7)
   17aec:	00000106 	br	17af4 <_malloc_r+0x384>
   17af0:	84000317 	ldw	r16,12(r16)
   17af4:	83001e26 	beq	r16,r12,17b70 <_malloc_r+0x400>
   17af8:	81000117 	ldw	r4,4(r16)
   17afc:	2288703a 	and	r4,r4,r10
   17b00:	244bc83a 	sub	r5,r4,r17
   17b04:	5940100e 	bge	r11,r5,17b48 <_malloc_r+0x3d8>
   17b08:	88800054 	ori	r2,r17,1
   17b0c:	80800115 	stw	r2,4(r16)
   17b10:	81000217 	ldw	r4,8(r16)
   17b14:	80800317 	ldw	r2,12(r16)
   17b18:	8447883a 	add	r3,r16,r17
   17b1c:	20800315 	stw	r2,12(r4)
   17b20:	11000215 	stw	r4,8(r2)
   17b24:	90c00515 	stw	r3,20(r18)
   17b28:	90c00415 	stw	r3,16(r18)
   17b2c:	28800054 	ori	r2,r5,1
   17b30:	19800315 	stw	r6,12(r3)
   17b34:	19800215 	stw	r6,8(r3)
   17b38:	18800115 	stw	r2,4(r3)
   17b3c:	1947883a 	add	r3,r3,r5
   17b40:	19400015 	stw	r5,0(r3)
   17b44:	00009c06 	br	17db8 <_malloc_r+0x648>
   17b48:	283fe916 	blt	r5,zero,17af0 <_gp+0xffff5a8c>
   17b4c:	8105883a 	add	r2,r16,r4
   17b50:	10c00117 	ldw	r3,4(r2)
   17b54:	18c00054 	ori	r3,r3,1
   17b58:	10c00115 	stw	r3,4(r2)
   17b5c:	80800317 	ldw	r2,12(r16)
   17b60:	80c00217 	ldw	r3,8(r16)
   17b64:	18800315 	stw	r2,12(r3)
   17b68:	10c00215 	stw	r3,8(r2)
   17b6c:	00009206 	br	17db8 <_malloc_r+0x648>
   17b70:	4a400044 	addi	r9,r9,1
   17b74:	490000cc 	andi	r4,r9,3
   17b78:	39c00204 	addi	r7,r7,8
   17b7c:	203fd91e 	bne	r4,zero,17ae4 <_gp+0xffff5a80>
   17b80:	110000cc 	andi	r4,r2,3
   17b84:	2000051e 	bne	r4,zero,17b9c <_malloc_r+0x42c>
   17b88:	90c00117 	ldw	r3,4(r18)
   17b8c:	0204303a 	nor	r2,zero,r8
   17b90:	10c4703a 	and	r2,r2,r3
   17b94:	90800115 	stw	r2,4(r18)
   17b98:	00000406 	br	17bac <_malloc_r+0x43c>
   17b9c:	193ffe04 	addi	r4,r3,-8
   17ba0:	18c00017 	ldw	r3,0(r3)
   17ba4:	10bfffc4 	addi	r2,r2,-1
   17ba8:	193ff526 	beq	r3,r4,17b80 <_gp+0xffff5b1c>
   17bac:	90800117 	ldw	r2,4(r18)
   17bb0:	4211883a 	add	r8,r8,r8
   17bb4:	12000836 	bltu	r2,r8,17bd8 <_malloc_r+0x468>
   17bb8:	40000726 	beq	r8,zero,17bd8 <_malloc_r+0x468>
   17bbc:	4086703a 	and	r3,r8,r2
   17bc0:	1800031e 	bne	r3,zero,17bd0 <_malloc_r+0x460>
   17bc4:	4a400104 	addi	r9,r9,4
   17bc8:	4211883a 	add	r8,r8,r8
   17bcc:	003ffb06 	br	17bbc <_gp+0xffff5b58>
   17bd0:	4805883a 	mov	r2,r9
   17bd4:	003fbd06 	br	17acc <_gp+0xffff5a68>
   17bd8:	95c00217 	ldw	r23,8(r18)
   17bdc:	00bfff04 	movi	r2,-4
   17be0:	bd400117 	ldw	r21,4(r23)
   17be4:	a8aa703a 	and	r21,r21,r2
   17be8:	ac400336 	bltu	r21,r17,17bf8 <_malloc_r+0x488>
   17bec:	ac47c83a 	sub	r3,r21,r17
   17bf0:	008003c4 	movi	r2,15
   17bf4:	10c06916 	blt	r2,r3,17d9c <_malloc_r+0x62c>
   17bf8:	d0a15017 	ldw	r2,-31424(gp)
   17bfc:	d0e00317 	ldw	r3,-32756(gp)
   17c00:	05bfffc4 	movi	r22,-1
   17c04:	bd61883a 	add	r16,r23,r21
   17c08:	8885883a 	add	r2,r17,r2
   17c0c:	1d80021e 	bne	r3,r22,17c18 <_malloc_r+0x4a8>
   17c10:	17000404 	addi	fp,r2,16
   17c14:	00000306 	br	17c24 <_malloc_r+0x4b4>
   17c18:	108023c4 	addi	r2,r2,143
   17c1c:	073fe004 	movi	fp,-128
   17c20:	1738703a 	and	fp,r2,fp
   17c24:	9809883a 	mov	r4,r19
   17c28:	e00b883a 	mov	r5,fp
   17c2c:	0017fa40 	call	17fa4 <_sbrk_r>
   17c30:	1029883a 	mov	r20,r2
   17c34:	15804d26 	beq	r2,r22,17d6c <_malloc_r+0x5fc>
   17c38:	1400012e 	bgeu	r2,r16,17c40 <_malloc_r+0x4d0>
   17c3c:	bc804b1e 	bne	r23,r18,17d6c <_malloc_r+0x5fc>
   17c40:	058000b4 	movhi	r22,2
   17c44:	b5a97604 	addi	r22,r22,-23080
   17c48:	b1000017 	ldw	r4,0(r22)
   17c4c:	e109883a 	add	r4,fp,r4
   17c50:	b1000015 	stw	r4,0(r22)
   17c54:	a400071e 	bne	r20,r16,17c74 <_malloc_r+0x504>
   17c58:	a0801fcc 	andi	r2,r20,127
   17c5c:	1000051e 	bne	r2,zero,17c74 <_malloc_r+0x504>
   17c60:	90c00217 	ldw	r3,8(r18)
   17c64:	e545883a 	add	r2,fp,r21
   17c68:	10800054 	ori	r2,r2,1
   17c6c:	18800115 	stw	r2,4(r3)
   17c70:	00003706 	br	17d50 <_malloc_r+0x5e0>
   17c74:	d0e00317 	ldw	r3,-32756(gp)
   17c78:	00bfffc4 	movi	r2,-1
   17c7c:	1880021e 	bne	r3,r2,17c88 <_malloc_r+0x518>
   17c80:	d5200315 	stw	r20,-32756(gp)
   17c84:	00000306 	br	17c94 <_malloc_r+0x524>
   17c88:	a407c83a 	sub	r3,r20,r16
   17c8c:	20c7883a 	add	r3,r4,r3
   17c90:	b0c00015 	stw	r3,0(r22)
   17c94:	a40001cc 	andi	r16,r20,7
   17c98:	80000426 	beq	r16,zero,17cac <_malloc_r+0x53c>
   17c9c:	00c00204 	movi	r3,8
   17ca0:	1c21c83a 	sub	r16,r3,r16
   17ca4:	a429883a 	add	r20,r20,r16
   17ca8:	00000106 	br	17cb0 <_malloc_r+0x540>
   17cac:	0021883a 	mov	r16,zero
   17cb0:	a705883a 	add	r2,r20,fp
   17cb4:	10801fcc 	andi	r2,r2,127
   17cb8:	84002004 	addi	r16,r16,128
   17cbc:	80a1c83a 	sub	r16,r16,r2
   17cc0:	9809883a 	mov	r4,r19
   17cc4:	800b883a 	mov	r5,r16
   17cc8:	0017fa40 	call	17fa4 <_sbrk_r>
   17ccc:	00ffffc4 	movi	r3,-1
   17cd0:	10c0021e 	bne	r2,r3,17cdc <_malloc_r+0x56c>
   17cd4:	a005883a 	mov	r2,r20
   17cd8:	0021883a 	mov	r16,zero
   17cdc:	b0c00017 	ldw	r3,0(r22)
   17ce0:	1505c83a 	sub	r2,r2,r20
   17ce4:	95000215 	stw	r20,8(r18)
   17ce8:	80c7883a 	add	r3,r16,r3
   17cec:	1421883a 	add	r16,r2,r16
   17cf0:	84000054 	ori	r16,r16,1
   17cf4:	b0c00015 	stw	r3,0(r22)
   17cf8:	a4000115 	stw	r16,4(r20)
   17cfc:	bc801426 	beq	r23,r18,17d50 <_malloc_r+0x5e0>
   17d00:	00c003c4 	movi	r3,15
   17d04:	1d400336 	bltu	r3,r21,17d14 <_malloc_r+0x5a4>
   17d08:	00800044 	movi	r2,1
   17d0c:	a0800115 	stw	r2,4(r20)
   17d10:	00001606 	br	17d6c <_malloc_r+0x5fc>
   17d14:	00bffe04 	movi	r2,-8
   17d18:	ad7ffd04 	addi	r21,r21,-12
   17d1c:	a8aa703a 	and	r21,r21,r2
   17d20:	b8800117 	ldw	r2,4(r23)
   17d24:	01000144 	movi	r4,5
   17d28:	1080004c 	andi	r2,r2,1
   17d2c:	a884b03a 	or	r2,r21,r2
   17d30:	b8800115 	stw	r2,4(r23)
   17d34:	bd45883a 	add	r2,r23,r21
   17d38:	11000115 	stw	r4,4(r2)
   17d3c:	11000215 	stw	r4,8(r2)
   17d40:	1d40032e 	bgeu	r3,r21,17d50 <_malloc_r+0x5e0>
   17d44:	9809883a 	mov	r4,r19
   17d48:	b9400204 	addi	r5,r23,8
   17d4c:	00187840 	call	18784 <_free_r>
   17d50:	b0800017 	ldw	r2,0(r22)
   17d54:	d0e14f17 	ldw	r3,-31428(gp)
   17d58:	1880012e 	bgeu	r3,r2,17d60 <_malloc_r+0x5f0>
   17d5c:	d0a14f15 	stw	r2,-31428(gp)
   17d60:	d0e14e17 	ldw	r3,-31432(gp)
   17d64:	1880012e 	bgeu	r3,r2,17d6c <_malloc_r+0x5fc>
   17d68:	d0a14e15 	stw	r2,-31432(gp)
   17d6c:	90800217 	ldw	r2,8(r18)
   17d70:	10c00117 	ldw	r3,4(r2)
   17d74:	00bfff04 	movi	r2,-4
   17d78:	1884703a 	and	r2,r3,r2
   17d7c:	1447c83a 	sub	r3,r2,r17
   17d80:	14400236 	bltu	r2,r17,17d8c <_malloc_r+0x61c>
   17d84:	008003c4 	movi	r2,15
   17d88:	10c00416 	blt	r2,r3,17d9c <_malloc_r+0x62c>
   17d8c:	9809883a 	mov	r4,r19
   17d90:	0018ee40 	call	18ee4 <__malloc_unlock>
   17d94:	0005883a 	mov	r2,zero
   17d98:	00000a06 	br	17dc4 <_malloc_r+0x654>
   17d9c:	94000217 	ldw	r16,8(r18)
   17da0:	88800054 	ori	r2,r17,1
   17da4:	80800115 	stw	r2,4(r16)
   17da8:	8445883a 	add	r2,r16,r17
   17dac:	90800215 	stw	r2,8(r18)
   17db0:	18c00054 	ori	r3,r3,1
   17db4:	10c00115 	stw	r3,4(r2)
   17db8:	9809883a 	mov	r4,r19
   17dbc:	0018ee40 	call	18ee4 <__malloc_unlock>
   17dc0:	80800204 	addi	r2,r16,8
   17dc4:	dfc00917 	ldw	ra,36(sp)
   17dc8:	df000817 	ldw	fp,32(sp)
   17dcc:	ddc00717 	ldw	r23,28(sp)
   17dd0:	dd800617 	ldw	r22,24(sp)
   17dd4:	dd400517 	ldw	r21,20(sp)
   17dd8:	dd000417 	ldw	r20,16(sp)
   17ddc:	dcc00317 	ldw	r19,12(sp)
   17de0:	dc800217 	ldw	r18,8(sp)
   17de4:	dc400117 	ldw	r17,4(sp)
   17de8:	dc000017 	ldw	r16,0(sp)
   17dec:	dec00a04 	addi	sp,sp,40
   17df0:	f800283a 	ret

00017df4 <memcpy>:
   17df4:	2005883a 	mov	r2,r4
   17df8:	0007883a 	mov	r3,zero
   17dfc:	19800626 	beq	r3,r6,17e18 <memcpy+0x24>
   17e00:	28c9883a 	add	r4,r5,r3
   17e04:	21c00003 	ldbu	r7,0(r4)
   17e08:	10c9883a 	add	r4,r2,r3
   17e0c:	18c00044 	addi	r3,r3,1
   17e10:	21c00005 	stb	r7,0(r4)
   17e14:	003ff906 	br	17dfc <_gp+0xffff5d98>
   17e18:	f800283a 	ret

00017e1c <_printf_r>:
   17e1c:	defffd04 	addi	sp,sp,-12
   17e20:	dfc00015 	stw	ra,0(sp)
   17e24:	d9800115 	stw	r6,4(sp)
   17e28:	d9c00215 	stw	r7,8(sp)
   17e2c:	20c00217 	ldw	r3,8(r4)
   17e30:	280d883a 	mov	r6,r5
   17e34:	014000b4 	movhi	r5,2
   17e38:	29628304 	addi	r5,r5,-30196
   17e3c:	19400115 	stw	r5,4(r3)
   17e40:	21400217 	ldw	r5,8(r4)
   17e44:	d9c00104 	addi	r7,sp,4
   17e48:	00180d00 	call	180d0 <___vfprintf_internal_r>
   17e4c:	dfc00017 	ldw	ra,0(sp)
   17e50:	dec00304 	addi	sp,sp,12
   17e54:	f800283a 	ret

00017e58 <printf>:
   17e58:	defffc04 	addi	sp,sp,-16
   17e5c:	dfc00015 	stw	ra,0(sp)
   17e60:	d9400115 	stw	r5,4(sp)
   17e64:	d9800215 	stw	r6,8(sp)
   17e68:	d9c00315 	stw	r7,12(sp)
   17e6c:	008000b4 	movhi	r2,2
   17e70:	10a81b04 	addi	r2,r2,-24468
   17e74:	10800017 	ldw	r2,0(r2)
   17e78:	200b883a 	mov	r5,r4
   17e7c:	010000b4 	movhi	r4,2
   17e80:	10c00217 	ldw	r3,8(r2)
   17e84:	21228304 	addi	r4,r4,-30196
   17e88:	d9800104 	addi	r6,sp,4
   17e8c:	19000115 	stw	r4,4(r3)
   17e90:	11000217 	ldw	r4,8(r2)
   17e94:	001863c0 	call	1863c <__vfprintf_internal>
   17e98:	dfc00017 	ldw	ra,0(sp)
   17e9c:	dec00404 	addi	sp,sp,16
   17ea0:	f800283a 	ret

00017ea4 <_puts_r>:
   17ea4:	defffd04 	addi	sp,sp,-12
   17ea8:	dc000015 	stw	r16,0(sp)
   17eac:	2021883a 	mov	r16,r4
   17eb0:	2809883a 	mov	r4,r5
   17eb4:	dfc00215 	stw	ra,8(sp)
   17eb8:	dc400115 	stw	r17,4(sp)
   17ebc:	2823883a 	mov	r17,r5
   17ec0:	0017ff40 	call	17ff4 <strlen>
   17ec4:	81400217 	ldw	r5,8(r16)
   17ec8:	00c000b4 	movhi	r3,2
   17ecc:	18e28304 	addi	r3,r3,-30196
   17ed0:	28c00115 	stw	r3,4(r5)
   17ed4:	8009883a 	mov	r4,r16
   17ed8:	880d883a 	mov	r6,r17
   17edc:	100f883a 	mov	r7,r2
   17ee0:	0018a0c0 	call	18a0c <__sfvwrite_small_dev>
   17ee4:	00ffffc4 	movi	r3,-1
   17ee8:	10c00926 	beq	r2,r3,17f10 <_puts_r+0x6c>
   17eec:	81400217 	ldw	r5,8(r16)
   17ef0:	018000b4 	movhi	r6,2
   17ef4:	8009883a 	mov	r4,r16
   17ef8:	28800117 	ldw	r2,4(r5)
   17efc:	31a5ea04 	addi	r6,r6,-26712
   17f00:	01c00044 	movi	r7,1
   17f04:	103ee83a 	callr	r2
   17f08:	10bfffe0 	cmpeqi	r2,r2,-1
   17f0c:	0085c83a 	sub	r2,zero,r2
   17f10:	dfc00217 	ldw	ra,8(sp)
   17f14:	dc400117 	ldw	r17,4(sp)
   17f18:	dc000017 	ldw	r16,0(sp)
   17f1c:	dec00304 	addi	sp,sp,12
   17f20:	f800283a 	ret

00017f24 <puts>:
   17f24:	008000b4 	movhi	r2,2
   17f28:	10a81b04 	addi	r2,r2,-24468
   17f2c:	200b883a 	mov	r5,r4
   17f30:	11000017 	ldw	r4,0(r2)
   17f34:	0017ea41 	jmpi	17ea4 <_puts_r>

00017f38 <srand>:
   17f38:	d0a15104 	addi	r2,gp,-31420
   17f3c:	11000015 	stw	r4,0(r2)
   17f40:	10000115 	stw	zero,4(r2)
   17f44:	f800283a 	ret

00017f48 <rand>:
   17f48:	defffe04 	addi	sp,sp,-8
   17f4c:	dc000015 	stw	r16,0(sp)
   17f50:	d4215204 	addi	r16,gp,-31416
   17f54:	d1215117 	ldw	r4,-31420(gp)
   17f58:	81400017 	ldw	r5,0(r16)
   17f5c:	01932574 	movhi	r6,19605
   17f60:	01d614b4 	movhi	r7,22610
   17f64:	319fcb44 	addi	r6,r6,32557
   17f68:	39fd0b44 	addi	r7,r7,-3027
   17f6c:	dfc00115 	stw	ra,4(sp)
   17f70:	0018b640 	call	18b64 <__muldi3>
   17f74:	11000044 	addi	r4,r2,1
   17f78:	2085803a 	cmpltu	r2,r4,r2
   17f7c:	10c7883a 	add	r3,r2,r3
   17f80:	00a00034 	movhi	r2,32768
   17f84:	10bfffc4 	addi	r2,r2,-1
   17f88:	1884703a 	and	r2,r3,r2
   17f8c:	d1215115 	stw	r4,-31420(gp)
   17f90:	80c00015 	stw	r3,0(r16)
   17f94:	dfc00117 	ldw	ra,4(sp)
   17f98:	dc000017 	ldw	r16,0(sp)
   17f9c:	dec00204 	addi	sp,sp,8
   17fa0:	f800283a 	ret

00017fa4 <_sbrk_r>:
   17fa4:	defffd04 	addi	sp,sp,-12
   17fa8:	dc000015 	stw	r16,0(sp)
   17fac:	040000b4 	movhi	r16,2
   17fb0:	dc400115 	stw	r17,4(sp)
   17fb4:	84296c04 	addi	r16,r16,-23120
   17fb8:	2023883a 	mov	r17,r4
   17fbc:	2809883a 	mov	r4,r5
   17fc0:	dfc00215 	stw	ra,8(sp)
   17fc4:	80000015 	stw	zero,0(r16)
   17fc8:	0018ee80 	call	18ee8 <sbrk>
   17fcc:	00ffffc4 	movi	r3,-1
   17fd0:	10c0031e 	bne	r2,r3,17fe0 <_sbrk_r+0x3c>
   17fd4:	80c00017 	ldw	r3,0(r16)
   17fd8:	18000126 	beq	r3,zero,17fe0 <_sbrk_r+0x3c>
   17fdc:	88c00015 	stw	r3,0(r17)
   17fe0:	dfc00217 	ldw	ra,8(sp)
   17fe4:	dc400117 	ldw	r17,4(sp)
   17fe8:	dc000017 	ldw	r16,0(sp)
   17fec:	dec00304 	addi	sp,sp,12
   17ff0:	f800283a 	ret

00017ff4 <strlen>:
   17ff4:	2005883a 	mov	r2,r4
   17ff8:	10c00007 	ldb	r3,0(r2)
   17ffc:	18000226 	beq	r3,zero,18008 <strlen+0x14>
   18000:	10800044 	addi	r2,r2,1
   18004:	003ffc06 	br	17ff8 <_gp+0xffff5f94>
   18008:	1105c83a 	sub	r2,r2,r4
   1800c:	f800283a 	ret

00018010 <time>:
   18010:	008000b4 	movhi	r2,2
   18014:	defffc04 	addi	sp,sp,-16
   18018:	10a81b04 	addi	r2,r2,-24468
   1801c:	dc000215 	stw	r16,8(sp)
   18020:	2021883a 	mov	r16,r4
   18024:	11000017 	ldw	r4,0(r2)
   18028:	d80b883a 	mov	r5,sp
   1802c:	000d883a 	mov	r6,zero
   18030:	dfc00315 	stw	ra,12(sp)
   18034:	0018ab80 	call	18ab8 <_gettimeofday_r>
   18038:	10000516 	blt	r2,zero,18050 <time+0x40>
   1803c:	80000226 	beq	r16,zero,18048 <time+0x38>
   18040:	d8800017 	ldw	r2,0(sp)
   18044:	80800015 	stw	r2,0(r16)
   18048:	d8800017 	ldw	r2,0(sp)
   1804c:	00000106 	br	18054 <time+0x44>
   18050:	00bfffc4 	movi	r2,-1
   18054:	dfc00317 	ldw	ra,12(sp)
   18058:	dc000217 	ldw	r16,8(sp)
   1805c:	dec00404 	addi	sp,sp,16
   18060:	f800283a 	ret

00018064 <print_repeat>:
   18064:	defffb04 	addi	sp,sp,-20
   18068:	dc800315 	stw	r18,12(sp)
   1806c:	dc400215 	stw	r17,8(sp)
   18070:	dc000115 	stw	r16,4(sp)
   18074:	dfc00415 	stw	ra,16(sp)
   18078:	2025883a 	mov	r18,r4
   1807c:	2823883a 	mov	r17,r5
   18080:	d9800005 	stb	r6,0(sp)
   18084:	3821883a 	mov	r16,r7
   18088:	04000a0e 	bge	zero,r16,180b4 <print_repeat+0x50>
   1808c:	88800117 	ldw	r2,4(r17)
   18090:	9009883a 	mov	r4,r18
   18094:	880b883a 	mov	r5,r17
   18098:	d80d883a 	mov	r6,sp
   1809c:	01c00044 	movi	r7,1
   180a0:	103ee83a 	callr	r2
   180a4:	843fffc4 	addi	r16,r16,-1
   180a8:	103ff726 	beq	r2,zero,18088 <_gp+0xffff6024>
   180ac:	00bfffc4 	movi	r2,-1
   180b0:	00000106 	br	180b8 <print_repeat+0x54>
   180b4:	0005883a 	mov	r2,zero
   180b8:	dfc00417 	ldw	ra,16(sp)
   180bc:	dc800317 	ldw	r18,12(sp)
   180c0:	dc400217 	ldw	r17,8(sp)
   180c4:	dc000117 	ldw	r16,4(sp)
   180c8:	dec00504 	addi	sp,sp,20
   180cc:	f800283a 	ret

000180d0 <___vfprintf_internal_r>:
   180d0:	deffe304 	addi	sp,sp,-116
   180d4:	d8c00804 	addi	r3,sp,32
   180d8:	df001b15 	stw	fp,108(sp)
   180dc:	ddc01a15 	stw	r23,104(sp)
   180e0:	dd801915 	stw	r22,100(sp)
   180e4:	dd401815 	stw	r21,96(sp)
   180e8:	dd001715 	stw	r20,92(sp)
   180ec:	dcc01615 	stw	r19,88(sp)
   180f0:	dc801515 	stw	r18,84(sp)
   180f4:	dc401415 	stw	r17,80(sp)
   180f8:	dc001315 	stw	r16,76(sp)
   180fc:	dfc01c15 	stw	ra,112(sp)
   18100:	2029883a 	mov	r20,r4
   18104:	2823883a 	mov	r17,r5
   18108:	3839883a 	mov	fp,r7
   1810c:	d9800f15 	stw	r6,60(sp)
   18110:	0021883a 	mov	r16,zero
   18114:	d8000e15 	stw	zero,56(sp)
   18118:	002f883a 	mov	r23,zero
   1811c:	002b883a 	mov	r21,zero
   18120:	0027883a 	mov	r19,zero
   18124:	0025883a 	mov	r18,zero
   18128:	d8000c15 	stw	zero,48(sp)
   1812c:	d8000b15 	stw	zero,44(sp)
   18130:	002d883a 	mov	r22,zero
   18134:	d8c00915 	stw	r3,36(sp)
   18138:	d8c00f17 	ldw	r3,60(sp)
   1813c:	19000003 	ldbu	r4,0(r3)
   18140:	20803fcc 	andi	r2,r4,255
   18144:	1080201c 	xori	r2,r2,128
   18148:	10bfe004 	addi	r2,r2,-128
   1814c:	10012e26 	beq	r2,zero,18608 <___vfprintf_internal_r+0x538>
   18150:	01400044 	movi	r5,1
   18154:	b1401426 	beq	r22,r5,181a8 <___vfprintf_internal_r+0xd8>
   18158:	2d800216 	blt	r5,r22,18164 <___vfprintf_internal_r+0x94>
   1815c:	b0000626 	beq	r22,zero,18178 <___vfprintf_internal_r+0xa8>
   18160:	00012506 	br	185f8 <___vfprintf_internal_r+0x528>
   18164:	01400084 	movi	r5,2
   18168:	b1401d26 	beq	r22,r5,181e0 <___vfprintf_internal_r+0x110>
   1816c:	014000c4 	movi	r5,3
   18170:	b1402b26 	beq	r22,r5,18220 <___vfprintf_internal_r+0x150>
   18174:	00012006 	br	185f8 <___vfprintf_internal_r+0x528>
   18178:	01400944 	movi	r5,37
   1817c:	11410d26 	beq	r2,r5,185b4 <___vfprintf_internal_r+0x4e4>
   18180:	88800117 	ldw	r2,4(r17)
   18184:	d9000005 	stb	r4,0(sp)
   18188:	880b883a 	mov	r5,r17
   1818c:	a009883a 	mov	r4,r20
   18190:	d80d883a 	mov	r6,sp
   18194:	01c00044 	movi	r7,1
   18198:	103ee83a 	callr	r2
   1819c:	1000e81e 	bne	r2,zero,18540 <___vfprintf_internal_r+0x470>
   181a0:	84000044 	addi	r16,r16,1
   181a4:	00011406 	br	185f8 <___vfprintf_internal_r+0x528>
   181a8:	01400c04 	movi	r5,48
   181ac:	11410a26 	beq	r2,r5,185d8 <___vfprintf_internal_r+0x508>
   181b0:	01400944 	movi	r5,37
   181b4:	11400a1e 	bne	r2,r5,181e0 <___vfprintf_internal_r+0x110>
   181b8:	d8800005 	stb	r2,0(sp)
   181bc:	88800117 	ldw	r2,4(r17)
   181c0:	a009883a 	mov	r4,r20
   181c4:	880b883a 	mov	r5,r17
   181c8:	d80d883a 	mov	r6,sp
   181cc:	b00f883a 	mov	r7,r22
   181d0:	103ee83a 	callr	r2
   181d4:	1000da1e 	bne	r2,zero,18540 <___vfprintf_internal_r+0x470>
   181d8:	84000044 	addi	r16,r16,1
   181dc:	00010506 	br	185f4 <___vfprintf_internal_r+0x524>
   181e0:	25bff404 	addi	r22,r4,-48
   181e4:	b5803fcc 	andi	r22,r22,255
   181e8:	00c00244 	movi	r3,9
   181ec:	1d800936 	bltu	r3,r22,18214 <___vfprintf_internal_r+0x144>
   181f0:	00bfffc4 	movi	r2,-1
   181f4:	90800426 	beq	r18,r2,18208 <___vfprintf_internal_r+0x138>
   181f8:	9009883a 	mov	r4,r18
   181fc:	01400284 	movi	r5,10
   18200:	0013c800 	call	13c80 <__mulsi3>
   18204:	00000106 	br	1820c <___vfprintf_internal_r+0x13c>
   18208:	0005883a 	mov	r2,zero
   1820c:	15a5883a 	add	r18,r2,r22
   18210:	0000f206 	br	185dc <___vfprintf_internal_r+0x50c>
   18214:	01400b84 	movi	r5,46
   18218:	1140f426 	beq	r2,r5,185ec <___vfprintf_internal_r+0x51c>
   1821c:	05800084 	movi	r22,2
   18220:	213ff404 	addi	r4,r4,-48
   18224:	20c03fcc 	andi	r3,r4,255
   18228:	01000244 	movi	r4,9
   1822c:	20c00b36 	bltu	r4,r3,1825c <___vfprintf_internal_r+0x18c>
   18230:	00bfffc4 	movi	r2,-1
   18234:	98800626 	beq	r19,r2,18250 <___vfprintf_internal_r+0x180>
   18238:	9809883a 	mov	r4,r19
   1823c:	01400284 	movi	r5,10
   18240:	d8c01115 	stw	r3,68(sp)
   18244:	0013c800 	call	13c80 <__mulsi3>
   18248:	d8c01117 	ldw	r3,68(sp)
   1824c:	00000106 	br	18254 <___vfprintf_internal_r+0x184>
   18250:	0005883a 	mov	r2,zero
   18254:	10e7883a 	add	r19,r2,r3
   18258:	0000e706 	br	185f8 <___vfprintf_internal_r+0x528>
   1825c:	01401b04 	movi	r5,108
   18260:	1140e026 	beq	r2,r5,185e4 <___vfprintf_internal_r+0x514>
   18264:	013fffc4 	movi	r4,-1
   18268:	99000226 	beq	r19,r4,18274 <___vfprintf_internal_r+0x1a4>
   1826c:	d8000b15 	stw	zero,44(sp)
   18270:	00000106 	br	18278 <___vfprintf_internal_r+0x1a8>
   18274:	04c00044 	movi	r19,1
   18278:	01001a44 	movi	r4,105
   1827c:	11001626 	beq	r2,r4,182d8 <___vfprintf_internal_r+0x208>
   18280:	20800916 	blt	r4,r2,182a8 <___vfprintf_internal_r+0x1d8>
   18284:	010018c4 	movi	r4,99
   18288:	11009626 	beq	r2,r4,184e4 <___vfprintf_internal_r+0x414>
   1828c:	01001904 	movi	r4,100
   18290:	11001126 	beq	r2,r4,182d8 <___vfprintf_internal_r+0x208>
   18294:	01001604 	movi	r4,88
   18298:	1100d61e 	bne	r2,r4,185f4 <___vfprintf_internal_r+0x524>
   1829c:	00c00044 	movi	r3,1
   182a0:	d8c00e15 	stw	r3,56(sp)
   182a4:	00001406 	br	182f8 <___vfprintf_internal_r+0x228>
   182a8:	01001cc4 	movi	r4,115
   182ac:	1100a626 	beq	r2,r4,18548 <___vfprintf_internal_r+0x478>
   182b0:	20800416 	blt	r4,r2,182c4 <___vfprintf_internal_r+0x1f4>
   182b4:	01001bc4 	movi	r4,111
   182b8:	1100ce1e 	bne	r2,r4,185f4 <___vfprintf_internal_r+0x524>
   182bc:	05400204 	movi	r21,8
   182c0:	00000e06 	br	182fc <___vfprintf_internal_r+0x22c>
   182c4:	01001d44 	movi	r4,117
   182c8:	11000c26 	beq	r2,r4,182fc <___vfprintf_internal_r+0x22c>
   182cc:	01001e04 	movi	r4,120
   182d0:	11000926 	beq	r2,r4,182f8 <___vfprintf_internal_r+0x228>
   182d4:	0000c706 	br	185f4 <___vfprintf_internal_r+0x524>
   182d8:	e0800104 	addi	r2,fp,4
   182dc:	b8000726 	beq	r23,zero,182fc <___vfprintf_internal_r+0x22c>
   182e0:	d8800d15 	stw	r2,52(sp)
   182e4:	e7000017 	ldw	fp,0(fp)
   182e8:	e000080e 	bge	fp,zero,1830c <___vfprintf_internal_r+0x23c>
   182ec:	0739c83a 	sub	fp,zero,fp
   182f0:	02000044 	movi	r8,1
   182f4:	00000606 	br	18310 <___vfprintf_internal_r+0x240>
   182f8:	05400404 	movi	r21,16
   182fc:	e0c00104 	addi	r3,fp,4
   18300:	d8c00d15 	stw	r3,52(sp)
   18304:	e7000017 	ldw	fp,0(fp)
   18308:	002f883a 	mov	r23,zero
   1830c:	0011883a 	mov	r8,zero
   18310:	002d883a 	mov	r22,zero
   18314:	dd87883a 	add	r3,sp,r22
   18318:	e0001a26 	beq	fp,zero,18384 <___vfprintf_internal_r+0x2b4>
   1831c:	e009883a 	mov	r4,fp
   18320:	a80b883a 	mov	r5,r21
   18324:	d8c01115 	stw	r3,68(sp)
   18328:	da001215 	stw	r8,72(sp)
   1832c:	0013c700 	call	13c70 <__udivsi3>
   18330:	a809883a 	mov	r4,r21
   18334:	100b883a 	mov	r5,r2
   18338:	d8801015 	stw	r2,64(sp)
   1833c:	0013c800 	call	13c80 <__mulsi3>
   18340:	e085c83a 	sub	r2,fp,r2
   18344:	01000244 	movi	r4,9
   18348:	d8c01117 	ldw	r3,68(sp)
   1834c:	d9801017 	ldw	r6,64(sp)
   18350:	da001217 	ldw	r8,72(sp)
   18354:	20800216 	blt	r4,r2,18360 <___vfprintf_internal_r+0x290>
   18358:	17000c04 	addi	fp,r2,48
   1835c:	00000506 	br	18374 <___vfprintf_internal_r+0x2a4>
   18360:	d9400e17 	ldw	r5,56(sp)
   18364:	28000226 	beq	r5,zero,18370 <___vfprintf_internal_r+0x2a0>
   18368:	17000dc4 	addi	fp,r2,55
   1836c:	00000106 	br	18374 <___vfprintf_internal_r+0x2a4>
   18370:	170015c4 	addi	fp,r2,87
   18374:	1f000005 	stb	fp,0(r3)
   18378:	b5800044 	addi	r22,r22,1
   1837c:	3039883a 	mov	fp,r6
   18380:	003fe406 	br	18314 <_gp+0xffff62b0>
   18384:	1ec5c83a 	sub	r2,r3,sp
   18388:	d8800a15 	stw	r2,40(sp)
   1838c:	9885c83a 	sub	r2,r19,r2
   18390:	1839883a 	mov	fp,r3
   18394:	00800e0e 	bge	zero,r2,183d0 <___vfprintf_internal_r+0x300>
   18398:	182d883a 	mov	r22,r3
   1839c:	1885883a 	add	r2,r3,r2
   183a0:	01000c04 	movi	r4,48
   183a4:	d9400917 	ldw	r5,36(sp)
   183a8:	b007883a 	mov	r3,r22
   183ac:	b140052e 	bgeu	r22,r5,183c4 <___vfprintf_internal_r+0x2f4>
   183b0:	b5800044 	addi	r22,r22,1
   183b4:	19000005 	stb	r4,0(r3)
   183b8:	b039883a 	mov	fp,r22
   183bc:	b0bff91e 	bne	r22,r2,183a4 <_gp+0xffff6340>
   183c0:	00000106 	br	183c8 <___vfprintf_internal_r+0x2f8>
   183c4:	b039883a 	mov	fp,r22
   183c8:	b6edc83a 	sub	r22,r22,sp
   183cc:	dd800a15 	stw	r22,40(sp)
   183d0:	d8800a17 	ldw	r2,40(sp)
   183d4:	1207883a 	add	r3,r2,r8
   183d8:	90edc83a 	sub	r22,r18,r3
   183dc:	d8c00b17 	ldw	r3,44(sp)
   183e0:	18001726 	beq	r3,zero,18440 <___vfprintf_internal_r+0x370>
   183e4:	40000a26 	beq	r8,zero,18410 <___vfprintf_internal_r+0x340>
   183e8:	00800b44 	movi	r2,45
   183ec:	d8800805 	stb	r2,32(sp)
   183f0:	88800117 	ldw	r2,4(r17)
   183f4:	a009883a 	mov	r4,r20
   183f8:	880b883a 	mov	r5,r17
   183fc:	d9800804 	addi	r6,sp,32
   18400:	01c00044 	movi	r7,1
   18404:	103ee83a 	callr	r2
   18408:	10004d1e 	bne	r2,zero,18540 <___vfprintf_internal_r+0x470>
   1840c:	84000044 	addi	r16,r16,1
   18410:	0580070e 	bge	zero,r22,18430 <___vfprintf_internal_r+0x360>
   18414:	a009883a 	mov	r4,r20
   18418:	880b883a 	mov	r5,r17
   1841c:	01800c04 	movi	r6,48
   18420:	b00f883a 	mov	r7,r22
   18424:	00180640 	call	18064 <print_repeat>
   18428:	1000451e 	bne	r2,zero,18540 <___vfprintf_internal_r+0x470>
   1842c:	85a1883a 	add	r16,r16,r22
   18430:	d9000a17 	ldw	r4,40(sp)
   18434:	e007883a 	mov	r3,fp
   18438:	272dc83a 	sub	r22,r4,fp
   1843c:	00002206 	br	184c8 <___vfprintf_internal_r+0x3f8>
   18440:	0580090e 	bge	zero,r22,18468 <___vfprintf_internal_r+0x398>
   18444:	a009883a 	mov	r4,r20
   18448:	880b883a 	mov	r5,r17
   1844c:	01800804 	movi	r6,32
   18450:	b00f883a 	mov	r7,r22
   18454:	da001215 	stw	r8,72(sp)
   18458:	00180640 	call	18064 <print_repeat>
   1845c:	da001217 	ldw	r8,72(sp)
   18460:	1000371e 	bne	r2,zero,18540 <___vfprintf_internal_r+0x470>
   18464:	85a1883a 	add	r16,r16,r22
   18468:	403ff126 	beq	r8,zero,18430 <_gp+0xffff63cc>
   1846c:	00800b44 	movi	r2,45
   18470:	d8800805 	stb	r2,32(sp)
   18474:	88800117 	ldw	r2,4(r17)
   18478:	a009883a 	mov	r4,r20
   1847c:	880b883a 	mov	r5,r17
   18480:	d9800804 	addi	r6,sp,32
   18484:	01c00044 	movi	r7,1
   18488:	103ee83a 	callr	r2
   1848c:	10002c1e 	bne	r2,zero,18540 <___vfprintf_internal_r+0x470>
   18490:	84000044 	addi	r16,r16,1
   18494:	003fe606 	br	18430 <_gp+0xffff63cc>
   18498:	18ffffc4 	addi	r3,r3,-1
   1849c:	18800003 	ldbu	r2,0(r3)
   184a0:	a009883a 	mov	r4,r20
   184a4:	d8c01115 	stw	r3,68(sp)
   184a8:	d8800805 	stb	r2,32(sp)
   184ac:	88800117 	ldw	r2,4(r17)
   184b0:	880b883a 	mov	r5,r17
   184b4:	d9800804 	addi	r6,sp,32
   184b8:	01c00044 	movi	r7,1
   184bc:	103ee83a 	callr	r2
   184c0:	d8c01117 	ldw	r3,68(sp)
   184c4:	10001e1e 	bne	r2,zero,18540 <___vfprintf_internal_r+0x470>
   184c8:	80c5c83a 	sub	r2,r16,r3
   184cc:	1d89883a 	add	r4,r3,r22
   184d0:	e085883a 	add	r2,fp,r2
   184d4:	013ff016 	blt	zero,r4,18498 <_gp+0xffff6434>
   184d8:	1021883a 	mov	r16,r2
   184dc:	df000d17 	ldw	fp,52(sp)
   184e0:	00004406 	br	185f4 <___vfprintf_internal_r+0x524>
   184e4:	01000044 	movi	r4,1
   184e8:	2480080e 	bge	r4,r18,1850c <___vfprintf_internal_r+0x43c>
   184ec:	95bfffc4 	addi	r22,r18,-1
   184f0:	a009883a 	mov	r4,r20
   184f4:	880b883a 	mov	r5,r17
   184f8:	01800804 	movi	r6,32
   184fc:	b00f883a 	mov	r7,r22
   18500:	00180640 	call	18064 <print_repeat>
   18504:	10000e1e 	bne	r2,zero,18540 <___vfprintf_internal_r+0x470>
   18508:	85a1883a 	add	r16,r16,r22
   1850c:	e0800017 	ldw	r2,0(fp)
   18510:	a009883a 	mov	r4,r20
   18514:	880b883a 	mov	r5,r17
   18518:	d8800005 	stb	r2,0(sp)
   1851c:	88800117 	ldw	r2,4(r17)
   18520:	d80d883a 	mov	r6,sp
   18524:	01c00044 	movi	r7,1
   18528:	e5800104 	addi	r22,fp,4
   1852c:	103ee83a 	callr	r2
   18530:	1000031e 	bne	r2,zero,18540 <___vfprintf_internal_r+0x470>
   18534:	84000044 	addi	r16,r16,1
   18538:	b039883a 	mov	fp,r22
   1853c:	00002d06 	br	185f4 <___vfprintf_internal_r+0x524>
   18540:	00bfffc4 	movi	r2,-1
   18544:	00003106 	br	1860c <___vfprintf_internal_r+0x53c>
   18548:	e5800017 	ldw	r22,0(fp)
   1854c:	e0c00104 	addi	r3,fp,4
   18550:	d8c00a15 	stw	r3,40(sp)
   18554:	b009883a 	mov	r4,r22
   18558:	0017ff40 	call	17ff4 <strlen>
   1855c:	9091c83a 	sub	r8,r18,r2
   18560:	1039883a 	mov	fp,r2
   18564:	0200090e 	bge	zero,r8,1858c <___vfprintf_internal_r+0x4bc>
   18568:	400f883a 	mov	r7,r8
   1856c:	a009883a 	mov	r4,r20
   18570:	880b883a 	mov	r5,r17
   18574:	01800804 	movi	r6,32
   18578:	da001215 	stw	r8,72(sp)
   1857c:	00180640 	call	18064 <print_repeat>
   18580:	da001217 	ldw	r8,72(sp)
   18584:	103fee1e 	bne	r2,zero,18540 <_gp+0xffff64dc>
   18588:	8221883a 	add	r16,r16,r8
   1858c:	88800117 	ldw	r2,4(r17)
   18590:	a009883a 	mov	r4,r20
   18594:	880b883a 	mov	r5,r17
   18598:	b00d883a 	mov	r6,r22
   1859c:	e00f883a 	mov	r7,fp
   185a0:	103ee83a 	callr	r2
   185a4:	103fe61e 	bne	r2,zero,18540 <_gp+0xffff64dc>
   185a8:	8721883a 	add	r16,r16,fp
   185ac:	df000a17 	ldw	fp,40(sp)
   185b0:	00001006 	br	185f4 <___vfprintf_internal_r+0x524>
   185b4:	05c00044 	movi	r23,1
   185b8:	04ffffc4 	movi	r19,-1
   185bc:	d8000e15 	stw	zero,56(sp)
   185c0:	05400284 	movi	r21,10
   185c4:	9825883a 	mov	r18,r19
   185c8:	d8000c15 	stw	zero,48(sp)
   185cc:	d8000b15 	stw	zero,44(sp)
   185d0:	b82d883a 	mov	r22,r23
   185d4:	00000806 	br	185f8 <___vfprintf_internal_r+0x528>
   185d8:	dd800b15 	stw	r22,44(sp)
   185dc:	05800084 	movi	r22,2
   185e0:	00000506 	br	185f8 <___vfprintf_internal_r+0x528>
   185e4:	00c00044 	movi	r3,1
   185e8:	d8c00c15 	stw	r3,48(sp)
   185ec:	058000c4 	movi	r22,3
   185f0:	00000106 	br	185f8 <___vfprintf_internal_r+0x528>
   185f4:	002d883a 	mov	r22,zero
   185f8:	d8c00f17 	ldw	r3,60(sp)
   185fc:	18c00044 	addi	r3,r3,1
   18600:	d8c00f15 	stw	r3,60(sp)
   18604:	003ecc06 	br	18138 <_gp+0xffff60d4>
   18608:	8005883a 	mov	r2,r16
   1860c:	dfc01c17 	ldw	ra,112(sp)
   18610:	df001b17 	ldw	fp,108(sp)
   18614:	ddc01a17 	ldw	r23,104(sp)
   18618:	dd801917 	ldw	r22,100(sp)
   1861c:	dd401817 	ldw	r21,96(sp)
   18620:	dd001717 	ldw	r20,92(sp)
   18624:	dcc01617 	ldw	r19,88(sp)
   18628:	dc801517 	ldw	r18,84(sp)
   1862c:	dc401417 	ldw	r17,80(sp)
   18630:	dc001317 	ldw	r16,76(sp)
   18634:	dec01d04 	addi	sp,sp,116
   18638:	f800283a 	ret

0001863c <__vfprintf_internal>:
   1863c:	2007883a 	mov	r3,r4
   18640:	010000b4 	movhi	r4,2
   18644:	21281b04 	addi	r4,r4,-24468
   18648:	21000017 	ldw	r4,0(r4)
   1864c:	2805883a 	mov	r2,r5
   18650:	300f883a 	mov	r7,r6
   18654:	180b883a 	mov	r5,r3
   18658:	100d883a 	mov	r6,r2
   1865c:	00180d01 	jmpi	180d0 <___vfprintf_internal_r>

00018660 <_malloc_trim_r>:
   18660:	defffb04 	addi	sp,sp,-20
   18664:	dcc00315 	stw	r19,12(sp)
   18668:	04c000b4 	movhi	r19,2
   1866c:	dc800215 	stw	r18,8(sp)
   18670:	dc400115 	stw	r17,4(sp)
   18674:	dc000015 	stw	r16,0(sp)
   18678:	dfc00415 	stw	ra,16(sp)
   1867c:	2821883a 	mov	r16,r5
   18680:	2025883a 	mov	r18,r4
   18684:	9ce71704 	addi	r19,r19,-25508
   18688:	0018ee00 	call	18ee0 <__malloc_lock>
   1868c:	98800217 	ldw	r2,8(r19)
   18690:	14400117 	ldw	r17,4(r2)
   18694:	00bfff04 	movi	r2,-4
   18698:	88a2703a 	and	r17,r17,r2
   1869c:	8c21c83a 	sub	r16,r17,r16
   186a0:	84001bc4 	addi	r16,r16,111
   186a4:	8020d1fa 	srli	r16,r16,7
   186a8:	00801fc4 	movi	r2,127
   186ac:	843fffc4 	addi	r16,r16,-1
   186b0:	802091fa 	slli	r16,r16,7
   186b4:	14000416 	blt	r2,r16,186c8 <_malloc_trim_r+0x68>
   186b8:	9009883a 	mov	r4,r18
   186bc:	0018ee40 	call	18ee4 <__malloc_unlock>
   186c0:	0005883a 	mov	r2,zero
   186c4:	00002806 	br	18768 <_malloc_trim_r+0x108>
   186c8:	9009883a 	mov	r4,r18
   186cc:	000b883a 	mov	r5,zero
   186d0:	0017fa40 	call	17fa4 <_sbrk_r>
   186d4:	98c00217 	ldw	r3,8(r19)
   186d8:	1c47883a 	add	r3,r3,r17
   186dc:	10fff61e 	bne	r2,r3,186b8 <_gp+0xffff6654>
   186e0:	9009883a 	mov	r4,r18
   186e4:	040bc83a 	sub	r5,zero,r16
   186e8:	0017fa40 	call	17fa4 <_sbrk_r>
   186ec:	00ffffc4 	movi	r3,-1
   186f0:	10c0111e 	bne	r2,r3,18738 <_malloc_trim_r+0xd8>
   186f4:	9009883a 	mov	r4,r18
   186f8:	000b883a 	mov	r5,zero
   186fc:	0017fa40 	call	17fa4 <_sbrk_r>
   18700:	99000217 	ldw	r4,8(r19)
   18704:	014003c4 	movi	r5,15
   18708:	1107c83a 	sub	r3,r2,r4
   1870c:	28ffea0e 	bge	r5,r3,186b8 <_gp+0xffff6654>
   18710:	014000b4 	movhi	r5,2
   18714:	29681c04 	addi	r5,r5,-24464
   18718:	29400017 	ldw	r5,0(r5)
   1871c:	18c00054 	ori	r3,r3,1
   18720:	20c00115 	stw	r3,4(r4)
   18724:	1145c83a 	sub	r2,r2,r5
   18728:	014000b4 	movhi	r5,2
   1872c:	29697604 	addi	r5,r5,-23080
   18730:	28800015 	stw	r2,0(r5)
   18734:	003fe006 	br	186b8 <_gp+0xffff6654>
   18738:	98800217 	ldw	r2,8(r19)
   1873c:	8c23c83a 	sub	r17,r17,r16
   18740:	00c000b4 	movhi	r3,2
   18744:	18e97604 	addi	r3,r3,-23080
   18748:	8c400054 	ori	r17,r17,1
   1874c:	14400115 	stw	r17,4(r2)
   18750:	18800017 	ldw	r2,0(r3)
   18754:	9009883a 	mov	r4,r18
   18758:	1421c83a 	sub	r16,r2,r16
   1875c:	1c000015 	stw	r16,0(r3)
   18760:	0018ee40 	call	18ee4 <__malloc_unlock>
   18764:	00800044 	movi	r2,1
   18768:	dfc00417 	ldw	ra,16(sp)
   1876c:	dcc00317 	ldw	r19,12(sp)
   18770:	dc800217 	ldw	r18,8(sp)
   18774:	dc400117 	ldw	r17,4(sp)
   18778:	dc000017 	ldw	r16,0(sp)
   1877c:	dec00504 	addi	sp,sp,20
   18780:	f800283a 	ret

00018784 <_free_r>:
   18784:	2800a026 	beq	r5,zero,18a08 <_free_r+0x284>
   18788:	defffd04 	addi	sp,sp,-12
   1878c:	dc400115 	stw	r17,4(sp)
   18790:	dc000015 	stw	r16,0(sp)
   18794:	2823883a 	mov	r17,r5
   18798:	2021883a 	mov	r16,r4
   1879c:	dfc00215 	stw	ra,8(sp)
   187a0:	0018ee00 	call	18ee0 <__malloc_lock>
   187a4:	8a3fff17 	ldw	r8,-4(r17)
   187a8:	00bfff84 	movi	r2,-2
   187ac:	893ffe04 	addi	r4,r17,-8
   187b0:	4084703a 	and	r2,r8,r2
   187b4:	208d883a 	add	r6,r4,r2
   187b8:	31400117 	ldw	r5,4(r6)
   187bc:	00ffff04 	movi	r3,-4
   187c0:	28c6703a 	and	r3,r5,r3
   187c4:	014000b4 	movhi	r5,2
   187c8:	29671704 	addi	r5,r5,-25508
   187cc:	2a400217 	ldw	r9,8(r5)
   187d0:	280f883a 	mov	r7,r5
   187d4:	4140004c 	andi	r5,r8,1
   187d8:	32401b1e 	bne	r6,r9,18848 <_free_r+0xc4>
   187dc:	1885883a 	add	r2,r3,r2
   187e0:	2800071e 	bne	r5,zero,18800 <_free_r+0x7c>
   187e4:	88fffe17 	ldw	r3,-8(r17)
   187e8:	20c9c83a 	sub	r4,r4,r3
   187ec:	21400217 	ldw	r5,8(r4)
   187f0:	10c5883a 	add	r2,r2,r3
   187f4:	20c00317 	ldw	r3,12(r4)
   187f8:	28c00315 	stw	r3,12(r5)
   187fc:	19400215 	stw	r5,8(r3)
   18800:	10c00054 	ori	r3,r2,1
   18804:	20c00115 	stw	r3,4(r4)
   18808:	00c000b4 	movhi	r3,2
   1880c:	18e81d04 	addi	r3,r3,-24460
   18810:	18c00017 	ldw	r3,0(r3)
   18814:	39000215 	stw	r4,8(r7)
   18818:	10c00536 	bltu	r2,r3,18830 <_free_r+0xac>
   1881c:	008000b4 	movhi	r2,2
   18820:	10a96904 	addi	r2,r2,-23132
   18824:	11400017 	ldw	r5,0(r2)
   18828:	8009883a 	mov	r4,r16
   1882c:	00186600 	call	18660 <_malloc_trim_r>
   18830:	8009883a 	mov	r4,r16
   18834:	dfc00217 	ldw	ra,8(sp)
   18838:	dc400117 	ldw	r17,4(sp)
   1883c:	dc000017 	ldw	r16,0(sp)
   18840:	dec00304 	addi	sp,sp,12
   18844:	0018ee41 	jmpi	18ee4 <__malloc_unlock>
   18848:	30c00115 	stw	r3,4(r6)
   1884c:	2800091e 	bne	r5,zero,18874 <_free_r+0xf0>
   18850:	897ffe17 	ldw	r5,-8(r17)
   18854:	3a000204 	addi	r8,r7,8
   18858:	2149c83a 	sub	r4,r4,r5
   1885c:	1145883a 	add	r2,r2,r5
   18860:	21400217 	ldw	r5,8(r4)
   18864:	2a000526 	beq	r5,r8,1887c <_free_r+0xf8>
   18868:	22000317 	ldw	r8,12(r4)
   1886c:	2a000315 	stw	r8,12(r5)
   18870:	41400215 	stw	r5,8(r8)
   18874:	000b883a 	mov	r5,zero
   18878:	00000106 	br	18880 <_free_r+0xfc>
   1887c:	01400044 	movi	r5,1
   18880:	30d1883a 	add	r8,r6,r3
   18884:	42000117 	ldw	r8,4(r8)
   18888:	4200004c 	andi	r8,r8,1
   1888c:	4000101e 	bne	r8,zero,188d0 <_free_r+0x14c>
   18890:	10c5883a 	add	r2,r2,r3
   18894:	28000a1e 	bne	r5,zero,188c0 <_free_r+0x13c>
   18898:	30c00217 	ldw	r3,8(r6)
   1889c:	020000b4 	movhi	r8,2
   188a0:	42271904 	addi	r8,r8,-25500
   188a4:	1a00061e 	bne	r3,r8,188c0 <_free_r+0x13c>
   188a8:	39000515 	stw	r4,20(r7)
   188ac:	39000415 	stw	r4,16(r7)
   188b0:	20c00315 	stw	r3,12(r4)
   188b4:	20c00215 	stw	r3,8(r4)
   188b8:	01400044 	movi	r5,1
   188bc:	00000406 	br	188d0 <_free_r+0x14c>
   188c0:	30c00317 	ldw	r3,12(r6)
   188c4:	31800217 	ldw	r6,8(r6)
   188c8:	30c00315 	stw	r3,12(r6)
   188cc:	19800215 	stw	r6,8(r3)
   188d0:	10c00054 	ori	r3,r2,1
   188d4:	20c00115 	stw	r3,4(r4)
   188d8:	2087883a 	add	r3,r4,r2
   188dc:	18800015 	stw	r2,0(r3)
   188e0:	283fd31e 	bne	r5,zero,18830 <_gp+0xffff67cc>
   188e4:	00c07fc4 	movi	r3,511
   188e8:	18801036 	bltu	r3,r2,1892c <_free_r+0x1a8>
   188ec:	1006d0fa 	srli	r3,r2,3
   188f0:	00800044 	movi	r2,1
   188f4:	180bd0ba 	srai	r5,r3,2
   188f8:	18c7883a 	add	r3,r3,r3
   188fc:	18c7883a 	add	r3,r3,r3
   18900:	114a983a 	sll	r5,r2,r5
   18904:	38800117 	ldw	r2,4(r7)
   18908:	18c7883a 	add	r3,r3,r3
   1890c:	2884b03a 	or	r2,r5,r2
   18910:	38800115 	stw	r2,4(r7)
   18914:	38c5883a 	add	r2,r7,r3
   18918:	10c00217 	ldw	r3,8(r2)
   1891c:	20800315 	stw	r2,12(r4)
   18920:	20c00215 	stw	r3,8(r4)
   18924:	11000215 	stw	r4,8(r2)
   18928:	00003506 	br	18a00 <_free_r+0x27c>
   1892c:	1006d27a 	srli	r3,r2,9
   18930:	01400104 	movi	r5,4
   18934:	28c00336 	bltu	r5,r3,18944 <_free_r+0x1c0>
   18938:	1006d1ba 	srli	r3,r2,6
   1893c:	18c00e04 	addi	r3,r3,56
   18940:	00001406 	br	18994 <_free_r+0x210>
   18944:	01400504 	movi	r5,20
   18948:	28c00236 	bltu	r5,r3,18954 <_free_r+0x1d0>
   1894c:	18c016c4 	addi	r3,r3,91
   18950:	00001006 	br	18994 <_free_r+0x210>
   18954:	01401504 	movi	r5,84
   18958:	28c00336 	bltu	r5,r3,18968 <_free_r+0x1e4>
   1895c:	1006d33a 	srli	r3,r2,12
   18960:	18c01b84 	addi	r3,r3,110
   18964:	00000b06 	br	18994 <_free_r+0x210>
   18968:	01405504 	movi	r5,340
   1896c:	28c00336 	bltu	r5,r3,1897c <_free_r+0x1f8>
   18970:	1006d3fa 	srli	r3,r2,15
   18974:	18c01dc4 	addi	r3,r3,119
   18978:	00000606 	br	18994 <_free_r+0x210>
   1897c:	01415504 	movi	r5,1364
   18980:	28c00336 	bltu	r5,r3,18990 <_free_r+0x20c>
   18984:	1006d4ba 	srli	r3,r2,18
   18988:	18c01f04 	addi	r3,r3,124
   1898c:	00000106 	br	18994 <_free_r+0x210>
   18990:	00c01f84 	movi	r3,126
   18994:	18cd883a 	add	r6,r3,r3
   18998:	318d883a 	add	r6,r6,r6
   1899c:	318d883a 	add	r6,r6,r6
   189a0:	398b883a 	add	r5,r7,r6
   189a4:	29800217 	ldw	r6,8(r5)
   189a8:	020000b4 	movhi	r8,2
   189ac:	42271704 	addi	r8,r8,-25508
   189b0:	3140081e 	bne	r6,r5,189d4 <_free_r+0x250>
   189b4:	1807d0ba 	srai	r3,r3,2
   189b8:	00800044 	movi	r2,1
   189bc:	10c6983a 	sll	r3,r2,r3
   189c0:	40800117 	ldw	r2,4(r8)
   189c4:	1886b03a 	or	r3,r3,r2
   189c8:	40c00115 	stw	r3,4(r8)
   189cc:	3007883a 	mov	r3,r6
   189d0:	00000806 	br	189f4 <_free_r+0x270>
   189d4:	3007883a 	mov	r3,r6
   189d8:	01ffff04 	movi	r7,-4
   189dc:	19800117 	ldw	r6,4(r3)
   189e0:	31cc703a 	and	r6,r6,r7
   189e4:	1180022e 	bgeu	r2,r6,189f0 <_free_r+0x26c>
   189e8:	18c00217 	ldw	r3,8(r3)
   189ec:	197ffb1e 	bne	r3,r5,189dc <_gp+0xffff6978>
   189f0:	19800317 	ldw	r6,12(r3)
   189f4:	21800315 	stw	r6,12(r4)
   189f8:	20c00215 	stw	r3,8(r4)
   189fc:	31000215 	stw	r4,8(r6)
   18a00:	19000315 	stw	r4,12(r3)
   18a04:	003f8a06 	br	18830 <_gp+0xffff67cc>
   18a08:	f800283a 	ret

00018a0c <__sfvwrite_small_dev>:
   18a0c:	2880000b 	ldhu	r2,0(r5)
   18a10:	defffa04 	addi	sp,sp,-24
   18a14:	dc000015 	stw	r16,0(sp)
   18a18:	dfc00515 	stw	ra,20(sp)
   18a1c:	dd000415 	stw	r20,16(sp)
   18a20:	dcc00315 	stw	r19,12(sp)
   18a24:	dc800215 	stw	r18,8(sp)
   18a28:	dc400115 	stw	r17,4(sp)
   18a2c:	1080020c 	andi	r2,r2,8
   18a30:	2821883a 	mov	r16,r5
   18a34:	10001726 	beq	r2,zero,18a94 <__sfvwrite_small_dev+0x88>
   18a38:	2880008f 	ldh	r2,2(r5)
   18a3c:	10001216 	blt	r2,zero,18a88 <__sfvwrite_small_dev+0x7c>
   18a40:	2027883a 	mov	r19,r4
   18a44:	3025883a 	mov	r18,r6
   18a48:	3823883a 	mov	r17,r7
   18a4c:	05010004 	movi	r20,1024
   18a50:	04400b0e 	bge	zero,r17,18a80 <__sfvwrite_small_dev+0x74>
   18a54:	8140008f 	ldh	r5,2(r16)
   18a58:	880f883a 	mov	r7,r17
   18a5c:	a440010e 	bge	r20,r17,18a64 <__sfvwrite_small_dev+0x58>
   18a60:	01c10004 	movi	r7,1024
   18a64:	9809883a 	mov	r4,r19
   18a68:	900d883a 	mov	r6,r18
   18a6c:	0018b0c0 	call	18b0c <_write_r>
   18a70:	0080050e 	bge	zero,r2,18a88 <__sfvwrite_small_dev+0x7c>
   18a74:	88a3c83a 	sub	r17,r17,r2
   18a78:	90a5883a 	add	r18,r18,r2
   18a7c:	003ff406 	br	18a50 <_gp+0xffff69ec>
   18a80:	0005883a 	mov	r2,zero
   18a84:	00000406 	br	18a98 <__sfvwrite_small_dev+0x8c>
   18a88:	8080000b 	ldhu	r2,0(r16)
   18a8c:	10801014 	ori	r2,r2,64
   18a90:	8080000d 	sth	r2,0(r16)
   18a94:	00bfffc4 	movi	r2,-1
   18a98:	dfc00517 	ldw	ra,20(sp)
   18a9c:	dd000417 	ldw	r20,16(sp)
   18aa0:	dcc00317 	ldw	r19,12(sp)
   18aa4:	dc800217 	ldw	r18,8(sp)
   18aa8:	dc400117 	ldw	r17,4(sp)
   18aac:	dc000017 	ldw	r16,0(sp)
   18ab0:	dec00604 	addi	sp,sp,24
   18ab4:	f800283a 	ret

00018ab8 <_gettimeofday_r>:
   18ab8:	defffd04 	addi	sp,sp,-12
   18abc:	dc000015 	stw	r16,0(sp)
   18ac0:	040000b4 	movhi	r16,2
   18ac4:	dc400115 	stw	r17,4(sp)
   18ac8:	84296c04 	addi	r16,r16,-23120
   18acc:	2023883a 	mov	r17,r4
   18ad0:	2809883a 	mov	r4,r5
   18ad4:	300b883a 	mov	r5,r6
   18ad8:	dfc00215 	stw	ra,8(sp)
   18adc:	80000015 	stw	zero,0(r16)
   18ae0:	0018c700 	call	18c70 <gettimeofday>
   18ae4:	00ffffc4 	movi	r3,-1
   18ae8:	10c0031e 	bne	r2,r3,18af8 <_gettimeofday_r+0x40>
   18aec:	80c00017 	ldw	r3,0(r16)
   18af0:	18000126 	beq	r3,zero,18af8 <_gettimeofday_r+0x40>
   18af4:	88c00015 	stw	r3,0(r17)
   18af8:	dfc00217 	ldw	ra,8(sp)
   18afc:	dc400117 	ldw	r17,4(sp)
   18b00:	dc000017 	ldw	r16,0(sp)
   18b04:	dec00304 	addi	sp,sp,12
   18b08:	f800283a 	ret

00018b0c <_write_r>:
   18b0c:	defffd04 	addi	sp,sp,-12
   18b10:	dc000015 	stw	r16,0(sp)
   18b14:	040000b4 	movhi	r16,2
   18b18:	dc400115 	stw	r17,4(sp)
   18b1c:	84296c04 	addi	r16,r16,-23120
   18b20:	2023883a 	mov	r17,r4
   18b24:	2809883a 	mov	r4,r5
   18b28:	300b883a 	mov	r5,r6
   18b2c:	380d883a 	mov	r6,r7
   18b30:	dfc00215 	stw	ra,8(sp)
   18b34:	80000015 	stw	zero,0(r16)
   18b38:	00190200 	call	19020 <write>
   18b3c:	00ffffc4 	movi	r3,-1
   18b40:	10c0031e 	bne	r2,r3,18b50 <_write_r+0x44>
   18b44:	80c00017 	ldw	r3,0(r16)
   18b48:	18000126 	beq	r3,zero,18b50 <_write_r+0x44>
   18b4c:	88c00015 	stw	r3,0(r17)
   18b50:	dfc00217 	ldw	ra,8(sp)
   18b54:	dc400117 	ldw	r17,4(sp)
   18b58:	dc000017 	ldw	r16,0(sp)
   18b5c:	dec00304 	addi	sp,sp,12
   18b60:	f800283a 	ret

00018b64 <__muldi3>:
   18b64:	defff604 	addi	sp,sp,-40
   18b68:	dd800615 	stw	r22,24(sp)
   18b6c:	dd400515 	stw	r21,20(sp)
   18b70:	25bfffcc 	andi	r22,r4,65535
   18b74:	357fffcc 	andi	r21,r6,65535
   18b78:	dc400115 	stw	r17,4(sp)
   18b7c:	2022d43a 	srli	r17,r4,16
   18b80:	dcc00315 	stw	r19,12(sp)
   18b84:	dc800215 	stw	r18,8(sp)
   18b88:	2027883a 	mov	r19,r4
   18b8c:	2825883a 	mov	r18,r5
   18b90:	a809883a 	mov	r4,r21
   18b94:	b00b883a 	mov	r5,r22
   18b98:	dfc00915 	stw	ra,36(sp)
   18b9c:	df000815 	stw	fp,32(sp)
   18ba0:	ddc00715 	stw	r23,28(sp)
   18ba4:	3839883a 	mov	fp,r7
   18ba8:	302ed43a 	srli	r23,r6,16
   18bac:	dd000415 	stw	r20,16(sp)
   18bb0:	dc000015 	stw	r16,0(sp)
   18bb4:	3029883a 	mov	r20,r6
   18bb8:	0013c800 	call	13c80 <__mulsi3>
   18bbc:	a809883a 	mov	r4,r21
   18bc0:	880b883a 	mov	r5,r17
   18bc4:	1021883a 	mov	r16,r2
   18bc8:	0013c800 	call	13c80 <__mulsi3>
   18bcc:	880b883a 	mov	r5,r17
   18bd0:	b809883a 	mov	r4,r23
   18bd4:	102b883a 	mov	r21,r2
   18bd8:	0013c800 	call	13c80 <__mulsi3>
   18bdc:	b809883a 	mov	r4,r23
   18be0:	b00b883a 	mov	r5,r22
   18be4:	1023883a 	mov	r17,r2
   18be8:	0013c800 	call	13c80 <__mulsi3>
   18bec:	8012d43a 	srli	r9,r16,16
   18bf0:	a885883a 	add	r2,r21,r2
   18bf4:	1251883a 	add	r8,r2,r9
   18bf8:	4540022e 	bgeu	r8,r21,18c04 <__muldi3+0xa0>
   18bfc:	00800074 	movhi	r2,1
   18c00:	88a3883a 	add	r17,r17,r2
   18c04:	4006d43a 	srli	r3,r8,16
   18c08:	4010943a 	slli	r8,r8,16
   18c0c:	9809883a 	mov	r4,r19
   18c10:	e00b883a 	mov	r5,fp
   18c14:	843fffcc 	andi	r16,r16,65535
   18c18:	88e3883a 	add	r17,r17,r3
   18c1c:	4421883a 	add	r16,r8,r16
   18c20:	0013c800 	call	13c80 <__mulsi3>
   18c24:	a009883a 	mov	r4,r20
   18c28:	900b883a 	mov	r5,r18
   18c2c:	1027883a 	mov	r19,r2
   18c30:	0013c800 	call	13c80 <__mulsi3>
   18c34:	9885883a 	add	r2,r19,r2
   18c38:	1447883a 	add	r3,r2,r17
   18c3c:	8005883a 	mov	r2,r16
   18c40:	dfc00917 	ldw	ra,36(sp)
   18c44:	df000817 	ldw	fp,32(sp)
   18c48:	ddc00717 	ldw	r23,28(sp)
   18c4c:	dd800617 	ldw	r22,24(sp)
   18c50:	dd400517 	ldw	r21,20(sp)
   18c54:	dd000417 	ldw	r20,16(sp)
   18c58:	dcc00317 	ldw	r19,12(sp)
   18c5c:	dc800217 	ldw	r18,8(sp)
   18c60:	dc400117 	ldw	r17,4(sp)
   18c64:	dc000017 	ldw	r16,0(sp)
   18c68:	dec00a04 	addi	sp,sp,40
   18c6c:	f800283a 	ret

00018c70 <gettimeofday>:
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   18c70:	008000b4 	movhi	r2,2
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   18c74:	defffb04 	addi	sp,sp,-20
   18c78:	10a97404 	addi	r2,r2,-23088
   18c7c:	dcc00315 	stw	r19,12(sp)
   18c80:	14c00017 	ldw	r19,0(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18c84:	008000b4 	movhi	r2,2
   18c88:	10a97504 	addi	r2,r2,-23084
   18c8c:	dc800215 	stw	r18,8(sp)
   18c90:	14800017 	ldw	r18,0(r2)
   18c94:	dfc00415 	stw	ra,16(sp)
   18c98:	dc400115 	stw	r17,4(sp)
   18c9c:	dc000015 	stw	r16,0(sp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   18ca0:	90003c26 	beq	r18,zero,18d94 <gettimeofday+0x124>
   18ca4:	2021883a 	mov	r16,r4
   18ca8:	2823883a 	mov	r17,r5
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   18cac:	9809883a 	mov	r4,r19
   18cb0:	900b883a 	mov	r5,r18
   18cb4:	0013c700 	call	13c70 <__udivsi3>
   18cb8:	d0e15417 	ldw	r3,-31408(gp)
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   18cbc:	010003f4 	movhi	r4,15
   18cc0:	21109004 	addi	r4,r4,16960
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   18cc4:	10c5883a 	add	r2,r2,r3
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   18cc8:	900b883a 	mov	r5,r18
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   18ccc:	80800015 	stw	r2,0(r16)
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   18cd0:	0013c700 	call	13c70 <__udivsi3>
   18cd4:	1009883a 	mov	r4,r2
   18cd8:	000b883a 	mov	r5,zero
   18cdc:	980d883a 	mov	r6,r19
   18ce0:	000f883a 	mov	r7,zero
   18ce4:	0018b640 	call	18b64 <__muldi3>
   18ce8:	018003f4 	movhi	r6,15
   18cec:	1009883a 	mov	r4,r2
   18cf0:	180b883a 	mov	r5,r3
   18cf4:	31909004 	addi	r6,r6,16960
   18cf8:	000f883a 	mov	r7,zero
   18cfc:	00190f40 	call	190f4 <__umoddi3>
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   18d00:	d0e15404 	addi	r3,gp,-31408
   18d04:	18c00117 	ldw	r3,4(r3)
          break;
      }
      else
      {
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
   18d08:	010003f4 	movhi	r4,15
   18d0c:	21109004 	addi	r4,r4,16960
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   18d10:	1885883a 	add	r2,r3,r2
   18d14:	80800115 	stw	r2,4(r16)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   18d18:	80800117 	ldw	r2,4(r16)
   18d1c:	1000040e 	bge	r2,zero,18d30 <gettimeofday+0xc0>
      if (ptimeval->tv_sec <= 0)
   18d20:	80c00017 	ldw	r3,0(r16)
   18d24:	00c00716 	blt	zero,r3,18d44 <gettimeofday+0xd4>
      {
          ptimeval->tv_sec = 0;
   18d28:	80000015 	stw	zero,0(r16)
          ptimeval->tv_usec = 0;
   18d2c:	80000115 	stw	zero,4(r16)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   18d30:	010003f4 	movhi	r4,15
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
   18d34:	017ffc74 	movhi	r5,65521
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   18d38:	21108fc4 	addi	r4,r4,16959
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
   18d3c:	296f7004 	addi	r5,r5,-16960
   18d40:	00000506 	br	18d58 <gettimeofday+0xe8>
          ptimeval->tv_usec = 0;
          break;
      }
      else
      {
          ptimeval->tv_sec--;
   18d44:	18ffffc4 	addi	r3,r3,-1
          ptimeval->tv_usec += ALT_US;
   18d48:	1105883a 	add	r2,r2,r4
          ptimeval->tv_usec = 0;
          break;
      }
      else
      {
          ptimeval->tv_sec--;
   18d4c:	80c00015 	stw	r3,0(r16)
          ptimeval->tv_usec += ALT_US;
   18d50:	80800115 	stw	r2,4(r16)
   18d54:	003ff006 	br	18d18 <_gp+0xffff6cb4>
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   18d58:	80800117 	ldw	r2,4(r16)
   18d5c:	2080060e 	bge	r4,r2,18d78 <gettimeofday+0x108>
      ptimeval->tv_sec++;
   18d60:	80c00017 	ldw	r3,0(r16)
      ptimeval->tv_usec -= ALT_US;
   18d64:	1145883a 	add	r2,r2,r5
   18d68:	80800115 	stw	r2,4(r16)
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
      ptimeval->tv_sec++;
   18d6c:	18c00044 	addi	r3,r3,1
   18d70:	80c00015 	stw	r3,0(r16)
   18d74:	003ff806 	br	18d58 <_gp+0xffff6cf4>
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   18d78:	88000826 	beq	r17,zero,18d9c <gettimeofday+0x12c>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   18d7c:	d0a15617 	ldw	r2,-31400(gp)
   18d80:	88800015 	stw	r2,0(r17)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   18d84:	d0a15604 	addi	r2,gp,-31400
   18d88:	10800117 	ldw	r2,4(r2)
   18d8c:	88800115 	stw	r2,4(r17)
   18d90:	00000206 	br	18d9c <gettimeofday+0x12c>
    }

    return 0;
  }

  return -ENOTSUP;
   18d94:	00bfde84 	movi	r2,-134
   18d98:	00000106 	br	18da0 <gettimeofday+0x130>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    }

    return 0;
   18d9c:	0005883a 	mov	r2,zero
  }

  return -ENOTSUP;
}
   18da0:	dfc00417 	ldw	ra,16(sp)
   18da4:	dcc00317 	ldw	r19,12(sp)
   18da8:	dc800217 	ldw	r18,8(sp)
   18dac:	dc400117 	ldw	r17,4(sp)
   18db0:	dc000017 	ldw	r16,0(sp)
   18db4:	dec00504 	addi	sp,sp,20
   18db8:	f800283a 	ret

00018dbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   18dbc:	deffff04 	addi	sp,sp,-4
   18dc0:	010000b4 	movhi	r4,2
   18dc4:	014000b4 	movhi	r5,2
   18dc8:	dfc00015 	stw	ra,0(sp)
   18dcc:	2126df04 	addi	r4,r4,-25732
   18dd0:	29682304 	addi	r5,r5,-24436

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   18dd4:	2140061e 	bne	r4,r5,18df0 <alt_load+0x34>
   18dd8:	01000074 	movhi	r4,1
   18ddc:	01400074 	movhi	r5,1
   18de0:	21000804 	addi	r4,r4,32
   18de4:	29400804 	addi	r5,r5,32
   18de8:	2140141e 	bne	r4,r5,18e3c <alt_load+0x80>
   18dec:	00000d06 	br	18e24 <alt_load+0x68>
   18df0:	00c000b4 	movhi	r3,2
   18df4:	18e82304 	addi	r3,r3,-24436
   18df8:	00bfff04 	movi	r2,-4
   18dfc:	1907c83a 	sub	r3,r3,r4
   18e00:	1886703a 	and	r3,r3,r2
   18e04:	0005883a 	mov	r2,zero
  {
    while( to != end )
   18e08:	10fff326 	beq	r2,r3,18dd8 <_gp+0xffff6d74>
   18e0c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
   18e10:	39c00017 	ldw	r7,0(r7)
   18e14:	110d883a 	add	r6,r2,r4
   18e18:	10800104 	addi	r2,r2,4
   18e1c:	31c00015 	stw	r7,0(r6)
   18e20:	003ff906 	br	18e08 <_gp+0xffff6da4>
   18e24:	010000b4 	movhi	r4,2
   18e28:	014000b4 	movhi	r5,2
   18e2c:	2125c404 	addi	r4,r4,-26864
   18e30:	2965c404 	addi	r5,r5,-26864

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   18e34:	2140121e 	bne	r4,r5,18e80 <alt_load+0xc4>
   18e38:	00000d06 	br	18e70 <alt_load+0xb4>
   18e3c:	00c00074 	movhi	r3,1
   18e40:	18c00804 	addi	r3,r3,32
   18e44:	00bfff04 	movi	r2,-4
   18e48:	1907c83a 	sub	r3,r3,r4
   18e4c:	1886703a 	and	r3,r3,r2
   18e50:	0005883a 	mov	r2,zero
  {
    while( to != end )
   18e54:	10fff326 	beq	r2,r3,18e24 <_gp+0xffff6dc0>
   18e58:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
   18e5c:	39c00017 	ldw	r7,0(r7)
   18e60:	110d883a 	add	r6,r2,r4
   18e64:	10800104 	addi	r2,r2,4
   18e68:	31c00015 	stw	r7,0(r6)
   18e6c:	003ff906 	br	18e54 <_gp+0xffff6df0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   18e70:	00190e40 	call	190e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   18e74:	dfc00017 	ldw	ra,0(sp)
   18e78:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   18e7c:	00190e81 	jmpi	190e8 <alt_icache_flush_all>
   18e80:	00c000b4 	movhi	r3,2
   18e84:	18e6df04 	addi	r3,r3,-25732
   18e88:	00bfff04 	movi	r2,-4
   18e8c:	1907c83a 	sub	r3,r3,r4
   18e90:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   18e94:	0005883a 	mov	r2,zero
  {
    while( to != end )
   18e98:	10fff526 	beq	r2,r3,18e70 <_gp+0xffff6e0c>
   18e9c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
   18ea0:	39c00017 	ldw	r7,0(r7)
   18ea4:	110d883a 	add	r6,r2,r4
   18ea8:	10800104 	addi	r2,r2,4
   18eac:	31c00015 	stw	r7,0(r6)
   18eb0:	003ff906 	br	18e98 <_gp+0xffff6e34>

00018eb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   18eb4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   18eb8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   18ebc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   18ec0:	001908c0 	call	1908c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   18ec4:	00190ac0 	call	190ac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   18ec8:	d1215a17 	ldw	r4,-31384(gp)
   18ecc:	d1615917 	ldw	r5,-31388(gp)
   18ed0:	d1a15817 	ldw	r6,-31392(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   18ed4:	dfc00017 	ldw	ra,0(sp)
   18ed8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   18edc:	00115e41 	jmpi	115e4 <main>

00018ee0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   18ee0:	f800283a 	ret

00018ee4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   18ee4:	f800283a 	ret

00018ee8 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ee8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18eec:	00bfff84 	movi	r2,-2
   18ef0:	2884703a 	and	r2,r5,r2
   18ef4:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   18ef8:	d0a00517 	ldw	r2,-32748(gp)
   18efc:	00ffff04 	movi	r3,-4
   18f00:	108000c4 	addi	r2,r2,3
   18f04:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   18f08:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   18f0c:	d0a00515 	stw	r2,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   18f10:	1109883a 	add	r4,r2,r4
   18f14:	18ed0004 	addi	r3,r3,-19456
   18f18:	1900032e 	bgeu	r3,r4,18f28 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f1c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   18f20:	00bfffc4 	movi	r2,-1
   18f24:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   18f28:	d1200515 	stw	r4,-32748(gp)
   18f2c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   18f30:	f800283a 	ret

00018f34 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18f34:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18f38:	00bfff84 	movi	r2,-2
   18f3c:	1884703a 	and	r2,r3,r2
   18f40:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18f44:	21400117 	ldw	r5,4(r4)
   18f48:	20800017 	ldw	r2,0(r4)
   18f4c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   18f50:	21400117 	ldw	r5,4(r4)
   18f54:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18f58:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   18f5c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f60:	1801703a 	wrctl	status,r3
   18f64:	f800283a 	ret

00018f68 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18f68:	d0a15b17 	ldw	r2,-31380(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18f6c:	defffb04 	addi	sp,sp,-20
   18f70:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18f74:	d4200617 	ldw	r16,-32744(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18f78:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18f7c:	dc800215 	stw	r18,8(sp)
   18f80:	dc400115 	stw	r17,4(sp)
   18f84:	dfc00415 	stw	ra,16(sp)
   18f88:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18f8c:	d0a15b15 	stw	r2,-31380(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18f90:	d4600604 	addi	r17,gp,-32744
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   18f94:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18f98:	84401a26 	beq	r16,r17,19004 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18f9c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   18fa0:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18fa4:	10000326 	beq	r2,zero,18fb4 <alt_tick+0x4c>
   18fa8:	d0a15b17 	ldw	r2,-31380(gp)
   18fac:	1000011e 	bne	r2,zero,18fb4 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   18fb0:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18fb4:	d0e15b17 	ldw	r3,-31380(gp)
   18fb8:	80800217 	ldw	r2,8(r16)
   18fbc:	18800f36 	bltu	r3,r2,18ffc <alt_tick+0x94>
   18fc0:	80800403 	ldbu	r2,16(r16)
   18fc4:	10000d1e 	bne	r2,zero,18ffc <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   18fc8:	80800317 	ldw	r2,12(r16)
   18fcc:	81000517 	ldw	r4,20(r16)
   18fd0:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18fd4:	1000031e 	bne	r2,zero,18fe4 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   18fd8:	8009883a 	mov	r4,r16
   18fdc:	0018f340 	call	18f34 <alt_alarm_stop>
   18fe0:	00000606 	br	18ffc <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   18fe4:	80c00217 	ldw	r3,8(r16)
   18fe8:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18fec:	d0e15b17 	ldw	r3,-31380(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   18ff0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18ff4:	10c0012e 	bgeu	r2,r3,18ffc <alt_tick+0x94>
        {
          alarm->rollover = 1;
   18ff8:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18ffc:	9821883a 	mov	r16,r19
   19000:	003fe506 	br	18f98 <_gp+0xffff6f34>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   19004:	dfc00417 	ldw	ra,16(sp)
   19008:	dcc00317 	ldw	r19,12(sp)
   1900c:	dc800217 	ldw	r18,8(sp)
   19010:	dc400117 	ldw	r17,4(sp)
   19014:	dc000017 	ldw	r16,0(sp)
   19018:	dec00504 	addi	sp,sp,20
   1901c:	f800283a 	ret

00019020 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   19020:	00800044 	movi	r2,1
   19024:	20800226 	beq	r4,r2,19030 <write+0x10>
   19028:	00800084 	movi	r2,2
   1902c:	2080041e 	bne	r4,r2,19040 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   19030:	010000b4 	movhi	r4,2
   19034:	21282104 	addi	r4,r4,-24444
   19038:	000f883a 	mov	r7,zero
   1903c:	00190b01 	jmpi	190b0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   19040:	008000b4 	movhi	r2,2
   19044:	10a82204 	addi	r2,r2,-24440
   19048:	10800017 	ldw	r2,0(r2)
   1904c:	10000926 	beq	r2,zero,19074 <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   19050:	deffff04 	addi	sp,sp,-4
   19054:	dfc00015 	stw	ra,0(sp)
   19058:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   1905c:	00c01444 	movi	r3,81
   19060:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   19064:	00bfffc4 	movi	r2,-1
   19068:	dfc00017 	ldw	ra,0(sp)
   1906c:	dec00104 	addi	sp,sp,4
   19070:	f800283a 	ret
   19074:	008000b4 	movhi	r2,2
   19078:	10a96c04 	addi	r2,r2,-23120
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   1907c:	00c01444 	movi	r3,81
   19080:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   19084:	00bfffc4 	movi	r2,-1
   19088:	f800283a 	ret

0001908c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1908c:	deffff04 	addi	sp,sp,-4
   19090:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   19094:	00190ec0 	call	190ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   19098:	00800044 	movi	r2,1
   1909c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   190a0:	dfc00017 	ldw	ra,0(sp)
   190a4:	dec00104 	addi	sp,sp,4
   190a8:	f800283a 	ret

000190ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   190ac:	f800283a 	ret

000190b0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   190b0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   190b4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   190b8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   190bc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   190c0:	2980072e 	bgeu	r5,r6,190e0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   190c4:	38c00037 	ldwio	r3,0(r7)
   190c8:	18ffffec 	andhi	r3,r3,65535
   190cc:	183ffc26 	beq	r3,zero,190c0 <_gp+0xffff705c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   190d0:	28c00007 	ldb	r3,0(r5)
   190d4:	20c00035 	stwio	r3,0(r4)
   190d8:	29400044 	addi	r5,r5,1
   190dc:	003ff806 	br	190c0 <_gp+0xffff705c>

  return count;
}
   190e0:	f800283a 	ret

000190e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   190e4:	f800283a 	ret

000190e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   190e8:	f800283a 	ret

000190ec <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   190ec:	000170fa 	wrctl	ienable,zero
   190f0:	f800283a 	ret

000190f4 <__umoddi3>:
   190f4:	defff404 	addi	sp,sp,-48
   190f8:	dd800815 	stw	r22,32(sp)
   190fc:	dc400315 	stw	r17,12(sp)
   19100:	dc000215 	stw	r16,8(sp)
   19104:	dfc00b15 	stw	ra,44(sp)
   19108:	df000a15 	stw	fp,40(sp)
   1910c:	ddc00915 	stw	r23,36(sp)
   19110:	dd400715 	stw	r21,28(sp)
   19114:	dd000615 	stw	r20,24(sp)
   19118:	dcc00515 	stw	r19,20(sp)
   1911c:	dc800415 	stw	r18,16(sp)
   19120:	2021883a 	mov	r16,r4
   19124:	2823883a 	mov	r17,r5
   19128:	282d883a 	mov	r22,r5
   1912c:	38003c1e 	bne	r7,zero,19220 <__umoddi3+0x12c>
   19130:	3027883a 	mov	r19,r6
   19134:	2029883a 	mov	r20,r4
   19138:	2980522e 	bgeu	r5,r6,19284 <__umoddi3+0x190>
   1913c:	00bfffd4 	movui	r2,65535
   19140:	1180a436 	bltu	r2,r6,193d4 <__umoddi3+0x2e0>
   19144:	00803fc4 	movi	r2,255
   19148:	11815e2e 	bgeu	r2,r6,196c4 <__umoddi3+0x5d0>
   1914c:	01400204 	movi	r5,8
   19150:	2805883a 	mov	r2,r5
   19154:	314ad83a 	srl	r5,r6,r5
   19158:	00c000b4 	movhi	r3,2
   1915c:	18e69f04 	addi	r3,r3,-25988
   19160:	194b883a 	add	r5,r3,r5
   19164:	29000003 	ldbu	r4,0(r5)
   19168:	2089883a 	add	r4,r4,r2
   1916c:	00800804 	movi	r2,32
   19170:	1105c83a 	sub	r2,r2,r4
   19174:	10010c26 	beq	r2,zero,195a8 <__umoddi3+0x4b4>
   19178:	88a2983a 	sll	r17,r17,r2
   1917c:	8108d83a 	srl	r4,r16,r4
   19180:	30a6983a 	sll	r19,r6,r2
   19184:	80a8983a 	sll	r20,r16,r2
   19188:	1025883a 	mov	r18,r2
   1918c:	892cb03a 	or	r22,r17,r4
   19190:	9822d43a 	srli	r17,r19,16
   19194:	b009883a 	mov	r4,r22
   19198:	9d7fffcc 	andi	r21,r19,65535
   1919c:	880b883a 	mov	r5,r17
   191a0:	0013c780 	call	13c78 <__umodsi3>
   191a4:	b009883a 	mov	r4,r22
   191a8:	880b883a 	mov	r5,r17
   191ac:	102f883a 	mov	r23,r2
   191b0:	0013c700 	call	13c70 <__udivsi3>
   191b4:	1009883a 	mov	r4,r2
   191b8:	a80b883a 	mov	r5,r21
   191bc:	0013c800 	call	13c80 <__mulsi3>
   191c0:	b82e943a 	slli	r23,r23,16
   191c4:	a008d43a 	srli	r4,r20,16
   191c8:	b906b03a 	or	r3,r23,r4
   191cc:	1880042e 	bgeu	r3,r2,191e0 <__umoddi3+0xec>
   191d0:	1cc7883a 	add	r3,r3,r19
   191d4:	1cc00236 	bltu	r3,r19,191e0 <__umoddi3+0xec>
   191d8:	1880012e 	bgeu	r3,r2,191e0 <__umoddi3+0xec>
   191dc:	1cc7883a 	add	r3,r3,r19
   191e0:	18a1c83a 	sub	r16,r3,r2
   191e4:	8009883a 	mov	r4,r16
   191e8:	880b883a 	mov	r5,r17
   191ec:	0013c780 	call	13c78 <__umodsi3>
   191f0:	8009883a 	mov	r4,r16
   191f4:	880b883a 	mov	r5,r17
   191f8:	102d883a 	mov	r22,r2
   191fc:	0013c700 	call	13c70 <__udivsi3>
   19200:	1009883a 	mov	r4,r2
   19204:	a80b883a 	mov	r5,r21
   19208:	b02c943a 	slli	r22,r22,16
   1920c:	0013c800 	call	13c80 <__mulsi3>
   19210:	a13fffcc 	andi	r4,r20,65535
   19214:	b106b03a 	or	r3,r22,r4
   19218:	1880572e 	bgeu	r3,r2,19378 <__umoddi3+0x284>
   1921c:	00005206 	br	19368 <__umoddi3+0x274>
   19220:	29c05936 	bltu	r5,r7,19388 <__umoddi3+0x294>
   19224:	00bfffd4 	movui	r2,65535
   19228:	11c0652e 	bgeu	r2,r7,193c0 <__umoddi3+0x2cc>
   1922c:	00804034 	movhi	r2,256
   19230:	10bfffc4 	addi	r2,r2,-1
   19234:	11c1172e 	bgeu	r2,r7,19694 <__umoddi3+0x5a0>
   19238:	01400604 	movi	r5,24
   1923c:	282b883a 	mov	r21,r5
   19240:	394ad83a 	srl	r5,r7,r5
   19244:	00c000b4 	movhi	r3,2
   19248:	18e69f04 	addi	r3,r3,-25988
   1924c:	194b883a 	add	r5,r3,r5
   19250:	28800003 	ldbu	r2,0(r5)
   19254:	00c00804 	movi	r3,32
   19258:	156b883a 	add	r21,r2,r21
   1925c:	1d69c83a 	sub	r20,r3,r21
   19260:	a000671e 	bne	r20,zero,19400 <__umoddi3+0x30c>
   19264:	3c400136 	bltu	r7,r17,1926c <__umoddi3+0x178>
   19268:	81812336 	bltu	r16,r6,196f8 <__umoddi3+0x604>
   1926c:	8185c83a 	sub	r2,r16,r6
   19270:	89e3c83a 	sub	r17,r17,r7
   19274:	8087803a 	cmpltu	r3,r16,r2
   19278:	88edc83a 	sub	r22,r17,r3
   1927c:	b007883a 	mov	r3,r22
   19280:	00004306 	br	19390 <__umoddi3+0x29c>
   19284:	3000041e 	bne	r6,zero,19298 <__umoddi3+0x1a4>
   19288:	01000044 	movi	r4,1
   1928c:	000b883a 	mov	r5,zero
   19290:	0013c700 	call	13c70 <__udivsi3>
   19294:	1027883a 	mov	r19,r2
   19298:	00bfffd4 	movui	r2,65535
   1929c:	14c0532e 	bgeu	r2,r19,193ec <__umoddi3+0x2f8>
   192a0:	00804034 	movhi	r2,256
   192a4:	10bfffc4 	addi	r2,r2,-1
   192a8:	14c1032e 	bgeu	r2,r19,196b8 <__umoddi3+0x5c4>
   192ac:	00800604 	movi	r2,24
   192b0:	1007883a 	mov	r3,r2
   192b4:	9884d83a 	srl	r2,r19,r2
   192b8:	010000b4 	movhi	r4,2
   192bc:	21269f04 	addi	r4,r4,-25988
   192c0:	2085883a 	add	r2,r4,r2
   192c4:	11000003 	ldbu	r4,0(r2)
   192c8:	00800804 	movi	r2,32
   192cc:	20c7883a 	add	r3,r4,r3
   192d0:	10c5c83a 	sub	r2,r2,r3
   192d4:	1000b61e 	bne	r2,zero,195b0 <__umoddi3+0x4bc>
   192d8:	982ad43a 	srli	r21,r19,16
   192dc:	8ce3c83a 	sub	r17,r17,r19
   192e0:	9dbfffcc 	andi	r22,r19,65535
   192e4:	0025883a 	mov	r18,zero
   192e8:	8809883a 	mov	r4,r17
   192ec:	a80b883a 	mov	r5,r21
   192f0:	0013c780 	call	13c78 <__umodsi3>
   192f4:	8809883a 	mov	r4,r17
   192f8:	a80b883a 	mov	r5,r21
   192fc:	102f883a 	mov	r23,r2
   19300:	0013c700 	call	13c70 <__udivsi3>
   19304:	1009883a 	mov	r4,r2
   19308:	b00b883a 	mov	r5,r22
   1930c:	0013c800 	call	13c80 <__mulsi3>
   19310:	b82e943a 	slli	r23,r23,16
   19314:	a008d43a 	srli	r4,r20,16
   19318:	b906b03a 	or	r3,r23,r4
   1931c:	1880032e 	bgeu	r3,r2,1932c <__umoddi3+0x238>
   19320:	1cc7883a 	add	r3,r3,r19
   19324:	1cc00136 	bltu	r3,r19,1932c <__umoddi3+0x238>
   19328:	1880f136 	bltu	r3,r2,196f0 <__umoddi3+0x5fc>
   1932c:	18a1c83a 	sub	r16,r3,r2
   19330:	8009883a 	mov	r4,r16
   19334:	a80b883a 	mov	r5,r21
   19338:	0013c780 	call	13c78 <__umodsi3>
   1933c:	8009883a 	mov	r4,r16
   19340:	a80b883a 	mov	r5,r21
   19344:	1023883a 	mov	r17,r2
   19348:	0013c700 	call	13c70 <__udivsi3>
   1934c:	1009883a 	mov	r4,r2
   19350:	b00b883a 	mov	r5,r22
   19354:	8822943a 	slli	r17,r17,16
   19358:	0013c800 	call	13c80 <__mulsi3>
   1935c:	a13fffcc 	andi	r4,r20,65535
   19360:	8906b03a 	or	r3,r17,r4
   19364:	1880042e 	bgeu	r3,r2,19378 <__umoddi3+0x284>
   19368:	1cc7883a 	add	r3,r3,r19
   1936c:	1cc00236 	bltu	r3,r19,19378 <__umoddi3+0x284>
   19370:	1880012e 	bgeu	r3,r2,19378 <__umoddi3+0x284>
   19374:	1cc7883a 	add	r3,r3,r19
   19378:	1887c83a 	sub	r3,r3,r2
   1937c:	1c84d83a 	srl	r2,r3,r18
   19380:	0007883a 	mov	r3,zero
   19384:	00000206 	br	19390 <__umoddi3+0x29c>
   19388:	2005883a 	mov	r2,r4
   1938c:	2807883a 	mov	r3,r5
   19390:	dfc00b17 	ldw	ra,44(sp)
   19394:	df000a17 	ldw	fp,40(sp)
   19398:	ddc00917 	ldw	r23,36(sp)
   1939c:	dd800817 	ldw	r22,32(sp)
   193a0:	dd400717 	ldw	r21,28(sp)
   193a4:	dd000617 	ldw	r20,24(sp)
   193a8:	dcc00517 	ldw	r19,20(sp)
   193ac:	dc800417 	ldw	r18,16(sp)
   193b0:	dc400317 	ldw	r17,12(sp)
   193b4:	dc000217 	ldw	r16,8(sp)
   193b8:	dec00c04 	addi	sp,sp,48
   193bc:	f800283a 	ret
   193c0:	00803fc4 	movi	r2,255
   193c4:	11c0b02e 	bgeu	r2,r7,19688 <__umoddi3+0x594>
   193c8:	01400204 	movi	r5,8
   193cc:	282b883a 	mov	r21,r5
   193d0:	003f9b06 	br	19240 <_gp+0xffff71dc>
   193d4:	00804034 	movhi	r2,256
   193d8:	10bfffc4 	addi	r2,r2,-1
   193dc:	1180b02e 	bgeu	r2,r6,196a0 <__umoddi3+0x5ac>
   193e0:	01400604 	movi	r5,24
   193e4:	2805883a 	mov	r2,r5
   193e8:	003f5a06 	br	19154 <_gp+0xffff70f0>
   193ec:	00803fc4 	movi	r2,255
   193f0:	14c0ae2e 	bgeu	r2,r19,196ac <__umoddi3+0x5b8>
   193f4:	00800204 	movi	r2,8
   193f8:	1007883a 	mov	r3,r2
   193fc:	003fad06 	br	192b4 <_gp+0xffff7250>
   19400:	3d0a983a 	sll	r5,r7,r20
   19404:	356cd83a 	srl	r22,r6,r21
   19408:	8d78d83a 	srl	fp,r17,r21
   1940c:	8d10983a 	sll	r8,r17,r20
   19410:	2dacb03a 	or	r22,r5,r22
   19414:	b02ed43a 	srli	r23,r22,16
   19418:	8564d83a 	srl	r18,r16,r21
   1941c:	e009883a 	mov	r4,fp
   19420:	b80b883a 	mov	r5,r23
   19424:	44a4b03a 	or	r18,r8,r18
   19428:	3526983a 	sll	r19,r6,r20
   1942c:	0013c780 	call	13c78 <__umodsi3>
   19430:	e009883a 	mov	r4,fp
   19434:	b80b883a 	mov	r5,r23
   19438:	b47fffcc 	andi	r17,r22,65535
   1943c:	d8800015 	stw	r2,0(sp)
   19440:	0013c700 	call	13c70 <__udivsi3>
   19444:	1009883a 	mov	r4,r2
   19448:	880b883a 	mov	r5,r17
   1944c:	1039883a 	mov	fp,r2
   19450:	0013c800 	call	13c80 <__mulsi3>
   19454:	d9800017 	ldw	r6,0(sp)
   19458:	9008d43a 	srli	r4,r18,16
   1945c:	8520983a 	sll	r16,r16,r20
   19460:	300c943a 	slli	r6,r6,16
   19464:	3106b03a 	or	r3,r6,r4
   19468:	1880042e 	bgeu	r3,r2,1947c <__umoddi3+0x388>
   1946c:	1d87883a 	add	r3,r3,r22
   19470:	e13fffc4 	addi	r4,fp,-1
   19474:	1d809a2e 	bgeu	r3,r22,196e0 <__umoddi3+0x5ec>
   19478:	2039883a 	mov	fp,r4
   1947c:	1887c83a 	sub	r3,r3,r2
   19480:	1809883a 	mov	r4,r3
   19484:	b80b883a 	mov	r5,r23
   19488:	d8c00115 	stw	r3,4(sp)
   1948c:	0013c780 	call	13c78 <__umodsi3>
   19490:	d8c00117 	ldw	r3,4(sp)
   19494:	b80b883a 	mov	r5,r23
   19498:	d8800015 	stw	r2,0(sp)
   1949c:	1809883a 	mov	r4,r3
   194a0:	0013c700 	call	13c70 <__udivsi3>
   194a4:	880b883a 	mov	r5,r17
   194a8:	1009883a 	mov	r4,r2
   194ac:	102f883a 	mov	r23,r2
   194b0:	0013c800 	call	13c80 <__mulsi3>
   194b4:	d9800017 	ldw	r6,0(sp)
   194b8:	947fffcc 	andi	r17,r18,65535
   194bc:	300c943a 	slli	r6,r6,16
   194c0:	3464b03a 	or	r18,r6,r17
   194c4:	9080042e 	bgeu	r18,r2,194d8 <__umoddi3+0x3e4>
   194c8:	95a5883a 	add	r18,r18,r22
   194cc:	b8ffffc4 	addi	r3,r23,-1
   194d0:	95807f2e 	bgeu	r18,r22,196d0 <__umoddi3+0x5dc>
   194d4:	182f883a 	mov	r23,r3
   194d8:	e038943a 	slli	fp,fp,16
   194dc:	980cd43a 	srli	r6,r19,16
   194e0:	98ffffcc 	andi	r3,r19,65535
   194e4:	bf38b03a 	or	fp,r23,fp
   194e8:	e02ed43a 	srli	r23,fp,16
   194ec:	e73fffcc 	andi	fp,fp,65535
   194f0:	180b883a 	mov	r5,r3
   194f4:	e009883a 	mov	r4,fp
   194f8:	d9800015 	stw	r6,0(sp)
   194fc:	d8c00115 	stw	r3,4(sp)
   19500:	90a5c83a 	sub	r18,r18,r2
   19504:	0013c800 	call	13c80 <__mulsi3>
   19508:	d8c00117 	ldw	r3,4(sp)
   1950c:	b809883a 	mov	r4,r23
   19510:	1023883a 	mov	r17,r2
   19514:	180b883a 	mov	r5,r3
   19518:	0013c800 	call	13c80 <__mulsi3>
   1951c:	d9800017 	ldw	r6,0(sp)
   19520:	b809883a 	mov	r4,r23
   19524:	d8800115 	stw	r2,4(sp)
   19528:	300b883a 	mov	r5,r6
   1952c:	302f883a 	mov	r23,r6
   19530:	0013c800 	call	13c80 <__mulsi3>
   19534:	e009883a 	mov	r4,fp
   19538:	b80b883a 	mov	r5,r23
   1953c:	d8800015 	stw	r2,0(sp)
   19540:	0013c800 	call	13c80 <__mulsi3>
   19544:	d8c00117 	ldw	r3,4(sp)
   19548:	880cd43a 	srli	r6,r17,16
   1954c:	d9c00017 	ldw	r7,0(sp)
   19550:	1885883a 	add	r2,r3,r2
   19554:	118d883a 	add	r6,r2,r6
   19558:	30c0022e 	bgeu	r6,r3,19564 <__umoddi3+0x470>
   1955c:	00800074 	movhi	r2,1
   19560:	388f883a 	add	r7,r7,r2
   19564:	3006d43a 	srli	r3,r6,16
   19568:	300c943a 	slli	r6,r6,16
   1956c:	8c7fffcc 	andi	r17,r17,65535
   19570:	38c7883a 	add	r3,r7,r3
   19574:	3463883a 	add	r17,r6,r17
   19578:	90c03d36 	bltu	r18,r3,19670 <__umoddi3+0x57c>
   1957c:	90c06026 	beq	r18,r3,19700 <__umoddi3+0x60c>
   19580:	90c9c83a 	sub	r4,r18,r3
   19584:	880f883a 	mov	r7,r17
   19588:	81cfc83a 	sub	r7,r16,r7
   1958c:	81c7803a 	cmpltu	r3,r16,r7
   19590:	20c7c83a 	sub	r3,r4,r3
   19594:	1d44983a 	sll	r2,r3,r21
   19598:	3d0ed83a 	srl	r7,r7,r20
   1959c:	1d06d83a 	srl	r3,r3,r20
   195a0:	11c4b03a 	or	r2,r2,r7
   195a4:	003f7a06 	br	19390 <_gp+0xffff732c>
   195a8:	0025883a 	mov	r18,zero
   195ac:	003ef806 	br	19190 <_gp+0xffff712c>
   195b0:	98a6983a 	sll	r19,r19,r2
   195b4:	88e8d83a 	srl	r20,r17,r3
   195b8:	80c6d83a 	srl	r3,r16,r3
   195bc:	982ad43a 	srli	r21,r19,16
   195c0:	88a2983a 	sll	r17,r17,r2
   195c4:	a009883a 	mov	r4,r20
   195c8:	a80b883a 	mov	r5,r21
   195cc:	88eeb03a 	or	r23,r17,r3
   195d0:	1025883a 	mov	r18,r2
   195d4:	0013c780 	call	13c78 <__umodsi3>
   195d8:	a009883a 	mov	r4,r20
   195dc:	a80b883a 	mov	r5,r21
   195e0:	1023883a 	mov	r17,r2
   195e4:	9dbfffcc 	andi	r22,r19,65535
   195e8:	0013c700 	call	13c70 <__udivsi3>
   195ec:	1009883a 	mov	r4,r2
   195f0:	b00b883a 	mov	r5,r22
   195f4:	0013c800 	call	13c80 <__mulsi3>
   195f8:	8822943a 	slli	r17,r17,16
   195fc:	b808d43a 	srli	r4,r23,16
   19600:	84a8983a 	sll	r20,r16,r18
   19604:	8906b03a 	or	r3,r17,r4
   19608:	1880042e 	bgeu	r3,r2,1961c <__umoddi3+0x528>
   1960c:	1cc7883a 	add	r3,r3,r19
   19610:	1cc00236 	bltu	r3,r19,1961c <__umoddi3+0x528>
   19614:	1880012e 	bgeu	r3,r2,1961c <__umoddi3+0x528>
   19618:	1cc7883a 	add	r3,r3,r19
   1961c:	18a1c83a 	sub	r16,r3,r2
   19620:	8009883a 	mov	r4,r16
   19624:	a80b883a 	mov	r5,r21
   19628:	0013c780 	call	13c78 <__umodsi3>
   1962c:	8009883a 	mov	r4,r16
   19630:	a80b883a 	mov	r5,r21
   19634:	1039883a 	mov	fp,r2
   19638:	0013c700 	call	13c70 <__udivsi3>
   1963c:	1009883a 	mov	r4,r2
   19640:	b00b883a 	mov	r5,r22
   19644:	0013c800 	call	13c80 <__mulsi3>
   19648:	e006943a 	slli	r3,fp,16
   1964c:	b93fffcc 	andi	r4,r23,65535
   19650:	1906b03a 	or	r3,r3,r4
   19654:	1880042e 	bgeu	r3,r2,19668 <__umoddi3+0x574>
   19658:	1cc7883a 	add	r3,r3,r19
   1965c:	1cc00236 	bltu	r3,r19,19668 <__umoddi3+0x574>
   19660:	1880012e 	bgeu	r3,r2,19668 <__umoddi3+0x574>
   19664:	1cc7883a 	add	r3,r3,r19
   19668:	18a3c83a 	sub	r17,r3,r2
   1966c:	003f1e06 	br	192e8 <_gp+0xffff7284>
   19670:	8ccfc83a 	sub	r7,r17,r19
   19674:	1d89c83a 	sub	r4,r3,r22
   19678:	89e3803a 	cmpltu	r17,r17,r7
   1967c:	2463c83a 	sub	r17,r4,r17
   19680:	9449c83a 	sub	r4,r18,r17
   19684:	003fc006 	br	19588 <_gp+0xffff7524>
   19688:	000b883a 	mov	r5,zero
   1968c:	002b883a 	mov	r21,zero
   19690:	003eeb06 	br	19240 <_gp+0xffff71dc>
   19694:	01400404 	movi	r5,16
   19698:	282b883a 	mov	r21,r5
   1969c:	003ee806 	br	19240 <_gp+0xffff71dc>
   196a0:	01400404 	movi	r5,16
   196a4:	2805883a 	mov	r2,r5
   196a8:	003eaa06 	br	19154 <_gp+0xffff70f0>
   196ac:	0005883a 	mov	r2,zero
   196b0:	0007883a 	mov	r3,zero
   196b4:	003eff06 	br	192b4 <_gp+0xffff7250>
   196b8:	00800404 	movi	r2,16
   196bc:	1007883a 	mov	r3,r2
   196c0:	003efc06 	br	192b4 <_gp+0xffff7250>
   196c4:	000b883a 	mov	r5,zero
   196c8:	0005883a 	mov	r2,zero
   196cc:	003ea106 	br	19154 <_gp+0xffff70f0>
   196d0:	90bf802e 	bgeu	r18,r2,194d4 <_gp+0xffff7470>
   196d4:	bdffff84 	addi	r23,r23,-2
   196d8:	95a5883a 	add	r18,r18,r22
   196dc:	003f7e06 	br	194d8 <_gp+0xffff7474>
   196e0:	18bf652e 	bgeu	r3,r2,19478 <_gp+0xffff7414>
   196e4:	e73fff84 	addi	fp,fp,-2
   196e8:	1d87883a 	add	r3,r3,r22
   196ec:	003f6306 	br	1947c <_gp+0xffff7418>
   196f0:	1cc7883a 	add	r3,r3,r19
   196f4:	003f0d06 	br	1932c <_gp+0xffff72c8>
   196f8:	8005883a 	mov	r2,r16
   196fc:	003edf06 	br	1927c <_gp+0xffff7218>
   19700:	847fdb36 	bltu	r16,r17,19670 <_gp+0xffff760c>
   19704:	880f883a 	mov	r7,r17
   19708:	0009883a 	mov	r4,zero
   1970c:	003f9e06 	br	19588 <_gp+0xffff7524>
