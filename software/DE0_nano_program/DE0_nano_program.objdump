
DE0_nano_program.elf:     file format elf32-littlenios2
DE0_nano_program.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0001022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005568 memsz 0x00005568 flags r-x
    LOAD off    0x00006588 vaddr 0x00015588 paddr 0x00016ff4 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008a60 vaddr 0x00018a60 paddr 0x00018a60 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000530c  0001022c  0001022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00015538  00015538  00006538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00015588  00016ff4  00006588  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00018a60  00018a60  00008a60  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00018bb4  00018bb4  00007ff4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007ff4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000958  00000000  00000000  00008018  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015fd3  00000000  00000000  00008970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005d8d  00000000  00000000  0001e943  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000065e8  00000000  00000000  000246d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000014c0  00000000  00000000  0002acb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002656  00000000  00000000  0002c178  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000044ae  00000000  00000000  0002e7ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00032c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000328  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00035421  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00035424  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00035430  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00035431  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00035432  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003543d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00035448  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00035453  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0003545b  2**0
                  CONTENTS, READONLY
 26 .jdi          00003f24  00000000  00000000  00035483  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002b705  00000000  00000000  000393a7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
0001022c l    d  .text	00000000 .text
00015538 l    d  .rodata	00000000 .rodata
00015588 l    d  .rwdata	00000000 .rwdata
00018a60 l    d  .bss	00000000 .bss
00018bb4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE0_nano_program_bsp//obj/HAL/src/crt0.o
00010264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00015588 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00011d44 l     F .text	00000008 __fp_lock
00011d4c l     F .text	00000008 __fp_unlock
00011d60 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00012de4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012f0c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012f38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013040 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001313c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013220 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013404 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016fe4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013688 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000137d8 l     F .text	00000038 alt_dev_reg
00015f5c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013ab0 l     F .text	00000204 altera_avalon_jtag_uart_irq
00013cb4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014430 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000148c8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014a20 l     F .text	00000050 alt_get_errno
00014a70 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018a88 g     O .bss	00000004 alt_instruction_exception_handler
00012cb0 g     F .text	00000054 _isatty_r
0001334c g     F .text	00000078 alt_main
0001029c g     F .text	000000b8 _puts_r
00018ab4 g     O .bss	00000100 alt_irq
00012d04 g     F .text	0000005c _lseek_r
00016ff4 g       *ABS*	00000000 __flash_rwdata_start
00018bb4 g       *ABS*	00000000 __alt_heap_start
00012a30 g     F .text	0000005c __sseek
000120a8 g     F .text	00000010 __sinit
00011f00 g     F .text	00000078 __sfmoreglue
000133e4 g     F .text	00000020 __malloc_unlock
0001126c g     F .text	0000015c memmove
00012090 g     F .text	00000018 _cleanup
00014e60 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012c58 g     F .text	00000058 _fstat_r
00018a6c g     O .bss	00000004 errno
000129ac g     F .text	00000008 __seofread
00018a74 g     O .bss	00000004 alt_argv
0001efbc g       *ABS*	00000000 _gp
00015ddc g     O .rwdata	00000180 alt_fd_list
00014e80 g     F .text	00000090 alt_find_dev
00011134 g     F .text	00000138 memcpy
00011d54 g     F .text	0000000c _cleanup_r
000149a8 g     F .text	00000078 alt_io_redirect
00015538 g       *ABS*	00000000 __DTOR_END__
00010354 g     F .text	00000014 puts
000150f8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00013eb0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00013090 g     F .text	000000ac isatty
00018a68 g     O .bss	00000004 __malloc_top_pad
00010400 g     F .text	000004a4 __sfvwrite_r
00011968 g     F .text	00000054 _sbrk_r
00012d60 g     F .text	0000005c _read_r
00016fdc g     O .rwdata	00000004 alt_max_fd
00012b44 g     F .text	00000100 _fclose_r
00011d14 g     F .text	00000030 fflush
00018a64 g     O .bss	00000004 __malloc_max_sbrked_mem
00013270 g     F .text	000000dc lseek
00016fbc g     O .rwdata	00000004 _global_impure_ptr
000113c8 g     F .text	000005a0 _realloc_r
00018bb4 g       *ABS*	00000000 __bss_end
000147d8 g     F .text	000000f0 alt_iic_isr_register
00014d5c g     F .text	00000104 alt_tick
000120c8 g     F .text	00000018 __fp_lock_all
0001478c g     F .text	0000004c alt_ic_irq_enabled
00014cc4 g     F .text	00000098 alt_alarm_stop
00018a7c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d0 alt_irq_handler
00015db4 g     O .rwdata	00000028 alt_dev_null
00014414 g     F .text	0000001c alt_dcache_flush_all
00016ff4 g       *ABS*	00000000 __ram_rwdata_end
00016fd4 g     O .rwdata	00000008 alt_dev_list
000136d8 g     F .text	00000100 write
00015588 g       *ABS*	00000000 __ram_rodata_end
00012f88 g     F .text	000000b8 fstat
00018bb4 g       *ABS*	00000000 end
000139ec g     F .text	000000c4 altera_avalon_jtag_uart_init
000101cc g     F .exceptions	00000060 alt_instruction_exception_entry
00015538 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
000140bc g     F .text	00000218 altera_avalon_jtag_uart_write
000120b8 g     F .text	00000004 __sfp_lock_acquire
0001104c g     F .text	000000e8 memchr
0001221c g     F .text	000002f0 _free_r
00015370 g     F .text	00000194 __call_exitprocs
00016fc4 g     O .rwdata	00000004 __malloc_sbrk_base
0001022c g     F .text	0000003c _start
00018a80 g     O .bss	00000004 _alt_tick_rate
00018a84 g     O .bss	00000004 _alt_nticks
00013454 g     F .text	00000104 read
00013844 g     F .text	00000044 alt_sys_init
0001525c g     F .text	00000114 __register_exitproc
00013d5c g     F .text	00000068 altera_avalon_jtag_uart_close
00012dbc g     F .text	00000028 .hidden __mulsi3
00015588 g       *ABS*	00000000 __ram_rwdata_start
00015538 g       *ABS*	00000000 __ram_rodata_start
00018a8c g     O .bss	00000028 __malloc_current_mallinfo
00013888 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015024 g     F .text	000000d4 alt_get_fd
00012af0 g     F .text	00000054 _close_r
000151e0 g     F .text	0000007c memcmp
00013948 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018bb4 g       *ABS*	00000000 __alt_stack_base
00013998 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000119bc g     F .text	00000130 __swsetup_r
00011f78 g     F .text	00000118 __sfp
000159ac g     O .rwdata	00000408 __malloc_av_
000120c4 g     F .text	00000004 __sinit_lock_release
00012958 g     F .text	00000054 __sread
00014f10 g     F .text	00000114 alt_find_file
00014480 g     F .text	000000a4 alt_dev_llist_insert
000133c4 g     F .text	00000020 __malloc_lock
000135d8 g     F .text	000000b0 sbrk
00011aec g     F .text	00000228 _fflush_r
00018a60 g       *ABS*	00000000 __bss_start
00012834 g     F .text	00000124 memset
00010268 g     F .text	00000034 main
00018a78 g     O .bss	00000004 alt_envp
00018a60 g     O .bss	00000004 __malloc_max_total_mem
000138e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012a8c g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
00012c44 g     F .text	00000014 fclose
000108a4 g     F .text	000007a8 _malloc_r
00016fe0 g     O .rwdata	00000004 alt_errno
0001250c g     F .text	000000b8 _fwalk
000120f8 g     F .text	00000124 _malloc_trim_r
00015538 g       *ABS*	00000000 __CTOR_END__
00015538 g       *ABS*	00000000 __flash_rodata_start
00015538 g       *ABS*	00000000 __DTOR_LIST__
00013810 g     F .text	00000034 alt_irq_init
00013558 g     F .text	00000080 alt_release_fd
00015194 g     F .text	00000014 atexit
00012a94 g     F .text	0000005c _write_r
00016fc0 g     O .rwdata	00000004 _impure_ptr
00018a70 g     O .bss	00000004 alt_argc
00014580 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000120e0 g     F .text	00000018 __fp_unlock_all
00016fcc g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000145f8 g     F .text	00000050 alt_ic_isr_register
00016ff4 g       *ABS*	00000000 _edata
00018bb4 g       *ABS*	00000000 _end
0001022c g       *ABS*	00000000 __ram_exceptions_end
00013dc4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000146e8 g     F .text	000000a4 alt_ic_irq_disable
000129b4 g     F .text	0000007c __swrite
00016fc8 g     O .rwdata	00000004 __malloc_trim_threshold
000151a8 g     F .text	00000038 exit
000125c4 g     F .text	000000b8 _fwalk_reent
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000120bc g     F .text	00000004 __sfp_lock_release
00015504 g     F .text	00000034 _exit
000142d4 g     F .text	00000140 alt_alarm_start
0001267c g     F .text	000001b8 __smakebuf_r
00010368 g     F .text	00000098 strlen
00014b64 g     F .text	00000160 open
000145dc g     F .text	0000001c alt_icache_flush_all
00016fe8 g     O .rwdata	00000004 alt_priority_mask
00014648 g     F .text	000000a0 alt_ic_irq_enable
00016fec g     O .rwdata	00000008 alt_alarm_list
00014524 g     F .text	0000005c _do_ctors
00012e34 g     F .text	000000d8 close
000131a0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000120c0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408b14 	ori	at,at,556
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101cc0 	call	101cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a2ad04 	addi	r2,r2,-30028
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a2ad04 	addi	r2,r2,-30028
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff1170>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff1164>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	e037883a 	mov	sp,fp
   101bc:	dfc00117 	ldw	ra,4(sp)
   101c0:	df000017 	ldw	fp,0(sp)
   101c4:	dec00204 	addi	sp,sp,8
   101c8:	f800283a 	ret

000101cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101cc:	defffb04 	addi	sp,sp,-20
   101d0:	dfc00415 	stw	ra,16(sp)
   101d4:	df000315 	stw	fp,12(sp)
   101d8:	df000304 	addi	fp,sp,12
   101dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e0:	00bfffc4 	movi	r2,-1
   101e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101ec:	d0a6b317 	ldw	r2,-25908(gp)
   101f0:	10000726 	beq	r2,zero,10210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f4:	d0a6b317 	ldw	r2,-25908(gp)
   101f8:	e0fffd17 	ldw	r3,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	e17fff17 	ldw	r5,-4(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	103ee83a 	callr	r2
   1020c:	00000206 	br	10218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10214:	0005883a 	mov	r2,zero
}
   10218:	e037883a 	mov	sp,fp
   1021c:	dfc00117 	ldw	ra,4(sp)
   10220:	df000017 	ldw	fp,0(sp)
   10224:	dec00204 	addi	sp,sp,8
   10228:	f800283a 	ret

Disassembly of section .text:

0001022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   1022c:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10230:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10238:	d6bbef14 	ori	gp,gp,61372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   1023c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10240:	10a29814 	ori	r2,r2,35424

    movhi r3, %hi(__bss_end)
   10244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10248:	18e2ed14 	ori	r3,r3,35764

    beq r2, r3, 1f
   1024c:	10c00326 	beq	r2,r3,1025c <_start+0x30>

0:
    stw zero, (r2)
   10250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10258:	10fffd36 	bltu	r2,r3,10250 <_gp+0xffff1294>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   1025c:	00131a00 	call	131a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10260:	001334c0 	call	1334c <alt_main>

00010264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10264:	003fff06 	br	10264 <_gp+0xffff12a8>

00010268 <main>:
 */

#include <stdio.h>

int main()
{
   10268:	defffe04 	addi	sp,sp,-8
   1026c:	dfc00115 	stw	ra,4(sp)
   10270:	df000015 	stw	fp,0(sp)
   10274:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   10278:	01000074 	movhi	r4,1
   1027c:	21154e04 	addi	r4,r4,21816
   10280:	00103540 	call	10354 <puts>

  return 0;
   10284:	0005883a 	mov	r2,zero
}
   10288:	e037883a 	mov	sp,fp
   1028c:	dfc00117 	ldw	ra,4(sp)
   10290:	df000017 	ldw	fp,0(sp)
   10294:	dec00204 	addi	sp,sp,8
   10298:	f800283a 	ret

0001029c <_puts_r>:
   1029c:	defff604 	addi	sp,sp,-40
   102a0:	dc000715 	stw	r16,28(sp)
   102a4:	2021883a 	mov	r16,r4
   102a8:	2809883a 	mov	r4,r5
   102ac:	dc400815 	stw	r17,32(sp)
   102b0:	dfc00915 	stw	ra,36(sp)
   102b4:	2823883a 	mov	r17,r5
   102b8:	00103680 	call	10368 <strlen>
   102bc:	00c00074 	movhi	r3,1
   102c0:	18dbf004 	addi	r3,r3,28608
   102c4:	18c00017 	ldw	r3,0(r3)
   102c8:	11000044 	addi	r4,r2,1
   102cc:	d8800115 	stw	r2,4(sp)
   102d0:	18c00217 	ldw	r3,8(r3)
   102d4:	01400074 	movhi	r5,1
   102d8:	29555304 	addi	r5,r5,21836
   102dc:	1880030b 	ldhu	r2,12(r3)
   102e0:	d9400215 	stw	r5,8(sp)
   102e4:	d9000615 	stw	r4,24(sp)
   102e8:	01400044 	movi	r5,1
   102ec:	01000084 	movi	r4,2
   102f0:	d9000515 	stw	r4,20(sp)
   102f4:	dc400015 	stw	r17,0(sp)
   102f8:	d9400315 	stw	r5,12(sp)
   102fc:	dec00415 	stw	sp,16(sp)
   10300:	1108000c 	andi	r4,r2,8192
   10304:	2000061e 	bne	r4,zero,10320 <_puts_r+0x84>
   10308:	19401917 	ldw	r5,100(r3)
   1030c:	0137ffc4 	movi	r4,-8193
   10310:	10880014 	ori	r2,r2,8192
   10314:	2908703a 	and	r4,r5,r4
   10318:	1880030d 	sth	r2,12(r3)
   1031c:	19001915 	stw	r4,100(r3)
   10320:	81400217 	ldw	r5,8(r16)
   10324:	8009883a 	mov	r4,r16
   10328:	d9800404 	addi	r6,sp,16
   1032c:	00104000 	call	10400 <__sfvwrite_r>
   10330:	1000061e 	bne	r2,zero,1034c <_puts_r+0xb0>
   10334:	00800284 	movi	r2,10
   10338:	dfc00917 	ldw	ra,36(sp)
   1033c:	dc400817 	ldw	r17,32(sp)
   10340:	dc000717 	ldw	r16,28(sp)
   10344:	dec00a04 	addi	sp,sp,40
   10348:	f800283a 	ret
   1034c:	00bfffc4 	movi	r2,-1
   10350:	003ff906 	br	10338 <_gp+0xffff137c>

00010354 <puts>:
   10354:	00800074 	movhi	r2,1
   10358:	109bf004 	addi	r2,r2,28608
   1035c:	200b883a 	mov	r5,r4
   10360:	11000017 	ldw	r4,0(r2)
   10364:	001029c1 	jmpi	1029c <_puts_r>

00010368 <strlen>:
   10368:	208000cc 	andi	r2,r4,3
   1036c:	10002026 	beq	r2,zero,103f0 <strlen+0x88>
   10370:	20800007 	ldb	r2,0(r4)
   10374:	10002026 	beq	r2,zero,103f8 <strlen+0x90>
   10378:	2005883a 	mov	r2,r4
   1037c:	00000206 	br	10388 <strlen+0x20>
   10380:	10c00007 	ldb	r3,0(r2)
   10384:	18001826 	beq	r3,zero,103e8 <strlen+0x80>
   10388:	10800044 	addi	r2,r2,1
   1038c:	10c000cc 	andi	r3,r2,3
   10390:	183ffb1e 	bne	r3,zero,10380 <_gp+0xffff13c4>
   10394:	10c00017 	ldw	r3,0(r2)
   10398:	01ffbff4 	movhi	r7,65279
   1039c:	39ffbfc4 	addi	r7,r7,-257
   103a0:	00ca303a 	nor	r5,zero,r3
   103a4:	01a02074 	movhi	r6,32897
   103a8:	19c7883a 	add	r3,r3,r7
   103ac:	31a02004 	addi	r6,r6,-32640
   103b0:	1946703a 	and	r3,r3,r5
   103b4:	1986703a 	and	r3,r3,r6
   103b8:	1800091e 	bne	r3,zero,103e0 <strlen+0x78>
   103bc:	10800104 	addi	r2,r2,4
   103c0:	10c00017 	ldw	r3,0(r2)
   103c4:	19cb883a 	add	r5,r3,r7
   103c8:	00c6303a 	nor	r3,zero,r3
   103cc:	28c6703a 	and	r3,r5,r3
   103d0:	1986703a 	and	r3,r3,r6
   103d4:	183ff926 	beq	r3,zero,103bc <_gp+0xffff1400>
   103d8:	00000106 	br	103e0 <strlen+0x78>
   103dc:	10800044 	addi	r2,r2,1
   103e0:	10c00007 	ldb	r3,0(r2)
   103e4:	183ffd1e 	bne	r3,zero,103dc <_gp+0xffff1420>
   103e8:	1105c83a 	sub	r2,r2,r4
   103ec:	f800283a 	ret
   103f0:	2005883a 	mov	r2,r4
   103f4:	003fe706 	br	10394 <_gp+0xffff13d8>
   103f8:	0005883a 	mov	r2,zero
   103fc:	f800283a 	ret

00010400 <__sfvwrite_r>:
   10400:	30800217 	ldw	r2,8(r6)
   10404:	10004526 	beq	r2,zero,1051c <__sfvwrite_r+0x11c>
   10408:	28c0030b 	ldhu	r3,12(r5)
   1040c:	defff404 	addi	sp,sp,-48
   10410:	dd400715 	stw	r21,28(sp)
   10414:	dcc00515 	stw	r19,20(sp)
   10418:	dc000215 	stw	r16,8(sp)
   1041c:	dfc00b15 	stw	ra,44(sp)
   10420:	df000a15 	stw	fp,40(sp)
   10424:	ddc00915 	stw	r23,36(sp)
   10428:	dd800815 	stw	r22,32(sp)
   1042c:	dd000615 	stw	r20,24(sp)
   10430:	dc800415 	stw	r18,16(sp)
   10434:	dc400315 	stw	r17,12(sp)
   10438:	1880020c 	andi	r2,r3,8
   1043c:	2821883a 	mov	r16,r5
   10440:	202b883a 	mov	r21,r4
   10444:	3027883a 	mov	r19,r6
   10448:	10002526 	beq	r2,zero,104e0 <__sfvwrite_r+0xe0>
   1044c:	28800417 	ldw	r2,16(r5)
   10450:	10002326 	beq	r2,zero,104e0 <__sfvwrite_r+0xe0>
   10454:	1880008c 	andi	r2,r3,2
   10458:	9c400017 	ldw	r17,0(r19)
   1045c:	10003126 	beq	r2,zero,10524 <__sfvwrite_r+0x124>
   10460:	0029883a 	mov	r20,zero
   10464:	0025883a 	mov	r18,zero
   10468:	05810004 	movi	r22,1024
   1046c:	a00d883a 	mov	r6,r20
   10470:	a809883a 	mov	r4,r21
   10474:	90002526 	beq	r18,zero,1050c <__sfvwrite_r+0x10c>
   10478:	900f883a 	mov	r7,r18
   1047c:	81400717 	ldw	r5,28(r16)
   10480:	b480012e 	bgeu	r22,r18,10488 <__sfvwrite_r+0x88>
   10484:	01c10004 	movi	r7,1024
   10488:	80800917 	ldw	r2,36(r16)
   1048c:	103ee83a 	callr	r2
   10490:	0080510e 	bge	zero,r2,105d8 <__sfvwrite_r+0x1d8>
   10494:	98c00217 	ldw	r3,8(r19)
   10498:	a0a9883a 	add	r20,r20,r2
   1049c:	90a5c83a 	sub	r18,r18,r2
   104a0:	1885c83a 	sub	r2,r3,r2
   104a4:	98800215 	stw	r2,8(r19)
   104a8:	103ff01e 	bne	r2,zero,1046c <_gp+0xffff14b0>
   104ac:	0005883a 	mov	r2,zero
   104b0:	dfc00b17 	ldw	ra,44(sp)
   104b4:	df000a17 	ldw	fp,40(sp)
   104b8:	ddc00917 	ldw	r23,36(sp)
   104bc:	dd800817 	ldw	r22,32(sp)
   104c0:	dd400717 	ldw	r21,28(sp)
   104c4:	dd000617 	ldw	r20,24(sp)
   104c8:	dcc00517 	ldw	r19,20(sp)
   104cc:	dc800417 	ldw	r18,16(sp)
   104d0:	dc400317 	ldw	r17,12(sp)
   104d4:	dc000217 	ldw	r16,8(sp)
   104d8:	dec00c04 	addi	sp,sp,48
   104dc:	f800283a 	ret
   104e0:	a809883a 	mov	r4,r21
   104e4:	800b883a 	mov	r5,r16
   104e8:	00119bc0 	call	119bc <__swsetup_r>
   104ec:	80c0030b 	ldhu	r3,12(r16)
   104f0:	103fd826 	beq	r2,zero,10454 <_gp+0xffff1498>
   104f4:	18c01014 	ori	r3,r3,64
   104f8:	80c0030d 	sth	r3,12(r16)
   104fc:	00c00244 	movi	r3,9
   10500:	00bfffc4 	movi	r2,-1
   10504:	a8c00015 	stw	r3,0(r21)
   10508:	003fe906 	br	104b0 <_gp+0xffff14f4>
   1050c:	8d000017 	ldw	r20,0(r17)
   10510:	8c800117 	ldw	r18,4(r17)
   10514:	8c400204 	addi	r17,r17,8
   10518:	003fd406 	br	1046c <_gp+0xffff14b0>
   1051c:	0005883a 	mov	r2,zero
   10520:	f800283a 	ret
   10524:	1880004c 	andi	r2,r3,1
   10528:	1000301e 	bne	r2,zero,105ec <__sfvwrite_r+0x1ec>
   1052c:	002f883a 	mov	r23,zero
   10530:	0025883a 	mov	r18,zero
   10534:	90001c26 	beq	r18,zero,105a8 <__sfvwrite_r+0x1a8>
   10538:	1880800c 	andi	r2,r3,512
   1053c:	85000217 	ldw	r20,8(r16)
   10540:	10006c26 	beq	r2,zero,106f4 <__sfvwrite_r+0x2f4>
   10544:	a02d883a 	mov	r22,r20
   10548:	95008536 	bltu	r18,r20,10760 <__sfvwrite_r+0x360>
   1054c:	1881200c 	andi	r2,r3,1152
   10550:	10009d1e 	bne	r2,zero,107c8 <__sfvwrite_r+0x3c8>
   10554:	81000017 	ldw	r4,0(r16)
   10558:	a039883a 	mov	fp,r20
   1055c:	9029883a 	mov	r20,r18
   10560:	b80b883a 	mov	r5,r23
   10564:	b00d883a 	mov	r6,r22
   10568:	001126c0 	call	1126c <memmove>
   1056c:	80c00217 	ldw	r3,8(r16)
   10570:	81000017 	ldw	r4,0(r16)
   10574:	9005883a 	mov	r2,r18
   10578:	1f39c83a 	sub	fp,r3,fp
   1057c:	258f883a 	add	r7,r4,r22
   10580:	87000215 	stw	fp,8(r16)
   10584:	81c00015 	stw	r7,0(r16)
   10588:	98c00217 	ldw	r3,8(r19)
   1058c:	b8af883a 	add	r23,r23,r2
   10590:	90a5c83a 	sub	r18,r18,r2
   10594:	1d05c83a 	sub	r2,r3,r20
   10598:	98800215 	stw	r2,8(r19)
   1059c:	103fc326 	beq	r2,zero,104ac <_gp+0xffff14f0>
   105a0:	80c0030b 	ldhu	r3,12(r16)
   105a4:	903fe41e 	bne	r18,zero,10538 <_gp+0xffff157c>
   105a8:	8dc00017 	ldw	r23,0(r17)
   105ac:	8c800117 	ldw	r18,4(r17)
   105b0:	8c400204 	addi	r17,r17,8
   105b4:	003fdf06 	br	10534 <_gp+0xffff1578>
   105b8:	00113c80 	call	113c8 <_realloc_r>
   105bc:	102d883a 	mov	r22,r2
   105c0:	1000a01e 	bne	r2,zero,10844 <__sfvwrite_r+0x444>
   105c4:	81400417 	ldw	r5,16(r16)
   105c8:	a809883a 	mov	r4,r21
   105cc:	001221c0 	call	1221c <_free_r>
   105d0:	00800304 	movi	r2,12
   105d4:	a8800015 	stw	r2,0(r21)
   105d8:	80c0030b 	ldhu	r3,12(r16)
   105dc:	00bfffc4 	movi	r2,-1
   105e0:	18c01014 	ori	r3,r3,64
   105e4:	80c0030d 	sth	r3,12(r16)
   105e8:	003fb106 	br	104b0 <_gp+0xffff14f4>
   105ec:	0029883a 	mov	r20,zero
   105f0:	0011883a 	mov	r8,zero
   105f4:	0039883a 	mov	fp,zero
   105f8:	0025883a 	mov	r18,zero
   105fc:	90001f26 	beq	r18,zero,1067c <__sfvwrite_r+0x27c>
   10600:	40006826 	beq	r8,zero,107a4 <__sfvwrite_r+0x3a4>
   10604:	a02f883a 	mov	r23,r20
   10608:	9500012e 	bgeu	r18,r20,10610 <__sfvwrite_r+0x210>
   1060c:	902f883a 	mov	r23,r18
   10610:	81000017 	ldw	r4,0(r16)
   10614:	80800417 	ldw	r2,16(r16)
   10618:	b82d883a 	mov	r22,r23
   1061c:	81800217 	ldw	r6,8(r16)
   10620:	81c00517 	ldw	r7,20(r16)
   10624:	1100022e 	bgeu	r2,r4,10630 <__sfvwrite_r+0x230>
   10628:	31c7883a 	add	r3,r6,r7
   1062c:	1dc01816 	blt	r3,r23,10690 <__sfvwrite_r+0x290>
   10630:	b9c03f16 	blt	r23,r7,10730 <__sfvwrite_r+0x330>
   10634:	80800917 	ldw	r2,36(r16)
   10638:	81400717 	ldw	r5,28(r16)
   1063c:	a809883a 	mov	r4,r21
   10640:	da000115 	stw	r8,4(sp)
   10644:	e00d883a 	mov	r6,fp
   10648:	103ee83a 	callr	r2
   1064c:	102d883a 	mov	r22,r2
   10650:	da000117 	ldw	r8,4(sp)
   10654:	00bfe00e 	bge	zero,r2,105d8 <_gp+0xffff161c>
   10658:	a5a9c83a 	sub	r20,r20,r22
   1065c:	a0001f26 	beq	r20,zero,106dc <__sfvwrite_r+0x2dc>
   10660:	98800217 	ldw	r2,8(r19)
   10664:	e5b9883a 	add	fp,fp,r22
   10668:	95a5c83a 	sub	r18,r18,r22
   1066c:	15adc83a 	sub	r22,r2,r22
   10670:	9d800215 	stw	r22,8(r19)
   10674:	b03f8d26 	beq	r22,zero,104ac <_gp+0xffff14f0>
   10678:	903fe11e 	bne	r18,zero,10600 <_gp+0xffff1644>
   1067c:	8f000017 	ldw	fp,0(r17)
   10680:	8c800117 	ldw	r18,4(r17)
   10684:	0011883a 	mov	r8,zero
   10688:	8c400204 	addi	r17,r17,8
   1068c:	003fdb06 	br	105fc <_gp+0xffff1640>
   10690:	180d883a 	mov	r6,r3
   10694:	e00b883a 	mov	r5,fp
   10698:	da000115 	stw	r8,4(sp)
   1069c:	d8c00015 	stw	r3,0(sp)
   106a0:	001126c0 	call	1126c <memmove>
   106a4:	d8c00017 	ldw	r3,0(sp)
   106a8:	80800017 	ldw	r2,0(r16)
   106ac:	a809883a 	mov	r4,r21
   106b0:	800b883a 	mov	r5,r16
   106b4:	10c5883a 	add	r2,r2,r3
   106b8:	80800015 	stw	r2,0(r16)
   106bc:	d8c00015 	stw	r3,0(sp)
   106c0:	0011aec0 	call	11aec <_fflush_r>
   106c4:	d8c00017 	ldw	r3,0(sp)
   106c8:	da000117 	ldw	r8,4(sp)
   106cc:	103fc21e 	bne	r2,zero,105d8 <_gp+0xffff161c>
   106d0:	182d883a 	mov	r22,r3
   106d4:	a5a9c83a 	sub	r20,r20,r22
   106d8:	a03fe11e 	bne	r20,zero,10660 <_gp+0xffff16a4>
   106dc:	a809883a 	mov	r4,r21
   106e0:	800b883a 	mov	r5,r16
   106e4:	0011aec0 	call	11aec <_fflush_r>
   106e8:	103fbb1e 	bne	r2,zero,105d8 <_gp+0xffff161c>
   106ec:	0011883a 	mov	r8,zero
   106f0:	003fdb06 	br	10660 <_gp+0xffff16a4>
   106f4:	81000017 	ldw	r4,0(r16)
   106f8:	80800417 	ldw	r2,16(r16)
   106fc:	1100012e 	bgeu	r2,r4,10704 <__sfvwrite_r+0x304>
   10700:	a4805a36 	bltu	r20,r18,1086c <__sfvwrite_r+0x46c>
   10704:	81c00517 	ldw	r7,20(r16)
   10708:	91c01a36 	bltu	r18,r7,10774 <__sfvwrite_r+0x374>
   1070c:	80800917 	ldw	r2,36(r16)
   10710:	81400717 	ldw	r5,28(r16)
   10714:	a809883a 	mov	r4,r21
   10718:	b80d883a 	mov	r6,r23
   1071c:	103ee83a 	callr	r2
   10720:	1029883a 	mov	r20,r2
   10724:	00bfac0e 	bge	zero,r2,105d8 <_gp+0xffff161c>
   10728:	a005883a 	mov	r2,r20
   1072c:	003f9606 	br	10588 <_gp+0xffff15cc>
   10730:	b80d883a 	mov	r6,r23
   10734:	e00b883a 	mov	r5,fp
   10738:	da000115 	stw	r8,4(sp)
   1073c:	001126c0 	call	1126c <memmove>
   10740:	80800217 	ldw	r2,8(r16)
   10744:	80c00017 	ldw	r3,0(r16)
   10748:	da000117 	ldw	r8,4(sp)
   1074c:	15c5c83a 	sub	r2,r2,r23
   10750:	1def883a 	add	r23,r3,r23
   10754:	80800215 	stw	r2,8(r16)
   10758:	85c00015 	stw	r23,0(r16)
   1075c:	003fbe06 	br	10658 <_gp+0xffff169c>
   10760:	81000017 	ldw	r4,0(r16)
   10764:	9039883a 	mov	fp,r18
   10768:	9029883a 	mov	r20,r18
   1076c:	902d883a 	mov	r22,r18
   10770:	003f7b06 	br	10560 <_gp+0xffff15a4>
   10774:	b80b883a 	mov	r5,r23
   10778:	900d883a 	mov	r6,r18
   1077c:	001126c0 	call	1126c <memmove>
   10780:	80c00217 	ldw	r3,8(r16)
   10784:	80800017 	ldw	r2,0(r16)
   10788:	9029883a 	mov	r20,r18
   1078c:	1c87c83a 	sub	r3,r3,r18
   10790:	1485883a 	add	r2,r2,r18
   10794:	80800015 	stw	r2,0(r16)
   10798:	80c00215 	stw	r3,8(r16)
   1079c:	9005883a 	mov	r2,r18
   107a0:	003f7906 	br	10588 <_gp+0xffff15cc>
   107a4:	e009883a 	mov	r4,fp
   107a8:	01400284 	movi	r5,10
   107ac:	900d883a 	mov	r6,r18
   107b0:	001104c0 	call	1104c <memchr>
   107b4:	10003826 	beq	r2,zero,10898 <__sfvwrite_r+0x498>
   107b8:	10800044 	addi	r2,r2,1
   107bc:	1729c83a 	sub	r20,r2,fp
   107c0:	02000044 	movi	r8,1
   107c4:	003f8f06 	br	10604 <_gp+0xffff1648>
   107c8:	80800517 	ldw	r2,20(r16)
   107cc:	81400417 	ldw	r5,16(r16)
   107d0:	87000017 	ldw	fp,0(r16)
   107d4:	10a9883a 	add	r20,r2,r2
   107d8:	a085883a 	add	r2,r20,r2
   107dc:	1028d7fa 	srli	r20,r2,31
   107e0:	e179c83a 	sub	fp,fp,r5
   107e4:	e1000044 	addi	r4,fp,1
   107e8:	a085883a 	add	r2,r20,r2
   107ec:	1029d07a 	srai	r20,r2,1
   107f0:	2485883a 	add	r2,r4,r18
   107f4:	a00d883a 	mov	r6,r20
   107f8:	a080022e 	bgeu	r20,r2,10804 <__sfvwrite_r+0x404>
   107fc:	1029883a 	mov	r20,r2
   10800:	100d883a 	mov	r6,r2
   10804:	18c1000c 	andi	r3,r3,1024
   10808:	a809883a 	mov	r4,r21
   1080c:	183f6a26 	beq	r3,zero,105b8 <_gp+0xffff15fc>
   10810:	300b883a 	mov	r5,r6
   10814:	00108a40 	call	108a4 <_malloc_r>
   10818:	102d883a 	mov	r22,r2
   1081c:	103f6c26 	beq	r2,zero,105d0 <_gp+0xffff1614>
   10820:	81400417 	ldw	r5,16(r16)
   10824:	1009883a 	mov	r4,r2
   10828:	e00d883a 	mov	r6,fp
   1082c:	00111340 	call	11134 <memcpy>
   10830:	8080030b 	ldhu	r2,12(r16)
   10834:	00fedfc4 	movi	r3,-1153
   10838:	10c4703a 	and	r2,r2,r3
   1083c:	10802014 	ori	r2,r2,128
   10840:	8080030d 	sth	r2,12(r16)
   10844:	b709883a 	add	r4,r22,fp
   10848:	a707c83a 	sub	r3,r20,fp
   1084c:	85800415 	stw	r22,16(r16)
   10850:	85000515 	stw	r20,20(r16)
   10854:	81000015 	stw	r4,0(r16)
   10858:	9039883a 	mov	fp,r18
   1085c:	80c00215 	stw	r3,8(r16)
   10860:	9029883a 	mov	r20,r18
   10864:	902d883a 	mov	r22,r18
   10868:	003f3d06 	br	10560 <_gp+0xffff15a4>
   1086c:	b80b883a 	mov	r5,r23
   10870:	a00d883a 	mov	r6,r20
   10874:	001126c0 	call	1126c <memmove>
   10878:	80800017 	ldw	r2,0(r16)
   1087c:	a809883a 	mov	r4,r21
   10880:	800b883a 	mov	r5,r16
   10884:	1505883a 	add	r2,r2,r20
   10888:	80800015 	stw	r2,0(r16)
   1088c:	0011aec0 	call	11aec <_fflush_r>
   10890:	103fa526 	beq	r2,zero,10728 <_gp+0xffff176c>
   10894:	003f5006 	br	105d8 <_gp+0xffff161c>
   10898:	95000044 	addi	r20,r18,1
   1089c:	02000044 	movi	r8,1
   108a0:	003f5806 	br	10604 <_gp+0xffff1648>

000108a4 <_malloc_r>:
   108a4:	defff504 	addi	sp,sp,-44
   108a8:	dc800315 	stw	r18,12(sp)
   108ac:	dfc00a15 	stw	ra,40(sp)
   108b0:	df000915 	stw	fp,36(sp)
   108b4:	ddc00815 	stw	r23,32(sp)
   108b8:	dd800715 	stw	r22,28(sp)
   108bc:	dd400615 	stw	r21,24(sp)
   108c0:	dd000515 	stw	r20,20(sp)
   108c4:	dcc00415 	stw	r19,16(sp)
   108c8:	dc400215 	stw	r17,8(sp)
   108cc:	dc000115 	stw	r16,4(sp)
   108d0:	288002c4 	addi	r2,r5,11
   108d4:	00c00584 	movi	r3,22
   108d8:	2025883a 	mov	r18,r4
   108dc:	18802a2e 	bgeu	r3,r2,10988 <_malloc_r+0xe4>
   108e0:	047ffe04 	movi	r17,-8
   108e4:	1462703a 	and	r17,r2,r17
   108e8:	88009e16 	blt	r17,zero,10b64 <_malloc_r+0x2c0>
   108ec:	89409d36 	bltu	r17,r5,10b64 <_malloc_r+0x2c0>
   108f0:	00133c40 	call	133c4 <__malloc_lock>
   108f4:	00807dc4 	movi	r2,503
   108f8:	14402736 	bltu	r2,r17,10998 <_malloc_r+0xf4>
   108fc:	8806d0fa 	srli	r3,r17,3
   10900:	04c00074 	movhi	r19,1
   10904:	9cd66b04 	addi	r19,r19,22956
   10908:	18c5883a 	add	r2,r3,r3
   1090c:	1085883a 	add	r2,r2,r2
   10910:	1085883a 	add	r2,r2,r2
   10914:	9885883a 	add	r2,r19,r2
   10918:	14000317 	ldw	r16,12(r2)
   1091c:	80814a26 	beq	r16,r2,10e48 <_malloc_r+0x5a4>
   10920:	80c00117 	ldw	r3,4(r16)
   10924:	81000317 	ldw	r4,12(r16)
   10928:	00bfff04 	movi	r2,-4
   1092c:	1884703a 	and	r2,r3,r2
   10930:	81400217 	ldw	r5,8(r16)
   10934:	8085883a 	add	r2,r16,r2
   10938:	10c00117 	ldw	r3,4(r2)
   1093c:	29000315 	stw	r4,12(r5)
   10940:	21400215 	stw	r5,8(r4)
   10944:	18c00054 	ori	r3,r3,1
   10948:	10c00115 	stw	r3,4(r2)
   1094c:	9009883a 	mov	r4,r18
   10950:	00133e40 	call	133e4 <__malloc_unlock>
   10954:	80800204 	addi	r2,r16,8
   10958:	dfc00a17 	ldw	ra,40(sp)
   1095c:	df000917 	ldw	fp,36(sp)
   10960:	ddc00817 	ldw	r23,32(sp)
   10964:	dd800717 	ldw	r22,28(sp)
   10968:	dd400617 	ldw	r21,24(sp)
   1096c:	dd000517 	ldw	r20,20(sp)
   10970:	dcc00417 	ldw	r19,16(sp)
   10974:	dc800317 	ldw	r18,12(sp)
   10978:	dc400217 	ldw	r17,8(sp)
   1097c:	dc000117 	ldw	r16,4(sp)
   10980:	dec00b04 	addi	sp,sp,44
   10984:	f800283a 	ret
   10988:	04400404 	movi	r17,16
   1098c:	89407536 	bltu	r17,r5,10b64 <_malloc_r+0x2c0>
   10990:	00133c40 	call	133c4 <__malloc_lock>
   10994:	003fd906 	br	108fc <_gp+0xffff1940>
   10998:	8806d27a 	srli	r3,r17,9
   1099c:	18007526 	beq	r3,zero,10b74 <_malloc_r+0x2d0>
   109a0:	00800104 	movi	r2,4
   109a4:	10c0ef36 	bltu	r2,r3,10d64 <_malloc_r+0x4c0>
   109a8:	8806d1ba 	srli	r3,r17,6
   109ac:	19c00e04 	addi	r7,r3,56
   109b0:	39cb883a 	add	r5,r7,r7
   109b4:	04c00074 	movhi	r19,1
   109b8:	294b883a 	add	r5,r5,r5
   109bc:	9cd66b04 	addi	r19,r19,22956
   109c0:	294b883a 	add	r5,r5,r5
   109c4:	994b883a 	add	r5,r19,r5
   109c8:	2c000317 	ldw	r16,12(r5)
   109cc:	2c000e26 	beq	r5,r16,10a08 <_malloc_r+0x164>
   109d0:	80800117 	ldw	r2,4(r16)
   109d4:	01bfff04 	movi	r6,-4
   109d8:	010003c4 	movi	r4,15
   109dc:	1184703a 	and	r2,r2,r6
   109e0:	1447c83a 	sub	r3,r2,r17
   109e4:	20c00716 	blt	r4,r3,10a04 <_malloc_r+0x160>
   109e8:	1800650e 	bge	r3,zero,10b80 <_malloc_r+0x2dc>
   109ec:	84000317 	ldw	r16,12(r16)
   109f0:	2c000526 	beq	r5,r16,10a08 <_malloc_r+0x164>
   109f4:	80800117 	ldw	r2,4(r16)
   109f8:	1184703a 	and	r2,r2,r6
   109fc:	1447c83a 	sub	r3,r2,r17
   10a00:	20fff90e 	bge	r4,r3,109e8 <_gp+0xffff1a2c>
   10a04:	39ffffc4 	addi	r7,r7,-1
   10a08:	38c00044 	addi	r3,r7,1
   10a0c:	01800074 	movhi	r6,1
   10a10:	9c000417 	ldw	r16,16(r19)
   10a14:	31966b04 	addi	r6,r6,22956
   10a18:	32400204 	addi	r9,r6,8
   10a1c:	82410326 	beq	r16,r9,10e2c <_malloc_r+0x588>
   10a20:	81000117 	ldw	r4,4(r16)
   10a24:	00bfff04 	movi	r2,-4
   10a28:	208e703a 	and	r7,r4,r2
   10a2c:	3c45c83a 	sub	r2,r7,r17
   10a30:	010003c4 	movi	r4,15
   10a34:	2080ee16 	blt	r4,r2,10df0 <_malloc_r+0x54c>
   10a38:	32400515 	stw	r9,20(r6)
   10a3c:	32400415 	stw	r9,16(r6)
   10a40:	1000510e 	bge	r2,zero,10b88 <_malloc_r+0x2e4>
   10a44:	00807fc4 	movi	r2,511
   10a48:	11c0ce36 	bltu	r2,r7,10d84 <_malloc_r+0x4e0>
   10a4c:	3808d0fa 	srli	r4,r7,3
   10a50:	01c00044 	movi	r7,1
   10a54:	30800117 	ldw	r2,4(r6)
   10a58:	210b883a 	add	r5,r4,r4
   10a5c:	294b883a 	add	r5,r5,r5
   10a60:	2009d0ba 	srai	r4,r4,2
   10a64:	294b883a 	add	r5,r5,r5
   10a68:	298b883a 	add	r5,r5,r6
   10a6c:	2a000217 	ldw	r8,8(r5)
   10a70:	3908983a 	sll	r4,r7,r4
   10a74:	81400315 	stw	r5,12(r16)
   10a78:	82000215 	stw	r8,8(r16)
   10a7c:	2088b03a 	or	r4,r4,r2
   10a80:	2c000215 	stw	r16,8(r5)
   10a84:	31000115 	stw	r4,4(r6)
   10a88:	44000315 	stw	r16,12(r8)
   10a8c:	1805d0ba 	srai	r2,r3,2
   10a90:	01400044 	movi	r5,1
   10a94:	288a983a 	sll	r5,r5,r2
   10a98:	21404336 	bltu	r4,r5,10ba8 <_malloc_r+0x304>
   10a9c:	2144703a 	and	r2,r4,r5
   10aa0:	10000a1e 	bne	r2,zero,10acc <_malloc_r+0x228>
   10aa4:	00bfff04 	movi	r2,-4
   10aa8:	294b883a 	add	r5,r5,r5
   10aac:	1886703a 	and	r3,r3,r2
   10ab0:	2144703a 	and	r2,r4,r5
   10ab4:	18c00104 	addi	r3,r3,4
   10ab8:	1000041e 	bne	r2,zero,10acc <_malloc_r+0x228>
   10abc:	294b883a 	add	r5,r5,r5
   10ac0:	2144703a 	and	r2,r4,r5
   10ac4:	18c00104 	addi	r3,r3,4
   10ac8:	103ffc26 	beq	r2,zero,10abc <_gp+0xffff1b00>
   10acc:	023fff04 	movi	r8,-4
   10ad0:	01c003c4 	movi	r7,15
   10ad4:	18c5883a 	add	r2,r3,r3
   10ad8:	1085883a 	add	r2,r2,r2
   10adc:	1085883a 	add	r2,r2,r2
   10ae0:	9895883a 	add	r10,r19,r2
   10ae4:	52c00304 	addi	r11,r10,12
   10ae8:	1819883a 	mov	r12,r3
   10aec:	5c000017 	ldw	r16,0(r11)
   10af0:	59bffd04 	addi	r6,r11,-12
   10af4:	8180041e 	bne	r16,r6,10b08 <_malloc_r+0x264>
   10af8:	0000ce06 	br	10e34 <_malloc_r+0x590>
   10afc:	2000d70e 	bge	r4,zero,10e5c <_malloc_r+0x5b8>
   10b00:	84000317 	ldw	r16,12(r16)
   10b04:	8180cb26 	beq	r16,r6,10e34 <_malloc_r+0x590>
   10b08:	80800117 	ldw	r2,4(r16)
   10b0c:	1204703a 	and	r2,r2,r8
   10b10:	1449c83a 	sub	r4,r2,r17
   10b14:	393ff90e 	bge	r7,r4,10afc <_gp+0xffff1b40>
   10b18:	80800317 	ldw	r2,12(r16)
   10b1c:	80c00217 	ldw	r3,8(r16)
   10b20:	89400054 	ori	r5,r17,1
   10b24:	81400115 	stw	r5,4(r16)
   10b28:	18800315 	stw	r2,12(r3)
   10b2c:	10c00215 	stw	r3,8(r2)
   10b30:	8463883a 	add	r17,r16,r17
   10b34:	9c400515 	stw	r17,20(r19)
   10b38:	9c400415 	stw	r17,16(r19)
   10b3c:	20800054 	ori	r2,r4,1
   10b40:	88800115 	stw	r2,4(r17)
   10b44:	8a400315 	stw	r9,12(r17)
   10b48:	8a400215 	stw	r9,8(r17)
   10b4c:	8923883a 	add	r17,r17,r4
   10b50:	89000015 	stw	r4,0(r17)
   10b54:	9009883a 	mov	r4,r18
   10b58:	00133e40 	call	133e4 <__malloc_unlock>
   10b5c:	80800204 	addi	r2,r16,8
   10b60:	003f7d06 	br	10958 <_gp+0xffff199c>
   10b64:	00800304 	movi	r2,12
   10b68:	90800015 	stw	r2,0(r18)
   10b6c:	0005883a 	mov	r2,zero
   10b70:	003f7906 	br	10958 <_gp+0xffff199c>
   10b74:	01401f84 	movi	r5,126
   10b78:	01c00fc4 	movi	r7,63
   10b7c:	003f8d06 	br	109b4 <_gp+0xffff19f8>
   10b80:	81000317 	ldw	r4,12(r16)
   10b84:	003f6a06 	br	10930 <_gp+0xffff1974>
   10b88:	81c5883a 	add	r2,r16,r7
   10b8c:	10c00117 	ldw	r3,4(r2)
   10b90:	9009883a 	mov	r4,r18
   10b94:	18c00054 	ori	r3,r3,1
   10b98:	10c00115 	stw	r3,4(r2)
   10b9c:	00133e40 	call	133e4 <__malloc_unlock>
   10ba0:	80800204 	addi	r2,r16,8
   10ba4:	003f6c06 	br	10958 <_gp+0xffff199c>
   10ba8:	9c000217 	ldw	r16,8(r19)
   10bac:	00bfff04 	movi	r2,-4
   10bb0:	85800117 	ldw	r22,4(r16)
   10bb4:	b0ac703a 	and	r22,r22,r2
   10bb8:	b4400336 	bltu	r22,r17,10bc8 <_malloc_r+0x324>
   10bbc:	b445c83a 	sub	r2,r22,r17
   10bc0:	00c003c4 	movi	r3,15
   10bc4:	18805d16 	blt	r3,r2,10d3c <_malloc_r+0x498>
   10bc8:	05c00074 	movhi	r23,1
   10bcc:	008000b4 	movhi	r2,2
   10bd0:	bddbf104 	addi	r23,r23,28612
   10bd4:	10a29a04 	addi	r2,r2,-30104
   10bd8:	15400017 	ldw	r21,0(r2)
   10bdc:	b9000017 	ldw	r4,0(r23)
   10be0:	00ffffc4 	movi	r3,-1
   10be4:	858d883a 	add	r6,r16,r22
   10be8:	8d6b883a 	add	r21,r17,r21
   10bec:	20c0e426 	beq	r4,r3,10f80 <_malloc_r+0x6dc>
   10bf0:	ad4403c4 	addi	r21,r21,4111
   10bf4:	00fc0004 	movi	r3,-4096
   10bf8:	a8ea703a 	and	r21,r21,r3
   10bfc:	9009883a 	mov	r4,r18
   10c00:	a80b883a 	mov	r5,r21
   10c04:	d9800015 	stw	r6,0(sp)
   10c08:	00119680 	call	11968 <_sbrk_r>
   10c0c:	00ffffc4 	movi	r3,-1
   10c10:	1029883a 	mov	r20,r2
   10c14:	d9800017 	ldw	r6,0(sp)
   10c18:	10c0a426 	beq	r2,r3,10eac <_malloc_r+0x608>
   10c1c:	1180a236 	bltu	r2,r6,10ea8 <_malloc_r+0x604>
   10c20:	070000b4 	movhi	fp,2
   10c24:	e722a304 	addi	fp,fp,-30068
   10c28:	e0c00017 	ldw	r3,0(fp)
   10c2c:	a8c7883a 	add	r3,r21,r3
   10c30:	e0c00015 	stw	r3,0(fp)
   10c34:	3500da26 	beq	r6,r20,10fa0 <_malloc_r+0x6fc>
   10c38:	b9000017 	ldw	r4,0(r23)
   10c3c:	00bfffc4 	movi	r2,-1
   10c40:	2080e426 	beq	r4,r2,10fd4 <_malloc_r+0x730>
   10c44:	a185c83a 	sub	r2,r20,r6
   10c48:	1885883a 	add	r2,r3,r2
   10c4c:	e0800015 	stw	r2,0(fp)
   10c50:	a0c001cc 	andi	r3,r20,7
   10c54:	1800b526 	beq	r3,zero,10f2c <_malloc_r+0x688>
   10c58:	a0e9c83a 	sub	r20,r20,r3
   10c5c:	00840204 	movi	r2,4104
   10c60:	a5000204 	addi	r20,r20,8
   10c64:	10c7c83a 	sub	r3,r2,r3
   10c68:	a545883a 	add	r2,r20,r21
   10c6c:	1083ffcc 	andi	r2,r2,4095
   10c70:	18abc83a 	sub	r21,r3,r2
   10c74:	9009883a 	mov	r4,r18
   10c78:	a80b883a 	mov	r5,r21
   10c7c:	00119680 	call	11968 <_sbrk_r>
   10c80:	00ffffc4 	movi	r3,-1
   10c84:	10c0d026 	beq	r2,r3,10fc8 <_malloc_r+0x724>
   10c88:	1507c83a 	sub	r3,r2,r20
   10c8c:	a8c7883a 	add	r3,r21,r3
   10c90:	18c00054 	ori	r3,r3,1
   10c94:	e0800017 	ldw	r2,0(fp)
   10c98:	9d000215 	stw	r20,8(r19)
   10c9c:	a0c00115 	stw	r3,4(r20)
   10ca0:	a887883a 	add	r3,r21,r2
   10ca4:	e0c00015 	stw	r3,0(fp)
   10ca8:	84c00e26 	beq	r16,r19,10ce4 <_malloc_r+0x440>
   10cac:	018003c4 	movi	r6,15
   10cb0:	3580a02e 	bgeu	r6,r22,10f34 <_malloc_r+0x690>
   10cb4:	81400117 	ldw	r5,4(r16)
   10cb8:	013ffe04 	movi	r4,-8
   10cbc:	b0bffd04 	addi	r2,r22,-12
   10cc0:	1104703a 	and	r2,r2,r4
   10cc4:	2900004c 	andi	r4,r5,1
   10cc8:	1108b03a 	or	r4,r2,r4
   10ccc:	81000115 	stw	r4,4(r16)
   10cd0:	01400144 	movi	r5,5
   10cd4:	8089883a 	add	r4,r16,r2
   10cd8:	21400115 	stw	r5,4(r4)
   10cdc:	21400215 	stw	r5,8(r4)
   10ce0:	3080c036 	bltu	r6,r2,10fe4 <_malloc_r+0x740>
   10ce4:	008000b4 	movhi	r2,2
   10ce8:	10a29904 	addi	r2,r2,-30108
   10cec:	11000017 	ldw	r4,0(r2)
   10cf0:	20c0012e 	bgeu	r4,r3,10cf8 <_malloc_r+0x454>
   10cf4:	10c00015 	stw	r3,0(r2)
   10cf8:	008000b4 	movhi	r2,2
   10cfc:	10a29804 	addi	r2,r2,-30112
   10d00:	11000017 	ldw	r4,0(r2)
   10d04:	9c000217 	ldw	r16,8(r19)
   10d08:	20c0012e 	bgeu	r4,r3,10d10 <_malloc_r+0x46c>
   10d0c:	10c00015 	stw	r3,0(r2)
   10d10:	80c00117 	ldw	r3,4(r16)
   10d14:	00bfff04 	movi	r2,-4
   10d18:	1886703a 	and	r3,r3,r2
   10d1c:	1c45c83a 	sub	r2,r3,r17
   10d20:	1c400236 	bltu	r3,r17,10d2c <_malloc_r+0x488>
   10d24:	00c003c4 	movi	r3,15
   10d28:	18800416 	blt	r3,r2,10d3c <_malloc_r+0x498>
   10d2c:	9009883a 	mov	r4,r18
   10d30:	00133e40 	call	133e4 <__malloc_unlock>
   10d34:	0005883a 	mov	r2,zero
   10d38:	003f0706 	br	10958 <_gp+0xffff199c>
   10d3c:	88c00054 	ori	r3,r17,1
   10d40:	80c00115 	stw	r3,4(r16)
   10d44:	8463883a 	add	r17,r16,r17
   10d48:	10800054 	ori	r2,r2,1
   10d4c:	9c400215 	stw	r17,8(r19)
   10d50:	88800115 	stw	r2,4(r17)
   10d54:	9009883a 	mov	r4,r18
   10d58:	00133e40 	call	133e4 <__malloc_unlock>
   10d5c:	80800204 	addi	r2,r16,8
   10d60:	003efd06 	br	10958 <_gp+0xffff199c>
   10d64:	00800504 	movi	r2,20
   10d68:	10c0482e 	bgeu	r2,r3,10e8c <_malloc_r+0x5e8>
   10d6c:	00801504 	movi	r2,84
   10d70:	10c06836 	bltu	r2,r3,10f14 <_malloc_r+0x670>
   10d74:	8806d33a 	srli	r3,r17,12
   10d78:	19c01b84 	addi	r7,r3,110
   10d7c:	39cb883a 	add	r5,r7,r7
   10d80:	003f0c06 	br	109b4 <_gp+0xffff19f8>
   10d84:	3804d27a 	srli	r2,r7,9
   10d88:	01000104 	movi	r4,4
   10d8c:	2080422e 	bgeu	r4,r2,10e98 <_malloc_r+0x5f4>
   10d90:	01000504 	movi	r4,20
   10d94:	20807c36 	bltu	r4,r2,10f88 <_malloc_r+0x6e4>
   10d98:	110016c4 	addi	r4,r2,91
   10d9c:	210b883a 	add	r5,r4,r4
   10da0:	294b883a 	add	r5,r5,r5
   10da4:	294b883a 	add	r5,r5,r5
   10da8:	994b883a 	add	r5,r19,r5
   10dac:	28800217 	ldw	r2,8(r5)
   10db0:	02000074 	movhi	r8,1
   10db4:	42166b04 	addi	r8,r8,22956
   10db8:	11406326 	beq	r2,r5,10f48 <_malloc_r+0x6a4>
   10dbc:	01bfff04 	movi	r6,-4
   10dc0:	11000117 	ldw	r4,4(r2)
   10dc4:	2188703a 	and	r4,r4,r6
   10dc8:	3900022e 	bgeu	r7,r4,10dd4 <_malloc_r+0x530>
   10dcc:	10800217 	ldw	r2,8(r2)
   10dd0:	28bffb1e 	bne	r5,r2,10dc0 <_gp+0xffff1e04>
   10dd4:	11800317 	ldw	r6,12(r2)
   10dd8:	99000117 	ldw	r4,4(r19)
   10ddc:	81800315 	stw	r6,12(r16)
   10de0:	80800215 	stw	r2,8(r16)
   10de4:	34000215 	stw	r16,8(r6)
   10de8:	14000315 	stw	r16,12(r2)
   10dec:	003f2706 	br	10a8c <_gp+0xffff1ad0>
   10df0:	88c00054 	ori	r3,r17,1
   10df4:	80c00115 	stw	r3,4(r16)
   10df8:	8463883a 	add	r17,r16,r17
   10dfc:	34400515 	stw	r17,20(r6)
   10e00:	34400415 	stw	r17,16(r6)
   10e04:	10c00054 	ori	r3,r2,1
   10e08:	8a400315 	stw	r9,12(r17)
   10e0c:	8a400215 	stw	r9,8(r17)
   10e10:	88c00115 	stw	r3,4(r17)
   10e14:	88a3883a 	add	r17,r17,r2
   10e18:	88800015 	stw	r2,0(r17)
   10e1c:	9009883a 	mov	r4,r18
   10e20:	00133e40 	call	133e4 <__malloc_unlock>
   10e24:	80800204 	addi	r2,r16,8
   10e28:	003ecb06 	br	10958 <_gp+0xffff199c>
   10e2c:	31000117 	ldw	r4,4(r6)
   10e30:	003f1606 	br	10a8c <_gp+0xffff1ad0>
   10e34:	63000044 	addi	r12,r12,1
   10e38:	608000cc 	andi	r2,r12,3
   10e3c:	5ac00204 	addi	r11,r11,8
   10e40:	103f2a1e 	bne	r2,zero,10aec <_gp+0xffff1b30>
   10e44:	00002106 	br	10ecc <_malloc_r+0x628>
   10e48:	80800204 	addi	r2,r16,8
   10e4c:	84000517 	ldw	r16,20(r16)
   10e50:	143eb31e 	bne	r2,r16,10920 <_gp+0xffff1964>
   10e54:	18c00084 	addi	r3,r3,2
   10e58:	003eec06 	br	10a0c <_gp+0xffff1a50>
   10e5c:	8085883a 	add	r2,r16,r2
   10e60:	10c00117 	ldw	r3,4(r2)
   10e64:	81000317 	ldw	r4,12(r16)
   10e68:	81400217 	ldw	r5,8(r16)
   10e6c:	18c00054 	ori	r3,r3,1
   10e70:	10c00115 	stw	r3,4(r2)
   10e74:	29000315 	stw	r4,12(r5)
   10e78:	21400215 	stw	r5,8(r4)
   10e7c:	9009883a 	mov	r4,r18
   10e80:	00133e40 	call	133e4 <__malloc_unlock>
   10e84:	80800204 	addi	r2,r16,8
   10e88:	003eb306 	br	10958 <_gp+0xffff199c>
   10e8c:	19c016c4 	addi	r7,r3,91
   10e90:	39cb883a 	add	r5,r7,r7
   10e94:	003ec706 	br	109b4 <_gp+0xffff19f8>
   10e98:	3804d1ba 	srli	r2,r7,6
   10e9c:	11000e04 	addi	r4,r2,56
   10ea0:	210b883a 	add	r5,r4,r4
   10ea4:	003fbe06 	br	10da0 <_gp+0xffff1de4>
   10ea8:	84ff5d26 	beq	r16,r19,10c20 <_gp+0xffff1c64>
   10eac:	9c000217 	ldw	r16,8(r19)
   10eb0:	00bfff04 	movi	r2,-4
   10eb4:	80c00117 	ldw	r3,4(r16)
   10eb8:	1886703a 	and	r3,r3,r2
   10ebc:	003f9706 	br	10d1c <_gp+0xffff1d60>
   10ec0:	52800017 	ldw	r10,0(r10)
   10ec4:	18ffffc4 	addi	r3,r3,-1
   10ec8:	50805c1e 	bne	r10,r2,1103c <_malloc_r+0x798>
   10ecc:	190000cc 	andi	r4,r3,3
   10ed0:	50bffe04 	addi	r2,r10,-8
   10ed4:	203ffa1e 	bne	r4,zero,10ec0 <_gp+0xffff1f04>
   10ed8:	98800117 	ldw	r2,4(r19)
   10edc:	0146303a 	nor	r3,zero,r5
   10ee0:	1884703a 	and	r2,r3,r2
   10ee4:	98800115 	stw	r2,4(r19)
   10ee8:	294b883a 	add	r5,r5,r5
   10eec:	117f2e36 	bltu	r2,r5,10ba8 <_gp+0xffff1bec>
   10ef0:	283f2d26 	beq	r5,zero,10ba8 <_gp+0xffff1bec>
   10ef4:	1146703a 	and	r3,r2,r5
   10ef8:	1800521e 	bne	r3,zero,11044 <_malloc_r+0x7a0>
   10efc:	6007883a 	mov	r3,r12
   10f00:	294b883a 	add	r5,r5,r5
   10f04:	1148703a 	and	r4,r2,r5
   10f08:	18c00104 	addi	r3,r3,4
   10f0c:	203ffc26 	beq	r4,zero,10f00 <_gp+0xffff1f44>
   10f10:	003ef006 	br	10ad4 <_gp+0xffff1b18>
   10f14:	00805504 	movi	r2,340
   10f18:	10c01336 	bltu	r2,r3,10f68 <_malloc_r+0x6c4>
   10f1c:	8806d3fa 	srli	r3,r17,15
   10f20:	19c01dc4 	addi	r7,r3,119
   10f24:	39cb883a 	add	r5,r7,r7
   10f28:	003ea206 	br	109b4 <_gp+0xffff19f8>
   10f2c:	00c40004 	movi	r3,4096
   10f30:	003f4d06 	br	10c68 <_gp+0xffff1cac>
   10f34:	00800044 	movi	r2,1
   10f38:	a0800115 	stw	r2,4(r20)
   10f3c:	a021883a 	mov	r16,r20
   10f40:	0007883a 	mov	r3,zero
   10f44:	003f7506 	br	10d1c <_gp+0xffff1d60>
   10f48:	200bd0ba 	srai	r5,r4,2
   10f4c:	01800044 	movi	r6,1
   10f50:	41000117 	ldw	r4,4(r8)
   10f54:	314a983a 	sll	r5,r6,r5
   10f58:	100d883a 	mov	r6,r2
   10f5c:	2908b03a 	or	r4,r5,r4
   10f60:	41000115 	stw	r4,4(r8)
   10f64:	003f9d06 	br	10ddc <_gp+0xffff1e20>
   10f68:	00815504 	movi	r2,1364
   10f6c:	10c01336 	bltu	r2,r3,10fbc <_malloc_r+0x718>
   10f70:	8806d4ba 	srli	r3,r17,18
   10f74:	19c01f04 	addi	r7,r3,124
   10f78:	39cb883a 	add	r5,r7,r7
   10f7c:	003e8d06 	br	109b4 <_gp+0xffff19f8>
   10f80:	ad400404 	addi	r21,r21,16
   10f84:	003f1d06 	br	10bfc <_gp+0xffff1c40>
   10f88:	01001504 	movi	r4,84
   10f8c:	20801c36 	bltu	r4,r2,11000 <_malloc_r+0x75c>
   10f90:	3804d33a 	srli	r2,r7,12
   10f94:	11001b84 	addi	r4,r2,110
   10f98:	210b883a 	add	r5,r4,r4
   10f9c:	003f8006 	br	10da0 <_gp+0xffff1de4>
   10fa0:	3083ffcc 	andi	r2,r6,4095
   10fa4:	103f241e 	bne	r2,zero,10c38 <_gp+0xffff1c7c>
   10fa8:	99000217 	ldw	r4,8(r19)
   10fac:	ad85883a 	add	r2,r21,r22
   10fb0:	10800054 	ori	r2,r2,1
   10fb4:	20800115 	stw	r2,4(r4)
   10fb8:	003f4a06 	br	10ce4 <_gp+0xffff1d28>
   10fbc:	01403f04 	movi	r5,252
   10fc0:	01c01f84 	movi	r7,126
   10fc4:	003e7b06 	br	109b4 <_gp+0xffff19f8>
   10fc8:	00c00044 	movi	r3,1
   10fcc:	002b883a 	mov	r21,zero
   10fd0:	003f3006 	br	10c94 <_gp+0xffff1cd8>
   10fd4:	00800074 	movhi	r2,1
   10fd8:	109bf104 	addi	r2,r2,28612
   10fdc:	15000015 	stw	r20,0(r2)
   10fe0:	003f1b06 	br	10c50 <_gp+0xffff1c94>
   10fe4:	9009883a 	mov	r4,r18
   10fe8:	81400204 	addi	r5,r16,8
   10fec:	001221c0 	call	1221c <_free_r>
   10ff0:	008000b4 	movhi	r2,2
   10ff4:	10a2a304 	addi	r2,r2,-30068
   10ff8:	10c00017 	ldw	r3,0(r2)
   10ffc:	003f3906 	br	10ce4 <_gp+0xffff1d28>
   11000:	01005504 	movi	r4,340
   11004:	20800436 	bltu	r4,r2,11018 <_malloc_r+0x774>
   11008:	3804d3fa 	srli	r2,r7,15
   1100c:	11001dc4 	addi	r4,r2,119
   11010:	210b883a 	add	r5,r4,r4
   11014:	003f6206 	br	10da0 <_gp+0xffff1de4>
   11018:	01015504 	movi	r4,1364
   1101c:	20800436 	bltu	r4,r2,11030 <_malloc_r+0x78c>
   11020:	3804d4ba 	srli	r2,r7,18
   11024:	11001f04 	addi	r4,r2,124
   11028:	210b883a 	add	r5,r4,r4
   1102c:	003f5c06 	br	10da0 <_gp+0xffff1de4>
   11030:	01403f04 	movi	r5,252
   11034:	01001f84 	movi	r4,126
   11038:	003f5906 	br	10da0 <_gp+0xffff1de4>
   1103c:	98800117 	ldw	r2,4(r19)
   11040:	003fa906 	br	10ee8 <_gp+0xffff1f2c>
   11044:	6007883a 	mov	r3,r12
   11048:	003ea206 	br	10ad4 <_gp+0xffff1b18>

0001104c <memchr>:
   1104c:	208000cc 	andi	r2,r4,3
   11050:	280f883a 	mov	r7,r5
   11054:	10003526 	beq	r2,zero,1112c <memchr+0xe0>
   11058:	30bfffc4 	addi	r2,r6,-1
   1105c:	30001b26 	beq	r6,zero,110cc <memchr+0x80>
   11060:	21800003 	ldbu	r6,0(r4)
   11064:	28c03fcc 	andi	r3,r5,255
   11068:	30c01a26 	beq	r6,r3,110d4 <memchr+0x88>
   1106c:	180d883a 	mov	r6,r3
   11070:	00000406 	br	11084 <memchr+0x38>
   11074:	10001526 	beq	r2,zero,110cc <memchr+0x80>
   11078:	20c00003 	ldbu	r3,0(r4)
   1107c:	10bfffc4 	addi	r2,r2,-1
   11080:	19801426 	beq	r3,r6,110d4 <memchr+0x88>
   11084:	21000044 	addi	r4,r4,1
   11088:	20c000cc 	andi	r3,r4,3
   1108c:	183ff91e 	bne	r3,zero,11074 <_gp+0xffff20b8>
   11090:	024000c4 	movi	r9,3
   11094:	48801136 	bltu	r9,r2,110dc <memchr+0x90>
   11098:	10000c26 	beq	r2,zero,110cc <memchr+0x80>
   1109c:	20c00003 	ldbu	r3,0(r4)
   110a0:	29403fcc 	andi	r5,r5,255
   110a4:	19400b26 	beq	r3,r5,110d4 <memchr+0x88>
   110a8:	20c00044 	addi	r3,r4,1
   110ac:	2085883a 	add	r2,r4,r2
   110b0:	39803fcc 	andi	r6,r7,255
   110b4:	00000306 	br	110c4 <memchr+0x78>
   110b8:	18c00044 	addi	r3,r3,1
   110bc:	197fffc3 	ldbu	r5,-1(r3)
   110c0:	29800426 	beq	r5,r6,110d4 <memchr+0x88>
   110c4:	1809883a 	mov	r4,r3
   110c8:	18bffb1e 	bne	r3,r2,110b8 <_gp+0xffff20fc>
   110cc:	0005883a 	mov	r2,zero
   110d0:	f800283a 	ret
   110d4:	2005883a 	mov	r2,r4
   110d8:	f800283a 	ret
   110dc:	28c03fcc 	andi	r3,r5,255
   110e0:	1810923a 	slli	r8,r3,8
   110e4:	02ffbff4 	movhi	r11,65279
   110e8:	02a02074 	movhi	r10,32897
   110ec:	40c6b03a 	or	r3,r8,r3
   110f0:	1810943a 	slli	r8,r3,16
   110f4:	5affbfc4 	addi	r11,r11,-257
   110f8:	52a02004 	addi	r10,r10,-32640
   110fc:	40d0b03a 	or	r8,r8,r3
   11100:	20c00017 	ldw	r3,0(r4)
   11104:	40c6f03a 	xor	r3,r8,r3
   11108:	1acd883a 	add	r6,r3,r11
   1110c:	00c6303a 	nor	r3,zero,r3
   11110:	30c6703a 	and	r3,r6,r3
   11114:	1a86703a 	and	r3,r3,r10
   11118:	183fdf1e 	bne	r3,zero,11098 <_gp+0xffff20dc>
   1111c:	10bfff04 	addi	r2,r2,-4
   11120:	21000104 	addi	r4,r4,4
   11124:	48bff636 	bltu	r9,r2,11100 <_gp+0xffff2144>
   11128:	003fdb06 	br	11098 <_gp+0xffff20dc>
   1112c:	3005883a 	mov	r2,r6
   11130:	003fd706 	br	11090 <_gp+0xffff20d4>

00011134 <memcpy>:
   11134:	deffff04 	addi	sp,sp,-4
   11138:	dc000015 	stw	r16,0(sp)
   1113c:	00c003c4 	movi	r3,15
   11140:	2005883a 	mov	r2,r4
   11144:	1980432e 	bgeu	r3,r6,11254 <memcpy+0x120>
   11148:	2146b03a 	or	r3,r4,r5
   1114c:	18c000cc 	andi	r3,r3,3
   11150:	1800421e 	bne	r3,zero,1125c <memcpy+0x128>
   11154:	343ffc04 	addi	r16,r6,-16
   11158:	8020d13a 	srli	r16,r16,4
   1115c:	28c00104 	addi	r3,r5,4
   11160:	23400104 	addi	r13,r4,4
   11164:	801e913a 	slli	r15,r16,4
   11168:	2b000204 	addi	r12,r5,8
   1116c:	22c00204 	addi	r11,r4,8
   11170:	7bc00504 	addi	r15,r15,20
   11174:	2a800304 	addi	r10,r5,12
   11178:	22400304 	addi	r9,r4,12
   1117c:	2bdf883a 	add	r15,r5,r15
   11180:	2811883a 	mov	r8,r5
   11184:	200f883a 	mov	r7,r4
   11188:	41000017 	ldw	r4,0(r8)
   1118c:	39c00404 	addi	r7,r7,16
   11190:	18c00404 	addi	r3,r3,16
   11194:	393ffc15 	stw	r4,-16(r7)
   11198:	1bbffc17 	ldw	r14,-16(r3)
   1119c:	6b400404 	addi	r13,r13,16
   111a0:	5ac00404 	addi	r11,r11,16
   111a4:	6bbffc15 	stw	r14,-16(r13)
   111a8:	63800017 	ldw	r14,0(r12)
   111ac:	4a400404 	addi	r9,r9,16
   111b0:	42000404 	addi	r8,r8,16
   111b4:	5bbffc15 	stw	r14,-16(r11)
   111b8:	53800017 	ldw	r14,0(r10)
   111bc:	63000404 	addi	r12,r12,16
   111c0:	52800404 	addi	r10,r10,16
   111c4:	4bbffc15 	stw	r14,-16(r9)
   111c8:	1bffef1e 	bne	r3,r15,11188 <_gp+0xffff21cc>
   111cc:	81c00044 	addi	r7,r16,1
   111d0:	380e913a 	slli	r7,r7,4
   111d4:	310003cc 	andi	r4,r6,15
   111d8:	02c000c4 	movi	r11,3
   111dc:	11c7883a 	add	r3,r2,r7
   111e0:	29cb883a 	add	r5,r5,r7
   111e4:	59001f2e 	bgeu	r11,r4,11264 <memcpy+0x130>
   111e8:	1813883a 	mov	r9,r3
   111ec:	2811883a 	mov	r8,r5
   111f0:	200f883a 	mov	r7,r4
   111f4:	42800017 	ldw	r10,0(r8)
   111f8:	4a400104 	addi	r9,r9,4
   111fc:	39ffff04 	addi	r7,r7,-4
   11200:	4abfff15 	stw	r10,-4(r9)
   11204:	42000104 	addi	r8,r8,4
   11208:	59fffa36 	bltu	r11,r7,111f4 <_gp+0xffff2238>
   1120c:	213fff04 	addi	r4,r4,-4
   11210:	2008d0ba 	srli	r4,r4,2
   11214:	318000cc 	andi	r6,r6,3
   11218:	21000044 	addi	r4,r4,1
   1121c:	2109883a 	add	r4,r4,r4
   11220:	2109883a 	add	r4,r4,r4
   11224:	1907883a 	add	r3,r3,r4
   11228:	290b883a 	add	r5,r5,r4
   1122c:	30000626 	beq	r6,zero,11248 <memcpy+0x114>
   11230:	198d883a 	add	r6,r3,r6
   11234:	29c00003 	ldbu	r7,0(r5)
   11238:	18c00044 	addi	r3,r3,1
   1123c:	29400044 	addi	r5,r5,1
   11240:	19ffffc5 	stb	r7,-1(r3)
   11244:	19bffb1e 	bne	r3,r6,11234 <_gp+0xffff2278>
   11248:	dc000017 	ldw	r16,0(sp)
   1124c:	dec00104 	addi	sp,sp,4
   11250:	f800283a 	ret
   11254:	2007883a 	mov	r3,r4
   11258:	003ff406 	br	1122c <_gp+0xffff2270>
   1125c:	2007883a 	mov	r3,r4
   11260:	003ff306 	br	11230 <_gp+0xffff2274>
   11264:	200d883a 	mov	r6,r4
   11268:	003ff006 	br	1122c <_gp+0xffff2270>

0001126c <memmove>:
   1126c:	2005883a 	mov	r2,r4
   11270:	29000b2e 	bgeu	r5,r4,112a0 <memmove+0x34>
   11274:	298f883a 	add	r7,r5,r6
   11278:	21c0092e 	bgeu	r4,r7,112a0 <memmove+0x34>
   1127c:	2187883a 	add	r3,r4,r6
   11280:	198bc83a 	sub	r5,r3,r6
   11284:	30004b26 	beq	r6,zero,113b4 <memmove+0x148>
   11288:	39ffffc4 	addi	r7,r7,-1
   1128c:	39000003 	ldbu	r4,0(r7)
   11290:	18ffffc4 	addi	r3,r3,-1
   11294:	19000005 	stb	r4,0(r3)
   11298:	197ffb1e 	bne	r3,r5,11288 <_gp+0xffff22cc>
   1129c:	f800283a 	ret
   112a0:	00c003c4 	movi	r3,15
   112a4:	1980412e 	bgeu	r3,r6,113ac <memmove+0x140>
   112a8:	1146b03a 	or	r3,r2,r5
   112ac:	18c000cc 	andi	r3,r3,3
   112b0:	1800411e 	bne	r3,zero,113b8 <memmove+0x14c>
   112b4:	33fffc04 	addi	r15,r6,-16
   112b8:	781ed13a 	srli	r15,r15,4
   112bc:	28c00104 	addi	r3,r5,4
   112c0:	13400104 	addi	r13,r2,4
   112c4:	781c913a 	slli	r14,r15,4
   112c8:	2b000204 	addi	r12,r5,8
   112cc:	12c00204 	addi	r11,r2,8
   112d0:	73800504 	addi	r14,r14,20
   112d4:	2a800304 	addi	r10,r5,12
   112d8:	12400304 	addi	r9,r2,12
   112dc:	2b9d883a 	add	r14,r5,r14
   112e0:	2811883a 	mov	r8,r5
   112e4:	100f883a 	mov	r7,r2
   112e8:	41000017 	ldw	r4,0(r8)
   112ec:	39c00404 	addi	r7,r7,16
   112f0:	18c00404 	addi	r3,r3,16
   112f4:	393ffc15 	stw	r4,-16(r7)
   112f8:	193ffc17 	ldw	r4,-16(r3)
   112fc:	6b400404 	addi	r13,r13,16
   11300:	5ac00404 	addi	r11,r11,16
   11304:	693ffc15 	stw	r4,-16(r13)
   11308:	61000017 	ldw	r4,0(r12)
   1130c:	4a400404 	addi	r9,r9,16
   11310:	42000404 	addi	r8,r8,16
   11314:	593ffc15 	stw	r4,-16(r11)
   11318:	51000017 	ldw	r4,0(r10)
   1131c:	63000404 	addi	r12,r12,16
   11320:	52800404 	addi	r10,r10,16
   11324:	493ffc15 	stw	r4,-16(r9)
   11328:	1bbfef1e 	bne	r3,r14,112e8 <_gp+0xffff232c>
   1132c:	79000044 	addi	r4,r15,1
   11330:	2008913a 	slli	r4,r4,4
   11334:	328003cc 	andi	r10,r6,15
   11338:	02c000c4 	movi	r11,3
   1133c:	1107883a 	add	r3,r2,r4
   11340:	290b883a 	add	r5,r5,r4
   11344:	5a801e2e 	bgeu	r11,r10,113c0 <memmove+0x154>
   11348:	1813883a 	mov	r9,r3
   1134c:	2811883a 	mov	r8,r5
   11350:	500f883a 	mov	r7,r10
   11354:	41000017 	ldw	r4,0(r8)
   11358:	4a400104 	addi	r9,r9,4
   1135c:	39ffff04 	addi	r7,r7,-4
   11360:	493fff15 	stw	r4,-4(r9)
   11364:	42000104 	addi	r8,r8,4
   11368:	59fffa36 	bltu	r11,r7,11354 <_gp+0xffff2398>
   1136c:	513fff04 	addi	r4,r10,-4
   11370:	2008d0ba 	srli	r4,r4,2
   11374:	318000cc 	andi	r6,r6,3
   11378:	21000044 	addi	r4,r4,1
   1137c:	2109883a 	add	r4,r4,r4
   11380:	2109883a 	add	r4,r4,r4
   11384:	1907883a 	add	r3,r3,r4
   11388:	290b883a 	add	r5,r5,r4
   1138c:	30000926 	beq	r6,zero,113b4 <memmove+0x148>
   11390:	198d883a 	add	r6,r3,r6
   11394:	29c00003 	ldbu	r7,0(r5)
   11398:	18c00044 	addi	r3,r3,1
   1139c:	29400044 	addi	r5,r5,1
   113a0:	19ffffc5 	stb	r7,-1(r3)
   113a4:	19bffb1e 	bne	r3,r6,11394 <_gp+0xffff23d8>
   113a8:	f800283a 	ret
   113ac:	1007883a 	mov	r3,r2
   113b0:	003ff606 	br	1138c <_gp+0xffff23d0>
   113b4:	f800283a 	ret
   113b8:	1007883a 	mov	r3,r2
   113bc:	003ff406 	br	11390 <_gp+0xffff23d4>
   113c0:	500d883a 	mov	r6,r10
   113c4:	003ff106 	br	1138c <_gp+0xffff23d0>

000113c8 <_realloc_r>:
   113c8:	defff604 	addi	sp,sp,-40
   113cc:	dcc00315 	stw	r19,12(sp)
   113d0:	dc400115 	stw	r17,4(sp)
   113d4:	dfc00915 	stw	ra,36(sp)
   113d8:	df000815 	stw	fp,32(sp)
   113dc:	ddc00715 	stw	r23,28(sp)
   113e0:	dd800615 	stw	r22,24(sp)
   113e4:	dd400515 	stw	r21,20(sp)
   113e8:	dd000415 	stw	r20,16(sp)
   113ec:	dc800215 	stw	r18,8(sp)
   113f0:	dc000015 	stw	r16,0(sp)
   113f4:	2827883a 	mov	r19,r5
   113f8:	3023883a 	mov	r17,r6
   113fc:	2800bf26 	beq	r5,zero,116fc <_realloc_r+0x334>
   11400:	2025883a 	mov	r18,r4
   11404:	00133c40 	call	133c4 <__malloc_lock>
   11408:	98ffff17 	ldw	r3,-4(r19)
   1140c:	01bfff04 	movi	r6,-4
   11410:	890002c4 	addi	r4,r17,11
   11414:	01c00584 	movi	r7,22
   11418:	9d7ffe04 	addi	r21,r19,-8
   1141c:	19a0703a 	and	r16,r3,r6
   11420:	39003f2e 	bgeu	r7,r4,11520 <_realloc_r+0x158>
   11424:	053ffe04 	movi	r20,-8
   11428:	2528703a 	and	r20,r4,r20
   1142c:	a00f883a 	mov	r7,r20
   11430:	a0008216 	blt	r20,zero,1163c <_realloc_r+0x274>
   11434:	a4408136 	bltu	r20,r17,1163c <_realloc_r+0x274>
   11438:	81c03c0e 	bge	r16,r7,1152c <_realloc_r+0x164>
   1143c:	07000074 	movhi	fp,1
   11440:	e7166b04 	addi	fp,fp,22956
   11444:	e1000217 	ldw	r4,8(fp)
   11448:	ac05883a 	add	r2,r21,r16
   1144c:	2080bf26 	beq	r4,r2,1174c <_realloc_r+0x384>
   11450:	11000117 	ldw	r4,4(r2)
   11454:	023fff84 	movi	r8,-2
   11458:	2210703a 	and	r8,r4,r8
   1145c:	1211883a 	add	r8,r2,r8
   11460:	41400117 	ldw	r5,4(r8)
   11464:	2940004c 	andi	r5,r5,1
   11468:	28004a1e 	bne	r5,zero,11594 <_realloc_r+0x1cc>
   1146c:	017fff04 	movi	r5,-4
   11470:	2148703a 	and	r4,r4,r5
   11474:	2409883a 	add	r4,r4,r16
   11478:	21c0ad0e 	bge	r4,r7,11730 <_realloc_r+0x368>
   1147c:	18c0004c 	andi	r3,r3,1
   11480:	18007f1e 	bne	r3,zero,11680 <_realloc_r+0x2b8>
   11484:	9dfffe17 	ldw	r23,-8(r19)
   11488:	adefc83a 	sub	r23,r21,r23
   1148c:	bd800117 	ldw	r22,4(r23)
   11490:	b14a703a 	and	r5,r22,r5
   11494:	216d883a 	add	r22,r4,r5
   11498:	b1c04516 	blt	r22,r7,115b0 <_realloc_r+0x1e8>
   1149c:	10c00317 	ldw	r3,12(r2)
   114a0:	10800217 	ldw	r2,8(r2)
   114a4:	81bfff04 	addi	r6,r16,-4
   114a8:	bc400204 	addi	r17,r23,8
   114ac:	10c00315 	stw	r3,12(r2)
   114b0:	18800215 	stw	r2,8(r3)
   114b4:	b9400217 	ldw	r5,8(r23)
   114b8:	b8c00317 	ldw	r3,12(r23)
   114bc:	00800904 	movi	r2,36
   114c0:	28c00315 	stw	r3,12(r5)
   114c4:	19400215 	stw	r5,8(r3)
   114c8:	1180ef36 	bltu	r2,r6,11888 <_realloc_r+0x4c0>
   114cc:	008004c4 	movi	r2,19
   114d0:	1180da2e 	bgeu	r2,r6,1183c <_realloc_r+0x474>
   114d4:	98800017 	ldw	r2,0(r19)
   114d8:	b8800215 	stw	r2,8(r23)
   114dc:	98800117 	ldw	r2,4(r19)
   114e0:	b8800315 	stw	r2,12(r23)
   114e4:	008006c4 	movi	r2,27
   114e8:	1180fc2e 	bgeu	r2,r6,118dc <_realloc_r+0x514>
   114ec:	98800217 	ldw	r2,8(r19)
   114f0:	b8800415 	stw	r2,16(r23)
   114f4:	98800317 	ldw	r2,12(r19)
   114f8:	b8800515 	stw	r2,20(r23)
   114fc:	00800904 	movi	r2,36
   11500:	3080421e 	bne	r6,r2,1160c <_realloc_r+0x244>
   11504:	98800417 	ldw	r2,16(r19)
   11508:	9cc00604 	addi	r19,r19,24
   1150c:	b8c00804 	addi	r3,r23,32
   11510:	b8800615 	stw	r2,24(r23)
   11514:	98bfff17 	ldw	r2,-4(r19)
   11518:	b8800715 	stw	r2,28(r23)
   1151c:	00003d06 	br	11614 <_realloc_r+0x24c>
   11520:	01c00404 	movi	r7,16
   11524:	3829883a 	mov	r20,r7
   11528:	003fc206 	br	11434 <_gp+0xffff2478>
   1152c:	9823883a 	mov	r17,r19
   11530:	850fc83a 	sub	r7,r16,r20
   11534:	008003c4 	movi	r2,15
   11538:	18c0004c 	andi	r3,r3,1
   1153c:	11c04336 	bltu	r2,r7,1164c <_realloc_r+0x284>
   11540:	1c06b03a 	or	r3,r3,r16
   11544:	a8c00115 	stw	r3,4(r21)
   11548:	ac21883a 	add	r16,r21,r16
   1154c:	80c00117 	ldw	r3,4(r16)
   11550:	18c00054 	ori	r3,r3,1
   11554:	80c00115 	stw	r3,4(r16)
   11558:	9009883a 	mov	r4,r18
   1155c:	00133e40 	call	133e4 <__malloc_unlock>
   11560:	8805883a 	mov	r2,r17
   11564:	dfc00917 	ldw	ra,36(sp)
   11568:	df000817 	ldw	fp,32(sp)
   1156c:	ddc00717 	ldw	r23,28(sp)
   11570:	dd800617 	ldw	r22,24(sp)
   11574:	dd400517 	ldw	r21,20(sp)
   11578:	dd000417 	ldw	r20,16(sp)
   1157c:	dcc00317 	ldw	r19,12(sp)
   11580:	dc800217 	ldw	r18,8(sp)
   11584:	dc400117 	ldw	r17,4(sp)
   11588:	dc000017 	ldw	r16,0(sp)
   1158c:	dec00a04 	addi	sp,sp,40
   11590:	f800283a 	ret
   11594:	18c0004c 	andi	r3,r3,1
   11598:	1800391e 	bne	r3,zero,11680 <_realloc_r+0x2b8>
   1159c:	9dfffe17 	ldw	r23,-8(r19)
   115a0:	00bfff04 	movi	r2,-4
   115a4:	adefc83a 	sub	r23,r21,r23
   115a8:	b9400117 	ldw	r5,4(r23)
   115ac:	288a703a 	and	r5,r5,r2
   115b0:	2c2d883a 	add	r22,r5,r16
   115b4:	b1c03216 	blt	r22,r7,11680 <_realloc_r+0x2b8>
   115b8:	b8800317 	ldw	r2,12(r23)
   115bc:	b8c00217 	ldw	r3,8(r23)
   115c0:	81bfff04 	addi	r6,r16,-4
   115c4:	01000904 	movi	r4,36
   115c8:	18800315 	stw	r2,12(r3)
   115cc:	10c00215 	stw	r3,8(r2)
   115d0:	bc400204 	addi	r17,r23,8
   115d4:	2180ac36 	bltu	r4,r6,11888 <_realloc_r+0x4c0>
   115d8:	008004c4 	movi	r2,19
   115dc:	1180972e 	bgeu	r2,r6,1183c <_realloc_r+0x474>
   115e0:	98800017 	ldw	r2,0(r19)
   115e4:	b8800215 	stw	r2,8(r23)
   115e8:	98800117 	ldw	r2,4(r19)
   115ec:	b8800315 	stw	r2,12(r23)
   115f0:	008006c4 	movi	r2,27
   115f4:	1180b92e 	bgeu	r2,r6,118dc <_realloc_r+0x514>
   115f8:	98800217 	ldw	r2,8(r19)
   115fc:	b8800415 	stw	r2,16(r23)
   11600:	98800317 	ldw	r2,12(r19)
   11604:	b8800515 	stw	r2,20(r23)
   11608:	313fbe26 	beq	r6,r4,11504 <_gp+0xffff2548>
   1160c:	b8c00604 	addi	r3,r23,24
   11610:	9cc00404 	addi	r19,r19,16
   11614:	98800017 	ldw	r2,0(r19)
   11618:	b021883a 	mov	r16,r22
   1161c:	b82b883a 	mov	r21,r23
   11620:	18800015 	stw	r2,0(r3)
   11624:	98800117 	ldw	r2,4(r19)
   11628:	18800115 	stw	r2,4(r3)
   1162c:	98800217 	ldw	r2,8(r19)
   11630:	18800215 	stw	r2,8(r3)
   11634:	b8c00117 	ldw	r3,4(r23)
   11638:	003fbd06 	br	11530 <_gp+0xffff2574>
   1163c:	00800304 	movi	r2,12
   11640:	90800015 	stw	r2,0(r18)
   11644:	0005883a 	mov	r2,zero
   11648:	003fc606 	br	11564 <_gp+0xffff25a8>
   1164c:	1d06b03a 	or	r3,r3,r20
   11650:	ad0b883a 	add	r5,r21,r20
   11654:	a8c00115 	stw	r3,4(r21)
   11658:	38800054 	ori	r2,r7,1
   1165c:	28800115 	stw	r2,4(r5)
   11660:	29cf883a 	add	r7,r5,r7
   11664:	38800117 	ldw	r2,4(r7)
   11668:	9009883a 	mov	r4,r18
   1166c:	29400204 	addi	r5,r5,8
   11670:	10800054 	ori	r2,r2,1
   11674:	38800115 	stw	r2,4(r7)
   11678:	001221c0 	call	1221c <_free_r>
   1167c:	003fb606 	br	11558 <_gp+0xffff259c>
   11680:	880b883a 	mov	r5,r17
   11684:	9009883a 	mov	r4,r18
   11688:	00108a40 	call	108a4 <_malloc_r>
   1168c:	1023883a 	mov	r17,r2
   11690:	1000aa26 	beq	r2,zero,1193c <_realloc_r+0x574>
   11694:	98ffff17 	ldw	r3,-4(r19)
   11698:	113ffe04 	addi	r4,r2,-8
   1169c:	00bfff84 	movi	r2,-2
   116a0:	1884703a 	and	r2,r3,r2
   116a4:	a885883a 	add	r2,r21,r2
   116a8:	20808626 	beq	r4,r2,118c4 <_realloc_r+0x4fc>
   116ac:	81bfff04 	addi	r6,r16,-4
   116b0:	00800904 	movi	r2,36
   116b4:	11807036 	bltu	r2,r6,11878 <_realloc_r+0x4b0>
   116b8:	00c004c4 	movi	r3,19
   116bc:	19805636 	bltu	r3,r6,11818 <_realloc_r+0x450>
   116c0:	8805883a 	mov	r2,r17
   116c4:	9807883a 	mov	r3,r19
   116c8:	19000017 	ldw	r4,0(r3)
   116cc:	11000015 	stw	r4,0(r2)
   116d0:	19000117 	ldw	r4,4(r3)
   116d4:	11000115 	stw	r4,4(r2)
   116d8:	18c00217 	ldw	r3,8(r3)
   116dc:	10c00215 	stw	r3,8(r2)
   116e0:	980b883a 	mov	r5,r19
   116e4:	9009883a 	mov	r4,r18
   116e8:	001221c0 	call	1221c <_free_r>
   116ec:	9009883a 	mov	r4,r18
   116f0:	00133e40 	call	133e4 <__malloc_unlock>
   116f4:	8805883a 	mov	r2,r17
   116f8:	003f9a06 	br	11564 <_gp+0xffff25a8>
   116fc:	300b883a 	mov	r5,r6
   11700:	dfc00917 	ldw	ra,36(sp)
   11704:	df000817 	ldw	fp,32(sp)
   11708:	ddc00717 	ldw	r23,28(sp)
   1170c:	dd800617 	ldw	r22,24(sp)
   11710:	dd400517 	ldw	r21,20(sp)
   11714:	dd000417 	ldw	r20,16(sp)
   11718:	dcc00317 	ldw	r19,12(sp)
   1171c:	dc800217 	ldw	r18,8(sp)
   11720:	dc400117 	ldw	r17,4(sp)
   11724:	dc000017 	ldw	r16,0(sp)
   11728:	dec00a04 	addi	sp,sp,40
   1172c:	00108a41 	jmpi	108a4 <_malloc_r>
   11730:	11400317 	ldw	r5,12(r2)
   11734:	10800217 	ldw	r2,8(r2)
   11738:	9823883a 	mov	r17,r19
   1173c:	2021883a 	mov	r16,r4
   11740:	11400315 	stw	r5,12(r2)
   11744:	28800215 	stw	r2,8(r5)
   11748:	003f7906 	br	11530 <_gp+0xffff2574>
   1174c:	21000117 	ldw	r4,4(r4)
   11750:	00bfff04 	movi	r2,-4
   11754:	a1800404 	addi	r6,r20,16
   11758:	2088703a 	and	r4,r4,r2
   1175c:	2409883a 	add	r4,r4,r16
   11760:	2180380e 	bge	r4,r6,11844 <_realloc_r+0x47c>
   11764:	18c0004c 	andi	r3,r3,1
   11768:	183fc51e 	bne	r3,zero,11680 <_gp+0xffff26c4>
   1176c:	9dfffe17 	ldw	r23,-8(r19)
   11770:	adefc83a 	sub	r23,r21,r23
   11774:	b9400117 	ldw	r5,4(r23)
   11778:	288a703a 	and	r5,r5,r2
   1177c:	216d883a 	add	r22,r4,r5
   11780:	b1bf8b16 	blt	r22,r6,115b0 <_gp+0xffff25f4>
   11784:	b8800317 	ldw	r2,12(r23)
   11788:	b8c00217 	ldw	r3,8(r23)
   1178c:	81bfff04 	addi	r6,r16,-4
   11790:	01000904 	movi	r4,36
   11794:	18800315 	stw	r2,12(r3)
   11798:	10c00215 	stw	r3,8(r2)
   1179c:	bc400204 	addi	r17,r23,8
   117a0:	21805a36 	bltu	r4,r6,1190c <_realloc_r+0x544>
   117a4:	008004c4 	movi	r2,19
   117a8:	1180562e 	bgeu	r2,r6,11904 <_realloc_r+0x53c>
   117ac:	98800017 	ldw	r2,0(r19)
   117b0:	b8800215 	stw	r2,8(r23)
   117b4:	98800117 	ldw	r2,4(r19)
   117b8:	b8800315 	stw	r2,12(r23)
   117bc:	008006c4 	movi	r2,27
   117c0:	11805636 	bltu	r2,r6,1191c <_realloc_r+0x554>
   117c4:	b8800404 	addi	r2,r23,16
   117c8:	9cc00204 	addi	r19,r19,8
   117cc:	98c00017 	ldw	r3,0(r19)
   117d0:	10c00015 	stw	r3,0(r2)
   117d4:	98c00117 	ldw	r3,4(r19)
   117d8:	10c00115 	stw	r3,4(r2)
   117dc:	98c00217 	ldw	r3,8(r19)
   117e0:	10c00215 	stw	r3,8(r2)
   117e4:	bd07883a 	add	r3,r23,r20
   117e8:	b505c83a 	sub	r2,r22,r20
   117ec:	e0c00215 	stw	r3,8(fp)
   117f0:	10800054 	ori	r2,r2,1
   117f4:	18800115 	stw	r2,4(r3)
   117f8:	b8800117 	ldw	r2,4(r23)
   117fc:	9009883a 	mov	r4,r18
   11800:	1080004c 	andi	r2,r2,1
   11804:	a0a8b03a 	or	r20,r20,r2
   11808:	bd000115 	stw	r20,4(r23)
   1180c:	00133e40 	call	133e4 <__malloc_unlock>
   11810:	8805883a 	mov	r2,r17
   11814:	003f5306 	br	11564 <_gp+0xffff25a8>
   11818:	98c00017 	ldw	r3,0(r19)
   1181c:	88c00015 	stw	r3,0(r17)
   11820:	98c00117 	ldw	r3,4(r19)
   11824:	88c00115 	stw	r3,4(r17)
   11828:	00c006c4 	movi	r3,27
   1182c:	19801d36 	bltu	r3,r6,118a4 <_realloc_r+0x4dc>
   11830:	88800204 	addi	r2,r17,8
   11834:	98c00204 	addi	r3,r19,8
   11838:	003fa306 	br	116c8 <_gp+0xffff270c>
   1183c:	8807883a 	mov	r3,r17
   11840:	003f7406 	br	11614 <_gp+0xffff2658>
   11844:	ad2b883a 	add	r21,r21,r20
   11848:	2505c83a 	sub	r2,r4,r20
   1184c:	e5400215 	stw	r21,8(fp)
   11850:	10800054 	ori	r2,r2,1
   11854:	a8800115 	stw	r2,4(r21)
   11858:	98bfff17 	ldw	r2,-4(r19)
   1185c:	9009883a 	mov	r4,r18
   11860:	1080004c 	andi	r2,r2,1
   11864:	a0a8b03a 	or	r20,r20,r2
   11868:	9d3fff15 	stw	r20,-4(r19)
   1186c:	00133e40 	call	133e4 <__malloc_unlock>
   11870:	9805883a 	mov	r2,r19
   11874:	003f3b06 	br	11564 <_gp+0xffff25a8>
   11878:	8809883a 	mov	r4,r17
   1187c:	980b883a 	mov	r5,r19
   11880:	001126c0 	call	1126c <memmove>
   11884:	003f9606 	br	116e0 <_gp+0xffff2724>
   11888:	8809883a 	mov	r4,r17
   1188c:	980b883a 	mov	r5,r19
   11890:	001126c0 	call	1126c <memmove>
   11894:	b8c00117 	ldw	r3,4(r23)
   11898:	b021883a 	mov	r16,r22
   1189c:	b82b883a 	mov	r21,r23
   118a0:	003f2306 	br	11530 <_gp+0xffff2574>
   118a4:	98c00217 	ldw	r3,8(r19)
   118a8:	88c00215 	stw	r3,8(r17)
   118ac:	98c00317 	ldw	r3,12(r19)
   118b0:	88c00315 	stw	r3,12(r17)
   118b4:	30800c26 	beq	r6,r2,118e8 <_realloc_r+0x520>
   118b8:	88800404 	addi	r2,r17,16
   118bc:	98c00404 	addi	r3,r19,16
   118c0:	003f8106 	br	116c8 <_gp+0xffff270c>
   118c4:	893fff17 	ldw	r4,-4(r17)
   118c8:	00bfff04 	movi	r2,-4
   118cc:	9823883a 	mov	r17,r19
   118d0:	2084703a 	and	r2,r4,r2
   118d4:	80a1883a 	add	r16,r16,r2
   118d8:	003f1506 	br	11530 <_gp+0xffff2574>
   118dc:	b8c00404 	addi	r3,r23,16
   118e0:	9cc00204 	addi	r19,r19,8
   118e4:	003f4b06 	br	11614 <_gp+0xffff2658>
   118e8:	99000417 	ldw	r4,16(r19)
   118ec:	88800604 	addi	r2,r17,24
   118f0:	98c00604 	addi	r3,r19,24
   118f4:	89000415 	stw	r4,16(r17)
   118f8:	99000517 	ldw	r4,20(r19)
   118fc:	89000515 	stw	r4,20(r17)
   11900:	003f7106 	br	116c8 <_gp+0xffff270c>
   11904:	8805883a 	mov	r2,r17
   11908:	003fb006 	br	117cc <_gp+0xffff2810>
   1190c:	8809883a 	mov	r4,r17
   11910:	980b883a 	mov	r5,r19
   11914:	001126c0 	call	1126c <memmove>
   11918:	003fb206 	br	117e4 <_gp+0xffff2828>
   1191c:	98800217 	ldw	r2,8(r19)
   11920:	b8800415 	stw	r2,16(r23)
   11924:	98800317 	ldw	r2,12(r19)
   11928:	b8800515 	stw	r2,20(r23)
   1192c:	31000726 	beq	r6,r4,1194c <_realloc_r+0x584>
   11930:	b8800604 	addi	r2,r23,24
   11934:	9cc00404 	addi	r19,r19,16
   11938:	003fa406 	br	117cc <_gp+0xffff2810>
   1193c:	9009883a 	mov	r4,r18
   11940:	00133e40 	call	133e4 <__malloc_unlock>
   11944:	0005883a 	mov	r2,zero
   11948:	003f0606 	br	11564 <_gp+0xffff25a8>
   1194c:	98c00417 	ldw	r3,16(r19)
   11950:	9cc00604 	addi	r19,r19,24
   11954:	b8800804 	addi	r2,r23,32
   11958:	b8c00615 	stw	r3,24(r23)
   1195c:	98ffff17 	ldw	r3,-4(r19)
   11960:	b8c00715 	stw	r3,28(r23)
   11964:	003f9906 	br	117cc <_gp+0xffff2810>

00011968 <_sbrk_r>:
   11968:	defffd04 	addi	sp,sp,-12
   1196c:	dc000015 	stw	r16,0(sp)
   11970:	040000b4 	movhi	r16,2
   11974:	dc400115 	stw	r17,4(sp)
   11978:	84229b04 	addi	r16,r16,-30100
   1197c:	2023883a 	mov	r17,r4
   11980:	2809883a 	mov	r4,r5
   11984:	dfc00215 	stw	ra,8(sp)
   11988:	80000015 	stw	zero,0(r16)
   1198c:	00135d80 	call	135d8 <sbrk>
   11990:	00ffffc4 	movi	r3,-1
   11994:	10c00526 	beq	r2,r3,119ac <_sbrk_r+0x44>
   11998:	dfc00217 	ldw	ra,8(sp)
   1199c:	dc400117 	ldw	r17,4(sp)
   119a0:	dc000017 	ldw	r16,0(sp)
   119a4:	dec00304 	addi	sp,sp,12
   119a8:	f800283a 	ret
   119ac:	80c00017 	ldw	r3,0(r16)
   119b0:	183ff926 	beq	r3,zero,11998 <_gp+0xffff29dc>
   119b4:	88c00015 	stw	r3,0(r17)
   119b8:	003ff706 	br	11998 <_gp+0xffff29dc>

000119bc <__swsetup_r>:
   119bc:	00800074 	movhi	r2,1
   119c0:	defffd04 	addi	sp,sp,-12
   119c4:	109bf004 	addi	r2,r2,28608
   119c8:	dc400115 	stw	r17,4(sp)
   119cc:	2023883a 	mov	r17,r4
   119d0:	11000017 	ldw	r4,0(r2)
   119d4:	dc000015 	stw	r16,0(sp)
   119d8:	dfc00215 	stw	ra,8(sp)
   119dc:	2821883a 	mov	r16,r5
   119e0:	20000226 	beq	r4,zero,119ec <__swsetup_r+0x30>
   119e4:	20c00e17 	ldw	r3,56(r4)
   119e8:	18002e26 	beq	r3,zero,11aa4 <__swsetup_r+0xe8>
   119ec:	8080030b 	ldhu	r2,12(r16)
   119f0:	10c0020c 	andi	r3,r2,8
   119f4:	100d883a 	mov	r6,r2
   119f8:	18000f26 	beq	r3,zero,11a38 <__swsetup_r+0x7c>
   119fc:	80c00417 	ldw	r3,16(r16)
   11a00:	18001526 	beq	r3,zero,11a58 <__swsetup_r+0x9c>
   11a04:	1100004c 	andi	r4,r2,1
   11a08:	20001c1e 	bne	r4,zero,11a7c <__swsetup_r+0xc0>
   11a0c:	1080008c 	andi	r2,r2,2
   11a10:	1000261e 	bne	r2,zero,11aac <__swsetup_r+0xf0>
   11a14:	80800517 	ldw	r2,20(r16)
   11a18:	80800215 	stw	r2,8(r16)
   11a1c:	18001c26 	beq	r3,zero,11a90 <__swsetup_r+0xd4>
   11a20:	0005883a 	mov	r2,zero
   11a24:	dfc00217 	ldw	ra,8(sp)
   11a28:	dc400117 	ldw	r17,4(sp)
   11a2c:	dc000017 	ldw	r16,0(sp)
   11a30:	dec00304 	addi	sp,sp,12
   11a34:	f800283a 	ret
   11a38:	3080040c 	andi	r2,r6,16
   11a3c:	10001726 	beq	r2,zero,11a9c <__swsetup_r+0xe0>
   11a40:	3080010c 	andi	r2,r6,4
   11a44:	10001b1e 	bne	r2,zero,11ab4 <__swsetup_r+0xf8>
   11a48:	80c00417 	ldw	r3,16(r16)
   11a4c:	30800214 	ori	r2,r6,8
   11a50:	8080030d 	sth	r2,12(r16)
   11a54:	183feb1e 	bne	r3,zero,11a04 <_gp+0xffff2a48>
   11a58:	1140a00c 	andi	r5,r2,640
   11a5c:	01008004 	movi	r4,512
   11a60:	293fe826 	beq	r5,r4,11a04 <_gp+0xffff2a48>
   11a64:	8809883a 	mov	r4,r17
   11a68:	800b883a 	mov	r5,r16
   11a6c:	001267c0 	call	1267c <__smakebuf_r>
   11a70:	8080030b 	ldhu	r2,12(r16)
   11a74:	80c00417 	ldw	r3,16(r16)
   11a78:	003fe206 	br	11a04 <_gp+0xffff2a48>
   11a7c:	80800517 	ldw	r2,20(r16)
   11a80:	80000215 	stw	zero,8(r16)
   11a84:	0085c83a 	sub	r2,zero,r2
   11a88:	80800615 	stw	r2,24(r16)
   11a8c:	183fe41e 	bne	r3,zero,11a20 <_gp+0xffff2a64>
   11a90:	8080030b 	ldhu	r2,12(r16)
   11a94:	1080200c 	andi	r2,r2,128
   11a98:	103fe226 	beq	r2,zero,11a24 <_gp+0xffff2a68>
   11a9c:	00bfffc4 	movi	r2,-1
   11aa0:	003fe006 	br	11a24 <_gp+0xffff2a68>
   11aa4:	00120a80 	call	120a8 <__sinit>
   11aa8:	003fd006 	br	119ec <_gp+0xffff2a30>
   11aac:	0005883a 	mov	r2,zero
   11ab0:	003fd906 	br	11a18 <_gp+0xffff2a5c>
   11ab4:	81400c17 	ldw	r5,48(r16)
   11ab8:	28000626 	beq	r5,zero,11ad4 <__swsetup_r+0x118>
   11abc:	80801004 	addi	r2,r16,64
   11ac0:	28800326 	beq	r5,r2,11ad0 <__swsetup_r+0x114>
   11ac4:	8809883a 	mov	r4,r17
   11ac8:	001221c0 	call	1221c <_free_r>
   11acc:	8180030b 	ldhu	r6,12(r16)
   11ad0:	80000c15 	stw	zero,48(r16)
   11ad4:	80c00417 	ldw	r3,16(r16)
   11ad8:	00bff6c4 	movi	r2,-37
   11adc:	118c703a 	and	r6,r2,r6
   11ae0:	80000115 	stw	zero,4(r16)
   11ae4:	80c00015 	stw	r3,0(r16)
   11ae8:	003fd806 	br	11a4c <_gp+0xffff2a90>

00011aec <_fflush_r>:
   11aec:	defffb04 	addi	sp,sp,-20
   11af0:	dcc00315 	stw	r19,12(sp)
   11af4:	dc000015 	stw	r16,0(sp)
   11af8:	dfc00415 	stw	ra,16(sp)
   11afc:	dc800215 	stw	r18,8(sp)
   11b00:	dc400115 	stw	r17,4(sp)
   11b04:	2027883a 	mov	r19,r4
   11b08:	2821883a 	mov	r16,r5
   11b0c:	20000226 	beq	r4,zero,11b18 <_fflush_r+0x2c>
   11b10:	20800e17 	ldw	r2,56(r4)
   11b14:	10005326 	beq	r2,zero,11c64 <_fflush_r+0x178>
   11b18:	8080030b 	ldhu	r2,12(r16)
   11b1c:	10ffffcc 	andi	r3,r2,65535
   11b20:	18e0001c 	xori	r3,r3,32768
   11b24:	18e00004 	addi	r3,r3,-32768
   11b28:	18002c26 	beq	r3,zero,11bdc <_fflush_r+0xf0>
   11b2c:	10c0020c 	andi	r3,r2,8
   11b30:	1800321e 	bne	r3,zero,11bfc <_fflush_r+0x110>
   11b34:	80c00117 	ldw	r3,4(r16)
   11b38:	10820014 	ori	r2,r2,2048
   11b3c:	8080030d 	sth	r2,12(r16)
   11b40:	00c0570e 	bge	zero,r3,11ca0 <_fflush_r+0x1b4>
   11b44:	82000a17 	ldw	r8,40(r16)
   11b48:	40002426 	beq	r8,zero,11bdc <_fflush_r+0xf0>
   11b4c:	9c400017 	ldw	r17,0(r19)
   11b50:	10c4000c 	andi	r3,r2,4096
   11b54:	98000015 	stw	zero,0(r19)
   11b58:	18004626 	beq	r3,zero,11c74 <_fflush_r+0x188>
   11b5c:	81801417 	ldw	r6,80(r16)
   11b60:	10c0010c 	andi	r3,r2,4
   11b64:	18000626 	beq	r3,zero,11b80 <_fflush_r+0x94>
   11b68:	80c00117 	ldw	r3,4(r16)
   11b6c:	80800c17 	ldw	r2,48(r16)
   11b70:	30cdc83a 	sub	r6,r6,r3
   11b74:	10000226 	beq	r2,zero,11b80 <_fflush_r+0x94>
   11b78:	80800f17 	ldw	r2,60(r16)
   11b7c:	308dc83a 	sub	r6,r6,r2
   11b80:	81400717 	ldw	r5,28(r16)
   11b84:	9809883a 	mov	r4,r19
   11b88:	000f883a 	mov	r7,zero
   11b8c:	403ee83a 	callr	r8
   11b90:	00ffffc4 	movi	r3,-1
   11b94:	10c04526 	beq	r2,r3,11cac <_fflush_r+0x1c0>
   11b98:	80c0030b 	ldhu	r3,12(r16)
   11b9c:	81000417 	ldw	r4,16(r16)
   11ba0:	80000115 	stw	zero,4(r16)
   11ba4:	197dffcc 	andi	r5,r3,63487
   11ba8:	8140030d 	sth	r5,12(r16)
   11bac:	81000015 	stw	r4,0(r16)
   11bb0:	18c4000c 	andi	r3,r3,4096
   11bb4:	18000126 	beq	r3,zero,11bbc <_fflush_r+0xd0>
   11bb8:	80801415 	stw	r2,80(r16)
   11bbc:	81400c17 	ldw	r5,48(r16)
   11bc0:	9c400015 	stw	r17,0(r19)
   11bc4:	28000526 	beq	r5,zero,11bdc <_fflush_r+0xf0>
   11bc8:	80801004 	addi	r2,r16,64
   11bcc:	28800226 	beq	r5,r2,11bd8 <_fflush_r+0xec>
   11bd0:	9809883a 	mov	r4,r19
   11bd4:	001221c0 	call	1221c <_free_r>
   11bd8:	80000c15 	stw	zero,48(r16)
   11bdc:	0005883a 	mov	r2,zero
   11be0:	dfc00417 	ldw	ra,16(sp)
   11be4:	dcc00317 	ldw	r19,12(sp)
   11be8:	dc800217 	ldw	r18,8(sp)
   11bec:	dc400117 	ldw	r17,4(sp)
   11bf0:	dc000017 	ldw	r16,0(sp)
   11bf4:	dec00504 	addi	sp,sp,20
   11bf8:	f800283a 	ret
   11bfc:	84800417 	ldw	r18,16(r16)
   11c00:	903ff626 	beq	r18,zero,11bdc <_gp+0xffff2c20>
   11c04:	84400017 	ldw	r17,0(r16)
   11c08:	108000cc 	andi	r2,r2,3
   11c0c:	84800015 	stw	r18,0(r16)
   11c10:	8ca3c83a 	sub	r17,r17,r18
   11c14:	10001526 	beq	r2,zero,11c6c <_fflush_r+0x180>
   11c18:	0005883a 	mov	r2,zero
   11c1c:	80800215 	stw	r2,8(r16)
   11c20:	04400316 	blt	zero,r17,11c30 <_fflush_r+0x144>
   11c24:	003fed06 	br	11bdc <_gp+0xffff2c20>
   11c28:	90a5883a 	add	r18,r18,r2
   11c2c:	047feb0e 	bge	zero,r17,11bdc <_gp+0xffff2c20>
   11c30:	80800917 	ldw	r2,36(r16)
   11c34:	81400717 	ldw	r5,28(r16)
   11c38:	880f883a 	mov	r7,r17
   11c3c:	900d883a 	mov	r6,r18
   11c40:	9809883a 	mov	r4,r19
   11c44:	103ee83a 	callr	r2
   11c48:	88a3c83a 	sub	r17,r17,r2
   11c4c:	00bff616 	blt	zero,r2,11c28 <_gp+0xffff2c6c>
   11c50:	80c0030b 	ldhu	r3,12(r16)
   11c54:	00bfffc4 	movi	r2,-1
   11c58:	18c01014 	ori	r3,r3,64
   11c5c:	80c0030d 	sth	r3,12(r16)
   11c60:	003fdf06 	br	11be0 <_gp+0xffff2c24>
   11c64:	00120a80 	call	120a8 <__sinit>
   11c68:	003fab06 	br	11b18 <_gp+0xffff2b5c>
   11c6c:	80800517 	ldw	r2,20(r16)
   11c70:	003fea06 	br	11c1c <_gp+0xffff2c60>
   11c74:	81400717 	ldw	r5,28(r16)
   11c78:	000d883a 	mov	r6,zero
   11c7c:	9809883a 	mov	r4,r19
   11c80:	01c00044 	movi	r7,1
   11c84:	403ee83a 	callr	r8
   11c88:	100d883a 	mov	r6,r2
   11c8c:	00bfffc4 	movi	r2,-1
   11c90:	30801326 	beq	r6,r2,11ce0 <_fflush_r+0x1f4>
   11c94:	8080030b 	ldhu	r2,12(r16)
   11c98:	82000a17 	ldw	r8,40(r16)
   11c9c:	003fb006 	br	11b60 <_gp+0xffff2ba4>
   11ca0:	80c00f17 	ldw	r3,60(r16)
   11ca4:	00ffa716 	blt	zero,r3,11b44 <_gp+0xffff2b88>
   11ca8:	003fcc06 	br	11bdc <_gp+0xffff2c20>
   11cac:	98c00017 	ldw	r3,0(r19)
   11cb0:	183fb926 	beq	r3,zero,11b98 <_gp+0xffff2bdc>
   11cb4:	01000744 	movi	r4,29
   11cb8:	19000226 	beq	r3,r4,11cc4 <_fflush_r+0x1d8>
   11cbc:	01000584 	movi	r4,22
   11cc0:	1900101e 	bne	r3,r4,11d04 <_fflush_r+0x218>
   11cc4:	8080030b 	ldhu	r2,12(r16)
   11cc8:	80c00417 	ldw	r3,16(r16)
   11ccc:	80000115 	stw	zero,4(r16)
   11cd0:	10bdffcc 	andi	r2,r2,63487
   11cd4:	8080030d 	sth	r2,12(r16)
   11cd8:	80c00015 	stw	r3,0(r16)
   11cdc:	003fb706 	br	11bbc <_gp+0xffff2c00>
   11ce0:	98800017 	ldw	r2,0(r19)
   11ce4:	103feb26 	beq	r2,zero,11c94 <_gp+0xffff2cd8>
   11ce8:	00c00744 	movi	r3,29
   11cec:	10c00226 	beq	r2,r3,11cf8 <_fflush_r+0x20c>
   11cf0:	00c00584 	movi	r3,22
   11cf4:	10ffd61e 	bne	r2,r3,11c50 <_gp+0xffff2c94>
   11cf8:	9c400015 	stw	r17,0(r19)
   11cfc:	0005883a 	mov	r2,zero
   11d00:	003fb706 	br	11be0 <_gp+0xffff2c24>
   11d04:	80c0030b 	ldhu	r3,12(r16)
   11d08:	18c01014 	ori	r3,r3,64
   11d0c:	80c0030d 	sth	r3,12(r16)
   11d10:	003fb306 	br	11be0 <_gp+0xffff2c24>

00011d14 <fflush>:
   11d14:	20000526 	beq	r4,zero,11d2c <fflush+0x18>
   11d18:	00800074 	movhi	r2,1
   11d1c:	109bf004 	addi	r2,r2,28608
   11d20:	200b883a 	mov	r5,r4
   11d24:	11000017 	ldw	r4,0(r2)
   11d28:	0011aec1 	jmpi	11aec <_fflush_r>
   11d2c:	00800074 	movhi	r2,1
   11d30:	109bef04 	addi	r2,r2,28604
   11d34:	11000017 	ldw	r4,0(r2)
   11d38:	01400074 	movhi	r5,1
   11d3c:	2946bb04 	addi	r5,r5,6892
   11d40:	00125c41 	jmpi	125c4 <_fwalk_reent>

00011d44 <__fp_lock>:
   11d44:	0005883a 	mov	r2,zero
   11d48:	f800283a 	ret

00011d4c <__fp_unlock>:
   11d4c:	0005883a 	mov	r2,zero
   11d50:	f800283a 	ret

00011d54 <_cleanup_r>:
   11d54:	01400074 	movhi	r5,1
   11d58:	294b1104 	addi	r5,r5,11332
   11d5c:	001250c1 	jmpi	1250c <_fwalk>

00011d60 <__sinit.part.1>:
   11d60:	defff604 	addi	sp,sp,-40
   11d64:	00c00074 	movhi	r3,1
   11d68:	dfc00915 	stw	ra,36(sp)
   11d6c:	df000815 	stw	fp,32(sp)
   11d70:	ddc00715 	stw	r23,28(sp)
   11d74:	dd800615 	stw	r22,24(sp)
   11d78:	dd400515 	stw	r21,20(sp)
   11d7c:	dd000415 	stw	r20,16(sp)
   11d80:	dcc00315 	stw	r19,12(sp)
   11d84:	dc800215 	stw	r18,8(sp)
   11d88:	dc400115 	stw	r17,4(sp)
   11d8c:	dc000015 	stw	r16,0(sp)
   11d90:	18c75504 	addi	r3,r3,7508
   11d94:	24000117 	ldw	r16,4(r4)
   11d98:	20c00f15 	stw	r3,60(r4)
   11d9c:	07000044 	movi	fp,1
   11da0:	00c000c4 	movi	r3,3
   11da4:	2080bb04 	addi	r2,r4,748
   11da8:	20c0b915 	stw	r3,740(r4)
   11dac:	27000e15 	stw	fp,56(r4)
   11db0:	2080ba15 	stw	r2,744(r4)
   11db4:	2000b815 	stw	zero,736(r4)
   11db8:	05c00204 	movi	r23,8
   11dbc:	00800104 	movi	r2,4
   11dc0:	2025883a 	mov	r18,r4
   11dc4:	b80d883a 	mov	r6,r23
   11dc8:	81001704 	addi	r4,r16,92
   11dcc:	000b883a 	mov	r5,zero
   11dd0:	80000015 	stw	zero,0(r16)
   11dd4:	80000115 	stw	zero,4(r16)
   11dd8:	80000215 	stw	zero,8(r16)
   11ddc:	8080030d 	sth	r2,12(r16)
   11de0:	80001915 	stw	zero,100(r16)
   11de4:	8000038d 	sth	zero,14(r16)
   11de8:	80000415 	stw	zero,16(r16)
   11dec:	80000515 	stw	zero,20(r16)
   11df0:	80000615 	stw	zero,24(r16)
   11df4:	00128340 	call	12834 <memset>
   11df8:	05800074 	movhi	r22,1
   11dfc:	94400217 	ldw	r17,8(r18)
   11e00:	05400074 	movhi	r21,1
   11e04:	05000074 	movhi	r20,1
   11e08:	04c00074 	movhi	r19,1
   11e0c:	b58a5604 	addi	r22,r22,10584
   11e10:	ad4a6d04 	addi	r21,r21,10676
   11e14:	a50a8c04 	addi	r20,r20,10800
   11e18:	9ccaa304 	addi	r19,r19,10892
   11e1c:	85800815 	stw	r22,32(r16)
   11e20:	85400915 	stw	r21,36(r16)
   11e24:	85000a15 	stw	r20,40(r16)
   11e28:	84c00b15 	stw	r19,44(r16)
   11e2c:	84000715 	stw	r16,28(r16)
   11e30:	00800284 	movi	r2,10
   11e34:	89001704 	addi	r4,r17,92
   11e38:	b80d883a 	mov	r6,r23
   11e3c:	000b883a 	mov	r5,zero
   11e40:	88000015 	stw	zero,0(r17)
   11e44:	88000115 	stw	zero,4(r17)
   11e48:	88000215 	stw	zero,8(r17)
   11e4c:	8880030d 	sth	r2,12(r17)
   11e50:	88001915 	stw	zero,100(r17)
   11e54:	8f00038d 	sth	fp,14(r17)
   11e58:	88000415 	stw	zero,16(r17)
   11e5c:	88000515 	stw	zero,20(r17)
   11e60:	88000615 	stw	zero,24(r17)
   11e64:	00128340 	call	12834 <memset>
   11e68:	94000317 	ldw	r16,12(r18)
   11e6c:	00800484 	movi	r2,18
   11e70:	8c400715 	stw	r17,28(r17)
   11e74:	8d800815 	stw	r22,32(r17)
   11e78:	8d400915 	stw	r21,36(r17)
   11e7c:	8d000a15 	stw	r20,40(r17)
   11e80:	8cc00b15 	stw	r19,44(r17)
   11e84:	8080030d 	sth	r2,12(r16)
   11e88:	00800084 	movi	r2,2
   11e8c:	80000015 	stw	zero,0(r16)
   11e90:	80000115 	stw	zero,4(r16)
   11e94:	80000215 	stw	zero,8(r16)
   11e98:	80001915 	stw	zero,100(r16)
   11e9c:	8080038d 	sth	r2,14(r16)
   11ea0:	80000415 	stw	zero,16(r16)
   11ea4:	80000515 	stw	zero,20(r16)
   11ea8:	80000615 	stw	zero,24(r16)
   11eac:	81001704 	addi	r4,r16,92
   11eb0:	000b883a 	mov	r5,zero
   11eb4:	b80d883a 	mov	r6,r23
   11eb8:	00128340 	call	12834 <memset>
   11ebc:	84000715 	stw	r16,28(r16)
   11ec0:	85800815 	stw	r22,32(r16)
   11ec4:	85400915 	stw	r21,36(r16)
   11ec8:	85000a15 	stw	r20,40(r16)
   11ecc:	84c00b15 	stw	r19,44(r16)
   11ed0:	dfc00917 	ldw	ra,36(sp)
   11ed4:	df000817 	ldw	fp,32(sp)
   11ed8:	ddc00717 	ldw	r23,28(sp)
   11edc:	dd800617 	ldw	r22,24(sp)
   11ee0:	dd400517 	ldw	r21,20(sp)
   11ee4:	dd000417 	ldw	r20,16(sp)
   11ee8:	dcc00317 	ldw	r19,12(sp)
   11eec:	dc800217 	ldw	r18,8(sp)
   11ef0:	dc400117 	ldw	r17,4(sp)
   11ef4:	dc000017 	ldw	r16,0(sp)
   11ef8:	dec00a04 	addi	sp,sp,40
   11efc:	f800283a 	ret

00011f00 <__sfmoreglue>:
   11f00:	defffc04 	addi	sp,sp,-16
   11f04:	dc800215 	stw	r18,8(sp)
   11f08:	2825883a 	mov	r18,r5
   11f0c:	dc000015 	stw	r16,0(sp)
   11f10:	01401a04 	movi	r5,104
   11f14:	2021883a 	mov	r16,r4
   11f18:	9009883a 	mov	r4,r18
   11f1c:	dfc00315 	stw	ra,12(sp)
   11f20:	dc400115 	stw	r17,4(sp)
   11f24:	0012dbc0 	call	12dbc <__mulsi3>
   11f28:	8009883a 	mov	r4,r16
   11f2c:	11400304 	addi	r5,r2,12
   11f30:	1023883a 	mov	r17,r2
   11f34:	00108a40 	call	108a4 <_malloc_r>
   11f38:	1021883a 	mov	r16,r2
   11f3c:	10000726 	beq	r2,zero,11f5c <__sfmoreglue+0x5c>
   11f40:	11000304 	addi	r4,r2,12
   11f44:	10000015 	stw	zero,0(r2)
   11f48:	14800115 	stw	r18,4(r2)
   11f4c:	11000215 	stw	r4,8(r2)
   11f50:	000b883a 	mov	r5,zero
   11f54:	880d883a 	mov	r6,r17
   11f58:	00128340 	call	12834 <memset>
   11f5c:	8005883a 	mov	r2,r16
   11f60:	dfc00317 	ldw	ra,12(sp)
   11f64:	dc800217 	ldw	r18,8(sp)
   11f68:	dc400117 	ldw	r17,4(sp)
   11f6c:	dc000017 	ldw	r16,0(sp)
   11f70:	dec00404 	addi	sp,sp,16
   11f74:	f800283a 	ret

00011f78 <__sfp>:
   11f78:	00800074 	movhi	r2,1
   11f7c:	defffb04 	addi	sp,sp,-20
   11f80:	109bef04 	addi	r2,r2,28604
   11f84:	dc800215 	stw	r18,8(sp)
   11f88:	14800017 	ldw	r18,0(r2)
   11f8c:	dcc00315 	stw	r19,12(sp)
   11f90:	dfc00415 	stw	ra,16(sp)
   11f94:	90800e17 	ldw	r2,56(r18)
   11f98:	dc400115 	stw	r17,4(sp)
   11f9c:	dc000015 	stw	r16,0(sp)
   11fa0:	2027883a 	mov	r19,r4
   11fa4:	1000021e 	bne	r2,zero,11fb0 <__sfp+0x38>
   11fa8:	9009883a 	mov	r4,r18
   11fac:	0011d600 	call	11d60 <__sinit.part.1>
   11fb0:	9480b804 	addi	r18,r18,736
   11fb4:	047fffc4 	movi	r17,-1
   11fb8:	91400117 	ldw	r5,4(r18)
   11fbc:	94000217 	ldw	r16,8(r18)
   11fc0:	297fffc4 	addi	r5,r5,-1
   11fc4:	28000a16 	blt	r5,zero,11ff0 <__sfp+0x78>
   11fc8:	8080030f 	ldh	r2,12(r16)
   11fcc:	10000c26 	beq	r2,zero,12000 <__sfp+0x88>
   11fd0:	80c01d04 	addi	r3,r16,116
   11fd4:	00000206 	br	11fe0 <__sfp+0x68>
   11fd8:	18bfe60f 	ldh	r2,-104(r3)
   11fdc:	10000826 	beq	r2,zero,12000 <__sfp+0x88>
   11fe0:	297fffc4 	addi	r5,r5,-1
   11fe4:	1c3ffd04 	addi	r16,r3,-12
   11fe8:	18c01a04 	addi	r3,r3,104
   11fec:	2c7ffa1e 	bne	r5,r17,11fd8 <_gp+0xffff301c>
   11ff0:	90800017 	ldw	r2,0(r18)
   11ff4:	10001d26 	beq	r2,zero,1206c <__sfp+0xf4>
   11ff8:	1025883a 	mov	r18,r2
   11ffc:	003fee06 	br	11fb8 <_gp+0xffff2ffc>
   12000:	00bfffc4 	movi	r2,-1
   12004:	8080038d 	sth	r2,14(r16)
   12008:	00800044 	movi	r2,1
   1200c:	8080030d 	sth	r2,12(r16)
   12010:	80001915 	stw	zero,100(r16)
   12014:	80000015 	stw	zero,0(r16)
   12018:	80000215 	stw	zero,8(r16)
   1201c:	80000115 	stw	zero,4(r16)
   12020:	80000415 	stw	zero,16(r16)
   12024:	80000515 	stw	zero,20(r16)
   12028:	80000615 	stw	zero,24(r16)
   1202c:	81001704 	addi	r4,r16,92
   12030:	000b883a 	mov	r5,zero
   12034:	01800204 	movi	r6,8
   12038:	00128340 	call	12834 <memset>
   1203c:	8005883a 	mov	r2,r16
   12040:	80000c15 	stw	zero,48(r16)
   12044:	80000d15 	stw	zero,52(r16)
   12048:	80001115 	stw	zero,68(r16)
   1204c:	80001215 	stw	zero,72(r16)
   12050:	dfc00417 	ldw	ra,16(sp)
   12054:	dcc00317 	ldw	r19,12(sp)
   12058:	dc800217 	ldw	r18,8(sp)
   1205c:	dc400117 	ldw	r17,4(sp)
   12060:	dc000017 	ldw	r16,0(sp)
   12064:	dec00504 	addi	sp,sp,20
   12068:	f800283a 	ret
   1206c:	9809883a 	mov	r4,r19
   12070:	01400104 	movi	r5,4
   12074:	0011f000 	call	11f00 <__sfmoreglue>
   12078:	90800015 	stw	r2,0(r18)
   1207c:	103fde1e 	bne	r2,zero,11ff8 <_gp+0xffff303c>
   12080:	00800304 	movi	r2,12
   12084:	98800015 	stw	r2,0(r19)
   12088:	0005883a 	mov	r2,zero
   1208c:	003ff006 	br	12050 <_gp+0xffff3094>

00012090 <_cleanup>:
   12090:	00800074 	movhi	r2,1
   12094:	109bef04 	addi	r2,r2,28604
   12098:	11000017 	ldw	r4,0(r2)
   1209c:	01400074 	movhi	r5,1
   120a0:	294b1104 	addi	r5,r5,11332
   120a4:	001250c1 	jmpi	1250c <_fwalk>

000120a8 <__sinit>:
   120a8:	20800e17 	ldw	r2,56(r4)
   120ac:	10000126 	beq	r2,zero,120b4 <__sinit+0xc>
   120b0:	f800283a 	ret
   120b4:	0011d601 	jmpi	11d60 <__sinit.part.1>

000120b8 <__sfp_lock_acquire>:
   120b8:	f800283a 	ret

000120bc <__sfp_lock_release>:
   120bc:	f800283a 	ret

000120c0 <__sinit_lock_acquire>:
   120c0:	f800283a 	ret

000120c4 <__sinit_lock_release>:
   120c4:	f800283a 	ret

000120c8 <__fp_lock_all>:
   120c8:	00800074 	movhi	r2,1
   120cc:	109bf004 	addi	r2,r2,28608
   120d0:	11000017 	ldw	r4,0(r2)
   120d4:	01400074 	movhi	r5,1
   120d8:	29475104 	addi	r5,r5,7492
   120dc:	001250c1 	jmpi	1250c <_fwalk>

000120e0 <__fp_unlock_all>:
   120e0:	00800074 	movhi	r2,1
   120e4:	109bf004 	addi	r2,r2,28608
   120e8:	11000017 	ldw	r4,0(r2)
   120ec:	01400074 	movhi	r5,1
   120f0:	29475304 	addi	r5,r5,7500
   120f4:	001250c1 	jmpi	1250c <_fwalk>

000120f8 <_malloc_trim_r>:
   120f8:	defffb04 	addi	sp,sp,-20
   120fc:	dcc00315 	stw	r19,12(sp)
   12100:	04c00074 	movhi	r19,1
   12104:	dc800215 	stw	r18,8(sp)
   12108:	dc400115 	stw	r17,4(sp)
   1210c:	dc000015 	stw	r16,0(sp)
   12110:	dfc00415 	stw	ra,16(sp)
   12114:	2821883a 	mov	r16,r5
   12118:	9cd66b04 	addi	r19,r19,22956
   1211c:	2025883a 	mov	r18,r4
   12120:	00133c40 	call	133c4 <__malloc_lock>
   12124:	98800217 	ldw	r2,8(r19)
   12128:	14400117 	ldw	r17,4(r2)
   1212c:	00bfff04 	movi	r2,-4
   12130:	88a2703a 	and	r17,r17,r2
   12134:	8c21c83a 	sub	r16,r17,r16
   12138:	8403fbc4 	addi	r16,r16,4079
   1213c:	8020d33a 	srli	r16,r16,12
   12140:	0083ffc4 	movi	r2,4095
   12144:	843fffc4 	addi	r16,r16,-1
   12148:	8020933a 	slli	r16,r16,12
   1214c:	1400060e 	bge	r2,r16,12168 <_malloc_trim_r+0x70>
   12150:	9009883a 	mov	r4,r18
   12154:	000b883a 	mov	r5,zero
   12158:	00119680 	call	11968 <_sbrk_r>
   1215c:	98c00217 	ldw	r3,8(r19)
   12160:	1c47883a 	add	r3,r3,r17
   12164:	10c00a26 	beq	r2,r3,12190 <_malloc_trim_r+0x98>
   12168:	9009883a 	mov	r4,r18
   1216c:	00133e40 	call	133e4 <__malloc_unlock>
   12170:	0005883a 	mov	r2,zero
   12174:	dfc00417 	ldw	ra,16(sp)
   12178:	dcc00317 	ldw	r19,12(sp)
   1217c:	dc800217 	ldw	r18,8(sp)
   12180:	dc400117 	ldw	r17,4(sp)
   12184:	dc000017 	ldw	r16,0(sp)
   12188:	dec00504 	addi	sp,sp,20
   1218c:	f800283a 	ret
   12190:	9009883a 	mov	r4,r18
   12194:	040bc83a 	sub	r5,zero,r16
   12198:	00119680 	call	11968 <_sbrk_r>
   1219c:	00ffffc4 	movi	r3,-1
   121a0:	10c00d26 	beq	r2,r3,121d8 <_malloc_trim_r+0xe0>
   121a4:	00c000b4 	movhi	r3,2
   121a8:	18e2a304 	addi	r3,r3,-30068
   121ac:	18800017 	ldw	r2,0(r3)
   121b0:	99000217 	ldw	r4,8(r19)
   121b4:	8c23c83a 	sub	r17,r17,r16
   121b8:	8c400054 	ori	r17,r17,1
   121bc:	1421c83a 	sub	r16,r2,r16
   121c0:	24400115 	stw	r17,4(r4)
   121c4:	9009883a 	mov	r4,r18
   121c8:	1c000015 	stw	r16,0(r3)
   121cc:	00133e40 	call	133e4 <__malloc_unlock>
   121d0:	00800044 	movi	r2,1
   121d4:	003fe706 	br	12174 <_gp+0xffff31b8>
   121d8:	9009883a 	mov	r4,r18
   121dc:	000b883a 	mov	r5,zero
   121e0:	00119680 	call	11968 <_sbrk_r>
   121e4:	99000217 	ldw	r4,8(r19)
   121e8:	014003c4 	movi	r5,15
   121ec:	1107c83a 	sub	r3,r2,r4
   121f0:	28ffdd0e 	bge	r5,r3,12168 <_gp+0xffff31ac>
   121f4:	01400074 	movhi	r5,1
   121f8:	295bf104 	addi	r5,r5,28612
   121fc:	29400017 	ldw	r5,0(r5)
   12200:	18c00054 	ori	r3,r3,1
   12204:	20c00115 	stw	r3,4(r4)
   12208:	00c000b4 	movhi	r3,2
   1220c:	1145c83a 	sub	r2,r2,r5
   12210:	18e2a304 	addi	r3,r3,-30068
   12214:	18800015 	stw	r2,0(r3)
   12218:	003fd306 	br	12168 <_gp+0xffff31ac>

0001221c <_free_r>:
   1221c:	28004c26 	beq	r5,zero,12350 <_free_r+0x134>
   12220:	defffd04 	addi	sp,sp,-12
   12224:	dc400115 	stw	r17,4(sp)
   12228:	dc000015 	stw	r16,0(sp)
   1222c:	2023883a 	mov	r17,r4
   12230:	2821883a 	mov	r16,r5
   12234:	dfc00215 	stw	ra,8(sp)
   12238:	00133c40 	call	133c4 <__malloc_lock>
   1223c:	813fff17 	ldw	r4,-4(r16)
   12240:	00bfff84 	movi	r2,-2
   12244:	02400074 	movhi	r9,1
   12248:	81bffe04 	addi	r6,r16,-8
   1224c:	2084703a 	and	r2,r4,r2
   12250:	4a566b04 	addi	r9,r9,22956
   12254:	308b883a 	add	r5,r6,r2
   12258:	2a000117 	ldw	r8,4(r5)
   1225c:	49c00217 	ldw	r7,8(r9)
   12260:	00ffff04 	movi	r3,-4
   12264:	40c6703a 	and	r3,r8,r3
   12268:	39405326 	beq	r7,r5,123b8 <_free_r+0x19c>
   1226c:	28c00115 	stw	r3,4(r5)
   12270:	2100004c 	andi	r4,r4,1
   12274:	2000091e 	bne	r4,zero,1229c <_free_r+0x80>
   12278:	81fffe17 	ldw	r7,-8(r16)
   1227c:	4a000204 	addi	r8,r9,8
   12280:	31cdc83a 	sub	r6,r6,r7
   12284:	31000217 	ldw	r4,8(r6)
   12288:	11c5883a 	add	r2,r2,r7
   1228c:	22006126 	beq	r4,r8,12414 <_free_r+0x1f8>
   12290:	31c00317 	ldw	r7,12(r6)
   12294:	21c00315 	stw	r7,12(r4)
   12298:	39000215 	stw	r4,8(r7)
   1229c:	28c9883a 	add	r4,r5,r3
   122a0:	21c00117 	ldw	r7,4(r4)
   122a4:	39c0004c 	andi	r7,r7,1
   122a8:	38000d1e 	bne	r7,zero,122e0 <_free_r+0xc4>
   122ac:	29000217 	ldw	r4,8(r5)
   122b0:	10c5883a 	add	r2,r2,r3
   122b4:	00c00074 	movhi	r3,1
   122b8:	18d66d04 	addi	r3,r3,22964
   122bc:	20c07526 	beq	r4,r3,12494 <_free_r+0x278>
   122c0:	29c00317 	ldw	r7,12(r5)
   122c4:	11400054 	ori	r5,r2,1
   122c8:	3087883a 	add	r3,r6,r2
   122cc:	21c00315 	stw	r7,12(r4)
   122d0:	39000215 	stw	r4,8(r7)
   122d4:	31400115 	stw	r5,4(r6)
   122d8:	18800015 	stw	r2,0(r3)
   122dc:	00000406 	br	122f0 <_free_r+0xd4>
   122e0:	10c00054 	ori	r3,r2,1
   122e4:	30c00115 	stw	r3,4(r6)
   122e8:	3087883a 	add	r3,r6,r2
   122ec:	18800015 	stw	r2,0(r3)
   122f0:	00c07fc4 	movi	r3,511
   122f4:	18801736 	bltu	r3,r2,12354 <_free_r+0x138>
   122f8:	1004d0fa 	srli	r2,r2,3
   122fc:	01400044 	movi	r5,1
   12300:	49000117 	ldw	r4,4(r9)
   12304:	1087883a 	add	r3,r2,r2
   12308:	18c7883a 	add	r3,r3,r3
   1230c:	1005d0ba 	srai	r2,r2,2
   12310:	18c7883a 	add	r3,r3,r3
   12314:	1a47883a 	add	r3,r3,r9
   12318:	19c00217 	ldw	r7,8(r3)
   1231c:	2884983a 	sll	r2,r5,r2
   12320:	30c00315 	stw	r3,12(r6)
   12324:	31c00215 	stw	r7,8(r6)
   12328:	1104b03a 	or	r2,r2,r4
   1232c:	19800215 	stw	r6,8(r3)
   12330:	48800115 	stw	r2,4(r9)
   12334:	39800315 	stw	r6,12(r7)
   12338:	8809883a 	mov	r4,r17
   1233c:	dfc00217 	ldw	ra,8(sp)
   12340:	dc400117 	ldw	r17,4(sp)
   12344:	dc000017 	ldw	r16,0(sp)
   12348:	dec00304 	addi	sp,sp,12
   1234c:	00133e41 	jmpi	133e4 <__malloc_unlock>
   12350:	f800283a 	ret
   12354:	1006d27a 	srli	r3,r2,9
   12358:	01000104 	movi	r4,4
   1235c:	20c04036 	bltu	r4,r3,12460 <_free_r+0x244>
   12360:	1006d1ba 	srli	r3,r2,6
   12364:	19400e04 	addi	r5,r3,56
   12368:	2947883a 	add	r3,r5,r5
   1236c:	18c7883a 	add	r3,r3,r3
   12370:	18c7883a 	add	r3,r3,r3
   12374:	1a49883a 	add	r4,r3,r9
   12378:	20c00217 	ldw	r3,8(r4)
   1237c:	01c00074 	movhi	r7,1
   12380:	39d66b04 	addi	r7,r7,22956
   12384:	19003b26 	beq	r3,r4,12474 <_free_r+0x258>
   12388:	01ffff04 	movi	r7,-4
   1238c:	19400117 	ldw	r5,4(r3)
   12390:	29ca703a 	and	r5,r5,r7
   12394:	1140022e 	bgeu	r2,r5,123a0 <_free_r+0x184>
   12398:	18c00217 	ldw	r3,8(r3)
   1239c:	20fffb1e 	bne	r4,r3,1238c <_gp+0xffff33d0>
   123a0:	18800317 	ldw	r2,12(r3)
   123a4:	30800315 	stw	r2,12(r6)
   123a8:	30c00215 	stw	r3,8(r6)
   123ac:	11800215 	stw	r6,8(r2)
   123b0:	19800315 	stw	r6,12(r3)
   123b4:	003fe006 	br	12338 <_gp+0xffff337c>
   123b8:	2100004c 	andi	r4,r4,1
   123bc:	1885883a 	add	r2,r3,r2
   123c0:	2000071e 	bne	r4,zero,123e0 <_free_r+0x1c4>
   123c4:	817ffe17 	ldw	r5,-8(r16)
   123c8:	314dc83a 	sub	r6,r6,r5
   123cc:	30c00317 	ldw	r3,12(r6)
   123d0:	31000217 	ldw	r4,8(r6)
   123d4:	1145883a 	add	r2,r2,r5
   123d8:	20c00315 	stw	r3,12(r4)
   123dc:	19000215 	stw	r4,8(r3)
   123e0:	10c00054 	ori	r3,r2,1
   123e4:	30c00115 	stw	r3,4(r6)
   123e8:	00c00074 	movhi	r3,1
   123ec:	18dbf204 	addi	r3,r3,28616
   123f0:	18c00017 	ldw	r3,0(r3)
   123f4:	49800215 	stw	r6,8(r9)
   123f8:	10ffcf36 	bltu	r2,r3,12338 <_gp+0xffff337c>
   123fc:	008000b4 	movhi	r2,2
   12400:	10a29a04 	addi	r2,r2,-30104
   12404:	11400017 	ldw	r5,0(r2)
   12408:	8809883a 	mov	r4,r17
   1240c:	00120f80 	call	120f8 <_malloc_trim_r>
   12410:	003fc906 	br	12338 <_gp+0xffff337c>
   12414:	28c9883a 	add	r4,r5,r3
   12418:	21000117 	ldw	r4,4(r4)
   1241c:	2100004c 	andi	r4,r4,1
   12420:	20000a1e 	bne	r4,zero,1244c <_free_r+0x230>
   12424:	29000317 	ldw	r4,12(r5)
   12428:	29400217 	ldw	r5,8(r5)
   1242c:	10c5883a 	add	r2,r2,r3
   12430:	10c00054 	ori	r3,r2,1
   12434:	29000315 	stw	r4,12(r5)
   12438:	21400215 	stw	r5,8(r4)
   1243c:	30c00115 	stw	r3,4(r6)
   12440:	308d883a 	add	r6,r6,r2
   12444:	30800015 	stw	r2,0(r6)
   12448:	003fbb06 	br	12338 <_gp+0xffff337c>
   1244c:	10c00054 	ori	r3,r2,1
   12450:	30c00115 	stw	r3,4(r6)
   12454:	308d883a 	add	r6,r6,r2
   12458:	30800015 	stw	r2,0(r6)
   1245c:	003fb606 	br	12338 <_gp+0xffff337c>
   12460:	01000504 	movi	r4,20
   12464:	20c01436 	bltu	r4,r3,124b8 <_free_r+0x29c>
   12468:	194016c4 	addi	r5,r3,91
   1246c:	2947883a 	add	r3,r5,r5
   12470:	003fbe06 	br	1236c <_gp+0xffff33b0>
   12474:	280bd0ba 	srai	r5,r5,2
   12478:	00800044 	movi	r2,1
   1247c:	39000117 	ldw	r4,4(r7)
   12480:	114a983a 	sll	r5,r2,r5
   12484:	1805883a 	mov	r2,r3
   12488:	2908b03a 	or	r4,r5,r4
   1248c:	39000115 	stw	r4,4(r7)
   12490:	003fc406 	br	123a4 <_gp+0xffff33e8>
   12494:	49800515 	stw	r6,20(r9)
   12498:	49800415 	stw	r6,16(r9)
   1249c:	10c00054 	ori	r3,r2,1
   124a0:	31000315 	stw	r4,12(r6)
   124a4:	31000215 	stw	r4,8(r6)
   124a8:	30c00115 	stw	r3,4(r6)
   124ac:	308d883a 	add	r6,r6,r2
   124b0:	30800015 	stw	r2,0(r6)
   124b4:	003fa006 	br	12338 <_gp+0xffff337c>
   124b8:	01001504 	movi	r4,84
   124bc:	20c00436 	bltu	r4,r3,124d0 <_free_r+0x2b4>
   124c0:	1006d33a 	srli	r3,r2,12
   124c4:	19401b84 	addi	r5,r3,110
   124c8:	2947883a 	add	r3,r5,r5
   124cc:	003fa706 	br	1236c <_gp+0xffff33b0>
   124d0:	01005504 	movi	r4,340
   124d4:	20c00436 	bltu	r4,r3,124e8 <_free_r+0x2cc>
   124d8:	1006d3fa 	srli	r3,r2,15
   124dc:	19401dc4 	addi	r5,r3,119
   124e0:	2947883a 	add	r3,r5,r5
   124e4:	003fa106 	br	1236c <_gp+0xffff33b0>
   124e8:	01015504 	movi	r4,1364
   124ec:	20c00436 	bltu	r4,r3,12500 <_free_r+0x2e4>
   124f0:	1006d4ba 	srli	r3,r2,18
   124f4:	19401f04 	addi	r5,r3,124
   124f8:	2947883a 	add	r3,r5,r5
   124fc:	003f9b06 	br	1236c <_gp+0xffff33b0>
   12500:	00c03f04 	movi	r3,252
   12504:	01401f84 	movi	r5,126
   12508:	003f9806 	br	1236c <_gp+0xffff33b0>

0001250c <_fwalk>:
   1250c:	defff804 	addi	sp,sp,-32
   12510:	dd400515 	stw	r21,20(sp)
   12514:	2540b804 	addi	r21,r4,736
   12518:	dd800615 	stw	r22,24(sp)
   1251c:	dd000415 	stw	r20,16(sp)
   12520:	dfc00715 	stw	ra,28(sp)
   12524:	dcc00315 	stw	r19,12(sp)
   12528:	dc800215 	stw	r18,8(sp)
   1252c:	dc400115 	stw	r17,4(sp)
   12530:	dc000015 	stw	r16,0(sp)
   12534:	2829883a 	mov	r20,r5
   12538:	002d883a 	mov	r22,zero
   1253c:	00120b80 	call	120b8 <__sfp_lock_acquire>
   12540:	a8001426 	beq	r21,zero,12594 <_fwalk+0x88>
   12544:	04ffffc4 	movi	r19,-1
   12548:	ac400117 	ldw	r17,4(r21)
   1254c:	ac800217 	ldw	r18,8(r21)
   12550:	8c7fffc4 	addi	r17,r17,-1
   12554:	88000d16 	blt	r17,zero,1258c <_fwalk+0x80>
   12558:	94000304 	addi	r16,r18,12
   1255c:	94800384 	addi	r18,r18,14
   12560:	80c0000f 	ldh	r3,0(r16)
   12564:	8c7fffc4 	addi	r17,r17,-1
   12568:	813ffd04 	addi	r4,r16,-12
   1256c:	18000426 	beq	r3,zero,12580 <_fwalk+0x74>
   12570:	90c0000f 	ldh	r3,0(r18)
   12574:	1cc00226 	beq	r3,r19,12580 <_fwalk+0x74>
   12578:	a03ee83a 	callr	r20
   1257c:	b0acb03a 	or	r22,r22,r2
   12580:	84001a04 	addi	r16,r16,104
   12584:	94801a04 	addi	r18,r18,104
   12588:	8cfff51e 	bne	r17,r19,12560 <_gp+0xffff35a4>
   1258c:	ad400017 	ldw	r21,0(r21)
   12590:	a83fed1e 	bne	r21,zero,12548 <_gp+0xffff358c>
   12594:	00120bc0 	call	120bc <__sfp_lock_release>
   12598:	b005883a 	mov	r2,r22
   1259c:	dfc00717 	ldw	ra,28(sp)
   125a0:	dd800617 	ldw	r22,24(sp)
   125a4:	dd400517 	ldw	r21,20(sp)
   125a8:	dd000417 	ldw	r20,16(sp)
   125ac:	dcc00317 	ldw	r19,12(sp)
   125b0:	dc800217 	ldw	r18,8(sp)
   125b4:	dc400117 	ldw	r17,4(sp)
   125b8:	dc000017 	ldw	r16,0(sp)
   125bc:	dec00804 	addi	sp,sp,32
   125c0:	f800283a 	ret

000125c4 <_fwalk_reent>:
   125c4:	defff804 	addi	sp,sp,-32
   125c8:	dd400515 	stw	r21,20(sp)
   125cc:	2540b804 	addi	r21,r4,736
   125d0:	dd800615 	stw	r22,24(sp)
   125d4:	dd000415 	stw	r20,16(sp)
   125d8:	dcc00315 	stw	r19,12(sp)
   125dc:	dfc00715 	stw	ra,28(sp)
   125e0:	dc800215 	stw	r18,8(sp)
   125e4:	dc400115 	stw	r17,4(sp)
   125e8:	dc000015 	stw	r16,0(sp)
   125ec:	2027883a 	mov	r19,r4
   125f0:	2829883a 	mov	r20,r5
   125f4:	002d883a 	mov	r22,zero
   125f8:	00120b80 	call	120b8 <__sfp_lock_acquire>
   125fc:	a8001326 	beq	r21,zero,1264c <_fwalk_reent+0x88>
   12600:	04bfffc4 	movi	r18,-1
   12604:	ac400117 	ldw	r17,4(r21)
   12608:	ac000217 	ldw	r16,8(r21)
   1260c:	8c7fffc4 	addi	r17,r17,-1
   12610:	88000c16 	blt	r17,zero,12644 <_fwalk_reent+0x80>
   12614:	84000304 	addi	r16,r16,12
   12618:	80c0000f 	ldh	r3,0(r16)
   1261c:	8c7fffc4 	addi	r17,r17,-1
   12620:	817ffd04 	addi	r5,r16,-12
   12624:	18000526 	beq	r3,zero,1263c <_fwalk_reent+0x78>
   12628:	80c0008f 	ldh	r3,2(r16)
   1262c:	9809883a 	mov	r4,r19
   12630:	1c800226 	beq	r3,r18,1263c <_fwalk_reent+0x78>
   12634:	a03ee83a 	callr	r20
   12638:	b0acb03a 	or	r22,r22,r2
   1263c:	84001a04 	addi	r16,r16,104
   12640:	8cbff51e 	bne	r17,r18,12618 <_gp+0xffff365c>
   12644:	ad400017 	ldw	r21,0(r21)
   12648:	a83fee1e 	bne	r21,zero,12604 <_gp+0xffff3648>
   1264c:	00120bc0 	call	120bc <__sfp_lock_release>
   12650:	b005883a 	mov	r2,r22
   12654:	dfc00717 	ldw	ra,28(sp)
   12658:	dd800617 	ldw	r22,24(sp)
   1265c:	dd400517 	ldw	r21,20(sp)
   12660:	dd000417 	ldw	r20,16(sp)
   12664:	dcc00317 	ldw	r19,12(sp)
   12668:	dc800217 	ldw	r18,8(sp)
   1266c:	dc400117 	ldw	r17,4(sp)
   12670:	dc000017 	ldw	r16,0(sp)
   12674:	dec00804 	addi	sp,sp,32
   12678:	f800283a 	ret

0001267c <__smakebuf_r>:
   1267c:	2880030b 	ldhu	r2,12(r5)
   12680:	10c0008c 	andi	r3,r2,2
   12684:	1800401e 	bne	r3,zero,12788 <__smakebuf_r+0x10c>
   12688:	deffec04 	addi	sp,sp,-80
   1268c:	dc000f15 	stw	r16,60(sp)
   12690:	2821883a 	mov	r16,r5
   12694:	2940038f 	ldh	r5,14(r5)
   12698:	dc401015 	stw	r17,64(sp)
   1269c:	dfc01315 	stw	ra,76(sp)
   126a0:	dcc01215 	stw	r19,72(sp)
   126a4:	dc801115 	stw	r18,68(sp)
   126a8:	2023883a 	mov	r17,r4
   126ac:	28001b16 	blt	r5,zero,1271c <__smakebuf_r+0xa0>
   126b0:	d80d883a 	mov	r6,sp
   126b4:	0012c580 	call	12c58 <_fstat_r>
   126b8:	10001716 	blt	r2,zero,12718 <__smakebuf_r+0x9c>
   126bc:	d8800117 	ldw	r2,4(sp)
   126c0:	00e00014 	movui	r3,32768
   126c4:	10bc000c 	andi	r2,r2,61440
   126c8:	10c03726 	beq	r2,r3,127a8 <__smakebuf_r+0x12c>
   126cc:	80c0030b 	ldhu	r3,12(r16)
   126d0:	18c20014 	ori	r3,r3,2048
   126d4:	80c0030d 	sth	r3,12(r16)
   126d8:	00c80004 	movi	r3,8192
   126dc:	10c03c1e 	bne	r2,r3,127d0 <__smakebuf_r+0x154>
   126e0:	8140038f 	ldh	r5,14(r16)
   126e4:	8809883a 	mov	r4,r17
   126e8:	0012cb00 	call	12cb0 <_isatty_r>
   126ec:	10004e26 	beq	r2,zero,12828 <__smakebuf_r+0x1ac>
   126f0:	8080030b 	ldhu	r2,12(r16)
   126f4:	04c00044 	movi	r19,1
   126f8:	80c010c4 	addi	r3,r16,67
   126fc:	14c4b03a 	or	r2,r2,r19
   12700:	8080030d 	sth	r2,12(r16)
   12704:	80c00015 	stw	r3,0(r16)
   12708:	80c00415 	stw	r3,16(r16)
   1270c:	84c00515 	stw	r19,20(r16)
   12710:	04810004 	movi	r18,1024
   12714:	00000706 	br	12734 <__smakebuf_r+0xb8>
   12718:	8080030b 	ldhu	r2,12(r16)
   1271c:	10c0200c 	andi	r3,r2,128
   12720:	18001f1e 	bne	r3,zero,127a0 <__smakebuf_r+0x124>
   12724:	04810004 	movi	r18,1024
   12728:	10820014 	ori	r2,r2,2048
   1272c:	8080030d 	sth	r2,12(r16)
   12730:	0027883a 	mov	r19,zero
   12734:	8809883a 	mov	r4,r17
   12738:	900b883a 	mov	r5,r18
   1273c:	00108a40 	call	108a4 <_malloc_r>
   12740:	10002e26 	beq	r2,zero,127fc <__smakebuf_r+0x180>
   12744:	80c0030b 	ldhu	r3,12(r16)
   12748:	01000074 	movhi	r4,1
   1274c:	21075504 	addi	r4,r4,7508
   12750:	89000f15 	stw	r4,60(r17)
   12754:	18c02014 	ori	r3,r3,128
   12758:	80c0030d 	sth	r3,12(r16)
   1275c:	80800015 	stw	r2,0(r16)
   12760:	80800415 	stw	r2,16(r16)
   12764:	84800515 	stw	r18,20(r16)
   12768:	98001c1e 	bne	r19,zero,127dc <__smakebuf_r+0x160>
   1276c:	dfc01317 	ldw	ra,76(sp)
   12770:	dcc01217 	ldw	r19,72(sp)
   12774:	dc801117 	ldw	r18,68(sp)
   12778:	dc401017 	ldw	r17,64(sp)
   1277c:	dc000f17 	ldw	r16,60(sp)
   12780:	dec01404 	addi	sp,sp,80
   12784:	f800283a 	ret
   12788:	288010c4 	addi	r2,r5,67
   1278c:	28800015 	stw	r2,0(r5)
   12790:	28800415 	stw	r2,16(r5)
   12794:	00800044 	movi	r2,1
   12798:	28800515 	stw	r2,20(r5)
   1279c:	f800283a 	ret
   127a0:	04801004 	movi	r18,64
   127a4:	003fe006 	br	12728 <_gp+0xffff376c>
   127a8:	81000a17 	ldw	r4,40(r16)
   127ac:	00c00074 	movhi	r3,1
   127b0:	18ca8c04 	addi	r3,r3,10800
   127b4:	20ffc51e 	bne	r4,r3,126cc <_gp+0xffff3710>
   127b8:	80c0030b 	ldhu	r3,12(r16)
   127bc:	01010004 	movi	r4,1024
   127c0:	81001315 	stw	r4,76(r16)
   127c4:	1906b03a 	or	r3,r3,r4
   127c8:	80c0030d 	sth	r3,12(r16)
   127cc:	003fc206 	br	126d8 <_gp+0xffff371c>
   127d0:	0027883a 	mov	r19,zero
   127d4:	04810004 	movi	r18,1024
   127d8:	003fd606 	br	12734 <_gp+0xffff3778>
   127dc:	8140038f 	ldh	r5,14(r16)
   127e0:	8809883a 	mov	r4,r17
   127e4:	0012cb00 	call	12cb0 <_isatty_r>
   127e8:	103fe026 	beq	r2,zero,1276c <_gp+0xffff37b0>
   127ec:	8080030b 	ldhu	r2,12(r16)
   127f0:	10800054 	ori	r2,r2,1
   127f4:	8080030d 	sth	r2,12(r16)
   127f8:	003fdc06 	br	1276c <_gp+0xffff37b0>
   127fc:	8080030b 	ldhu	r2,12(r16)
   12800:	10c0800c 	andi	r3,r2,512
   12804:	183fd91e 	bne	r3,zero,1276c <_gp+0xffff37b0>
   12808:	10800094 	ori	r2,r2,2
   1280c:	80c010c4 	addi	r3,r16,67
   12810:	8080030d 	sth	r2,12(r16)
   12814:	00800044 	movi	r2,1
   12818:	80c00015 	stw	r3,0(r16)
   1281c:	80c00415 	stw	r3,16(r16)
   12820:	80800515 	stw	r2,20(r16)
   12824:	003fd106 	br	1276c <_gp+0xffff37b0>
   12828:	04c00044 	movi	r19,1
   1282c:	04810004 	movi	r18,1024
   12830:	003fc006 	br	12734 <_gp+0xffff3778>

00012834 <memset>:
   12834:	20c000cc 	andi	r3,r4,3
   12838:	2005883a 	mov	r2,r4
   1283c:	18004326 	beq	r3,zero,1294c <memset+0x118>
   12840:	31ffffc4 	addi	r7,r6,-1
   12844:	30004026 	beq	r6,zero,12948 <memset+0x114>
   12848:	2813883a 	mov	r9,r5
   1284c:	200d883a 	mov	r6,r4
   12850:	2007883a 	mov	r3,r4
   12854:	00000406 	br	12868 <memset+0x34>
   12858:	3a3fffc4 	addi	r8,r7,-1
   1285c:	31800044 	addi	r6,r6,1
   12860:	38003926 	beq	r7,zero,12948 <memset+0x114>
   12864:	400f883a 	mov	r7,r8
   12868:	18c00044 	addi	r3,r3,1
   1286c:	32400005 	stb	r9,0(r6)
   12870:	1a0000cc 	andi	r8,r3,3
   12874:	403ff81e 	bne	r8,zero,12858 <_gp+0xffff389c>
   12878:	010000c4 	movi	r4,3
   1287c:	21c02d2e 	bgeu	r4,r7,12934 <memset+0x100>
   12880:	29803fcc 	andi	r6,r5,255
   12884:	3008923a 	slli	r4,r6,8
   12888:	218cb03a 	or	r6,r4,r6
   1288c:	3008943a 	slli	r4,r6,16
   12890:	218cb03a 	or	r6,r4,r6
   12894:	010003c4 	movi	r4,15
   12898:	21c0182e 	bgeu	r4,r7,128fc <memset+0xc8>
   1289c:	3b3ffc04 	addi	r12,r7,-16
   128a0:	6018d13a 	srli	r12,r12,4
   128a4:	1a000104 	addi	r8,r3,4
   128a8:	1ac00204 	addi	r11,r3,8
   128ac:	6008913a 	slli	r4,r12,4
   128b0:	1a800304 	addi	r10,r3,12
   128b4:	1813883a 	mov	r9,r3
   128b8:	21000504 	addi	r4,r4,20
   128bc:	1909883a 	add	r4,r3,r4
   128c0:	49800015 	stw	r6,0(r9)
   128c4:	41800015 	stw	r6,0(r8)
   128c8:	59800015 	stw	r6,0(r11)
   128cc:	51800015 	stw	r6,0(r10)
   128d0:	42000404 	addi	r8,r8,16
   128d4:	4a400404 	addi	r9,r9,16
   128d8:	5ac00404 	addi	r11,r11,16
   128dc:	52800404 	addi	r10,r10,16
   128e0:	413ff71e 	bne	r8,r4,128c0 <_gp+0xffff3904>
   128e4:	63000044 	addi	r12,r12,1
   128e8:	6018913a 	slli	r12,r12,4
   128ec:	39c003cc 	andi	r7,r7,15
   128f0:	010000c4 	movi	r4,3
   128f4:	1b07883a 	add	r3,r3,r12
   128f8:	21c00e2e 	bgeu	r4,r7,12934 <memset+0x100>
   128fc:	1813883a 	mov	r9,r3
   12900:	3811883a 	mov	r8,r7
   12904:	010000c4 	movi	r4,3
   12908:	49800015 	stw	r6,0(r9)
   1290c:	423fff04 	addi	r8,r8,-4
   12910:	4a400104 	addi	r9,r9,4
   12914:	223ffc36 	bltu	r4,r8,12908 <_gp+0xffff394c>
   12918:	393fff04 	addi	r4,r7,-4
   1291c:	2008d0ba 	srli	r4,r4,2
   12920:	39c000cc 	andi	r7,r7,3
   12924:	21000044 	addi	r4,r4,1
   12928:	2109883a 	add	r4,r4,r4
   1292c:	2109883a 	add	r4,r4,r4
   12930:	1907883a 	add	r3,r3,r4
   12934:	38000426 	beq	r7,zero,12948 <memset+0x114>
   12938:	19cf883a 	add	r7,r3,r7
   1293c:	19400005 	stb	r5,0(r3)
   12940:	18c00044 	addi	r3,r3,1
   12944:	19fffd1e 	bne	r3,r7,1293c <_gp+0xffff3980>
   12948:	f800283a 	ret
   1294c:	2007883a 	mov	r3,r4
   12950:	300f883a 	mov	r7,r6
   12954:	003fc806 	br	12878 <_gp+0xffff38bc>

00012958 <__sread>:
   12958:	defffe04 	addi	sp,sp,-8
   1295c:	dc000015 	stw	r16,0(sp)
   12960:	2821883a 	mov	r16,r5
   12964:	2940038f 	ldh	r5,14(r5)
   12968:	dfc00115 	stw	ra,4(sp)
   1296c:	0012d600 	call	12d60 <_read_r>
   12970:	10000716 	blt	r2,zero,12990 <__sread+0x38>
   12974:	80c01417 	ldw	r3,80(r16)
   12978:	1887883a 	add	r3,r3,r2
   1297c:	80c01415 	stw	r3,80(r16)
   12980:	dfc00117 	ldw	ra,4(sp)
   12984:	dc000017 	ldw	r16,0(sp)
   12988:	dec00204 	addi	sp,sp,8
   1298c:	f800283a 	ret
   12990:	80c0030b 	ldhu	r3,12(r16)
   12994:	18fbffcc 	andi	r3,r3,61439
   12998:	80c0030d 	sth	r3,12(r16)
   1299c:	dfc00117 	ldw	ra,4(sp)
   129a0:	dc000017 	ldw	r16,0(sp)
   129a4:	dec00204 	addi	sp,sp,8
   129a8:	f800283a 	ret

000129ac <__seofread>:
   129ac:	0005883a 	mov	r2,zero
   129b0:	f800283a 	ret

000129b4 <__swrite>:
   129b4:	2880030b 	ldhu	r2,12(r5)
   129b8:	defffb04 	addi	sp,sp,-20
   129bc:	dcc00315 	stw	r19,12(sp)
   129c0:	dc800215 	stw	r18,8(sp)
   129c4:	dc400115 	stw	r17,4(sp)
   129c8:	dc000015 	stw	r16,0(sp)
   129cc:	dfc00415 	stw	ra,16(sp)
   129d0:	10c0400c 	andi	r3,r2,256
   129d4:	2821883a 	mov	r16,r5
   129d8:	2027883a 	mov	r19,r4
   129dc:	3025883a 	mov	r18,r6
   129e0:	3823883a 	mov	r17,r7
   129e4:	18000526 	beq	r3,zero,129fc <__swrite+0x48>
   129e8:	2940038f 	ldh	r5,14(r5)
   129ec:	000d883a 	mov	r6,zero
   129f0:	01c00084 	movi	r7,2
   129f4:	0012d040 	call	12d04 <_lseek_r>
   129f8:	8080030b 	ldhu	r2,12(r16)
   129fc:	8140038f 	ldh	r5,14(r16)
   12a00:	10bbffcc 	andi	r2,r2,61439
   12a04:	9809883a 	mov	r4,r19
   12a08:	900d883a 	mov	r6,r18
   12a0c:	880f883a 	mov	r7,r17
   12a10:	8080030d 	sth	r2,12(r16)
   12a14:	dfc00417 	ldw	ra,16(sp)
   12a18:	dcc00317 	ldw	r19,12(sp)
   12a1c:	dc800217 	ldw	r18,8(sp)
   12a20:	dc400117 	ldw	r17,4(sp)
   12a24:	dc000017 	ldw	r16,0(sp)
   12a28:	dec00504 	addi	sp,sp,20
   12a2c:	0012a941 	jmpi	12a94 <_write_r>

00012a30 <__sseek>:
   12a30:	defffe04 	addi	sp,sp,-8
   12a34:	dc000015 	stw	r16,0(sp)
   12a38:	2821883a 	mov	r16,r5
   12a3c:	2940038f 	ldh	r5,14(r5)
   12a40:	dfc00115 	stw	ra,4(sp)
   12a44:	0012d040 	call	12d04 <_lseek_r>
   12a48:	00ffffc4 	movi	r3,-1
   12a4c:	10c00826 	beq	r2,r3,12a70 <__sseek+0x40>
   12a50:	80c0030b 	ldhu	r3,12(r16)
   12a54:	80801415 	stw	r2,80(r16)
   12a58:	18c40014 	ori	r3,r3,4096
   12a5c:	80c0030d 	sth	r3,12(r16)
   12a60:	dfc00117 	ldw	ra,4(sp)
   12a64:	dc000017 	ldw	r16,0(sp)
   12a68:	dec00204 	addi	sp,sp,8
   12a6c:	f800283a 	ret
   12a70:	80c0030b 	ldhu	r3,12(r16)
   12a74:	18fbffcc 	andi	r3,r3,61439
   12a78:	80c0030d 	sth	r3,12(r16)
   12a7c:	dfc00117 	ldw	ra,4(sp)
   12a80:	dc000017 	ldw	r16,0(sp)
   12a84:	dec00204 	addi	sp,sp,8
   12a88:	f800283a 	ret

00012a8c <__sclose>:
   12a8c:	2940038f 	ldh	r5,14(r5)
   12a90:	0012af01 	jmpi	12af0 <_close_r>

00012a94 <_write_r>:
   12a94:	defffd04 	addi	sp,sp,-12
   12a98:	dc000015 	stw	r16,0(sp)
   12a9c:	040000b4 	movhi	r16,2
   12aa0:	dc400115 	stw	r17,4(sp)
   12aa4:	84229b04 	addi	r16,r16,-30100
   12aa8:	2023883a 	mov	r17,r4
   12aac:	2809883a 	mov	r4,r5
   12ab0:	300b883a 	mov	r5,r6
   12ab4:	380d883a 	mov	r6,r7
   12ab8:	dfc00215 	stw	ra,8(sp)
   12abc:	80000015 	stw	zero,0(r16)
   12ac0:	00136d80 	call	136d8 <write>
   12ac4:	00ffffc4 	movi	r3,-1
   12ac8:	10c00526 	beq	r2,r3,12ae0 <_write_r+0x4c>
   12acc:	dfc00217 	ldw	ra,8(sp)
   12ad0:	dc400117 	ldw	r17,4(sp)
   12ad4:	dc000017 	ldw	r16,0(sp)
   12ad8:	dec00304 	addi	sp,sp,12
   12adc:	f800283a 	ret
   12ae0:	80c00017 	ldw	r3,0(r16)
   12ae4:	183ff926 	beq	r3,zero,12acc <_gp+0xffff3b10>
   12ae8:	88c00015 	stw	r3,0(r17)
   12aec:	003ff706 	br	12acc <_gp+0xffff3b10>

00012af0 <_close_r>:
   12af0:	defffd04 	addi	sp,sp,-12
   12af4:	dc000015 	stw	r16,0(sp)
   12af8:	040000b4 	movhi	r16,2
   12afc:	dc400115 	stw	r17,4(sp)
   12b00:	84229b04 	addi	r16,r16,-30100
   12b04:	2023883a 	mov	r17,r4
   12b08:	2809883a 	mov	r4,r5
   12b0c:	dfc00215 	stw	ra,8(sp)
   12b10:	80000015 	stw	zero,0(r16)
   12b14:	0012e340 	call	12e34 <close>
   12b18:	00ffffc4 	movi	r3,-1
   12b1c:	10c00526 	beq	r2,r3,12b34 <_close_r+0x44>
   12b20:	dfc00217 	ldw	ra,8(sp)
   12b24:	dc400117 	ldw	r17,4(sp)
   12b28:	dc000017 	ldw	r16,0(sp)
   12b2c:	dec00304 	addi	sp,sp,12
   12b30:	f800283a 	ret
   12b34:	80c00017 	ldw	r3,0(r16)
   12b38:	183ff926 	beq	r3,zero,12b20 <_gp+0xffff3b64>
   12b3c:	88c00015 	stw	r3,0(r17)
   12b40:	003ff706 	br	12b20 <_gp+0xffff3b64>

00012b44 <_fclose_r>:
   12b44:	28003226 	beq	r5,zero,12c10 <_fclose_r+0xcc>
   12b48:	defffc04 	addi	sp,sp,-16
   12b4c:	dc400115 	stw	r17,4(sp)
   12b50:	2023883a 	mov	r17,r4
   12b54:	dc000015 	stw	r16,0(sp)
   12b58:	dfc00315 	stw	ra,12(sp)
   12b5c:	dc800215 	stw	r18,8(sp)
   12b60:	2821883a 	mov	r16,r5
   12b64:	00120b80 	call	120b8 <__sfp_lock_acquire>
   12b68:	88000226 	beq	r17,zero,12b74 <_fclose_r+0x30>
   12b6c:	88800e17 	ldw	r2,56(r17)
   12b70:	10002926 	beq	r2,zero,12c18 <_fclose_r+0xd4>
   12b74:	8080030f 	ldh	r2,12(r16)
   12b78:	10002226 	beq	r2,zero,12c04 <_fclose_r+0xc0>
   12b7c:	8809883a 	mov	r4,r17
   12b80:	800b883a 	mov	r5,r16
   12b84:	0011aec0 	call	11aec <_fflush_r>
   12b88:	1025883a 	mov	r18,r2
   12b8c:	80800b17 	ldw	r2,44(r16)
   12b90:	10000426 	beq	r2,zero,12ba4 <_fclose_r+0x60>
   12b94:	81400717 	ldw	r5,28(r16)
   12b98:	8809883a 	mov	r4,r17
   12b9c:	103ee83a 	callr	r2
   12ba0:	10002616 	blt	r2,zero,12c3c <_fclose_r+0xf8>
   12ba4:	8080030b 	ldhu	r2,12(r16)
   12ba8:	1080200c 	andi	r2,r2,128
   12bac:	10001f1e 	bne	r2,zero,12c2c <_fclose_r+0xe8>
   12bb0:	81400c17 	ldw	r5,48(r16)
   12bb4:	28000526 	beq	r5,zero,12bcc <_fclose_r+0x88>
   12bb8:	80801004 	addi	r2,r16,64
   12bbc:	28800226 	beq	r5,r2,12bc8 <_fclose_r+0x84>
   12bc0:	8809883a 	mov	r4,r17
   12bc4:	001221c0 	call	1221c <_free_r>
   12bc8:	80000c15 	stw	zero,48(r16)
   12bcc:	81401117 	ldw	r5,68(r16)
   12bd0:	28000326 	beq	r5,zero,12be0 <_fclose_r+0x9c>
   12bd4:	8809883a 	mov	r4,r17
   12bd8:	001221c0 	call	1221c <_free_r>
   12bdc:	80001115 	stw	zero,68(r16)
   12be0:	8000030d 	sth	zero,12(r16)
   12be4:	00120bc0 	call	120bc <__sfp_lock_release>
   12be8:	9005883a 	mov	r2,r18
   12bec:	dfc00317 	ldw	ra,12(sp)
   12bf0:	dc800217 	ldw	r18,8(sp)
   12bf4:	dc400117 	ldw	r17,4(sp)
   12bf8:	dc000017 	ldw	r16,0(sp)
   12bfc:	dec00404 	addi	sp,sp,16
   12c00:	f800283a 	ret
   12c04:	00120bc0 	call	120bc <__sfp_lock_release>
   12c08:	0005883a 	mov	r2,zero
   12c0c:	003ff706 	br	12bec <_gp+0xffff3c30>
   12c10:	0005883a 	mov	r2,zero
   12c14:	f800283a 	ret
   12c18:	8809883a 	mov	r4,r17
   12c1c:	00120a80 	call	120a8 <__sinit>
   12c20:	8080030f 	ldh	r2,12(r16)
   12c24:	103fd51e 	bne	r2,zero,12b7c <_gp+0xffff3bc0>
   12c28:	003ff606 	br	12c04 <_gp+0xffff3c48>
   12c2c:	81400417 	ldw	r5,16(r16)
   12c30:	8809883a 	mov	r4,r17
   12c34:	001221c0 	call	1221c <_free_r>
   12c38:	003fdd06 	br	12bb0 <_gp+0xffff3bf4>
   12c3c:	04bfffc4 	movi	r18,-1
   12c40:	003fd806 	br	12ba4 <_gp+0xffff3be8>

00012c44 <fclose>:
   12c44:	00800074 	movhi	r2,1
   12c48:	109bf004 	addi	r2,r2,28608
   12c4c:	200b883a 	mov	r5,r4
   12c50:	11000017 	ldw	r4,0(r2)
   12c54:	0012b441 	jmpi	12b44 <_fclose_r>

00012c58 <_fstat_r>:
   12c58:	defffd04 	addi	sp,sp,-12
   12c5c:	dc000015 	stw	r16,0(sp)
   12c60:	040000b4 	movhi	r16,2
   12c64:	dc400115 	stw	r17,4(sp)
   12c68:	84229b04 	addi	r16,r16,-30100
   12c6c:	2023883a 	mov	r17,r4
   12c70:	2809883a 	mov	r4,r5
   12c74:	300b883a 	mov	r5,r6
   12c78:	dfc00215 	stw	ra,8(sp)
   12c7c:	80000015 	stw	zero,0(r16)
   12c80:	0012f880 	call	12f88 <fstat>
   12c84:	00ffffc4 	movi	r3,-1
   12c88:	10c00526 	beq	r2,r3,12ca0 <_fstat_r+0x48>
   12c8c:	dfc00217 	ldw	ra,8(sp)
   12c90:	dc400117 	ldw	r17,4(sp)
   12c94:	dc000017 	ldw	r16,0(sp)
   12c98:	dec00304 	addi	sp,sp,12
   12c9c:	f800283a 	ret
   12ca0:	80c00017 	ldw	r3,0(r16)
   12ca4:	183ff926 	beq	r3,zero,12c8c <_gp+0xffff3cd0>
   12ca8:	88c00015 	stw	r3,0(r17)
   12cac:	003ff706 	br	12c8c <_gp+0xffff3cd0>

00012cb0 <_isatty_r>:
   12cb0:	defffd04 	addi	sp,sp,-12
   12cb4:	dc000015 	stw	r16,0(sp)
   12cb8:	040000b4 	movhi	r16,2
   12cbc:	dc400115 	stw	r17,4(sp)
   12cc0:	84229b04 	addi	r16,r16,-30100
   12cc4:	2023883a 	mov	r17,r4
   12cc8:	2809883a 	mov	r4,r5
   12ccc:	dfc00215 	stw	ra,8(sp)
   12cd0:	80000015 	stw	zero,0(r16)
   12cd4:	00130900 	call	13090 <isatty>
   12cd8:	00ffffc4 	movi	r3,-1
   12cdc:	10c00526 	beq	r2,r3,12cf4 <_isatty_r+0x44>
   12ce0:	dfc00217 	ldw	ra,8(sp)
   12ce4:	dc400117 	ldw	r17,4(sp)
   12ce8:	dc000017 	ldw	r16,0(sp)
   12cec:	dec00304 	addi	sp,sp,12
   12cf0:	f800283a 	ret
   12cf4:	80c00017 	ldw	r3,0(r16)
   12cf8:	183ff926 	beq	r3,zero,12ce0 <_gp+0xffff3d24>
   12cfc:	88c00015 	stw	r3,0(r17)
   12d00:	003ff706 	br	12ce0 <_gp+0xffff3d24>

00012d04 <_lseek_r>:
   12d04:	defffd04 	addi	sp,sp,-12
   12d08:	dc000015 	stw	r16,0(sp)
   12d0c:	040000b4 	movhi	r16,2
   12d10:	dc400115 	stw	r17,4(sp)
   12d14:	84229b04 	addi	r16,r16,-30100
   12d18:	2023883a 	mov	r17,r4
   12d1c:	2809883a 	mov	r4,r5
   12d20:	300b883a 	mov	r5,r6
   12d24:	380d883a 	mov	r6,r7
   12d28:	dfc00215 	stw	ra,8(sp)
   12d2c:	80000015 	stw	zero,0(r16)
   12d30:	00132700 	call	13270 <lseek>
   12d34:	00ffffc4 	movi	r3,-1
   12d38:	10c00526 	beq	r2,r3,12d50 <_lseek_r+0x4c>
   12d3c:	dfc00217 	ldw	ra,8(sp)
   12d40:	dc400117 	ldw	r17,4(sp)
   12d44:	dc000017 	ldw	r16,0(sp)
   12d48:	dec00304 	addi	sp,sp,12
   12d4c:	f800283a 	ret
   12d50:	80c00017 	ldw	r3,0(r16)
   12d54:	183ff926 	beq	r3,zero,12d3c <_gp+0xffff3d80>
   12d58:	88c00015 	stw	r3,0(r17)
   12d5c:	003ff706 	br	12d3c <_gp+0xffff3d80>

00012d60 <_read_r>:
   12d60:	defffd04 	addi	sp,sp,-12
   12d64:	dc000015 	stw	r16,0(sp)
   12d68:	040000b4 	movhi	r16,2
   12d6c:	dc400115 	stw	r17,4(sp)
   12d70:	84229b04 	addi	r16,r16,-30100
   12d74:	2023883a 	mov	r17,r4
   12d78:	2809883a 	mov	r4,r5
   12d7c:	300b883a 	mov	r5,r6
   12d80:	380d883a 	mov	r6,r7
   12d84:	dfc00215 	stw	ra,8(sp)
   12d88:	80000015 	stw	zero,0(r16)
   12d8c:	00134540 	call	13454 <read>
   12d90:	00ffffc4 	movi	r3,-1
   12d94:	10c00526 	beq	r2,r3,12dac <_read_r+0x4c>
   12d98:	dfc00217 	ldw	ra,8(sp)
   12d9c:	dc400117 	ldw	r17,4(sp)
   12da0:	dc000017 	ldw	r16,0(sp)
   12da4:	dec00304 	addi	sp,sp,12
   12da8:	f800283a 	ret
   12dac:	80c00017 	ldw	r3,0(r16)
   12db0:	183ff926 	beq	r3,zero,12d98 <_gp+0xffff3ddc>
   12db4:	88c00015 	stw	r3,0(r17)
   12db8:	003ff706 	br	12d98 <_gp+0xffff3ddc>

00012dbc <__mulsi3>:
   12dbc:	0005883a 	mov	r2,zero
   12dc0:	20000726 	beq	r4,zero,12de0 <__mulsi3+0x24>
   12dc4:	20c0004c 	andi	r3,r4,1
   12dc8:	2008d07a 	srli	r4,r4,1
   12dcc:	18000126 	beq	r3,zero,12dd4 <__mulsi3+0x18>
   12dd0:	1145883a 	add	r2,r2,r5
   12dd4:	294b883a 	add	r5,r5,r5
   12dd8:	203ffa1e 	bne	r4,zero,12dc4 <_gp+0xffff3e08>
   12ddc:	f800283a 	ret
   12de0:	f800283a 	ret

00012de4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12de4:	defffe04 	addi	sp,sp,-8
   12de8:	dfc00115 	stw	ra,4(sp)
   12dec:	df000015 	stw	fp,0(sp)
   12df0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12df4:	00800074 	movhi	r2,1
   12df8:	109bf804 	addi	r2,r2,28640
   12dfc:	10800017 	ldw	r2,0(r2)
   12e00:	10000526 	beq	r2,zero,12e18 <alt_get_errno+0x34>
   12e04:	00800074 	movhi	r2,1
   12e08:	109bf804 	addi	r2,r2,28640
   12e0c:	10800017 	ldw	r2,0(r2)
   12e10:	103ee83a 	callr	r2
   12e14:	00000206 	br	12e20 <alt_get_errno+0x3c>
   12e18:	008000b4 	movhi	r2,2
   12e1c:	10a29b04 	addi	r2,r2,-30100
}
   12e20:	e037883a 	mov	sp,fp
   12e24:	dfc00117 	ldw	ra,4(sp)
   12e28:	df000017 	ldw	fp,0(sp)
   12e2c:	dec00204 	addi	sp,sp,8
   12e30:	f800283a 	ret

00012e34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12e34:	defffb04 	addi	sp,sp,-20
   12e38:	dfc00415 	stw	ra,16(sp)
   12e3c:	df000315 	stw	fp,12(sp)
   12e40:	df000304 	addi	fp,sp,12
   12e44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12e48:	e0bfff17 	ldw	r2,-4(fp)
   12e4c:	10000816 	blt	r2,zero,12e70 <close+0x3c>
   12e50:	e13fff17 	ldw	r4,-4(fp)
   12e54:	01400304 	movi	r5,12
   12e58:	0012dbc0 	call	12dbc <__mulsi3>
   12e5c:	1007883a 	mov	r3,r2
   12e60:	00800074 	movhi	r2,1
   12e64:	10977704 	addi	r2,r2,24028
   12e68:	1885883a 	add	r2,r3,r2
   12e6c:	00000106 	br	12e74 <close+0x40>
   12e70:	0005883a 	mov	r2,zero
   12e74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12e78:	e0bffd17 	ldw	r2,-12(fp)
   12e7c:	10001926 	beq	r2,zero,12ee4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12e80:	e0bffd17 	ldw	r2,-12(fp)
   12e84:	10800017 	ldw	r2,0(r2)
   12e88:	10800417 	ldw	r2,16(r2)
   12e8c:	10000626 	beq	r2,zero,12ea8 <close+0x74>
   12e90:	e0bffd17 	ldw	r2,-12(fp)
   12e94:	10800017 	ldw	r2,0(r2)
   12e98:	10800417 	ldw	r2,16(r2)
   12e9c:	e13ffd17 	ldw	r4,-12(fp)
   12ea0:	103ee83a 	callr	r2
   12ea4:	00000106 	br	12eac <close+0x78>
   12ea8:	0005883a 	mov	r2,zero
   12eac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12eb0:	e13fff17 	ldw	r4,-4(fp)
   12eb4:	00135580 	call	13558 <alt_release_fd>
    if (rval < 0)
   12eb8:	e0bffe17 	ldw	r2,-8(fp)
   12ebc:	1000070e 	bge	r2,zero,12edc <close+0xa8>
    {
      ALT_ERRNO = -rval;
   12ec0:	0012de40 	call	12de4 <alt_get_errno>
   12ec4:	1007883a 	mov	r3,r2
   12ec8:	e0bffe17 	ldw	r2,-8(fp)
   12ecc:	0085c83a 	sub	r2,zero,r2
   12ed0:	18800015 	stw	r2,0(r3)
      return -1;
   12ed4:	00bfffc4 	movi	r2,-1
   12ed8:	00000706 	br	12ef8 <close+0xc4>
    }
    return 0;
   12edc:	0005883a 	mov	r2,zero
   12ee0:	00000506 	br	12ef8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12ee4:	0012de40 	call	12de4 <alt_get_errno>
   12ee8:	1007883a 	mov	r3,r2
   12eec:	00801444 	movi	r2,81
   12ef0:	18800015 	stw	r2,0(r3)
    return -1;
   12ef4:	00bfffc4 	movi	r2,-1
  }
}
   12ef8:	e037883a 	mov	sp,fp
   12efc:	dfc00117 	ldw	ra,4(sp)
   12f00:	df000017 	ldw	fp,0(sp)
   12f04:	dec00204 	addi	sp,sp,8
   12f08:	f800283a 	ret

00012f0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12f0c:	defffc04 	addi	sp,sp,-16
   12f10:	df000315 	stw	fp,12(sp)
   12f14:	df000304 	addi	fp,sp,12
   12f18:	e13ffd15 	stw	r4,-12(fp)
   12f1c:	e17ffe15 	stw	r5,-8(fp)
   12f20:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12f24:	e0bfff17 	ldw	r2,-4(fp)
}
   12f28:	e037883a 	mov	sp,fp
   12f2c:	df000017 	ldw	fp,0(sp)
   12f30:	dec00104 	addi	sp,sp,4
   12f34:	f800283a 	ret

00012f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12f38:	defffe04 	addi	sp,sp,-8
   12f3c:	dfc00115 	stw	ra,4(sp)
   12f40:	df000015 	stw	fp,0(sp)
   12f44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12f48:	00800074 	movhi	r2,1
   12f4c:	109bf804 	addi	r2,r2,28640
   12f50:	10800017 	ldw	r2,0(r2)
   12f54:	10000526 	beq	r2,zero,12f6c <alt_get_errno+0x34>
   12f58:	00800074 	movhi	r2,1
   12f5c:	109bf804 	addi	r2,r2,28640
   12f60:	10800017 	ldw	r2,0(r2)
   12f64:	103ee83a 	callr	r2
   12f68:	00000206 	br	12f74 <alt_get_errno+0x3c>
   12f6c:	008000b4 	movhi	r2,2
   12f70:	10a29b04 	addi	r2,r2,-30100
}
   12f74:	e037883a 	mov	sp,fp
   12f78:	dfc00117 	ldw	ra,4(sp)
   12f7c:	df000017 	ldw	fp,0(sp)
   12f80:	dec00204 	addi	sp,sp,8
   12f84:	f800283a 	ret

00012f88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12f88:	defffb04 	addi	sp,sp,-20
   12f8c:	dfc00415 	stw	ra,16(sp)
   12f90:	df000315 	stw	fp,12(sp)
   12f94:	df000304 	addi	fp,sp,12
   12f98:	e13ffe15 	stw	r4,-8(fp)
   12f9c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12fa0:	e0bffe17 	ldw	r2,-8(fp)
   12fa4:	10000816 	blt	r2,zero,12fc8 <fstat+0x40>
   12fa8:	e13ffe17 	ldw	r4,-8(fp)
   12fac:	01400304 	movi	r5,12
   12fb0:	0012dbc0 	call	12dbc <__mulsi3>
   12fb4:	1007883a 	mov	r3,r2
   12fb8:	00800074 	movhi	r2,1
   12fbc:	10977704 	addi	r2,r2,24028
   12fc0:	1885883a 	add	r2,r3,r2
   12fc4:	00000106 	br	12fcc <fstat+0x44>
   12fc8:	0005883a 	mov	r2,zero
   12fcc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12fd0:	e0bffd17 	ldw	r2,-12(fp)
   12fd4:	10001026 	beq	r2,zero,13018 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12fd8:	e0bffd17 	ldw	r2,-12(fp)
   12fdc:	10800017 	ldw	r2,0(r2)
   12fe0:	10800817 	ldw	r2,32(r2)
   12fe4:	10000726 	beq	r2,zero,13004 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   12fe8:	e0bffd17 	ldw	r2,-12(fp)
   12fec:	10800017 	ldw	r2,0(r2)
   12ff0:	10800817 	ldw	r2,32(r2)
   12ff4:	e13ffd17 	ldw	r4,-12(fp)
   12ff8:	e17fff17 	ldw	r5,-4(fp)
   12ffc:	103ee83a 	callr	r2
   13000:	00000a06 	br	1302c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13004:	e0bfff17 	ldw	r2,-4(fp)
   13008:	00c80004 	movi	r3,8192
   1300c:	10c00115 	stw	r3,4(r2)
      return 0;
   13010:	0005883a 	mov	r2,zero
   13014:	00000506 	br	1302c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13018:	0012f380 	call	12f38 <alt_get_errno>
   1301c:	1007883a 	mov	r3,r2
   13020:	00801444 	movi	r2,81
   13024:	18800015 	stw	r2,0(r3)
    return -1;
   13028:	00bfffc4 	movi	r2,-1
  }
}
   1302c:	e037883a 	mov	sp,fp
   13030:	dfc00117 	ldw	ra,4(sp)
   13034:	df000017 	ldw	fp,0(sp)
   13038:	dec00204 	addi	sp,sp,8
   1303c:	f800283a 	ret

00013040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13040:	defffe04 	addi	sp,sp,-8
   13044:	dfc00115 	stw	ra,4(sp)
   13048:	df000015 	stw	fp,0(sp)
   1304c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13050:	00800074 	movhi	r2,1
   13054:	109bf804 	addi	r2,r2,28640
   13058:	10800017 	ldw	r2,0(r2)
   1305c:	10000526 	beq	r2,zero,13074 <alt_get_errno+0x34>
   13060:	00800074 	movhi	r2,1
   13064:	109bf804 	addi	r2,r2,28640
   13068:	10800017 	ldw	r2,0(r2)
   1306c:	103ee83a 	callr	r2
   13070:	00000206 	br	1307c <alt_get_errno+0x3c>
   13074:	008000b4 	movhi	r2,2
   13078:	10a29b04 	addi	r2,r2,-30100
}
   1307c:	e037883a 	mov	sp,fp
   13080:	dfc00117 	ldw	ra,4(sp)
   13084:	df000017 	ldw	fp,0(sp)
   13088:	dec00204 	addi	sp,sp,8
   1308c:	f800283a 	ret

00013090 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13090:	deffed04 	addi	sp,sp,-76
   13094:	dfc01215 	stw	ra,72(sp)
   13098:	df001115 	stw	fp,68(sp)
   1309c:	df001104 	addi	fp,sp,68
   130a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   130a4:	e0bfff17 	ldw	r2,-4(fp)
   130a8:	10000816 	blt	r2,zero,130cc <isatty+0x3c>
   130ac:	e13fff17 	ldw	r4,-4(fp)
   130b0:	01400304 	movi	r5,12
   130b4:	0012dbc0 	call	12dbc <__mulsi3>
   130b8:	1007883a 	mov	r3,r2
   130bc:	00800074 	movhi	r2,1
   130c0:	10977704 	addi	r2,r2,24028
   130c4:	1885883a 	add	r2,r3,r2
   130c8:	00000106 	br	130d0 <isatty+0x40>
   130cc:	0005883a 	mov	r2,zero
   130d0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   130d4:	e0bfef17 	ldw	r2,-68(fp)
   130d8:	10000e26 	beq	r2,zero,13114 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   130dc:	e0bfef17 	ldw	r2,-68(fp)
   130e0:	10800017 	ldw	r2,0(r2)
   130e4:	10800817 	ldw	r2,32(r2)
   130e8:	1000021e 	bne	r2,zero,130f4 <isatty+0x64>
    {
      return 1;
   130ec:	00800044 	movi	r2,1
   130f0:	00000d06 	br	13128 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   130f4:	e0bff004 	addi	r2,fp,-64
   130f8:	e13fff17 	ldw	r4,-4(fp)
   130fc:	100b883a 	mov	r5,r2
   13100:	0012f880 	call	12f88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13104:	e0bff117 	ldw	r2,-60(fp)
   13108:	10880020 	cmpeqi	r2,r2,8192
   1310c:	10803fcc 	andi	r2,r2,255
   13110:	00000506 	br	13128 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13114:	00130400 	call	13040 <alt_get_errno>
   13118:	1007883a 	mov	r3,r2
   1311c:	00801444 	movi	r2,81
   13120:	18800015 	stw	r2,0(r3)
    return 0;
   13124:	0005883a 	mov	r2,zero
  }
}
   13128:	e037883a 	mov	sp,fp
   1312c:	dfc00117 	ldw	ra,4(sp)
   13130:	df000017 	ldw	fp,0(sp)
   13134:	dec00204 	addi	sp,sp,8
   13138:	f800283a 	ret

0001313c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1313c:	defffc04 	addi	sp,sp,-16
   13140:	df000315 	stw	fp,12(sp)
   13144:	df000304 	addi	fp,sp,12
   13148:	e13ffd15 	stw	r4,-12(fp)
   1314c:	e17ffe15 	stw	r5,-8(fp)
   13150:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13154:	e0fffe17 	ldw	r3,-8(fp)
   13158:	e0bffd17 	ldw	r2,-12(fp)
   1315c:	18800c26 	beq	r3,r2,13190 <alt_load_section+0x54>
  {
    while( to != end )
   13160:	00000806 	br	13184 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13164:	e0bffe17 	ldw	r2,-8(fp)
   13168:	10c00104 	addi	r3,r2,4
   1316c:	e0fffe15 	stw	r3,-8(fp)
   13170:	e0fffd17 	ldw	r3,-12(fp)
   13174:	19000104 	addi	r4,r3,4
   13178:	e13ffd15 	stw	r4,-12(fp)
   1317c:	18c00017 	ldw	r3,0(r3)
   13180:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13184:	e0fffe17 	ldw	r3,-8(fp)
   13188:	e0bfff17 	ldw	r2,-4(fp)
   1318c:	18bff51e 	bne	r3,r2,13164 <_gp+0xffff41a8>
    {
      *to++ = *from++;
    }
  }
}
   13190:	e037883a 	mov	sp,fp
   13194:	df000017 	ldw	fp,0(sp)
   13198:	dec00104 	addi	sp,sp,4
   1319c:	f800283a 	ret

000131a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   131a0:	defffe04 	addi	sp,sp,-8
   131a4:	dfc00115 	stw	ra,4(sp)
   131a8:	df000015 	stw	fp,0(sp)
   131ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   131b0:	01000074 	movhi	r4,1
   131b4:	211bfd04 	addi	r4,r4,28660
   131b8:	01400074 	movhi	r5,1
   131bc:	29556204 	addi	r5,r5,21896
   131c0:	01800074 	movhi	r6,1
   131c4:	319bfd04 	addi	r6,r6,28660
   131c8:	001313c0 	call	1313c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   131cc:	01000074 	movhi	r4,1
   131d0:	21000804 	addi	r4,r4,32
   131d4:	01400074 	movhi	r5,1
   131d8:	29400804 	addi	r5,r5,32
   131dc:	01800074 	movhi	r6,1
   131e0:	31808b04 	addi	r6,r6,556
   131e4:	001313c0 	call	1313c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   131e8:	01000074 	movhi	r4,1
   131ec:	21154e04 	addi	r4,r4,21816
   131f0:	01400074 	movhi	r5,1
   131f4:	29554e04 	addi	r5,r5,21816
   131f8:	01800074 	movhi	r6,1
   131fc:	31956204 	addi	r6,r6,21896
   13200:	001313c0 	call	1313c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13204:	00144140 	call	14414 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13208:	00145dc0 	call	145dc <alt_icache_flush_all>
}
   1320c:	e037883a 	mov	sp,fp
   13210:	dfc00117 	ldw	ra,4(sp)
   13214:	df000017 	ldw	fp,0(sp)
   13218:	dec00204 	addi	sp,sp,8
   1321c:	f800283a 	ret

00013220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13220:	defffe04 	addi	sp,sp,-8
   13224:	dfc00115 	stw	ra,4(sp)
   13228:	df000015 	stw	fp,0(sp)
   1322c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13230:	00800074 	movhi	r2,1
   13234:	109bf804 	addi	r2,r2,28640
   13238:	10800017 	ldw	r2,0(r2)
   1323c:	10000526 	beq	r2,zero,13254 <alt_get_errno+0x34>
   13240:	00800074 	movhi	r2,1
   13244:	109bf804 	addi	r2,r2,28640
   13248:	10800017 	ldw	r2,0(r2)
   1324c:	103ee83a 	callr	r2
   13250:	00000206 	br	1325c <alt_get_errno+0x3c>
   13254:	008000b4 	movhi	r2,2
   13258:	10a29b04 	addi	r2,r2,-30100
}
   1325c:	e037883a 	mov	sp,fp
   13260:	dfc00117 	ldw	ra,4(sp)
   13264:	df000017 	ldw	fp,0(sp)
   13268:	dec00204 	addi	sp,sp,8
   1326c:	f800283a 	ret

00013270 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13270:	defff904 	addi	sp,sp,-28
   13274:	dfc00615 	stw	ra,24(sp)
   13278:	df000515 	stw	fp,20(sp)
   1327c:	df000504 	addi	fp,sp,20
   13280:	e13ffd15 	stw	r4,-12(fp)
   13284:	e17ffe15 	stw	r5,-8(fp)
   13288:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1328c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13290:	e0bffd17 	ldw	r2,-12(fp)
   13294:	10000816 	blt	r2,zero,132b8 <lseek+0x48>
   13298:	e13ffd17 	ldw	r4,-12(fp)
   1329c:	01400304 	movi	r5,12
   132a0:	0012dbc0 	call	12dbc <__mulsi3>
   132a4:	1007883a 	mov	r3,r2
   132a8:	00800074 	movhi	r2,1
   132ac:	10977704 	addi	r2,r2,24028
   132b0:	1885883a 	add	r2,r3,r2
   132b4:	00000106 	br	132bc <lseek+0x4c>
   132b8:	0005883a 	mov	r2,zero
   132bc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   132c0:	e0bffc17 	ldw	r2,-16(fp)
   132c4:	10001026 	beq	r2,zero,13308 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   132c8:	e0bffc17 	ldw	r2,-16(fp)
   132cc:	10800017 	ldw	r2,0(r2)
   132d0:	10800717 	ldw	r2,28(r2)
   132d4:	10000926 	beq	r2,zero,132fc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   132d8:	e0bffc17 	ldw	r2,-16(fp)
   132dc:	10800017 	ldw	r2,0(r2)
   132e0:	10800717 	ldw	r2,28(r2)
   132e4:	e13ffc17 	ldw	r4,-16(fp)
   132e8:	e17ffe17 	ldw	r5,-8(fp)
   132ec:	e1bfff17 	ldw	r6,-4(fp)
   132f0:	103ee83a 	callr	r2
   132f4:	e0bffb15 	stw	r2,-20(fp)
   132f8:	00000506 	br	13310 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   132fc:	00bfde84 	movi	r2,-134
   13300:	e0bffb15 	stw	r2,-20(fp)
   13304:	00000206 	br	13310 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   13308:	00bfebc4 	movi	r2,-81
   1330c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13310:	e0bffb17 	ldw	r2,-20(fp)
   13314:	1000070e 	bge	r2,zero,13334 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   13318:	00132200 	call	13220 <alt_get_errno>
   1331c:	1007883a 	mov	r3,r2
   13320:	e0bffb17 	ldw	r2,-20(fp)
   13324:	0085c83a 	sub	r2,zero,r2
   13328:	18800015 	stw	r2,0(r3)
    rc = -1;
   1332c:	00bfffc4 	movi	r2,-1
   13330:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13334:	e0bffb17 	ldw	r2,-20(fp)
}
   13338:	e037883a 	mov	sp,fp
   1333c:	dfc00117 	ldw	ra,4(sp)
   13340:	df000017 	ldw	fp,0(sp)
   13344:	dec00204 	addi	sp,sp,8
   13348:	f800283a 	ret

0001334c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1334c:	defffd04 	addi	sp,sp,-12
   13350:	dfc00215 	stw	ra,8(sp)
   13354:	df000115 	stw	fp,4(sp)
   13358:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1335c:	0009883a 	mov	r4,zero
   13360:	00138100 	call	13810 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13364:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13368:	00138440 	call	13844 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1336c:	01000074 	movhi	r4,1
   13370:	21155804 	addi	r4,r4,21856
   13374:	01400074 	movhi	r5,1
   13378:	29555804 	addi	r5,r5,21856
   1337c:	01800074 	movhi	r6,1
   13380:	31955804 	addi	r6,r6,21856
   13384:	00149a80 	call	149a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13388:	00145240 	call	14524 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1338c:	01000074 	movhi	r4,1
   13390:	21116004 	addi	r4,r4,17792
   13394:	00151940 	call	15194 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13398:	d126ad17 	ldw	r4,-25932(gp)
   1339c:	d0e6ae17 	ldw	r3,-25928(gp)
   133a0:	d0a6af17 	ldw	r2,-25924(gp)
   133a4:	180b883a 	mov	r5,r3
   133a8:	100d883a 	mov	r6,r2
   133ac:	00102680 	call	10268 <main>
   133b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   133b4:	01000044 	movi	r4,1
   133b8:	0012e340 	call	12e34 <close>
  exit (result);
   133bc:	e13fff17 	ldw	r4,-4(fp)
   133c0:	00151a80 	call	151a8 <exit>

000133c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   133c4:	defffe04 	addi	sp,sp,-8
   133c8:	df000115 	stw	fp,4(sp)
   133cc:	df000104 	addi	fp,sp,4
   133d0:	e13fff15 	stw	r4,-4(fp)
}
   133d4:	e037883a 	mov	sp,fp
   133d8:	df000017 	ldw	fp,0(sp)
   133dc:	dec00104 	addi	sp,sp,4
   133e0:	f800283a 	ret

000133e4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   133e4:	defffe04 	addi	sp,sp,-8
   133e8:	df000115 	stw	fp,4(sp)
   133ec:	df000104 	addi	fp,sp,4
   133f0:	e13fff15 	stw	r4,-4(fp)
}
   133f4:	e037883a 	mov	sp,fp
   133f8:	df000017 	ldw	fp,0(sp)
   133fc:	dec00104 	addi	sp,sp,4
   13400:	f800283a 	ret

00013404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13404:	defffe04 	addi	sp,sp,-8
   13408:	dfc00115 	stw	ra,4(sp)
   1340c:	df000015 	stw	fp,0(sp)
   13410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13414:	00800074 	movhi	r2,1
   13418:	109bf804 	addi	r2,r2,28640
   1341c:	10800017 	ldw	r2,0(r2)
   13420:	10000526 	beq	r2,zero,13438 <alt_get_errno+0x34>
   13424:	00800074 	movhi	r2,1
   13428:	109bf804 	addi	r2,r2,28640
   1342c:	10800017 	ldw	r2,0(r2)
   13430:	103ee83a 	callr	r2
   13434:	00000206 	br	13440 <alt_get_errno+0x3c>
   13438:	008000b4 	movhi	r2,2
   1343c:	10a29b04 	addi	r2,r2,-30100
}
   13440:	e037883a 	mov	sp,fp
   13444:	dfc00117 	ldw	ra,4(sp)
   13448:	df000017 	ldw	fp,0(sp)
   1344c:	dec00204 	addi	sp,sp,8
   13450:	f800283a 	ret

00013454 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13454:	defff904 	addi	sp,sp,-28
   13458:	dfc00615 	stw	ra,24(sp)
   1345c:	df000515 	stw	fp,20(sp)
   13460:	df000504 	addi	fp,sp,20
   13464:	e13ffd15 	stw	r4,-12(fp)
   13468:	e17ffe15 	stw	r5,-8(fp)
   1346c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13470:	e0bffd17 	ldw	r2,-12(fp)
   13474:	10000816 	blt	r2,zero,13498 <read+0x44>
   13478:	e13ffd17 	ldw	r4,-12(fp)
   1347c:	01400304 	movi	r5,12
   13480:	0012dbc0 	call	12dbc <__mulsi3>
   13484:	1007883a 	mov	r3,r2
   13488:	00800074 	movhi	r2,1
   1348c:	10977704 	addi	r2,r2,24028
   13490:	1885883a 	add	r2,r3,r2
   13494:	00000106 	br	1349c <read+0x48>
   13498:	0005883a 	mov	r2,zero
   1349c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   134a0:	e0bffb17 	ldw	r2,-20(fp)
   134a4:	10002226 	beq	r2,zero,13530 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   134a8:	e0bffb17 	ldw	r2,-20(fp)
   134ac:	10800217 	ldw	r2,8(r2)
   134b0:	108000cc 	andi	r2,r2,3
   134b4:	10800060 	cmpeqi	r2,r2,1
   134b8:	1000181e 	bne	r2,zero,1351c <read+0xc8>
        (fd->dev->read))
   134bc:	e0bffb17 	ldw	r2,-20(fp)
   134c0:	10800017 	ldw	r2,0(r2)
   134c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   134c8:	10001426 	beq	r2,zero,1351c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   134cc:	e0bffb17 	ldw	r2,-20(fp)
   134d0:	10800017 	ldw	r2,0(r2)
   134d4:	10800517 	ldw	r2,20(r2)
   134d8:	e0ffff17 	ldw	r3,-4(fp)
   134dc:	e13ffb17 	ldw	r4,-20(fp)
   134e0:	e17ffe17 	ldw	r5,-8(fp)
   134e4:	180d883a 	mov	r6,r3
   134e8:	103ee83a 	callr	r2
   134ec:	e0bffc15 	stw	r2,-16(fp)
   134f0:	e0bffc17 	ldw	r2,-16(fp)
   134f4:	1000070e 	bge	r2,zero,13514 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   134f8:	00134040 	call	13404 <alt_get_errno>
   134fc:	1007883a 	mov	r3,r2
   13500:	e0bffc17 	ldw	r2,-16(fp)
   13504:	0085c83a 	sub	r2,zero,r2
   13508:	18800015 	stw	r2,0(r3)
          return -1;
   1350c:	00bfffc4 	movi	r2,-1
   13510:	00000c06 	br	13544 <read+0xf0>
        }
        return rval;
   13514:	e0bffc17 	ldw	r2,-16(fp)
   13518:	00000a06 	br	13544 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1351c:	00134040 	call	13404 <alt_get_errno>
   13520:	1007883a 	mov	r3,r2
   13524:	00800344 	movi	r2,13
   13528:	18800015 	stw	r2,0(r3)
   1352c:	00000406 	br	13540 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13530:	00134040 	call	13404 <alt_get_errno>
   13534:	1007883a 	mov	r3,r2
   13538:	00801444 	movi	r2,81
   1353c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13540:	00bfffc4 	movi	r2,-1
}
   13544:	e037883a 	mov	sp,fp
   13548:	dfc00117 	ldw	ra,4(sp)
   1354c:	df000017 	ldw	fp,0(sp)
   13550:	dec00204 	addi	sp,sp,8
   13554:	f800283a 	ret

00013558 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13558:	defffc04 	addi	sp,sp,-16
   1355c:	dfc00315 	stw	ra,12(sp)
   13560:	df000215 	stw	fp,8(sp)
   13564:	dc000115 	stw	r16,4(sp)
   13568:	df000204 	addi	fp,sp,8
   1356c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   13570:	e0bffe17 	ldw	r2,-8(fp)
   13574:	108000d0 	cmplti	r2,r2,3
   13578:	1000111e 	bne	r2,zero,135c0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1357c:	04000074 	movhi	r16,1
   13580:	84177704 	addi	r16,r16,24028
   13584:	e0bffe17 	ldw	r2,-8(fp)
   13588:	1009883a 	mov	r4,r2
   1358c:	01400304 	movi	r5,12
   13590:	0012dbc0 	call	12dbc <__mulsi3>
   13594:	8085883a 	add	r2,r16,r2
   13598:	10800204 	addi	r2,r2,8
   1359c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   135a0:	04000074 	movhi	r16,1
   135a4:	84177704 	addi	r16,r16,24028
   135a8:	e0bffe17 	ldw	r2,-8(fp)
   135ac:	1009883a 	mov	r4,r2
   135b0:	01400304 	movi	r5,12
   135b4:	0012dbc0 	call	12dbc <__mulsi3>
   135b8:	8085883a 	add	r2,r16,r2
   135bc:	10000015 	stw	zero,0(r2)
  }
}
   135c0:	e6ffff04 	addi	sp,fp,-4
   135c4:	dfc00217 	ldw	ra,8(sp)
   135c8:	df000117 	ldw	fp,4(sp)
   135cc:	dc000017 	ldw	r16,0(sp)
   135d0:	dec00304 	addi	sp,sp,12
   135d4:	f800283a 	ret

000135d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   135d8:	defff904 	addi	sp,sp,-28
   135dc:	df000615 	stw	fp,24(sp)
   135e0:	df000604 	addi	fp,sp,24
   135e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   135e8:	0005303a 	rdctl	r2,status
   135ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   135f0:	e0fffc17 	ldw	r3,-16(fp)
   135f4:	00bfff84 	movi	r2,-2
   135f8:	1884703a 	and	r2,r3,r2
   135fc:	1001703a 	wrctl	status,r2
  
  return context;
   13600:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13604:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13608:	d0a00a17 	ldw	r2,-32728(gp)
   1360c:	10c000c4 	addi	r3,r2,3
   13610:	00bfff04 	movi	r2,-4
   13614:	1884703a 	and	r2,r3,r2
   13618:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1361c:	d0e00a17 	ldw	r3,-32728(gp)
   13620:	e0bfff17 	ldw	r2,-4(fp)
   13624:	1887883a 	add	r3,r3,r2
   13628:	008000b4 	movhi	r2,2
   1362c:	10a80004 	addi	r2,r2,-24576
   13630:	10c0062e 	bgeu	r2,r3,1364c <sbrk+0x74>
   13634:	e0bffa17 	ldw	r2,-24(fp)
   13638:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1363c:	e0bffd17 	ldw	r2,-12(fp)
   13640:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13644:	00bfffc4 	movi	r2,-1
   13648:	00000b06 	br	13678 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1364c:	d0a00a17 	ldw	r2,-32728(gp)
   13650:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   13654:	d0e00a17 	ldw	r3,-32728(gp)
   13658:	e0bfff17 	ldw	r2,-4(fp)
   1365c:	1885883a 	add	r2,r3,r2
   13660:	d0a00a15 	stw	r2,-32728(gp)
   13664:	e0bffa17 	ldw	r2,-24(fp)
   13668:	e0bffe15 	stw	r2,-8(fp)
   1366c:	e0bffe17 	ldw	r2,-8(fp)
   13670:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13674:	e0bffb17 	ldw	r2,-20(fp)
} 
   13678:	e037883a 	mov	sp,fp
   1367c:	df000017 	ldw	fp,0(sp)
   13680:	dec00104 	addi	sp,sp,4
   13684:	f800283a 	ret

00013688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13688:	defffe04 	addi	sp,sp,-8
   1368c:	dfc00115 	stw	ra,4(sp)
   13690:	df000015 	stw	fp,0(sp)
   13694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13698:	00800074 	movhi	r2,1
   1369c:	109bf804 	addi	r2,r2,28640
   136a0:	10800017 	ldw	r2,0(r2)
   136a4:	10000526 	beq	r2,zero,136bc <alt_get_errno+0x34>
   136a8:	00800074 	movhi	r2,1
   136ac:	109bf804 	addi	r2,r2,28640
   136b0:	10800017 	ldw	r2,0(r2)
   136b4:	103ee83a 	callr	r2
   136b8:	00000206 	br	136c4 <alt_get_errno+0x3c>
   136bc:	008000b4 	movhi	r2,2
   136c0:	10a29b04 	addi	r2,r2,-30100
}
   136c4:	e037883a 	mov	sp,fp
   136c8:	dfc00117 	ldw	ra,4(sp)
   136cc:	df000017 	ldw	fp,0(sp)
   136d0:	dec00204 	addi	sp,sp,8
   136d4:	f800283a 	ret

000136d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   136d8:	defff904 	addi	sp,sp,-28
   136dc:	dfc00615 	stw	ra,24(sp)
   136e0:	df000515 	stw	fp,20(sp)
   136e4:	df000504 	addi	fp,sp,20
   136e8:	e13ffd15 	stw	r4,-12(fp)
   136ec:	e17ffe15 	stw	r5,-8(fp)
   136f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   136f4:	e0bffd17 	ldw	r2,-12(fp)
   136f8:	10000816 	blt	r2,zero,1371c <write+0x44>
   136fc:	e13ffd17 	ldw	r4,-12(fp)
   13700:	01400304 	movi	r5,12
   13704:	0012dbc0 	call	12dbc <__mulsi3>
   13708:	1007883a 	mov	r3,r2
   1370c:	00800074 	movhi	r2,1
   13710:	10977704 	addi	r2,r2,24028
   13714:	1885883a 	add	r2,r3,r2
   13718:	00000106 	br	13720 <write+0x48>
   1371c:	0005883a 	mov	r2,zero
   13720:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13724:	e0bffb17 	ldw	r2,-20(fp)
   13728:	10002126 	beq	r2,zero,137b0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1372c:	e0bffb17 	ldw	r2,-20(fp)
   13730:	10800217 	ldw	r2,8(r2)
   13734:	108000cc 	andi	r2,r2,3
   13738:	10001826 	beq	r2,zero,1379c <write+0xc4>
   1373c:	e0bffb17 	ldw	r2,-20(fp)
   13740:	10800017 	ldw	r2,0(r2)
   13744:	10800617 	ldw	r2,24(r2)
   13748:	10001426 	beq	r2,zero,1379c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1374c:	e0bffb17 	ldw	r2,-20(fp)
   13750:	10800017 	ldw	r2,0(r2)
   13754:	10800617 	ldw	r2,24(r2)
   13758:	e0ffff17 	ldw	r3,-4(fp)
   1375c:	e13ffb17 	ldw	r4,-20(fp)
   13760:	e17ffe17 	ldw	r5,-8(fp)
   13764:	180d883a 	mov	r6,r3
   13768:	103ee83a 	callr	r2
   1376c:	e0bffc15 	stw	r2,-16(fp)
   13770:	e0bffc17 	ldw	r2,-16(fp)
   13774:	1000070e 	bge	r2,zero,13794 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   13778:	00136880 	call	13688 <alt_get_errno>
   1377c:	1007883a 	mov	r3,r2
   13780:	e0bffc17 	ldw	r2,-16(fp)
   13784:	0085c83a 	sub	r2,zero,r2
   13788:	18800015 	stw	r2,0(r3)
        return -1;
   1378c:	00bfffc4 	movi	r2,-1
   13790:	00000c06 	br	137c4 <write+0xec>
      }
      return rval;
   13794:	e0bffc17 	ldw	r2,-16(fp)
   13798:	00000a06 	br	137c4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1379c:	00136880 	call	13688 <alt_get_errno>
   137a0:	1007883a 	mov	r3,r2
   137a4:	00800344 	movi	r2,13
   137a8:	18800015 	stw	r2,0(r3)
   137ac:	00000406 	br	137c0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   137b0:	00136880 	call	13688 <alt_get_errno>
   137b4:	1007883a 	mov	r3,r2
   137b8:	00801444 	movi	r2,81
   137bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   137c0:	00bfffc4 	movi	r2,-1
}
   137c4:	e037883a 	mov	sp,fp
   137c8:	dfc00117 	ldw	ra,4(sp)
   137cc:	df000017 	ldw	fp,0(sp)
   137d0:	dec00204 	addi	sp,sp,8
   137d4:	f800283a 	ret

000137d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   137d8:	defffd04 	addi	sp,sp,-12
   137dc:	dfc00215 	stw	ra,8(sp)
   137e0:	df000115 	stw	fp,4(sp)
   137e4:	df000104 	addi	fp,sp,4
   137e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   137ec:	e13fff17 	ldw	r4,-4(fp)
   137f0:	01400074 	movhi	r5,1
   137f4:	295bf504 	addi	r5,r5,28628
   137f8:	00144800 	call	14480 <alt_dev_llist_insert>
}
   137fc:	e037883a 	mov	sp,fp
   13800:	dfc00117 	ldw	ra,4(sp)
   13804:	df000017 	ldw	fp,0(sp)
   13808:	dec00204 	addi	sp,sp,8
   1380c:	f800283a 	ret

00013810 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13810:	defffd04 	addi	sp,sp,-12
   13814:	dfc00215 	stw	ra,8(sp)
   13818:	df000115 	stw	fp,4(sp)
   1381c:	df000104 	addi	fp,sp,4
   13820:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   13824:	0014e600 	call	14e60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13828:	00800044 	movi	r2,1
   1382c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13830:	e037883a 	mov	sp,fp
   13834:	dfc00117 	ldw	ra,4(sp)
   13838:	df000017 	ldw	fp,0(sp)
   1383c:	dec00204 	addi	sp,sp,8
   13840:	f800283a 	ret

00013844 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13844:	defffe04 	addi	sp,sp,-8
   13848:	dfc00115 	stw	ra,4(sp)
   1384c:	df000015 	stw	fp,0(sp)
   13850:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13854:	01000074 	movhi	r4,1
   13858:	2117e104 	addi	r4,r4,24452
   1385c:	000b883a 	mov	r5,zero
   13860:	000d883a 	mov	r6,zero
   13864:	00139ec0 	call	139ec <altera_avalon_jtag_uart_init>
   13868:	01000074 	movhi	r4,1
   1386c:	2117d704 	addi	r4,r4,24412
   13870:	00137d80 	call	137d8 <alt_dev_reg>
}
   13874:	e037883a 	mov	sp,fp
   13878:	dfc00117 	ldw	ra,4(sp)
   1387c:	df000017 	ldw	fp,0(sp)
   13880:	dec00204 	addi	sp,sp,8
   13884:	f800283a 	ret

00013888 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13888:	defffa04 	addi	sp,sp,-24
   1388c:	dfc00515 	stw	ra,20(sp)
   13890:	df000415 	stw	fp,16(sp)
   13894:	df000404 	addi	fp,sp,16
   13898:	e13ffd15 	stw	r4,-12(fp)
   1389c:	e17ffe15 	stw	r5,-8(fp)
   138a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   138a4:	e0bffd17 	ldw	r2,-12(fp)
   138a8:	10800017 	ldw	r2,0(r2)
   138ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   138b0:	e0bffc17 	ldw	r2,-16(fp)
   138b4:	10c00a04 	addi	r3,r2,40
   138b8:	e0bffd17 	ldw	r2,-12(fp)
   138bc:	10800217 	ldw	r2,8(r2)
   138c0:	1809883a 	mov	r4,r3
   138c4:	e17ffe17 	ldw	r5,-8(fp)
   138c8:	e1bfff17 	ldw	r6,-4(fp)
   138cc:	100f883a 	mov	r7,r2
   138d0:	0013eb00 	call	13eb0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   138d4:	e037883a 	mov	sp,fp
   138d8:	dfc00117 	ldw	ra,4(sp)
   138dc:	df000017 	ldw	fp,0(sp)
   138e0:	dec00204 	addi	sp,sp,8
   138e4:	f800283a 	ret

000138e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   138e8:	defffa04 	addi	sp,sp,-24
   138ec:	dfc00515 	stw	ra,20(sp)
   138f0:	df000415 	stw	fp,16(sp)
   138f4:	df000404 	addi	fp,sp,16
   138f8:	e13ffd15 	stw	r4,-12(fp)
   138fc:	e17ffe15 	stw	r5,-8(fp)
   13900:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13904:	e0bffd17 	ldw	r2,-12(fp)
   13908:	10800017 	ldw	r2,0(r2)
   1390c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13910:	e0bffc17 	ldw	r2,-16(fp)
   13914:	10c00a04 	addi	r3,r2,40
   13918:	e0bffd17 	ldw	r2,-12(fp)
   1391c:	10800217 	ldw	r2,8(r2)
   13920:	1809883a 	mov	r4,r3
   13924:	e17ffe17 	ldw	r5,-8(fp)
   13928:	e1bfff17 	ldw	r6,-4(fp)
   1392c:	100f883a 	mov	r7,r2
   13930:	00140bc0 	call	140bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13934:	e037883a 	mov	sp,fp
   13938:	dfc00117 	ldw	ra,4(sp)
   1393c:	df000017 	ldw	fp,0(sp)
   13940:	dec00204 	addi	sp,sp,8
   13944:	f800283a 	ret

00013948 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13948:	defffc04 	addi	sp,sp,-16
   1394c:	dfc00315 	stw	ra,12(sp)
   13950:	df000215 	stw	fp,8(sp)
   13954:	df000204 	addi	fp,sp,8
   13958:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1395c:	e0bfff17 	ldw	r2,-4(fp)
   13960:	10800017 	ldw	r2,0(r2)
   13964:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13968:	e0bffe17 	ldw	r2,-8(fp)
   1396c:	10c00a04 	addi	r3,r2,40
   13970:	e0bfff17 	ldw	r2,-4(fp)
   13974:	10800217 	ldw	r2,8(r2)
   13978:	1809883a 	mov	r4,r3
   1397c:	100b883a 	mov	r5,r2
   13980:	0013d5c0 	call	13d5c <altera_avalon_jtag_uart_close>
}
   13984:	e037883a 	mov	sp,fp
   13988:	dfc00117 	ldw	ra,4(sp)
   1398c:	df000017 	ldw	fp,0(sp)
   13990:	dec00204 	addi	sp,sp,8
   13994:	f800283a 	ret

00013998 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13998:	defffa04 	addi	sp,sp,-24
   1399c:	dfc00515 	stw	ra,20(sp)
   139a0:	df000415 	stw	fp,16(sp)
   139a4:	df000404 	addi	fp,sp,16
   139a8:	e13ffd15 	stw	r4,-12(fp)
   139ac:	e17ffe15 	stw	r5,-8(fp)
   139b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   139b4:	e0bffd17 	ldw	r2,-12(fp)
   139b8:	10800017 	ldw	r2,0(r2)
   139bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   139c0:	e0bffc17 	ldw	r2,-16(fp)
   139c4:	10800a04 	addi	r2,r2,40
   139c8:	1009883a 	mov	r4,r2
   139cc:	e17ffe17 	ldw	r5,-8(fp)
   139d0:	e1bfff17 	ldw	r6,-4(fp)
   139d4:	0013dc40 	call	13dc4 <altera_avalon_jtag_uart_ioctl>
}
   139d8:	e037883a 	mov	sp,fp
   139dc:	dfc00117 	ldw	ra,4(sp)
   139e0:	df000017 	ldw	fp,0(sp)
   139e4:	dec00204 	addi	sp,sp,8
   139e8:	f800283a 	ret

000139ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   139ec:	defffa04 	addi	sp,sp,-24
   139f0:	dfc00515 	stw	ra,20(sp)
   139f4:	df000415 	stw	fp,16(sp)
   139f8:	df000404 	addi	fp,sp,16
   139fc:	e13ffd15 	stw	r4,-12(fp)
   13a00:	e17ffe15 	stw	r5,-8(fp)
   13a04:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13a08:	e0bffd17 	ldw	r2,-12(fp)
   13a0c:	00c00044 	movi	r3,1
   13a10:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13a14:	e0bffd17 	ldw	r2,-12(fp)
   13a18:	10800017 	ldw	r2,0(r2)
   13a1c:	10800104 	addi	r2,r2,4
   13a20:	1007883a 	mov	r3,r2
   13a24:	e0bffd17 	ldw	r2,-12(fp)
   13a28:	10800817 	ldw	r2,32(r2)
   13a2c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13a30:	e0fffe17 	ldw	r3,-8(fp)
   13a34:	e0bfff17 	ldw	r2,-4(fp)
   13a38:	d8000015 	stw	zero,0(sp)
   13a3c:	1809883a 	mov	r4,r3
   13a40:	100b883a 	mov	r5,r2
   13a44:	01800074 	movhi	r6,1
   13a48:	318eac04 	addi	r6,r6,15024
   13a4c:	e1fffd17 	ldw	r7,-12(fp)
   13a50:	00145f80 	call	145f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13a54:	e0bffd17 	ldw	r2,-12(fp)
   13a58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13a5c:	e0bffd17 	ldw	r2,-12(fp)
   13a60:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13a64:	008000b4 	movhi	r2,2
   13a68:	10a2a004 	addi	r2,r2,-30080
   13a6c:	10800017 	ldw	r2,0(r2)
   13a70:	1809883a 	mov	r4,r3
   13a74:	100b883a 	mov	r5,r2
   13a78:	01800074 	movhi	r6,1
   13a7c:	318f2d04 	addi	r6,r6,15540
   13a80:	e1fffd17 	ldw	r7,-12(fp)
   13a84:	00142d40 	call	142d4 <alt_alarm_start>
   13a88:	1000040e 	bge	r2,zero,13a9c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13a8c:	e0fffd17 	ldw	r3,-12(fp)
   13a90:	00a00034 	movhi	r2,32768
   13a94:	10bfffc4 	addi	r2,r2,-1
   13a98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13a9c:	e037883a 	mov	sp,fp
   13aa0:	dfc00117 	ldw	ra,4(sp)
   13aa4:	df000017 	ldw	fp,0(sp)
   13aa8:	dec00204 	addi	sp,sp,8
   13aac:	f800283a 	ret

00013ab0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13ab0:	defff804 	addi	sp,sp,-32
   13ab4:	df000715 	stw	fp,28(sp)
   13ab8:	df000704 	addi	fp,sp,28
   13abc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13ac0:	e0bfff17 	ldw	r2,-4(fp)
   13ac4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13ac8:	e0bffb17 	ldw	r2,-20(fp)
   13acc:	10800017 	ldw	r2,0(r2)
   13ad0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13ad4:	e0bffc17 	ldw	r2,-16(fp)
   13ad8:	10800104 	addi	r2,r2,4
   13adc:	10800037 	ldwio	r2,0(r2)
   13ae0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13ae4:	e0bffd17 	ldw	r2,-12(fp)
   13ae8:	1080c00c 	andi	r2,r2,768
   13aec:	1000011e 	bne	r2,zero,13af4 <altera_avalon_jtag_uart_irq+0x44>
      break;
   13af0:	00006c06 	br	13ca4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13af4:	e0bffd17 	ldw	r2,-12(fp)
   13af8:	1080400c 	andi	r2,r2,256
   13afc:	10003426 	beq	r2,zero,13bd0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13b00:	00800074 	movhi	r2,1
   13b04:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13b08:	e0bffb17 	ldw	r2,-20(fp)
   13b0c:	10800a17 	ldw	r2,40(r2)
   13b10:	10800044 	addi	r2,r2,1
   13b14:	1081ffcc 	andi	r2,r2,2047
   13b18:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13b1c:	e0bffb17 	ldw	r2,-20(fp)
   13b20:	10c00b17 	ldw	r3,44(r2)
   13b24:	e0bffe17 	ldw	r2,-8(fp)
   13b28:	1880011e 	bne	r3,r2,13b30 <altera_avalon_jtag_uart_irq+0x80>
          break;
   13b2c:	00001606 	br	13b88 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13b30:	e0bffc17 	ldw	r2,-16(fp)
   13b34:	10800037 	ldwio	r2,0(r2)
   13b38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13b3c:	e0bff917 	ldw	r2,-28(fp)
   13b40:	10a0000c 	andi	r2,r2,32768
   13b44:	1000011e 	bne	r2,zero,13b4c <altera_avalon_jtag_uart_irq+0x9c>
          break;
   13b48:	00000f06 	br	13b88 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13b4c:	e0bffb17 	ldw	r2,-20(fp)
   13b50:	10800a17 	ldw	r2,40(r2)
   13b54:	e0fff917 	ldw	r3,-28(fp)
   13b58:	1809883a 	mov	r4,r3
   13b5c:	e0fffb17 	ldw	r3,-20(fp)
   13b60:	1885883a 	add	r2,r3,r2
   13b64:	10800e04 	addi	r2,r2,56
   13b68:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13b6c:	e0bffb17 	ldw	r2,-20(fp)
   13b70:	10800a17 	ldw	r2,40(r2)
   13b74:	10800044 	addi	r2,r2,1
   13b78:	10c1ffcc 	andi	r3,r2,2047
   13b7c:	e0bffb17 	ldw	r2,-20(fp)
   13b80:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13b84:	003fe006 	br	13b08 <_gp+0xffff4b4c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13b88:	e0bff917 	ldw	r2,-28(fp)
   13b8c:	10bfffec 	andhi	r2,r2,65535
   13b90:	10000f26 	beq	r2,zero,13bd0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13b94:	e0bffb17 	ldw	r2,-20(fp)
   13b98:	10c00817 	ldw	r3,32(r2)
   13b9c:	00bfff84 	movi	r2,-2
   13ba0:	1886703a 	and	r3,r3,r2
   13ba4:	e0bffb17 	ldw	r2,-20(fp)
   13ba8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13bac:	e0bffc17 	ldw	r2,-16(fp)
   13bb0:	10800104 	addi	r2,r2,4
   13bb4:	1007883a 	mov	r3,r2
   13bb8:	e0bffb17 	ldw	r2,-20(fp)
   13bbc:	10800817 	ldw	r2,32(r2)
   13bc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13bc4:	e0bffc17 	ldw	r2,-16(fp)
   13bc8:	10800104 	addi	r2,r2,4
   13bcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13bd0:	e0bffd17 	ldw	r2,-12(fp)
   13bd4:	1080800c 	andi	r2,r2,512
   13bd8:	10003126 	beq	r2,zero,13ca0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13bdc:	e0bffd17 	ldw	r2,-12(fp)
   13be0:	1004d43a 	srli	r2,r2,16
   13be4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13be8:	00001406 	br	13c3c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13bec:	e0bffc17 	ldw	r2,-16(fp)
   13bf0:	e0fffb17 	ldw	r3,-20(fp)
   13bf4:	18c00d17 	ldw	r3,52(r3)
   13bf8:	e13ffb17 	ldw	r4,-20(fp)
   13bfc:	20c7883a 	add	r3,r4,r3
   13c00:	18c20e04 	addi	r3,r3,2104
   13c04:	18c00003 	ldbu	r3,0(r3)
   13c08:	18c03fcc 	andi	r3,r3,255
   13c0c:	18c0201c 	xori	r3,r3,128
   13c10:	18ffe004 	addi	r3,r3,-128
   13c14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13c18:	e0bffb17 	ldw	r2,-20(fp)
   13c1c:	10800d17 	ldw	r2,52(r2)
   13c20:	10800044 	addi	r2,r2,1
   13c24:	10c1ffcc 	andi	r3,r2,2047
   13c28:	e0bffb17 	ldw	r2,-20(fp)
   13c2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13c30:	e0bffa17 	ldw	r2,-24(fp)
   13c34:	10bfffc4 	addi	r2,r2,-1
   13c38:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13c3c:	e0bffa17 	ldw	r2,-24(fp)
   13c40:	10000526 	beq	r2,zero,13c58 <altera_avalon_jtag_uart_irq+0x1a8>
   13c44:	e0bffb17 	ldw	r2,-20(fp)
   13c48:	10c00d17 	ldw	r3,52(r2)
   13c4c:	e0bffb17 	ldw	r2,-20(fp)
   13c50:	10800c17 	ldw	r2,48(r2)
   13c54:	18bfe51e 	bne	r3,r2,13bec <_gp+0xffff4c30>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13c58:	e0bffa17 	ldw	r2,-24(fp)
   13c5c:	10001026 	beq	r2,zero,13ca0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13c60:	e0bffb17 	ldw	r2,-20(fp)
   13c64:	10c00817 	ldw	r3,32(r2)
   13c68:	00bfff44 	movi	r2,-3
   13c6c:	1886703a 	and	r3,r3,r2
   13c70:	e0bffb17 	ldw	r2,-20(fp)
   13c74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13c78:	e0bffb17 	ldw	r2,-20(fp)
   13c7c:	10800017 	ldw	r2,0(r2)
   13c80:	10800104 	addi	r2,r2,4
   13c84:	1007883a 	mov	r3,r2
   13c88:	e0bffb17 	ldw	r2,-20(fp)
   13c8c:	10800817 	ldw	r2,32(r2)
   13c90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13c94:	e0bffc17 	ldw	r2,-16(fp)
   13c98:	10800104 	addi	r2,r2,4
   13c9c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13ca0:	003f8c06 	br	13ad4 <_gp+0xffff4b18>
}
   13ca4:	e037883a 	mov	sp,fp
   13ca8:	df000017 	ldw	fp,0(sp)
   13cac:	dec00104 	addi	sp,sp,4
   13cb0:	f800283a 	ret

00013cb4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13cb4:	defff804 	addi	sp,sp,-32
   13cb8:	df000715 	stw	fp,28(sp)
   13cbc:	df000704 	addi	fp,sp,28
   13cc0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13cc4:	e0bffb17 	ldw	r2,-20(fp)
   13cc8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13ccc:	e0bff917 	ldw	r2,-28(fp)
   13cd0:	10800017 	ldw	r2,0(r2)
   13cd4:	10800104 	addi	r2,r2,4
   13cd8:	10800037 	ldwio	r2,0(r2)
   13cdc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13ce0:	e0bffa17 	ldw	r2,-24(fp)
   13ce4:	1081000c 	andi	r2,r2,1024
   13ce8:	10000b26 	beq	r2,zero,13d18 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13cec:	e0bff917 	ldw	r2,-28(fp)
   13cf0:	10800017 	ldw	r2,0(r2)
   13cf4:	10800104 	addi	r2,r2,4
   13cf8:	1007883a 	mov	r3,r2
   13cfc:	e0bff917 	ldw	r2,-28(fp)
   13d00:	10800817 	ldw	r2,32(r2)
   13d04:	10810014 	ori	r2,r2,1024
   13d08:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   13d0c:	e0bff917 	ldw	r2,-28(fp)
   13d10:	10000915 	stw	zero,36(r2)
   13d14:	00000a06 	br	13d40 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13d18:	e0bff917 	ldw	r2,-28(fp)
   13d1c:	10c00917 	ldw	r3,36(r2)
   13d20:	00a00034 	movhi	r2,32768
   13d24:	10bfff04 	addi	r2,r2,-4
   13d28:	10c00536 	bltu	r2,r3,13d40 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   13d2c:	e0bff917 	ldw	r2,-28(fp)
   13d30:	10800917 	ldw	r2,36(r2)
   13d34:	10c00044 	addi	r3,r2,1
   13d38:	e0bff917 	ldw	r2,-28(fp)
   13d3c:	10c00915 	stw	r3,36(r2)
   13d40:	008000b4 	movhi	r2,2
   13d44:	10a2a004 	addi	r2,r2,-30080
   13d48:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13d4c:	e037883a 	mov	sp,fp
   13d50:	df000017 	ldw	fp,0(sp)
   13d54:	dec00104 	addi	sp,sp,4
   13d58:	f800283a 	ret

00013d5c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13d5c:	defffd04 	addi	sp,sp,-12
   13d60:	df000215 	stw	fp,8(sp)
   13d64:	df000204 	addi	fp,sp,8
   13d68:	e13ffe15 	stw	r4,-8(fp)
   13d6c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13d70:	00000506 	br	13d88 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13d74:	e0bfff17 	ldw	r2,-4(fp)
   13d78:	1090000c 	andi	r2,r2,16384
   13d7c:	10000226 	beq	r2,zero,13d88 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   13d80:	00bffd44 	movi	r2,-11
   13d84:	00000b06 	br	13db4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13d88:	e0bffe17 	ldw	r2,-8(fp)
   13d8c:	10c00d17 	ldw	r3,52(r2)
   13d90:	e0bffe17 	ldw	r2,-8(fp)
   13d94:	10800c17 	ldw	r2,48(r2)
   13d98:	18800526 	beq	r3,r2,13db0 <altera_avalon_jtag_uart_close+0x54>
   13d9c:	e0bffe17 	ldw	r2,-8(fp)
   13da0:	10c00917 	ldw	r3,36(r2)
   13da4:	e0bffe17 	ldw	r2,-8(fp)
   13da8:	10800117 	ldw	r2,4(r2)
   13dac:	18bff136 	bltu	r3,r2,13d74 <_gp+0xffff4db8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13db0:	0005883a 	mov	r2,zero
}
   13db4:	e037883a 	mov	sp,fp
   13db8:	df000017 	ldw	fp,0(sp)
   13dbc:	dec00104 	addi	sp,sp,4
   13dc0:	f800283a 	ret

00013dc4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13dc4:	defffa04 	addi	sp,sp,-24
   13dc8:	df000515 	stw	fp,20(sp)
   13dcc:	df000504 	addi	fp,sp,20
   13dd0:	e13ffd15 	stw	r4,-12(fp)
   13dd4:	e17ffe15 	stw	r5,-8(fp)
   13dd8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   13ddc:	00bff9c4 	movi	r2,-25
   13de0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   13de4:	e0bffe17 	ldw	r2,-8(fp)
   13de8:	10da8060 	cmpeqi	r3,r2,27137
   13dec:	1800031e 	bne	r3,zero,13dfc <altera_avalon_jtag_uart_ioctl+0x38>
   13df0:	109a80a0 	cmpeqi	r2,r2,27138
   13df4:	1000191e 	bne	r2,zero,13e5c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   13df8:	00002806 	br	13e9c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13dfc:	e0bffd17 	ldw	r2,-12(fp)
   13e00:	10c00117 	ldw	r3,4(r2)
   13e04:	00a00034 	movhi	r2,32768
   13e08:	10bfffc4 	addi	r2,r2,-1
   13e0c:	18801226 	beq	r3,r2,13e58 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   13e10:	e0bfff17 	ldw	r2,-4(fp)
   13e14:	10800017 	ldw	r2,0(r2)
   13e18:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13e1c:	e0bffc17 	ldw	r2,-16(fp)
   13e20:	10800090 	cmplti	r2,r2,2
   13e24:	1000061e 	bne	r2,zero,13e40 <altera_avalon_jtag_uart_ioctl+0x7c>
   13e28:	e0fffc17 	ldw	r3,-16(fp)
   13e2c:	00a00034 	movhi	r2,32768
   13e30:	10bfffc4 	addi	r2,r2,-1
   13e34:	18800226 	beq	r3,r2,13e40 <altera_avalon_jtag_uart_ioctl+0x7c>
   13e38:	e0bffc17 	ldw	r2,-16(fp)
   13e3c:	00000206 	br	13e48 <altera_avalon_jtag_uart_ioctl+0x84>
   13e40:	00a00034 	movhi	r2,32768
   13e44:	10bfff84 	addi	r2,r2,-2
   13e48:	e0fffd17 	ldw	r3,-12(fp)
   13e4c:	18800115 	stw	r2,4(r3)
      rc = 0;
   13e50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13e54:	00001106 	br	13e9c <altera_avalon_jtag_uart_ioctl+0xd8>
   13e58:	00001006 	br	13e9c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13e5c:	e0bffd17 	ldw	r2,-12(fp)
   13e60:	10c00117 	ldw	r3,4(r2)
   13e64:	00a00034 	movhi	r2,32768
   13e68:	10bfffc4 	addi	r2,r2,-1
   13e6c:	18800a26 	beq	r3,r2,13e98 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13e70:	e0bffd17 	ldw	r2,-12(fp)
   13e74:	10c00917 	ldw	r3,36(r2)
   13e78:	e0bffd17 	ldw	r2,-12(fp)
   13e7c:	10800117 	ldw	r2,4(r2)
   13e80:	1885803a 	cmpltu	r2,r3,r2
   13e84:	10c03fcc 	andi	r3,r2,255
   13e88:	e0bfff17 	ldw	r2,-4(fp)
   13e8c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   13e90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13e94:	00000006 	br	13e98 <altera_avalon_jtag_uart_ioctl+0xd4>
   13e98:	0001883a 	nop

  default:
    break;
  }

  return rc;
   13e9c:	e0bffb17 	ldw	r2,-20(fp)
}
   13ea0:	e037883a 	mov	sp,fp
   13ea4:	df000017 	ldw	fp,0(sp)
   13ea8:	dec00104 	addi	sp,sp,4
   13eac:	f800283a 	ret

00013eb0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13eb0:	defff304 	addi	sp,sp,-52
   13eb4:	dfc00c15 	stw	ra,48(sp)
   13eb8:	df000b15 	stw	fp,44(sp)
   13ebc:	df000b04 	addi	fp,sp,44
   13ec0:	e13ffc15 	stw	r4,-16(fp)
   13ec4:	e17ffd15 	stw	r5,-12(fp)
   13ec8:	e1bffe15 	stw	r6,-8(fp)
   13ecc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   13ed0:	e0bffd17 	ldw	r2,-12(fp)
   13ed4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13ed8:	00004906 	br	14000 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   13edc:	e0bffc17 	ldw	r2,-16(fp)
   13ee0:	10800a17 	ldw	r2,40(r2)
   13ee4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13ee8:	e0bffc17 	ldw	r2,-16(fp)
   13eec:	10800b17 	ldw	r2,44(r2)
   13ef0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   13ef4:	e0fff717 	ldw	r3,-36(fp)
   13ef8:	e0bff817 	ldw	r2,-32(fp)
   13efc:	18800536 	bltu	r3,r2,13f14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   13f00:	e0fff717 	ldw	r3,-36(fp)
   13f04:	e0bff817 	ldw	r2,-32(fp)
   13f08:	1885c83a 	sub	r2,r3,r2
   13f0c:	e0bff615 	stw	r2,-40(fp)
   13f10:	00000406 	br	13f24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   13f14:	00c20004 	movi	r3,2048
   13f18:	e0bff817 	ldw	r2,-32(fp)
   13f1c:	1885c83a 	sub	r2,r3,r2
   13f20:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   13f24:	e0bff617 	ldw	r2,-40(fp)
   13f28:	1000011e 	bne	r2,zero,13f30 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   13f2c:	00001d06 	br	13fa4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   13f30:	e0fffe17 	ldw	r3,-8(fp)
   13f34:	e0bff617 	ldw	r2,-40(fp)
   13f38:	1880022e 	bgeu	r3,r2,13f44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   13f3c:	e0bffe17 	ldw	r2,-8(fp)
   13f40:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   13f44:	e0bff817 	ldw	r2,-32(fp)
   13f48:	10800e04 	addi	r2,r2,56
   13f4c:	e0fffc17 	ldw	r3,-16(fp)
   13f50:	1885883a 	add	r2,r3,r2
   13f54:	e13ff517 	ldw	r4,-44(fp)
   13f58:	100b883a 	mov	r5,r2
   13f5c:	e1bff617 	ldw	r6,-40(fp)
   13f60:	00111340 	call	11134 <memcpy>
      ptr   += n;
   13f64:	e0fff517 	ldw	r3,-44(fp)
   13f68:	e0bff617 	ldw	r2,-40(fp)
   13f6c:	1885883a 	add	r2,r3,r2
   13f70:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   13f74:	e0fffe17 	ldw	r3,-8(fp)
   13f78:	e0bff617 	ldw	r2,-40(fp)
   13f7c:	1885c83a 	sub	r2,r3,r2
   13f80:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13f84:	e0fff817 	ldw	r3,-32(fp)
   13f88:	e0bff617 	ldw	r2,-40(fp)
   13f8c:	1885883a 	add	r2,r3,r2
   13f90:	10c1ffcc 	andi	r3,r2,2047
   13f94:	e0bffc17 	ldw	r2,-16(fp)
   13f98:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13f9c:	e0bffe17 	ldw	r2,-8(fp)
   13fa0:	00bfce16 	blt	zero,r2,13edc <_gp+0xffff4f20>

    /* If we read any data then return it */
    if (ptr != buffer)
   13fa4:	e0fff517 	ldw	r3,-44(fp)
   13fa8:	e0bffd17 	ldw	r2,-12(fp)
   13fac:	18800126 	beq	r3,r2,13fb4 <altera_avalon_jtag_uart_read+0x104>
      break;
   13fb0:	00001506 	br	14008 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   13fb4:	e0bfff17 	ldw	r2,-4(fp)
   13fb8:	1090000c 	andi	r2,r2,16384
   13fbc:	10000126 	beq	r2,zero,13fc4 <altera_avalon_jtag_uart_read+0x114>
      break;
   13fc0:	00001106 	br	14008 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   13fc4:	0001883a 	nop
   13fc8:	e0bffc17 	ldw	r2,-16(fp)
   13fcc:	10c00a17 	ldw	r3,40(r2)
   13fd0:	e0bff717 	ldw	r2,-36(fp)
   13fd4:	1880051e 	bne	r3,r2,13fec <altera_avalon_jtag_uart_read+0x13c>
   13fd8:	e0bffc17 	ldw	r2,-16(fp)
   13fdc:	10c00917 	ldw	r3,36(r2)
   13fe0:	e0bffc17 	ldw	r2,-16(fp)
   13fe4:	10800117 	ldw	r2,4(r2)
   13fe8:	18bff736 	bltu	r3,r2,13fc8 <_gp+0xffff500c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13fec:	e0bffc17 	ldw	r2,-16(fp)
   13ff0:	10c00a17 	ldw	r3,40(r2)
   13ff4:	e0bff717 	ldw	r2,-36(fp)
   13ff8:	1880011e 	bne	r3,r2,14000 <altera_avalon_jtag_uart_read+0x150>
      break;
   13ffc:	00000206 	br	14008 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14000:	e0bffe17 	ldw	r2,-8(fp)
   14004:	00bfb516 	blt	zero,r2,13edc <_gp+0xffff4f20>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14008:	e0fff517 	ldw	r3,-44(fp)
   1400c:	e0bffd17 	ldw	r2,-12(fp)
   14010:	18801826 	beq	r3,r2,14074 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14014:	0005303a 	rdctl	r2,status
   14018:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1401c:	e0fffa17 	ldw	r3,-24(fp)
   14020:	00bfff84 	movi	r2,-2
   14024:	1884703a 	and	r2,r3,r2
   14028:	1001703a 	wrctl	status,r2
  
  return context;
   1402c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14030:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14034:	e0bffc17 	ldw	r2,-16(fp)
   14038:	10800817 	ldw	r2,32(r2)
   1403c:	10c00054 	ori	r3,r2,1
   14040:	e0bffc17 	ldw	r2,-16(fp)
   14044:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14048:	e0bffc17 	ldw	r2,-16(fp)
   1404c:	10800017 	ldw	r2,0(r2)
   14050:	10800104 	addi	r2,r2,4
   14054:	1007883a 	mov	r3,r2
   14058:	e0bffc17 	ldw	r2,-16(fp)
   1405c:	10800817 	ldw	r2,32(r2)
   14060:	18800035 	stwio	r2,0(r3)
   14064:	e0bff917 	ldw	r2,-28(fp)
   14068:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1406c:	e0bffb17 	ldw	r2,-20(fp)
   14070:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14074:	e0fff517 	ldw	r3,-44(fp)
   14078:	e0bffd17 	ldw	r2,-12(fp)
   1407c:	18800426 	beq	r3,r2,14090 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   14080:	e0fff517 	ldw	r3,-44(fp)
   14084:	e0bffd17 	ldw	r2,-12(fp)
   14088:	1885c83a 	sub	r2,r3,r2
   1408c:	00000606 	br	140a8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   14090:	e0bfff17 	ldw	r2,-4(fp)
   14094:	1090000c 	andi	r2,r2,16384
   14098:	10000226 	beq	r2,zero,140a4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   1409c:	00bffd44 	movi	r2,-11
   140a0:	00000106 	br	140a8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   140a4:	00bffec4 	movi	r2,-5
}
   140a8:	e037883a 	mov	sp,fp
   140ac:	dfc00117 	ldw	ra,4(sp)
   140b0:	df000017 	ldw	fp,0(sp)
   140b4:	dec00204 	addi	sp,sp,8
   140b8:	f800283a 	ret

000140bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   140bc:	defff304 	addi	sp,sp,-52
   140c0:	dfc00c15 	stw	ra,48(sp)
   140c4:	df000b15 	stw	fp,44(sp)
   140c8:	df000b04 	addi	fp,sp,44
   140cc:	e13ffc15 	stw	r4,-16(fp)
   140d0:	e17ffd15 	stw	r5,-12(fp)
   140d4:	e1bffe15 	stw	r6,-8(fp)
   140d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   140dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   140e0:	e0bffd17 	ldw	r2,-12(fp)
   140e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   140e8:	00003806 	br	141cc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   140ec:	e0bffc17 	ldw	r2,-16(fp)
   140f0:	10800c17 	ldw	r2,48(r2)
   140f4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   140f8:	e0bffc17 	ldw	r2,-16(fp)
   140fc:	10800d17 	ldw	r2,52(r2)
   14100:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14104:	e0fff817 	ldw	r3,-32(fp)
   14108:	e0bff517 	ldw	r2,-44(fp)
   1410c:	1880062e 	bgeu	r3,r2,14128 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14110:	e0fff517 	ldw	r3,-44(fp)
   14114:	e0bff817 	ldw	r2,-32(fp)
   14118:	1885c83a 	sub	r2,r3,r2
   1411c:	10bfffc4 	addi	r2,r2,-1
   14120:	e0bff615 	stw	r2,-40(fp)
   14124:	00000b06 	br	14154 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14128:	e0bff517 	ldw	r2,-44(fp)
   1412c:	10000526 	beq	r2,zero,14144 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14130:	00c20004 	movi	r3,2048
   14134:	e0bff817 	ldw	r2,-32(fp)
   14138:	1885c83a 	sub	r2,r3,r2
   1413c:	e0bff615 	stw	r2,-40(fp)
   14140:	00000406 	br	14154 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14144:	00c1ffc4 	movi	r3,2047
   14148:	e0bff817 	ldw	r2,-32(fp)
   1414c:	1885c83a 	sub	r2,r3,r2
   14150:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14154:	e0bff617 	ldw	r2,-40(fp)
   14158:	1000011e 	bne	r2,zero,14160 <altera_avalon_jtag_uart_write+0xa4>
        break;
   1415c:	00001d06 	br	141d4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   14160:	e0fffe17 	ldw	r3,-8(fp)
   14164:	e0bff617 	ldw	r2,-40(fp)
   14168:	1880022e 	bgeu	r3,r2,14174 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   1416c:	e0bffe17 	ldw	r2,-8(fp)
   14170:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14174:	e0bff817 	ldw	r2,-32(fp)
   14178:	10820e04 	addi	r2,r2,2104
   1417c:	e0fffc17 	ldw	r3,-16(fp)
   14180:	1885883a 	add	r2,r3,r2
   14184:	1009883a 	mov	r4,r2
   14188:	e17ffd17 	ldw	r5,-12(fp)
   1418c:	e1bff617 	ldw	r6,-40(fp)
   14190:	00111340 	call	11134 <memcpy>
      ptr   += n;
   14194:	e0fffd17 	ldw	r3,-12(fp)
   14198:	e0bff617 	ldw	r2,-40(fp)
   1419c:	1885883a 	add	r2,r3,r2
   141a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   141a4:	e0fffe17 	ldw	r3,-8(fp)
   141a8:	e0bff617 	ldw	r2,-40(fp)
   141ac:	1885c83a 	sub	r2,r3,r2
   141b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   141b4:	e0fff817 	ldw	r3,-32(fp)
   141b8:	e0bff617 	ldw	r2,-40(fp)
   141bc:	1885883a 	add	r2,r3,r2
   141c0:	10c1ffcc 	andi	r3,r2,2047
   141c4:	e0bffc17 	ldw	r2,-16(fp)
   141c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   141cc:	e0bffe17 	ldw	r2,-8(fp)
   141d0:	00bfc616 	blt	zero,r2,140ec <_gp+0xffff5130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   141d4:	0005303a 	rdctl	r2,status
   141d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   141dc:	e0fffa17 	ldw	r3,-24(fp)
   141e0:	00bfff84 	movi	r2,-2
   141e4:	1884703a 	and	r2,r3,r2
   141e8:	1001703a 	wrctl	status,r2
  
  return context;
   141ec:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   141f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   141f4:	e0bffc17 	ldw	r2,-16(fp)
   141f8:	10800817 	ldw	r2,32(r2)
   141fc:	10c00094 	ori	r3,r2,2
   14200:	e0bffc17 	ldw	r2,-16(fp)
   14204:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14208:	e0bffc17 	ldw	r2,-16(fp)
   1420c:	10800017 	ldw	r2,0(r2)
   14210:	10800104 	addi	r2,r2,4
   14214:	1007883a 	mov	r3,r2
   14218:	e0bffc17 	ldw	r2,-16(fp)
   1421c:	10800817 	ldw	r2,32(r2)
   14220:	18800035 	stwio	r2,0(r3)
   14224:	e0bff917 	ldw	r2,-28(fp)
   14228:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1422c:	e0bffb17 	ldw	r2,-20(fp)
   14230:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14234:	e0bffe17 	ldw	r2,-8(fp)
   14238:	0080120e 	bge	zero,r2,14284 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   1423c:	e0bfff17 	ldw	r2,-4(fp)
   14240:	1090000c 	andi	r2,r2,16384
   14244:	10000126 	beq	r2,zero,1424c <altera_avalon_jtag_uart_write+0x190>
        break;
   14248:	00001006 	br	1428c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1424c:	0001883a 	nop
   14250:	e0bffc17 	ldw	r2,-16(fp)
   14254:	10c00d17 	ldw	r3,52(r2)
   14258:	e0bff517 	ldw	r2,-44(fp)
   1425c:	1880051e 	bne	r3,r2,14274 <altera_avalon_jtag_uart_write+0x1b8>
   14260:	e0bffc17 	ldw	r2,-16(fp)
   14264:	10c00917 	ldw	r3,36(r2)
   14268:	e0bffc17 	ldw	r2,-16(fp)
   1426c:	10800117 	ldw	r2,4(r2)
   14270:	18bff736 	bltu	r3,r2,14250 <_gp+0xffff5294>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14274:	e0bffc17 	ldw	r2,-16(fp)
   14278:	10800917 	ldw	r2,36(r2)
   1427c:	10000126 	beq	r2,zero,14284 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   14280:	00000206 	br	1428c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   14284:	e0bffe17 	ldw	r2,-8(fp)
   14288:	00bf9716 	blt	zero,r2,140e8 <_gp+0xffff512c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1428c:	e0fffd17 	ldw	r3,-12(fp)
   14290:	e0bff717 	ldw	r2,-36(fp)
   14294:	18800426 	beq	r3,r2,142a8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   14298:	e0fffd17 	ldw	r3,-12(fp)
   1429c:	e0bff717 	ldw	r2,-36(fp)
   142a0:	1885c83a 	sub	r2,r3,r2
   142a4:	00000606 	br	142c0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   142a8:	e0bfff17 	ldw	r2,-4(fp)
   142ac:	1090000c 	andi	r2,r2,16384
   142b0:	10000226 	beq	r2,zero,142bc <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   142b4:	00bffd44 	movi	r2,-11
   142b8:	00000106 	br	142c0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   142bc:	00bffec4 	movi	r2,-5
}
   142c0:	e037883a 	mov	sp,fp
   142c4:	dfc00117 	ldw	ra,4(sp)
   142c8:	df000017 	ldw	fp,0(sp)
   142cc:	dec00204 	addi	sp,sp,8
   142d0:	f800283a 	ret

000142d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   142d4:	defff504 	addi	sp,sp,-44
   142d8:	df000a15 	stw	fp,40(sp)
   142dc:	df000a04 	addi	fp,sp,40
   142e0:	e13ffc15 	stw	r4,-16(fp)
   142e4:	e17ffd15 	stw	r5,-12(fp)
   142e8:	e1bffe15 	stw	r6,-8(fp)
   142ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   142f0:	e03ff615 	stw	zero,-40(fp)
   142f4:	008000b4 	movhi	r2,2
   142f8:	10a2a004 	addi	r2,r2,-30080
   142fc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   14300:	10003f26 	beq	r2,zero,14400 <alt_alarm_start+0x12c>
  {
    if (alarm)
   14304:	e0bffc17 	ldw	r2,-16(fp)
   14308:	10003b26 	beq	r2,zero,143f8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1430c:	e0bffc17 	ldw	r2,-16(fp)
   14310:	e0fffe17 	ldw	r3,-8(fp)
   14314:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14318:	e0bffc17 	ldw	r2,-16(fp)
   1431c:	e0ffff17 	ldw	r3,-4(fp)
   14320:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14324:	0005303a 	rdctl	r2,status
   14328:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1432c:	e0fff817 	ldw	r3,-32(fp)
   14330:	00bfff84 	movi	r2,-2
   14334:	1884703a 	and	r2,r3,r2
   14338:	1001703a 	wrctl	status,r2
  
  return context;
   1433c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   14340:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14344:	008000b4 	movhi	r2,2
   14348:	10a2a104 	addi	r2,r2,-30076
   1434c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   14350:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14354:	e0fffd17 	ldw	r3,-12(fp)
   14358:	e0bff617 	ldw	r2,-40(fp)
   1435c:	1885883a 	add	r2,r3,r2
   14360:	10c00044 	addi	r3,r2,1
   14364:	e0bffc17 	ldw	r2,-16(fp)
   14368:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1436c:	e0bffc17 	ldw	r2,-16(fp)
   14370:	10c00217 	ldw	r3,8(r2)
   14374:	e0bff617 	ldw	r2,-40(fp)
   14378:	1880042e 	bgeu	r3,r2,1438c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1437c:	e0bffc17 	ldw	r2,-16(fp)
   14380:	00c00044 	movi	r3,1
   14384:	10c00405 	stb	r3,16(r2)
   14388:	00000206 	br	14394 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1438c:	e0bffc17 	ldw	r2,-16(fp)
   14390:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14394:	e0fffc17 	ldw	r3,-16(fp)
   14398:	00800074 	movhi	r2,1
   1439c:	109bfb04 	addi	r2,r2,28652
   143a0:	e0bff915 	stw	r2,-28(fp)
   143a4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   143a8:	e0bffa17 	ldw	r2,-24(fp)
   143ac:	e0fff917 	ldw	r3,-28(fp)
   143b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   143b4:	e0bff917 	ldw	r2,-28(fp)
   143b8:	10c00017 	ldw	r3,0(r2)
   143bc:	e0bffa17 	ldw	r2,-24(fp)
   143c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   143c4:	e0bff917 	ldw	r2,-28(fp)
   143c8:	10800017 	ldw	r2,0(r2)
   143cc:	e0fffa17 	ldw	r3,-24(fp)
   143d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   143d4:	e0bff917 	ldw	r2,-28(fp)
   143d8:	e0fffa17 	ldw	r3,-24(fp)
   143dc:	10c00015 	stw	r3,0(r2)
   143e0:	e0bff717 	ldw	r2,-36(fp)
   143e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   143e8:	e0bffb17 	ldw	r2,-20(fp)
   143ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   143f0:	0005883a 	mov	r2,zero
   143f4:	00000306 	br	14404 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   143f8:	00bffa84 	movi	r2,-22
   143fc:	00000106 	br	14404 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   14400:	00bfde84 	movi	r2,-134
  }
}
   14404:	e037883a 	mov	sp,fp
   14408:	df000017 	ldw	fp,0(sp)
   1440c:	dec00104 	addi	sp,sp,4
   14410:	f800283a 	ret

00014414 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14414:	deffff04 	addi	sp,sp,-4
   14418:	df000015 	stw	fp,0(sp)
   1441c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14420:	e037883a 	mov	sp,fp
   14424:	df000017 	ldw	fp,0(sp)
   14428:	dec00104 	addi	sp,sp,4
   1442c:	f800283a 	ret

00014430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14430:	defffe04 	addi	sp,sp,-8
   14434:	dfc00115 	stw	ra,4(sp)
   14438:	df000015 	stw	fp,0(sp)
   1443c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14440:	00800074 	movhi	r2,1
   14444:	109bf804 	addi	r2,r2,28640
   14448:	10800017 	ldw	r2,0(r2)
   1444c:	10000526 	beq	r2,zero,14464 <alt_get_errno+0x34>
   14450:	00800074 	movhi	r2,1
   14454:	109bf804 	addi	r2,r2,28640
   14458:	10800017 	ldw	r2,0(r2)
   1445c:	103ee83a 	callr	r2
   14460:	00000206 	br	1446c <alt_get_errno+0x3c>
   14464:	008000b4 	movhi	r2,2
   14468:	10a29b04 	addi	r2,r2,-30100
}
   1446c:	e037883a 	mov	sp,fp
   14470:	dfc00117 	ldw	ra,4(sp)
   14474:	df000017 	ldw	fp,0(sp)
   14478:	dec00204 	addi	sp,sp,8
   1447c:	f800283a 	ret

00014480 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14480:	defffa04 	addi	sp,sp,-24
   14484:	dfc00515 	stw	ra,20(sp)
   14488:	df000415 	stw	fp,16(sp)
   1448c:	df000404 	addi	fp,sp,16
   14490:	e13ffe15 	stw	r4,-8(fp)
   14494:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14498:	e0bffe17 	ldw	r2,-8(fp)
   1449c:	10000326 	beq	r2,zero,144ac <alt_dev_llist_insert+0x2c>
   144a0:	e0bffe17 	ldw	r2,-8(fp)
   144a4:	10800217 	ldw	r2,8(r2)
   144a8:	1000061e 	bne	r2,zero,144c4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   144ac:	00144300 	call	14430 <alt_get_errno>
   144b0:	1007883a 	mov	r3,r2
   144b4:	00800584 	movi	r2,22
   144b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   144bc:	00bffa84 	movi	r2,-22
   144c0:	00001306 	br	14510 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   144c4:	e0bffe17 	ldw	r2,-8(fp)
   144c8:	e0ffff17 	ldw	r3,-4(fp)
   144cc:	e0fffc15 	stw	r3,-16(fp)
   144d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   144d4:	e0bffd17 	ldw	r2,-12(fp)
   144d8:	e0fffc17 	ldw	r3,-16(fp)
   144dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   144e0:	e0bffc17 	ldw	r2,-16(fp)
   144e4:	10c00017 	ldw	r3,0(r2)
   144e8:	e0bffd17 	ldw	r2,-12(fp)
   144ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   144f0:	e0bffc17 	ldw	r2,-16(fp)
   144f4:	10800017 	ldw	r2,0(r2)
   144f8:	e0fffd17 	ldw	r3,-12(fp)
   144fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14500:	e0bffc17 	ldw	r2,-16(fp)
   14504:	e0fffd17 	ldw	r3,-12(fp)
   14508:	10c00015 	stw	r3,0(r2)

  return 0;  
   1450c:	0005883a 	mov	r2,zero
}
   14510:	e037883a 	mov	sp,fp
   14514:	dfc00117 	ldw	ra,4(sp)
   14518:	df000017 	ldw	fp,0(sp)
   1451c:	dec00204 	addi	sp,sp,8
   14520:	f800283a 	ret

00014524 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14524:	defffd04 	addi	sp,sp,-12
   14528:	dfc00215 	stw	ra,8(sp)
   1452c:	df000115 	stw	fp,4(sp)
   14530:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14534:	00800074 	movhi	r2,1
   14538:	10954d04 	addi	r2,r2,21812
   1453c:	e0bfff15 	stw	r2,-4(fp)
   14540:	00000606 	br	1455c <_do_ctors+0x38>
        (*ctor) (); 
   14544:	e0bfff17 	ldw	r2,-4(fp)
   14548:	10800017 	ldw	r2,0(r2)
   1454c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14550:	e0bfff17 	ldw	r2,-4(fp)
   14554:	10bfff04 	addi	r2,r2,-4
   14558:	e0bfff15 	stw	r2,-4(fp)
   1455c:	e0ffff17 	ldw	r3,-4(fp)
   14560:	00800074 	movhi	r2,1
   14564:	10954e04 	addi	r2,r2,21816
   14568:	18bff62e 	bgeu	r3,r2,14544 <_gp+0xffff5588>
        (*ctor) (); 
}
   1456c:	e037883a 	mov	sp,fp
   14570:	dfc00117 	ldw	ra,4(sp)
   14574:	df000017 	ldw	fp,0(sp)
   14578:	dec00204 	addi	sp,sp,8
   1457c:	f800283a 	ret

00014580 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14580:	defffd04 	addi	sp,sp,-12
   14584:	dfc00215 	stw	ra,8(sp)
   14588:	df000115 	stw	fp,4(sp)
   1458c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14590:	00800074 	movhi	r2,1
   14594:	10954d04 	addi	r2,r2,21812
   14598:	e0bfff15 	stw	r2,-4(fp)
   1459c:	00000606 	br	145b8 <_do_dtors+0x38>
        (*dtor) (); 
   145a0:	e0bfff17 	ldw	r2,-4(fp)
   145a4:	10800017 	ldw	r2,0(r2)
   145a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   145ac:	e0bfff17 	ldw	r2,-4(fp)
   145b0:	10bfff04 	addi	r2,r2,-4
   145b4:	e0bfff15 	stw	r2,-4(fp)
   145b8:	e0ffff17 	ldw	r3,-4(fp)
   145bc:	00800074 	movhi	r2,1
   145c0:	10954e04 	addi	r2,r2,21816
   145c4:	18bff62e 	bgeu	r3,r2,145a0 <_gp+0xffff55e4>
        (*dtor) (); 
}
   145c8:	e037883a 	mov	sp,fp
   145cc:	dfc00117 	ldw	ra,4(sp)
   145d0:	df000017 	ldw	fp,0(sp)
   145d4:	dec00204 	addi	sp,sp,8
   145d8:	f800283a 	ret

000145dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   145dc:	deffff04 	addi	sp,sp,-4
   145e0:	df000015 	stw	fp,0(sp)
   145e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   145e8:	e037883a 	mov	sp,fp
   145ec:	df000017 	ldw	fp,0(sp)
   145f0:	dec00104 	addi	sp,sp,4
   145f4:	f800283a 	ret

000145f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   145f8:	defff904 	addi	sp,sp,-28
   145fc:	dfc00615 	stw	ra,24(sp)
   14600:	df000515 	stw	fp,20(sp)
   14604:	df000504 	addi	fp,sp,20
   14608:	e13ffc15 	stw	r4,-16(fp)
   1460c:	e17ffd15 	stw	r5,-12(fp)
   14610:	e1bffe15 	stw	r6,-8(fp)
   14614:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14618:	e0800217 	ldw	r2,8(fp)
   1461c:	d8800015 	stw	r2,0(sp)
   14620:	e13ffc17 	ldw	r4,-16(fp)
   14624:	e17ffd17 	ldw	r5,-12(fp)
   14628:	e1bffe17 	ldw	r6,-8(fp)
   1462c:	e1ffff17 	ldw	r7,-4(fp)
   14630:	00147d80 	call	147d8 <alt_iic_isr_register>
}  
   14634:	e037883a 	mov	sp,fp
   14638:	dfc00117 	ldw	ra,4(sp)
   1463c:	df000017 	ldw	fp,0(sp)
   14640:	dec00204 	addi	sp,sp,8
   14644:	f800283a 	ret

00014648 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14648:	defff904 	addi	sp,sp,-28
   1464c:	df000615 	stw	fp,24(sp)
   14650:	df000604 	addi	fp,sp,24
   14654:	e13ffe15 	stw	r4,-8(fp)
   14658:	e17fff15 	stw	r5,-4(fp)
   1465c:	e0bfff17 	ldw	r2,-4(fp)
   14660:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14664:	0005303a 	rdctl	r2,status
   14668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1466c:	e0fffb17 	ldw	r3,-20(fp)
   14670:	00bfff84 	movi	r2,-2
   14674:	1884703a 	and	r2,r3,r2
   14678:	1001703a 	wrctl	status,r2
  
  return context;
   1467c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14680:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   14684:	e0bffa17 	ldw	r2,-24(fp)
   14688:	00c00044 	movi	r3,1
   1468c:	1884983a 	sll	r2,r3,r2
   14690:	1007883a 	mov	r3,r2
   14694:	008000b4 	movhi	r2,2
   14698:	10a29f04 	addi	r2,r2,-30084
   1469c:	10800017 	ldw	r2,0(r2)
   146a0:	1886b03a 	or	r3,r3,r2
   146a4:	008000b4 	movhi	r2,2
   146a8:	10a29f04 	addi	r2,r2,-30084
   146ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   146b0:	008000b4 	movhi	r2,2
   146b4:	10a29f04 	addi	r2,r2,-30084
   146b8:	10800017 	ldw	r2,0(r2)
   146bc:	100170fa 	wrctl	ienable,r2
   146c0:	e0bffc17 	ldw	r2,-16(fp)
   146c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   146c8:	e0bffd17 	ldw	r2,-12(fp)
   146cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   146d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   146d4:	0001883a 	nop
}
   146d8:	e037883a 	mov	sp,fp
   146dc:	df000017 	ldw	fp,0(sp)
   146e0:	dec00104 	addi	sp,sp,4
   146e4:	f800283a 	ret

000146e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   146e8:	defff904 	addi	sp,sp,-28
   146ec:	df000615 	stw	fp,24(sp)
   146f0:	df000604 	addi	fp,sp,24
   146f4:	e13ffe15 	stw	r4,-8(fp)
   146f8:	e17fff15 	stw	r5,-4(fp)
   146fc:	e0bfff17 	ldw	r2,-4(fp)
   14700:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14704:	0005303a 	rdctl	r2,status
   14708:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1470c:	e0fffb17 	ldw	r3,-20(fp)
   14710:	00bfff84 	movi	r2,-2
   14714:	1884703a 	and	r2,r3,r2
   14718:	1001703a 	wrctl	status,r2
  
  return context;
   1471c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14720:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14724:	e0bffa17 	ldw	r2,-24(fp)
   14728:	00c00044 	movi	r3,1
   1472c:	1884983a 	sll	r2,r3,r2
   14730:	0084303a 	nor	r2,zero,r2
   14734:	1007883a 	mov	r3,r2
   14738:	008000b4 	movhi	r2,2
   1473c:	10a29f04 	addi	r2,r2,-30084
   14740:	10800017 	ldw	r2,0(r2)
   14744:	1886703a 	and	r3,r3,r2
   14748:	008000b4 	movhi	r2,2
   1474c:	10a29f04 	addi	r2,r2,-30084
   14750:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14754:	008000b4 	movhi	r2,2
   14758:	10a29f04 	addi	r2,r2,-30084
   1475c:	10800017 	ldw	r2,0(r2)
   14760:	100170fa 	wrctl	ienable,r2
   14764:	e0bffc17 	ldw	r2,-16(fp)
   14768:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1476c:	e0bffd17 	ldw	r2,-12(fp)
   14770:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14774:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   14778:	0001883a 	nop
}
   1477c:	e037883a 	mov	sp,fp
   14780:	df000017 	ldw	fp,0(sp)
   14784:	dec00104 	addi	sp,sp,4
   14788:	f800283a 	ret

0001478c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1478c:	defffc04 	addi	sp,sp,-16
   14790:	df000315 	stw	fp,12(sp)
   14794:	df000304 	addi	fp,sp,12
   14798:	e13ffe15 	stw	r4,-8(fp)
   1479c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   147a0:	000530fa 	rdctl	r2,ienable
   147a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	00c00044 	movi	r3,1
   147b0:	1884983a 	sll	r2,r3,r2
   147b4:	1007883a 	mov	r3,r2
   147b8:	e0bffd17 	ldw	r2,-12(fp)
   147bc:	1884703a 	and	r2,r3,r2
   147c0:	1004c03a 	cmpne	r2,r2,zero
   147c4:	10803fcc 	andi	r2,r2,255
}
   147c8:	e037883a 	mov	sp,fp
   147cc:	df000017 	ldw	fp,0(sp)
   147d0:	dec00104 	addi	sp,sp,4
   147d4:	f800283a 	ret

000147d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   147d8:	defff504 	addi	sp,sp,-44
   147dc:	dfc00a15 	stw	ra,40(sp)
   147e0:	df000915 	stw	fp,36(sp)
   147e4:	df000904 	addi	fp,sp,36
   147e8:	e13ffc15 	stw	r4,-16(fp)
   147ec:	e17ffd15 	stw	r5,-12(fp)
   147f0:	e1bffe15 	stw	r6,-8(fp)
   147f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   147f8:	00bffa84 	movi	r2,-22
   147fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14800:	e0bffd17 	ldw	r2,-12(fp)
   14804:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14808:	e0bff817 	ldw	r2,-32(fp)
   1480c:	10800808 	cmpgei	r2,r2,32
   14810:	1000271e 	bne	r2,zero,148b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14814:	0005303a 	rdctl	r2,status
   14818:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1481c:	e0fffa17 	ldw	r3,-24(fp)
   14820:	00bfff84 	movi	r2,-2
   14824:	1884703a 	and	r2,r3,r2
   14828:	1001703a 	wrctl	status,r2
  
  return context;
   1482c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14830:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   14834:	008000b4 	movhi	r2,2
   14838:	10a2ad04 	addi	r2,r2,-30028
   1483c:	e0fff817 	ldw	r3,-32(fp)
   14840:	180690fa 	slli	r3,r3,3
   14844:	10c5883a 	add	r2,r2,r3
   14848:	e0fffe17 	ldw	r3,-8(fp)
   1484c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   14850:	008000b4 	movhi	r2,2
   14854:	10a2ad04 	addi	r2,r2,-30028
   14858:	e0fff817 	ldw	r3,-32(fp)
   1485c:	180690fa 	slli	r3,r3,3
   14860:	10c5883a 	add	r2,r2,r3
   14864:	10800104 	addi	r2,r2,4
   14868:	e0ffff17 	ldw	r3,-4(fp)
   1486c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14870:	e0bffe17 	ldw	r2,-8(fp)
   14874:	10000526 	beq	r2,zero,1488c <alt_iic_isr_register+0xb4>
   14878:	e0bff817 	ldw	r2,-32(fp)
   1487c:	e13ffc17 	ldw	r4,-16(fp)
   14880:	100b883a 	mov	r5,r2
   14884:	00146480 	call	14648 <alt_ic_irq_enable>
   14888:	00000406 	br	1489c <alt_iic_isr_register+0xc4>
   1488c:	e0bff817 	ldw	r2,-32(fp)
   14890:	e13ffc17 	ldw	r4,-16(fp)
   14894:	100b883a 	mov	r5,r2
   14898:	00146e80 	call	146e8 <alt_ic_irq_disable>
   1489c:	e0bff715 	stw	r2,-36(fp)
   148a0:	e0bff917 	ldw	r2,-28(fp)
   148a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148a8:	e0bffb17 	ldw	r2,-20(fp)
   148ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   148b0:	e0bff717 	ldw	r2,-36(fp)
}
   148b4:	e037883a 	mov	sp,fp
   148b8:	dfc00117 	ldw	ra,4(sp)
   148bc:	df000017 	ldw	fp,0(sp)
   148c0:	dec00204 	addi	sp,sp,8
   148c4:	f800283a 	ret

000148c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   148c8:	defff804 	addi	sp,sp,-32
   148cc:	dfc00715 	stw	ra,28(sp)
   148d0:	df000615 	stw	fp,24(sp)
   148d4:	dc000515 	stw	r16,20(sp)
   148d8:	df000604 	addi	fp,sp,24
   148dc:	e13ffb15 	stw	r4,-20(fp)
   148e0:	e17ffc15 	stw	r5,-16(fp)
   148e4:	e1bffd15 	stw	r6,-12(fp)
   148e8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   148ec:	e13ffc17 	ldw	r4,-16(fp)
   148f0:	e17ffd17 	ldw	r5,-12(fp)
   148f4:	e1bffe17 	ldw	r6,-8(fp)
   148f8:	0014b640 	call	14b64 <open>
   148fc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   14900:	e0bffa17 	ldw	r2,-24(fp)
   14904:	10002216 	blt	r2,zero,14990 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   14908:	04000074 	movhi	r16,1
   1490c:	84177704 	addi	r16,r16,24028
   14910:	e0bffa17 	ldw	r2,-24(fp)
   14914:	1009883a 	mov	r4,r2
   14918:	01400304 	movi	r5,12
   1491c:	0012dbc0 	call	12dbc <__mulsi3>
   14920:	8085883a 	add	r2,r16,r2
   14924:	10c00017 	ldw	r3,0(r2)
   14928:	e0bffb17 	ldw	r2,-20(fp)
   1492c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14930:	04000074 	movhi	r16,1
   14934:	84177704 	addi	r16,r16,24028
   14938:	e0bffa17 	ldw	r2,-24(fp)
   1493c:	1009883a 	mov	r4,r2
   14940:	01400304 	movi	r5,12
   14944:	0012dbc0 	call	12dbc <__mulsi3>
   14948:	8085883a 	add	r2,r16,r2
   1494c:	10800104 	addi	r2,r2,4
   14950:	10c00017 	ldw	r3,0(r2)
   14954:	e0bffb17 	ldw	r2,-20(fp)
   14958:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1495c:	04000074 	movhi	r16,1
   14960:	84177704 	addi	r16,r16,24028
   14964:	e0bffa17 	ldw	r2,-24(fp)
   14968:	1009883a 	mov	r4,r2
   1496c:	01400304 	movi	r5,12
   14970:	0012dbc0 	call	12dbc <__mulsi3>
   14974:	8085883a 	add	r2,r16,r2
   14978:	10800204 	addi	r2,r2,8
   1497c:	10c00017 	ldw	r3,0(r2)
   14980:	e0bffb17 	ldw	r2,-20(fp)
   14984:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14988:	e13ffa17 	ldw	r4,-24(fp)
   1498c:	00135580 	call	13558 <alt_release_fd>
  }
} 
   14990:	e6ffff04 	addi	sp,fp,-4
   14994:	dfc00217 	ldw	ra,8(sp)
   14998:	df000117 	ldw	fp,4(sp)
   1499c:	dc000017 	ldw	r16,0(sp)
   149a0:	dec00304 	addi	sp,sp,12
   149a4:	f800283a 	ret

000149a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   149a8:	defffb04 	addi	sp,sp,-20
   149ac:	dfc00415 	stw	ra,16(sp)
   149b0:	df000315 	stw	fp,12(sp)
   149b4:	df000304 	addi	fp,sp,12
   149b8:	e13ffd15 	stw	r4,-12(fp)
   149bc:	e17ffe15 	stw	r5,-8(fp)
   149c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   149c4:	01000074 	movhi	r4,1
   149c8:	21177a04 	addi	r4,r4,24040
   149cc:	e17ffd17 	ldw	r5,-12(fp)
   149d0:	01800044 	movi	r6,1
   149d4:	01c07fc4 	movi	r7,511
   149d8:	00148c80 	call	148c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   149dc:	01000074 	movhi	r4,1
   149e0:	21177704 	addi	r4,r4,24028
   149e4:	e17ffe17 	ldw	r5,-8(fp)
   149e8:	000d883a 	mov	r6,zero
   149ec:	01c07fc4 	movi	r7,511
   149f0:	00148c80 	call	148c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   149f4:	01000074 	movhi	r4,1
   149f8:	21177d04 	addi	r4,r4,24052
   149fc:	e17fff17 	ldw	r5,-4(fp)
   14a00:	01800044 	movi	r6,1
   14a04:	01c07fc4 	movi	r7,511
   14a08:	00148c80 	call	148c8 <alt_open_fd>
}  
   14a0c:	e037883a 	mov	sp,fp
   14a10:	dfc00117 	ldw	ra,4(sp)
   14a14:	df000017 	ldw	fp,0(sp)
   14a18:	dec00204 	addi	sp,sp,8
   14a1c:	f800283a 	ret

00014a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14a20:	defffe04 	addi	sp,sp,-8
   14a24:	dfc00115 	stw	ra,4(sp)
   14a28:	df000015 	stw	fp,0(sp)
   14a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14a30:	00800074 	movhi	r2,1
   14a34:	109bf804 	addi	r2,r2,28640
   14a38:	10800017 	ldw	r2,0(r2)
   14a3c:	10000526 	beq	r2,zero,14a54 <alt_get_errno+0x34>
   14a40:	00800074 	movhi	r2,1
   14a44:	109bf804 	addi	r2,r2,28640
   14a48:	10800017 	ldw	r2,0(r2)
   14a4c:	103ee83a 	callr	r2
   14a50:	00000206 	br	14a5c <alt_get_errno+0x3c>
   14a54:	008000b4 	movhi	r2,2
   14a58:	10a29b04 	addi	r2,r2,-30100
}
   14a5c:	e037883a 	mov	sp,fp
   14a60:	dfc00117 	ldw	ra,4(sp)
   14a64:	df000017 	ldw	fp,0(sp)
   14a68:	dec00204 	addi	sp,sp,8
   14a6c:	f800283a 	ret

00014a70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14a70:	defffb04 	addi	sp,sp,-20
   14a74:	dfc00415 	stw	ra,16(sp)
   14a78:	df000315 	stw	fp,12(sp)
   14a7c:	dc000215 	stw	r16,8(sp)
   14a80:	df000304 	addi	fp,sp,12
   14a84:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14a88:	e0bffe17 	ldw	r2,-8(fp)
   14a8c:	10800217 	ldw	r2,8(r2)
   14a90:	10d00034 	orhi	r3,r2,16384
   14a94:	e0bffe17 	ldw	r2,-8(fp)
   14a98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14a9c:	e03ffd15 	stw	zero,-12(fp)
   14aa0:	00002306 	br	14b30 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14aa4:	04000074 	movhi	r16,1
   14aa8:	84177704 	addi	r16,r16,24028
   14aac:	e0bffd17 	ldw	r2,-12(fp)
   14ab0:	1009883a 	mov	r4,r2
   14ab4:	01400304 	movi	r5,12
   14ab8:	0012dbc0 	call	12dbc <__mulsi3>
   14abc:	8085883a 	add	r2,r16,r2
   14ac0:	10c00017 	ldw	r3,0(r2)
   14ac4:	e0bffe17 	ldw	r2,-8(fp)
   14ac8:	10800017 	ldw	r2,0(r2)
   14acc:	1880151e 	bne	r3,r2,14b24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14ad0:	04000074 	movhi	r16,1
   14ad4:	84177704 	addi	r16,r16,24028
   14ad8:	e0bffd17 	ldw	r2,-12(fp)
   14adc:	1009883a 	mov	r4,r2
   14ae0:	01400304 	movi	r5,12
   14ae4:	0012dbc0 	call	12dbc <__mulsi3>
   14ae8:	8085883a 	add	r2,r16,r2
   14aec:	10800204 	addi	r2,r2,8
   14af0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14af4:	10000b0e 	bge	r2,zero,14b24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14af8:	e13ffd17 	ldw	r4,-12(fp)
   14afc:	01400304 	movi	r5,12
   14b00:	0012dbc0 	call	12dbc <__mulsi3>
   14b04:	1007883a 	mov	r3,r2
   14b08:	00800074 	movhi	r2,1
   14b0c:	10977704 	addi	r2,r2,24028
   14b10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14b14:	e0bffe17 	ldw	r2,-8(fp)
   14b18:	18800226 	beq	r3,r2,14b24 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14b1c:	00bffcc4 	movi	r2,-13
   14b20:	00000a06 	br	14b4c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14b24:	e0bffd17 	ldw	r2,-12(fp)
   14b28:	10800044 	addi	r2,r2,1
   14b2c:	e0bffd15 	stw	r2,-12(fp)
   14b30:	00800074 	movhi	r2,1
   14b34:	109bf704 	addi	r2,r2,28636
   14b38:	10800017 	ldw	r2,0(r2)
   14b3c:	1007883a 	mov	r3,r2
   14b40:	e0bffd17 	ldw	r2,-12(fp)
   14b44:	18bfd72e 	bgeu	r3,r2,14aa4 <_gp+0xffff5ae8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14b48:	0005883a 	mov	r2,zero
}
   14b4c:	e6ffff04 	addi	sp,fp,-4
   14b50:	dfc00217 	ldw	ra,8(sp)
   14b54:	df000117 	ldw	fp,4(sp)
   14b58:	dc000017 	ldw	r16,0(sp)
   14b5c:	dec00304 	addi	sp,sp,12
   14b60:	f800283a 	ret

00014b64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14b64:	defff604 	addi	sp,sp,-40
   14b68:	dfc00915 	stw	ra,36(sp)
   14b6c:	df000815 	stw	fp,32(sp)
   14b70:	df000804 	addi	fp,sp,32
   14b74:	e13ffd15 	stw	r4,-12(fp)
   14b78:	e17ffe15 	stw	r5,-8(fp)
   14b7c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14b80:	00bfffc4 	movi	r2,-1
   14b84:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   14b88:	00bffb44 	movi	r2,-19
   14b8c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14b90:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14b94:	e13ffd17 	ldw	r4,-12(fp)
   14b98:	01400074 	movhi	r5,1
   14b9c:	295bf504 	addi	r5,r5,28628
   14ba0:	0014e800 	call	14e80 <alt_find_dev>
   14ba4:	e0bff815 	stw	r2,-32(fp)
   14ba8:	e0bff817 	ldw	r2,-32(fp)
   14bac:	1000051e 	bne	r2,zero,14bc4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14bb0:	e13ffd17 	ldw	r4,-12(fp)
   14bb4:	0014f100 	call	14f10 <alt_find_file>
   14bb8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14bbc:	00800044 	movi	r2,1
   14bc0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14bc4:	e0bff817 	ldw	r2,-32(fp)
   14bc8:	10002b26 	beq	r2,zero,14c78 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14bcc:	e13ff817 	ldw	r4,-32(fp)
   14bd0:	00150240 	call	15024 <alt_get_fd>
   14bd4:	e0bff915 	stw	r2,-28(fp)
   14bd8:	e0bff917 	ldw	r2,-28(fp)
   14bdc:	1000030e 	bge	r2,zero,14bec <open+0x88>
    {
      status = index;
   14be0:	e0bff917 	ldw	r2,-28(fp)
   14be4:	e0bffa15 	stw	r2,-24(fp)
   14be8:	00002506 	br	14c80 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   14bec:	e13ff917 	ldw	r4,-28(fp)
   14bf0:	01400304 	movi	r5,12
   14bf4:	0012dbc0 	call	12dbc <__mulsi3>
   14bf8:	1007883a 	mov	r3,r2
   14bfc:	00800074 	movhi	r2,1
   14c00:	10977704 	addi	r2,r2,24028
   14c04:	1885883a 	add	r2,r3,r2
   14c08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14c0c:	e0fffe17 	ldw	r3,-8(fp)
   14c10:	00900034 	movhi	r2,16384
   14c14:	10bfffc4 	addi	r2,r2,-1
   14c18:	1886703a 	and	r3,r3,r2
   14c1c:	e0bffc17 	ldw	r2,-16(fp)
   14c20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14c24:	e0bffb17 	ldw	r2,-20(fp)
   14c28:	1000051e 	bne	r2,zero,14c40 <open+0xdc>
   14c2c:	e13ffc17 	ldw	r4,-16(fp)
   14c30:	0014a700 	call	14a70 <alt_file_locked>
   14c34:	e0bffa15 	stw	r2,-24(fp)
   14c38:	e0bffa17 	ldw	r2,-24(fp)
   14c3c:	10001016 	blt	r2,zero,14c80 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14c40:	e0bff817 	ldw	r2,-32(fp)
   14c44:	10800317 	ldw	r2,12(r2)
   14c48:	10000826 	beq	r2,zero,14c6c <open+0x108>
   14c4c:	e0bff817 	ldw	r2,-32(fp)
   14c50:	10800317 	ldw	r2,12(r2)
   14c54:	e13ffc17 	ldw	r4,-16(fp)
   14c58:	e17ffd17 	ldw	r5,-12(fp)
   14c5c:	e1bffe17 	ldw	r6,-8(fp)
   14c60:	e1ffff17 	ldw	r7,-4(fp)
   14c64:	103ee83a 	callr	r2
   14c68:	00000106 	br	14c70 <open+0x10c>
   14c6c:	0005883a 	mov	r2,zero
   14c70:	e0bffa15 	stw	r2,-24(fp)
   14c74:	00000206 	br	14c80 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14c78:	00bffb44 	movi	r2,-19
   14c7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14c80:	e0bffa17 	ldw	r2,-24(fp)
   14c84:	1000090e 	bge	r2,zero,14cac <open+0x148>
  {
    alt_release_fd (index);  
   14c88:	e13ff917 	ldw	r4,-28(fp)
   14c8c:	00135580 	call	13558 <alt_release_fd>
    ALT_ERRNO = -status;
   14c90:	0014a200 	call	14a20 <alt_get_errno>
   14c94:	1007883a 	mov	r3,r2
   14c98:	e0bffa17 	ldw	r2,-24(fp)
   14c9c:	0085c83a 	sub	r2,zero,r2
   14ca0:	18800015 	stw	r2,0(r3)
    return -1;
   14ca4:	00bfffc4 	movi	r2,-1
   14ca8:	00000106 	br	14cb0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   14cac:	e0bff917 	ldw	r2,-28(fp)
}
   14cb0:	e037883a 	mov	sp,fp
   14cb4:	dfc00117 	ldw	ra,4(sp)
   14cb8:	df000017 	ldw	fp,0(sp)
   14cbc:	dec00204 	addi	sp,sp,8
   14cc0:	f800283a 	ret

00014cc4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14cc4:	defffa04 	addi	sp,sp,-24
   14cc8:	df000515 	stw	fp,20(sp)
   14ccc:	df000504 	addi	fp,sp,20
   14cd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cd4:	0005303a 	rdctl	r2,status
   14cd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cdc:	e0fffc17 	ldw	r3,-16(fp)
   14ce0:	00bfff84 	movi	r2,-2
   14ce4:	1884703a 	and	r2,r3,r2
   14ce8:	1001703a 	wrctl	status,r2
  
  return context;
   14cec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14cf0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14cf4:	e0bfff17 	ldw	r2,-4(fp)
   14cf8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14cfc:	e0bffd17 	ldw	r2,-12(fp)
   14d00:	10800017 	ldw	r2,0(r2)
   14d04:	e0fffd17 	ldw	r3,-12(fp)
   14d08:	18c00117 	ldw	r3,4(r3)
   14d0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14d10:	e0bffd17 	ldw	r2,-12(fp)
   14d14:	10800117 	ldw	r2,4(r2)
   14d18:	e0fffd17 	ldw	r3,-12(fp)
   14d1c:	18c00017 	ldw	r3,0(r3)
   14d20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14d24:	e0bffd17 	ldw	r2,-12(fp)
   14d28:	e0fffd17 	ldw	r3,-12(fp)
   14d2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14d30:	e0bffd17 	ldw	r2,-12(fp)
   14d34:	e0fffd17 	ldw	r3,-12(fp)
   14d38:	10c00015 	stw	r3,0(r2)
   14d3c:	e0bffb17 	ldw	r2,-20(fp)
   14d40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d44:	e0bffe17 	ldw	r2,-8(fp)
   14d48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14d4c:	e037883a 	mov	sp,fp
   14d50:	df000017 	ldw	fp,0(sp)
   14d54:	dec00104 	addi	sp,sp,4
   14d58:	f800283a 	ret

00014d5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14d5c:	defffb04 	addi	sp,sp,-20
   14d60:	dfc00415 	stw	ra,16(sp)
   14d64:	df000315 	stw	fp,12(sp)
   14d68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14d6c:	d0a00c17 	ldw	r2,-32720(gp)
   14d70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14d74:	d0a6b217 	ldw	r2,-25912(gp)
   14d78:	10800044 	addi	r2,r2,1
   14d7c:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14d80:	00002e06 	br	14e3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   14d84:	e0bffd17 	ldw	r2,-12(fp)
   14d88:	10800017 	ldw	r2,0(r2)
   14d8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14d90:	e0bffd17 	ldw	r2,-12(fp)
   14d94:	10800403 	ldbu	r2,16(r2)
   14d98:	10803fcc 	andi	r2,r2,255
   14d9c:	10000426 	beq	r2,zero,14db0 <alt_tick+0x54>
   14da0:	d0a6b217 	ldw	r2,-25912(gp)
   14da4:	1000021e 	bne	r2,zero,14db0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14da8:	e0bffd17 	ldw	r2,-12(fp)
   14dac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14db0:	e0bffd17 	ldw	r2,-12(fp)
   14db4:	10800217 	ldw	r2,8(r2)
   14db8:	d0e6b217 	ldw	r3,-25912(gp)
   14dbc:	18801d36 	bltu	r3,r2,14e34 <alt_tick+0xd8>
   14dc0:	e0bffd17 	ldw	r2,-12(fp)
   14dc4:	10800403 	ldbu	r2,16(r2)
   14dc8:	10803fcc 	andi	r2,r2,255
   14dcc:	1000191e 	bne	r2,zero,14e34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14dd0:	e0bffd17 	ldw	r2,-12(fp)
   14dd4:	10800317 	ldw	r2,12(r2)
   14dd8:	e0fffd17 	ldw	r3,-12(fp)
   14ddc:	18c00517 	ldw	r3,20(r3)
   14de0:	1809883a 	mov	r4,r3
   14de4:	103ee83a 	callr	r2
   14de8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14dec:	e0bfff17 	ldw	r2,-4(fp)
   14df0:	1000031e 	bne	r2,zero,14e00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   14df4:	e13ffd17 	ldw	r4,-12(fp)
   14df8:	0014cc40 	call	14cc4 <alt_alarm_stop>
   14dfc:	00000d06 	br	14e34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   14e00:	e0bffd17 	ldw	r2,-12(fp)
   14e04:	10c00217 	ldw	r3,8(r2)
   14e08:	e0bfff17 	ldw	r2,-4(fp)
   14e0c:	1887883a 	add	r3,r3,r2
   14e10:	e0bffd17 	ldw	r2,-12(fp)
   14e14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   14e18:	e0bffd17 	ldw	r2,-12(fp)
   14e1c:	10c00217 	ldw	r3,8(r2)
   14e20:	d0a6b217 	ldw	r2,-25912(gp)
   14e24:	1880032e 	bgeu	r3,r2,14e34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   14e28:	e0bffd17 	ldw	r2,-12(fp)
   14e2c:	00c00044 	movi	r3,1
   14e30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   14e34:	e0bffe17 	ldw	r2,-8(fp)
   14e38:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14e3c:	e0fffd17 	ldw	r3,-12(fp)
   14e40:	d0a00c04 	addi	r2,gp,-32720
   14e44:	18bfcf1e 	bne	r3,r2,14d84 <_gp+0xffff5dc8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   14e48:	0001883a 	nop
}
   14e4c:	e037883a 	mov	sp,fp
   14e50:	dfc00117 	ldw	ra,4(sp)
   14e54:	df000017 	ldw	fp,0(sp)
   14e58:	dec00204 	addi	sp,sp,8
   14e5c:	f800283a 	ret

00014e60 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   14e60:	deffff04 	addi	sp,sp,-4
   14e64:	df000015 	stw	fp,0(sp)
   14e68:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14e6c:	000170fa 	wrctl	ienable,zero
}
   14e70:	e037883a 	mov	sp,fp
   14e74:	df000017 	ldw	fp,0(sp)
   14e78:	dec00104 	addi	sp,sp,4
   14e7c:	f800283a 	ret

00014e80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14e80:	defffa04 	addi	sp,sp,-24
   14e84:	dfc00515 	stw	ra,20(sp)
   14e88:	df000415 	stw	fp,16(sp)
   14e8c:	df000404 	addi	fp,sp,16
   14e90:	e13ffe15 	stw	r4,-8(fp)
   14e94:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14e98:	e0bfff17 	ldw	r2,-4(fp)
   14e9c:	10800017 	ldw	r2,0(r2)
   14ea0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14ea4:	e13ffe17 	ldw	r4,-8(fp)
   14ea8:	00103680 	call	10368 <strlen>
   14eac:	10800044 	addi	r2,r2,1
   14eb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14eb4:	00000d06 	br	14eec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14eb8:	e0bffc17 	ldw	r2,-16(fp)
   14ebc:	10c00217 	ldw	r3,8(r2)
   14ec0:	e0bffd17 	ldw	r2,-12(fp)
   14ec4:	1809883a 	mov	r4,r3
   14ec8:	e17ffe17 	ldw	r5,-8(fp)
   14ecc:	100d883a 	mov	r6,r2
   14ed0:	00151e00 	call	151e0 <memcmp>
   14ed4:	1000021e 	bne	r2,zero,14ee0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14ed8:	e0bffc17 	ldw	r2,-16(fp)
   14edc:	00000706 	br	14efc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14ee0:	e0bffc17 	ldw	r2,-16(fp)
   14ee4:	10800017 	ldw	r2,0(r2)
   14ee8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14eec:	e0fffc17 	ldw	r3,-16(fp)
   14ef0:	e0bfff17 	ldw	r2,-4(fp)
   14ef4:	18bff01e 	bne	r3,r2,14eb8 <_gp+0xffff5efc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14ef8:	0005883a 	mov	r2,zero
}
   14efc:	e037883a 	mov	sp,fp
   14f00:	dfc00117 	ldw	ra,4(sp)
   14f04:	df000017 	ldw	fp,0(sp)
   14f08:	dec00204 	addi	sp,sp,8
   14f0c:	f800283a 	ret

00014f10 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   14f10:	defffb04 	addi	sp,sp,-20
   14f14:	dfc00415 	stw	ra,16(sp)
   14f18:	df000315 	stw	fp,12(sp)
   14f1c:	df000304 	addi	fp,sp,12
   14f20:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14f24:	00800074 	movhi	r2,1
   14f28:	109bf304 	addi	r2,r2,28620
   14f2c:	10800017 	ldw	r2,0(r2)
   14f30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14f34:	00003106 	br	14ffc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   14f38:	e0bffd17 	ldw	r2,-12(fp)
   14f3c:	10800217 	ldw	r2,8(r2)
   14f40:	1009883a 	mov	r4,r2
   14f44:	00103680 	call	10368 <strlen>
   14f48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14f4c:	e0bffd17 	ldw	r2,-12(fp)
   14f50:	10c00217 	ldw	r3,8(r2)
   14f54:	e0bffe17 	ldw	r2,-8(fp)
   14f58:	10bfffc4 	addi	r2,r2,-1
   14f5c:	1885883a 	add	r2,r3,r2
   14f60:	10800003 	ldbu	r2,0(r2)
   14f64:	10803fcc 	andi	r2,r2,255
   14f68:	1080201c 	xori	r2,r2,128
   14f6c:	10bfe004 	addi	r2,r2,-128
   14f70:	10800bd8 	cmpnei	r2,r2,47
   14f74:	1000031e 	bne	r2,zero,14f84 <alt_find_file+0x74>
    {
      len -= 1;
   14f78:	e0bffe17 	ldw	r2,-8(fp)
   14f7c:	10bfffc4 	addi	r2,r2,-1
   14f80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14f84:	e0bffe17 	ldw	r2,-8(fp)
   14f88:	e0ffff17 	ldw	r3,-4(fp)
   14f8c:	1885883a 	add	r2,r3,r2
   14f90:	10800003 	ldbu	r2,0(r2)
   14f94:	10803fcc 	andi	r2,r2,255
   14f98:	1080201c 	xori	r2,r2,128
   14f9c:	10bfe004 	addi	r2,r2,-128
   14fa0:	10800be0 	cmpeqi	r2,r2,47
   14fa4:	1000081e 	bne	r2,zero,14fc8 <alt_find_file+0xb8>
   14fa8:	e0bffe17 	ldw	r2,-8(fp)
   14fac:	e0ffff17 	ldw	r3,-4(fp)
   14fb0:	1885883a 	add	r2,r3,r2
   14fb4:	10800003 	ldbu	r2,0(r2)
   14fb8:	10803fcc 	andi	r2,r2,255
   14fbc:	1080201c 	xori	r2,r2,128
   14fc0:	10bfe004 	addi	r2,r2,-128
   14fc4:	10000a1e 	bne	r2,zero,14ff0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   14fc8:	e0bffd17 	ldw	r2,-12(fp)
   14fcc:	10c00217 	ldw	r3,8(r2)
   14fd0:	e0bffe17 	ldw	r2,-8(fp)
   14fd4:	1809883a 	mov	r4,r3
   14fd8:	e17fff17 	ldw	r5,-4(fp)
   14fdc:	100d883a 	mov	r6,r2
   14fe0:	00151e00 	call	151e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14fe4:	1000021e 	bne	r2,zero,14ff0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   14fe8:	e0bffd17 	ldw	r2,-12(fp)
   14fec:	00000806 	br	15010 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   14ff0:	e0bffd17 	ldw	r2,-12(fp)
   14ff4:	10800017 	ldw	r2,0(r2)
   14ff8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14ffc:	e0fffd17 	ldw	r3,-12(fp)
   15000:	00800074 	movhi	r2,1
   15004:	109bf304 	addi	r2,r2,28620
   15008:	18bfcb1e 	bne	r3,r2,14f38 <_gp+0xffff5f7c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1500c:	0005883a 	mov	r2,zero
}
   15010:	e037883a 	mov	sp,fp
   15014:	dfc00117 	ldw	ra,4(sp)
   15018:	df000017 	ldw	fp,0(sp)
   1501c:	dec00204 	addi	sp,sp,8
   15020:	f800283a 	ret

00015024 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15024:	defffa04 	addi	sp,sp,-24
   15028:	dfc00515 	stw	ra,20(sp)
   1502c:	df000415 	stw	fp,16(sp)
   15030:	dc000315 	stw	r16,12(sp)
   15034:	df000404 	addi	fp,sp,16
   15038:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1503c:	00bffa04 	movi	r2,-24
   15040:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15044:	e03ffc15 	stw	zero,-16(fp)
   15048:	00002106 	br	150d0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1504c:	04000074 	movhi	r16,1
   15050:	84177704 	addi	r16,r16,24028
   15054:	e0bffc17 	ldw	r2,-16(fp)
   15058:	1009883a 	mov	r4,r2
   1505c:	01400304 	movi	r5,12
   15060:	0012dbc0 	call	12dbc <__mulsi3>
   15064:	8085883a 	add	r2,r16,r2
   15068:	10800017 	ldw	r2,0(r2)
   1506c:	1000151e 	bne	r2,zero,150c4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   15070:	04000074 	movhi	r16,1
   15074:	84177704 	addi	r16,r16,24028
   15078:	e0bffc17 	ldw	r2,-16(fp)
   1507c:	1009883a 	mov	r4,r2
   15080:	01400304 	movi	r5,12
   15084:	0012dbc0 	call	12dbc <__mulsi3>
   15088:	8085883a 	add	r2,r16,r2
   1508c:	e0fffe17 	ldw	r3,-8(fp)
   15090:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15094:	00800074 	movhi	r2,1
   15098:	109bf704 	addi	r2,r2,28636
   1509c:	10c00017 	ldw	r3,0(r2)
   150a0:	e0bffc17 	ldw	r2,-16(fp)
   150a4:	1880040e 	bge	r3,r2,150b8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   150a8:	00800074 	movhi	r2,1
   150ac:	109bf704 	addi	r2,r2,28636
   150b0:	e0fffc17 	ldw	r3,-16(fp)
   150b4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   150b8:	e0bffc17 	ldw	r2,-16(fp)
   150bc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   150c0:	00000606 	br	150dc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   150c4:	e0bffc17 	ldw	r2,-16(fp)
   150c8:	10800044 	addi	r2,r2,1
   150cc:	e0bffc15 	stw	r2,-16(fp)
   150d0:	e0bffc17 	ldw	r2,-16(fp)
   150d4:	10800810 	cmplti	r2,r2,32
   150d8:	103fdc1e 	bne	r2,zero,1504c <_gp+0xffff6090>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   150dc:	e0bffd17 	ldw	r2,-12(fp)
}
   150e0:	e6ffff04 	addi	sp,fp,-4
   150e4:	dfc00217 	ldw	ra,8(sp)
   150e8:	df000117 	ldw	fp,4(sp)
   150ec:	dc000017 	ldw	r16,0(sp)
   150f0:	dec00304 	addi	sp,sp,12
   150f4:	f800283a 	ret

000150f8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   150f8:	defffe04 	addi	sp,sp,-8
   150fc:	df000115 	stw	fp,4(sp)
   15100:	df000104 	addi	fp,sp,4
   15104:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   15108:	e0bfff17 	ldw	r2,-4(fp)
   1510c:	10bffe84 	addi	r2,r2,-6
   15110:	10c00428 	cmpgeui	r3,r2,16
   15114:	18001a1e 	bne	r3,zero,15180 <alt_exception_cause_generated_bad_addr+0x88>
   15118:	100690ba 	slli	r3,r2,2
   1511c:	00800074 	movhi	r2,1
   15120:	10944c04 	addi	r2,r2,20784
   15124:	1885883a 	add	r2,r3,r2
   15128:	10800017 	ldw	r2,0(r2)
   1512c:	1000683a 	jmp	r2
   15130:	00015170 	cmpltui	zero,zero,1349
   15134:	00015170 	cmpltui	zero,zero,1349
   15138:	00015180 	call	1518 <__reset-0xeae8>
   1513c:	00015180 	call	1518 <__reset-0xeae8>
   15140:	00015180 	call	1518 <__reset-0xeae8>
   15144:	00015170 	cmpltui	zero,zero,1349
   15148:	00015178 	rdprs	zero,zero,1349
   1514c:	00015180 	call	1518 <__reset-0xeae8>
   15150:	00015170 	cmpltui	zero,zero,1349
   15154:	00015170 	cmpltui	zero,zero,1349
   15158:	00015180 	call	1518 <__reset-0xeae8>
   1515c:	00015170 	cmpltui	zero,zero,1349
   15160:	00015178 	rdprs	zero,zero,1349
   15164:	00015180 	call	1518 <__reset-0xeae8>
   15168:	00015180 	call	1518 <__reset-0xeae8>
   1516c:	00015170 	cmpltui	zero,zero,1349
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15170:	00800044 	movi	r2,1
   15174:	00000306 	br	15184 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15178:	0005883a 	mov	r2,zero
   1517c:	00000106 	br	15184 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   15180:	0005883a 	mov	r2,zero
  }
}
   15184:	e037883a 	mov	sp,fp
   15188:	df000017 	ldw	fp,0(sp)
   1518c:	dec00104 	addi	sp,sp,4
   15190:	f800283a 	ret

00015194 <atexit>:
   15194:	200b883a 	mov	r5,r4
   15198:	000d883a 	mov	r6,zero
   1519c:	0009883a 	mov	r4,zero
   151a0:	000f883a 	mov	r7,zero
   151a4:	001525c1 	jmpi	1525c <__register_exitproc>

000151a8 <exit>:
   151a8:	defffe04 	addi	sp,sp,-8
   151ac:	000b883a 	mov	r5,zero
   151b0:	dc000015 	stw	r16,0(sp)
   151b4:	dfc00115 	stw	ra,4(sp)
   151b8:	2021883a 	mov	r16,r4
   151bc:	00153700 	call	15370 <__call_exitprocs>
   151c0:	00800074 	movhi	r2,1
   151c4:	109bef04 	addi	r2,r2,28604
   151c8:	11000017 	ldw	r4,0(r2)
   151cc:	20800f17 	ldw	r2,60(r4)
   151d0:	10000126 	beq	r2,zero,151d8 <exit+0x30>
   151d4:	103ee83a 	callr	r2
   151d8:	8009883a 	mov	r4,r16
   151dc:	00155040 	call	15504 <_exit>

000151e0 <memcmp>:
   151e0:	01c000c4 	movi	r7,3
   151e4:	3980192e 	bgeu	r7,r6,1524c <memcmp+0x6c>
   151e8:	2144b03a 	or	r2,r4,r5
   151ec:	11c4703a 	and	r2,r2,r7
   151f0:	10000f26 	beq	r2,zero,15230 <memcmp+0x50>
   151f4:	20800003 	ldbu	r2,0(r4)
   151f8:	28c00003 	ldbu	r3,0(r5)
   151fc:	10c0151e 	bne	r2,r3,15254 <memcmp+0x74>
   15200:	31bfff84 	addi	r6,r6,-2
   15204:	01ffffc4 	movi	r7,-1
   15208:	00000406 	br	1521c <memcmp+0x3c>
   1520c:	20800003 	ldbu	r2,0(r4)
   15210:	28c00003 	ldbu	r3,0(r5)
   15214:	31bfffc4 	addi	r6,r6,-1
   15218:	10c00e1e 	bne	r2,r3,15254 <memcmp+0x74>
   1521c:	21000044 	addi	r4,r4,1
   15220:	29400044 	addi	r5,r5,1
   15224:	31fff91e 	bne	r6,r7,1520c <_gp+0xffff6250>
   15228:	0005883a 	mov	r2,zero
   1522c:	f800283a 	ret
   15230:	20c00017 	ldw	r3,0(r4)
   15234:	28800017 	ldw	r2,0(r5)
   15238:	1880041e 	bne	r3,r2,1524c <memcmp+0x6c>
   1523c:	31bfff04 	addi	r6,r6,-4
   15240:	21000104 	addi	r4,r4,4
   15244:	29400104 	addi	r5,r5,4
   15248:	39bff936 	bltu	r7,r6,15230 <_gp+0xffff6274>
   1524c:	303fe91e 	bne	r6,zero,151f4 <_gp+0xffff6238>
   15250:	003ff506 	br	15228 <_gp+0xffff626c>
   15254:	10c5c83a 	sub	r2,r2,r3
   15258:	f800283a 	ret

0001525c <__register_exitproc>:
   1525c:	00800074 	movhi	r2,1
   15260:	defffa04 	addi	sp,sp,-24
   15264:	109bef04 	addi	r2,r2,28604
   15268:	dc000315 	stw	r16,12(sp)
   1526c:	14000017 	ldw	r16,0(r2)
   15270:	dc400415 	stw	r17,16(sp)
   15274:	dfc00515 	stw	ra,20(sp)
   15278:	80805217 	ldw	r2,328(r16)
   1527c:	2023883a 	mov	r17,r4
   15280:	10003626 	beq	r2,zero,1535c <__register_exitproc+0x100>
   15284:	10c00117 	ldw	r3,4(r2)
   15288:	010007c4 	movi	r4,31
   1528c:	20c00e16 	blt	r4,r3,152c8 <__register_exitproc+0x6c>
   15290:	1a400044 	addi	r9,r3,1
   15294:	8800211e 	bne	r17,zero,1531c <__register_exitproc+0xc0>
   15298:	18c00084 	addi	r3,r3,2
   1529c:	18c7883a 	add	r3,r3,r3
   152a0:	18c7883a 	add	r3,r3,r3
   152a4:	12400115 	stw	r9,4(r2)
   152a8:	10c7883a 	add	r3,r2,r3
   152ac:	19400015 	stw	r5,0(r3)
   152b0:	0005883a 	mov	r2,zero
   152b4:	dfc00517 	ldw	ra,20(sp)
   152b8:	dc400417 	ldw	r17,16(sp)
   152bc:	dc000317 	ldw	r16,12(sp)
   152c0:	dec00604 	addi	sp,sp,24
   152c4:	f800283a 	ret
   152c8:	00800034 	movhi	r2,0
   152cc:	10800004 	addi	r2,r2,0
   152d0:	10002526 	beq	r2,zero,15368 <__register_exitproc+0x10c>
   152d4:	01006404 	movi	r4,400
   152d8:	d9400015 	stw	r5,0(sp)
   152dc:	d9800115 	stw	r6,4(sp)
   152e0:	d9c00215 	stw	r7,8(sp)
   152e4:	00000000 	call	0 <__reset-0x10000>
   152e8:	d9400017 	ldw	r5,0(sp)
   152ec:	d9800117 	ldw	r6,4(sp)
   152f0:	d9c00217 	ldw	r7,8(sp)
   152f4:	10001c26 	beq	r2,zero,15368 <__register_exitproc+0x10c>
   152f8:	80c05217 	ldw	r3,328(r16)
   152fc:	10000115 	stw	zero,4(r2)
   15300:	02400044 	movi	r9,1
   15304:	10c00015 	stw	r3,0(r2)
   15308:	80805215 	stw	r2,328(r16)
   1530c:	10006215 	stw	zero,392(r2)
   15310:	10006315 	stw	zero,396(r2)
   15314:	0007883a 	mov	r3,zero
   15318:	883fdf26 	beq	r17,zero,15298 <_gp+0xffff62dc>
   1531c:	18d1883a 	add	r8,r3,r3
   15320:	4211883a 	add	r8,r8,r8
   15324:	1211883a 	add	r8,r2,r8
   15328:	41802215 	stw	r6,136(r8)
   1532c:	01000044 	movi	r4,1
   15330:	11806217 	ldw	r6,392(r2)
   15334:	20c8983a 	sll	r4,r4,r3
   15338:	310cb03a 	or	r6,r6,r4
   1533c:	11806215 	stw	r6,392(r2)
   15340:	41c04215 	stw	r7,264(r8)
   15344:	01800084 	movi	r6,2
   15348:	89bfd31e 	bne	r17,r6,15298 <_gp+0xffff62dc>
   1534c:	11806317 	ldw	r6,396(r2)
   15350:	3108b03a 	or	r4,r6,r4
   15354:	11006315 	stw	r4,396(r2)
   15358:	003fcf06 	br	15298 <_gp+0xffff62dc>
   1535c:	80805304 	addi	r2,r16,332
   15360:	80805215 	stw	r2,328(r16)
   15364:	003fc706 	br	15284 <_gp+0xffff62c8>
   15368:	00bfffc4 	movi	r2,-1
   1536c:	003fd106 	br	152b4 <_gp+0xffff62f8>

00015370 <__call_exitprocs>:
   15370:	00800074 	movhi	r2,1
   15374:	109bef04 	addi	r2,r2,28604
   15378:	10800017 	ldw	r2,0(r2)
   1537c:	defff404 	addi	sp,sp,-48
   15380:	dd800815 	stw	r22,32(sp)
   15384:	d8800015 	stw	r2,0(sp)
   15388:	10805204 	addi	r2,r2,328
   1538c:	dd000615 	stw	r20,24(sp)
   15390:	dc800415 	stw	r18,16(sp)
   15394:	dfc00b15 	stw	ra,44(sp)
   15398:	df000a15 	stw	fp,40(sp)
   1539c:	ddc00915 	stw	r23,36(sp)
   153a0:	dd400715 	stw	r21,28(sp)
   153a4:	dcc00515 	stw	r19,20(sp)
   153a8:	dc400315 	stw	r17,12(sp)
   153ac:	dc000215 	stw	r16,8(sp)
   153b0:	2025883a 	mov	r18,r4
   153b4:	2829883a 	mov	r20,r5
   153b8:	d8800115 	stw	r2,4(sp)
   153bc:	05bfffc4 	movi	r22,-1
   153c0:	d8800017 	ldw	r2,0(sp)
   153c4:	14c05217 	ldw	r19,328(r2)
   153c8:	98001d26 	beq	r19,zero,15440 <__call_exitprocs+0xd0>
   153cc:	dd400117 	ldw	r21,4(sp)
   153d0:	98800117 	ldw	r2,4(r19)
   153d4:	173fffc4 	addi	fp,r2,-1
   153d8:	e0000d16 	blt	fp,zero,15410 <__call_exitprocs+0xa0>
   153dc:	14000044 	addi	r16,r2,1
   153e0:	8421883a 	add	r16,r16,r16
   153e4:	8421883a 	add	r16,r16,r16
   153e8:	84402004 	addi	r17,r16,128
   153ec:	9c63883a 	add	r17,r19,r17
   153f0:	9c21883a 	add	r16,r19,r16
   153f4:	a0001e26 	beq	r20,zero,15470 <__call_exitprocs+0x100>
   153f8:	80804017 	ldw	r2,256(r16)
   153fc:	15001c26 	beq	r2,r20,15470 <__call_exitprocs+0x100>
   15400:	e73fffc4 	addi	fp,fp,-1
   15404:	843fff04 	addi	r16,r16,-4
   15408:	8c7fff04 	addi	r17,r17,-4
   1540c:	e5bff91e 	bne	fp,r22,153f4 <_gp+0xffff6438>
   15410:	00800034 	movhi	r2,0
   15414:	10800004 	addi	r2,r2,0
   15418:	10000926 	beq	r2,zero,15440 <__call_exitprocs+0xd0>
   1541c:	98800117 	ldw	r2,4(r19)
   15420:	1000311e 	bne	r2,zero,154e8 <__call_exitprocs+0x178>
   15424:	98800017 	ldw	r2,0(r19)
   15428:	10003426 	beq	r2,zero,154fc <__call_exitprocs+0x18c>
   1542c:	9809883a 	mov	r4,r19
   15430:	a8800015 	stw	r2,0(r21)
   15434:	00000000 	call	0 <__reset-0x10000>
   15438:	acc00017 	ldw	r19,0(r21)
   1543c:	983fe41e 	bne	r19,zero,153d0 <_gp+0xffff6414>
   15440:	dfc00b17 	ldw	ra,44(sp)
   15444:	df000a17 	ldw	fp,40(sp)
   15448:	ddc00917 	ldw	r23,36(sp)
   1544c:	dd800817 	ldw	r22,32(sp)
   15450:	dd400717 	ldw	r21,28(sp)
   15454:	dd000617 	ldw	r20,24(sp)
   15458:	dcc00517 	ldw	r19,20(sp)
   1545c:	dc800417 	ldw	r18,16(sp)
   15460:	dc400317 	ldw	r17,12(sp)
   15464:	dc000217 	ldw	r16,8(sp)
   15468:	dec00c04 	addi	sp,sp,48
   1546c:	f800283a 	ret
   15470:	98800117 	ldw	r2,4(r19)
   15474:	80c00017 	ldw	r3,0(r16)
   15478:	10bfffc4 	addi	r2,r2,-1
   1547c:	17001526 	beq	r2,fp,154d4 <__call_exitprocs+0x164>
   15480:	80000015 	stw	zero,0(r16)
   15484:	183fde26 	beq	r3,zero,15400 <_gp+0xffff6444>
   15488:	00800044 	movi	r2,1
   1548c:	1708983a 	sll	r4,r2,fp
   15490:	98806217 	ldw	r2,392(r19)
   15494:	9dc00117 	ldw	r23,4(r19)
   15498:	2084703a 	and	r2,r4,r2
   1549c:	1000061e 	bne	r2,zero,154b8 <__call_exitprocs+0x148>
   154a0:	183ee83a 	callr	r3
   154a4:	98800117 	ldw	r2,4(r19)
   154a8:	15ffc51e 	bne	r2,r23,153c0 <_gp+0xffff6404>
   154ac:	a8800017 	ldw	r2,0(r21)
   154b0:	14ffd326 	beq	r2,r19,15400 <_gp+0xffff6444>
   154b4:	003fc206 	br	153c0 <_gp+0xffff6404>
   154b8:	98806317 	ldw	r2,396(r19)
   154bc:	2084703a 	and	r2,r4,r2
   154c0:	1000061e 	bne	r2,zero,154dc <__call_exitprocs+0x16c>
   154c4:	89400017 	ldw	r5,0(r17)
   154c8:	9009883a 	mov	r4,r18
   154cc:	183ee83a 	callr	r3
   154d0:	003ff406 	br	154a4 <_gp+0xffff64e8>
   154d4:	9f000115 	stw	fp,4(r19)
   154d8:	003fea06 	br	15484 <_gp+0xffff64c8>
   154dc:	89000017 	ldw	r4,0(r17)
   154e0:	183ee83a 	callr	r3
   154e4:	003fef06 	br	154a4 <_gp+0xffff64e8>
   154e8:	98800017 	ldw	r2,0(r19)
   154ec:	982b883a 	mov	r21,r19
   154f0:	1027883a 	mov	r19,r2
   154f4:	983fb61e 	bne	r19,zero,153d0 <_gp+0xffff6414>
   154f8:	003fd106 	br	15440 <_gp+0xffff6484>
   154fc:	0005883a 	mov	r2,zero
   15500:	003ffa06 	br	154ec <_gp+0xffff6530>

00015504 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15504:	defffd04 	addi	sp,sp,-12
   15508:	df000215 	stw	fp,8(sp)
   1550c:	df000204 	addi	fp,sp,8
   15510:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15514:	0001883a 	nop
   15518:	e0bfff17 	ldw	r2,-4(fp)
   1551c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15520:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15524:	10000226 	beq	r2,zero,15530 <_exit+0x2c>
    ALT_SIM_FAIL();
   15528:	002af070 	cmpltui	zero,zero,43969
   1552c:	00000106 	br	15534 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15530:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15534:	003fff06 	br	15534 <_gp+0xffff6578>
