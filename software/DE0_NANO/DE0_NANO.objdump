
DE0_NANO.elf:     file format elf32-littlenios2
DE0_NANO.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000020

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00009b5c memsz 0x00009b5c flags r-x
    LOAD off    0x0000ab7c vaddr 0x02009b7c paddr 0x0200a08c align 2**12
         filesz 0x00000510 memsz 0x00000510 flags rw-
    LOAD off    0x0000b59c vaddr 0x0200a59c paddr 0x0200a59c align 2**12
         filesz 0x00000000 memsz 0x00000064 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02000020  02000020  0000b08c  2**0
                  CONTENTS
  2 .text         000096f0  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000046c  02009710  02009710  0000a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000510  02009b7c  0200a08c  0000ab7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000064  0200a59c  0200a59c  0000b59c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  0200a600  0200a600  0000b08c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04010000  04010000  0000b08c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000888  00000000  00000000  0000b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000e2fd  00000000  00000000  0000b938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004e3d  00000000  00000000  00019c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006441  00000000  00000000  0001ea72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001320  00000000  00000000  00024eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002807  00000000  00000000  000261d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000f211  00000000  00000000  000289db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00037bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001298  00000000  00000000  00037c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003b005  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0003b008  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003b014  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003b015  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0003b016  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0003b021  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0003b02c  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0003b037  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000028  00000000  00000000  0003b03f  2**0
                  CONTENTS, READONLY
 27 .jdi          00003f24  00000000  00000000  0003b067  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00033010  00000000  00000000  0003ef8b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000020 l    d  .text	00000000 .text
02009710 l    d  .rodata	00000000 .rodata
02009b7c l    d  .rwdata	00000000 .rwdata
0200a59c l    d  .bss	00000000 .bss
0200a600 l    d  .sdram_0	00000000 .sdram_0
04010000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE0_NANO_bsp//obj/HAL/src/crt0.o
02000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
02009924 l     O .rodata	00000108 two_over_pi
020098a4 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
02009a6c l     O .rodata	00000010 init_jk
02009a2c l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02003b54 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
02009b7c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
0200a5a8 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
02008064 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0200a078 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 libgcc2.c
02000d04 g     F .text	000000c0 identificar_dominio
02008eb4 g     F .text	0000002c alt_main
02000920 g     F .text	000001ec merge
02007ea4 g     F .text	00000080 _puts_r
020036e8 g     F .text	00000014 fabs
020016ec g     F .text	00000130 sqrt
0200a08c g       *ABS*	00000000 __flash_rwdata_start
02005f54 g     F .text	00000084 .hidden __eqdf2
02008ab8 g     F .text	00000054 _gettimeofday_r
02000100 g     F .text	00000198 rastrigin
0200a600 g       *ABS*	00000000 __alt_heap_start
02007e58 g     F .text	0000004c printf
02001328 g     F .text	000001f8 executar
02008ee4 g     F .text	00000004 __malloc_unlock
02001520 g     F .text	000000c4 menu
02004b8c g     F .text	00000078 .hidden __fixsfsi
02000e60 g     F .text	00000068 imprimir_individuo
02005fd8 g     F .text	000000e0 .hidden __gtdf2
020090ec g     F .text	00000008 altera_nios2_gen2_irq_init
02007738 g     F .text	00000010 __errno
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
0200a5b0 g     O .bss	00000004 errno
020036fc g     F .text	000001f4 floor
0200a5c8 g     O .bss	00000004 alt_argv
02012064 g       *ABS*	00000000 _gp
02004690 g     F .text	000004fc .hidden __subsf3
0200181c g     F .text	0000079c __ieee754_rem_pio2
02007df4 g     F .text	00000028 memcpy
0200735c g     F .text	000000d0 .hidden __floatsidf
020060b8 g     F .text	000000e0 .hidden __ltdf2
02007f24 g     F .text	00000014 puts
020038f0 g     F .text	00000074 __fpclassifyd
02007748 g     F .text	00000014 malloc
02007e1c g     F .text	0000003c _printf_r
04010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
02003c70 g     F .text	00000008 .hidden __udivsi3
0200224c g     F .text	000004a4 __kernel_cos
02004188 g     F .text	000000b8 .hidden __lesf2
0200a5bc g     O .bss	00000008 alt_timezone
0200a5a4 g     O .bss	00000004 __malloc_top_pad
02007fa4 g     F .text	00000050 _sbrk_r
0200005c g     F .text	000000a4 de_jongs
0200a5a0 g     O .bss	00000004 __malloc_max_sbrked_mem
02000558 g     F .text	000001e0 shubert
02003420 g     F .text	000002c8 __kernel_sin
0200742c g     F .text	00000110 .hidden __extendsfdf2
02004d38 g     F .text	0000089c .hidden __adddf3
020090f4 g     F .text	0000061c .hidden __umoddi3
02000dc4 g     F .text	0000009c encontra_melhor_individuo
0200a064 g     O .rwdata	00000004 __fdlib_version
0200a068 g     O .rwdata	00000004 _global_impure_ptr
0200a600 g       *ABS*	00000000 __bss_end
02008f68 g     F .text	000000b8 alt_tick
02008f34 g     F .text	00000034 alt_alarm_stop
02000790 g     F .text	00000014 d_shubert
020026f0 g     F .text	00000d30 __kernel_rem_pio2
02000298 g     F .text	00000148 drop_wave
020090e4 g     F .text	00000004 alt_dcache_flush_all
020072d4 g     F .text	00000088 .hidden __fixdfsi
0200a08c g       *ABS*	00000000 __ram_rwdata_end
02009020 g     F .text	0000006c write
02009b7c g       *ABS*	00000000 __ram_rodata_end
0200a084 g     O .rwdata	00000004 jtag_uart_0
020060b8 g     F .text	000000e0 .hidden __ledf2
02003c78 g     F .text	00000008 .hidden __umodsi3
02000808 g     F .text	00000060 obter_numero_uniforme_continuo
0200a600 g       *ABS*	00000000 end
04000000 g       *ABS*	00000000 __alt_stack_pointer
020076d4 g     F .text	00000064 .hidden __clzsi2
020090b0 g     F .text	00000034 altera_avalon_jtag_uart_write
02001600 g     F .text	000000ec cos
020080d0 g     F .text	0000056c ___vfprintf_internal_r
02008784 g     F .text	00000288 _free_r
0200a070 g     O .rwdata	00000004 __malloc_sbrk_base
02000020 g     F .text	0000003c _start
0200a5d4 g     O .bss	00000004 _alt_tick_rate
02007f48 g     F .text	0000005c rand
0200a5d0 g     O .bss	00000004 _alt_nticks
020090ac g     F .text	00000004 alt_sys_init
02004c04 g     F .text	00000134 .hidden __floatsisf
02000754 g     F .text	00000014 d_rastrigin
02003c80 g     F .text	00000028 .hidden __mulsi3
02009b7c g       *ABS*	00000000 __ram_rwdata_start
02009710 g       *ABS*	00000000 __ram_rodata_start
0200a5d8 g     O .bss	00000028 __malloc_current_mallinfo
020007a4 g     F .text	00000064 obter_numero_uniforme
0200a600 g       *ABS*	00000000 __alt_stack_base
020055d4 g     F .text	00000980 .hidden __divdf3
02009c5c g     O .rwdata	00000408 __malloc_av_
02006198 g     F .text	0000086c .hidden __muldf3
02008ee0 g     F .text	00000004 __malloc_lock
02008ee8 g     F .text	0000004c sbrk
02000f2c g     F .text	000000c0 gerar_populacao_inicial
02008a0c g     F .text	000000ac __sfvwrite_small_dev
02008c70 g     F .text	0000014c gettimeofday
0200a59c g       *ABS*	00000000 __bss_start
02000738 g     F .text	0000001c d_de_jongs
020015e4 g     F .text	0000001c main
0200a5c4 g     O .bss	00000004 alt_envp
0200a59c g     O .bss	00000004 __malloc_max_total_mem
02007f38 g     F .text	00000010 srand
02004188 g     F .text	000000b8 .hidden __ltsf2
02003964 g     F .text	00000008 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
0200753c g     F .text	00000198 .hidden __truncdfsf2
02000b0c g     F .text	0000006c mergeSort
02007770 g     F .text	00000684 _malloc_r
02008010 g     F .text	00000054 time
0200a088 g     O .rwdata	00000004 alt_errno
02000868 g     F .text	000000b8 obter_numero_uniforme_discreto
02003bc0 g     F .text	00000054 .hidden __divsi3
02008660 g     F .text	00000124 _malloc_trim_r
02004240 g     F .text	00000450 .hidden __mulsf3
02009710 g       *ABS*	00000000 __flash_rodata_start
02003b38 g     F .text	0000001c copysign
02005f54 g     F .text	00000084 .hidden __nedf2
0200908c g     F .text	00000020 alt_irq_init
02009a7c g     O .rodata	00000100 .hidden __clz_tab
02008b0c g     F .text	00000058 _write_r
0200a06c g     O .rwdata	00000004 _impure_ptr
0200a5cc g     O .bss	00000004 alt_argc
0200396c g     F .text	000001cc scalbn
02000000 g       *ABS*	00000000 __alt_mem_sdram_0
02000b78 g     F .text	0000018c obter_fitness
0200a5b4 g     O .bss	00000008 alt_resettime
02000020 g       *ABS*	00000000 __ram_exceptions_start
02001fb8 g     F .text	00000294 __ieee754_sqrt
0200077c g     F .text	00000014 d_griewangk
02001084 g     F .text	000000b0 op_recombinacao
0200a08c g       *ABS*	00000000 _edata
02000fec g     F .text	00000098 op_mutacao
0200a600 g       *ABS*	00000000 _end
02000768 g     F .text	00000014 d_drop_wave
02000020 g       *ABS*	00000000 __ram_exceptions_end
0200a074 g     O .rwdata	00000004 __malloc_trim_threshold
02003c14 g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02001134 g     F .text	00000174 op_selecao_de_pais
0200000c g       .entry	00000000 _exit
02008b64 g     F .text	0000010c .hidden __muldi3
02007ff4 g     F .text	0000001c strlen
020012a8 g     F .text	00000080 op_selecao_de_sobreviventes
02005fd8 g     F .text	000000e0 .hidden __gedf2
02000ec8 g     F .text	00000064 imprimir_populacao
020003e0 g     F .text	00000178 griewangk
020090e8 g     F .text	00000004 alt_icache_flush_all
0200863c g     F .text	00000024 __vfprintf_internal
02006a04 g     F .text	000008d0 .hidden __subdf3
0200a07c g     O .rwdata	00000008 alt_alarm_list
02003ca8 g     F .text	000004e0 .hidden __addsf3
02008dbc g     F .text	000000f8 alt_load
0200775c g     F .text	00000014 free



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08400814 	ori	at,at,32
    jmp r1
 2000008:	0800683a 	jmp	at

0200000c <_exit>:
	...

Disassembly of section .text:

02000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000020:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000028:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 200002c:	d6881914 	ori	gp,gp,8292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000030:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000034:	10a96714 	ori	r2,r2,42396

    movhi r3, %hi(__bss_end)
 2000038:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 200003c:	18e98014 	ori	r3,r3,42496

    beq r2, r3, 1f
 2000040:	10c00326 	beq	r2,r3,2000050 <_start+0x30>

0:
    stw zero, (r2)
 2000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200004c:	10fffd36 	bltu	r2,r3,2000044 <__alt_mem_onchip_memory2_0+0xfdff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000050:	2008dbc0 	call	2008dbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000054:	2008eb40 	call	2008eb4 <alt_main>

02000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000058:	003fff06 	br	2000058 <__alt_mem_onchip_memory2_0+0xfdff0058>

0200005c <de_jongs>:
// **************** FUNCOES (em C) QUE RETORNAM VALOR DE UMA ESPECIFICA FUNCAO DE BENCHMARK, DADO x1 e x2 ****************

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
 200005c:	defffb04 	addi	sp,sp,-20
 2000060:	dfc00415 	stw	ra,16(sp)
 2000064:	dcc00315 	stw	r19,12(sp)
 2000068:	dc800215 	stw	r18,8(sp)
 200006c:	dc400115 	stw	r17,4(sp)
 2000070:	2825883a 	mov	r18,r5
 2000074:	dc000015 	stw	r16,0(sp)
    return pow(x1,2.0) + pow(x2,2.0);
 2000078:	200742c0 	call	200742c <__extendsfdf2>
 200007c:	9009883a 	mov	r4,r18
 2000080:	1023883a 	mov	r17,r2
 2000084:	1821883a 	mov	r16,r3
 2000088:	200742c0 	call	200742c <__extendsfdf2>
 200008c:	8809883a 	mov	r4,r17
 2000090:	800b883a 	mov	r5,r16
 2000094:	880d883a 	mov	r6,r17
 2000098:	800f883a 	mov	r7,r16
 200009c:	1027883a 	mov	r19,r2
 20000a0:	1825883a 	mov	r18,r3
 20000a4:	20061980 	call	2006198 <__muldf3>
 20000a8:	9809883a 	mov	r4,r19
 20000ac:	900b883a 	mov	r5,r18
 20000b0:	980d883a 	mov	r6,r19
 20000b4:	900f883a 	mov	r7,r18
 20000b8:	1023883a 	mov	r17,r2
 20000bc:	1821883a 	mov	r16,r3
 20000c0:	20061980 	call	2006198 <__muldf3>
 20000c4:	8809883a 	mov	r4,r17
 20000c8:	800b883a 	mov	r5,r16
 20000cc:	100d883a 	mov	r6,r2
 20000d0:	180f883a 	mov	r7,r3
 20000d4:	2004d380 	call	2004d38 <__adddf3>
 20000d8:	1009883a 	mov	r4,r2
 20000dc:	180b883a 	mov	r5,r3
 20000e0:	200753c0 	call	200753c <__truncdfsf2>
}
 20000e4:	dfc00417 	ldw	ra,16(sp)
 20000e8:	dcc00317 	ldw	r19,12(sp)
 20000ec:	dc800217 	ldw	r18,8(sp)
 20000f0:	dc400117 	ldw	r17,4(sp)
 20000f4:	dc000017 	ldw	r16,0(sp)
 20000f8:	dec00504 	addi	sp,sp,20
 20000fc:	f800283a 	ret

02000100 <rastrigin>:

/*
 * Retorna um valor (do tipo float) referente a funcao RASTRIGIN, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float rastrigin(float x1, float x2){
 2000100:	defff704 	addi	sp,sp,-36
 2000104:	dfc00815 	stw	ra,32(sp)
 2000108:	ddc00715 	stw	r23,28(sp)
 200010c:	dd800615 	stw	r22,24(sp)
 2000110:	dd400515 	stw	r21,20(sp)
 2000114:	dd000415 	stw	r20,16(sp)
 2000118:	dcc00315 	stw	r19,12(sp)
 200011c:	dc800215 	stw	r18,8(sp)
 2000120:	dc400115 	stw	r17,4(sp)
 2000124:	dc000015 	stw	r16,0(sp)
 2000128:	2821883a 	mov	r16,r5
    return 20 + (pow(x1,2.0) - (10.0 * cos(2.0*PI*x1))) + (pow(x2,2.0) - (10.0 * cos(2.0*PI*x2)));
 200012c:	200742c0 	call	200742c <__extendsfdf2>
 2000130:	01951134 	movhi	r6,21572
 2000134:	01d00674 	movhi	r7,16409
 2000138:	318bba84 	addi	r6,r6,12010
 200013c:	39c87ec4 	addi	r7,r7,8699
 2000140:	1009883a 	mov	r4,r2
 2000144:	180b883a 	mov	r5,r3
 2000148:	1027883a 	mov	r19,r2
 200014c:	1825883a 	mov	r18,r3
 2000150:	20061980 	call	2006198 <__muldf3>
 2000154:	180b883a 	mov	r5,r3
 2000158:	1009883a 	mov	r4,r2
 200015c:	20016000 	call	2001600 <cos>
 2000160:	8009883a 	mov	r4,r16
 2000164:	102f883a 	mov	r23,r2
 2000168:	182d883a 	mov	r22,r3
 200016c:	200742c0 	call	200742c <__extendsfdf2>
 2000170:	01951134 	movhi	r6,21572
 2000174:	01d00674 	movhi	r7,16409
 2000178:	318bba84 	addi	r6,r6,12010
 200017c:	39c87ec4 	addi	r7,r7,8699
 2000180:	1009883a 	mov	r4,r2
 2000184:	180b883a 	mov	r5,r3
 2000188:	1023883a 	mov	r17,r2
 200018c:	1821883a 	mov	r16,r3
 2000190:	20061980 	call	2006198 <__muldf3>
 2000194:	1009883a 	mov	r4,r2
 2000198:	180b883a 	mov	r5,r3
 200019c:	20016000 	call	2001600 <cos>
 20001a0:	9809883a 	mov	r4,r19
 20001a4:	900b883a 	mov	r5,r18
 20001a8:	980d883a 	mov	r6,r19
 20001ac:	900f883a 	mov	r7,r18
 20001b0:	102b883a 	mov	r21,r2
 20001b4:	1829883a 	mov	r20,r3
 20001b8:	20061980 	call	2006198 <__muldf3>
 20001bc:	b809883a 	mov	r4,r23
 20001c0:	b00b883a 	mov	r5,r22
 20001c4:	000d883a 	mov	r6,zero
 20001c8:	01d00934 	movhi	r7,16420
 20001cc:	1027883a 	mov	r19,r2
 20001d0:	1825883a 	mov	r18,r3
 20001d4:	20061980 	call	2006198 <__muldf3>
 20001d8:	9809883a 	mov	r4,r19
 20001dc:	900b883a 	mov	r5,r18
 20001e0:	100d883a 	mov	r6,r2
 20001e4:	180f883a 	mov	r7,r3
 20001e8:	2006a040 	call	2006a04 <__subdf3>
 20001ec:	1009883a 	mov	r4,r2
 20001f0:	180b883a 	mov	r5,r3
 20001f4:	000d883a 	mov	r6,zero
 20001f8:	01d00d34 	movhi	r7,16436
 20001fc:	2004d380 	call	2004d38 <__adddf3>
 2000200:	8809883a 	mov	r4,r17
 2000204:	800b883a 	mov	r5,r16
 2000208:	880d883a 	mov	r6,r17
 200020c:	800f883a 	mov	r7,r16
 2000210:	1027883a 	mov	r19,r2
 2000214:	1825883a 	mov	r18,r3
 2000218:	20061980 	call	2006198 <__muldf3>
 200021c:	a809883a 	mov	r4,r21
 2000220:	a00b883a 	mov	r5,r20
 2000224:	000d883a 	mov	r6,zero
 2000228:	01d00934 	movhi	r7,16420
 200022c:	1023883a 	mov	r17,r2
 2000230:	1821883a 	mov	r16,r3
 2000234:	20061980 	call	2006198 <__muldf3>
 2000238:	8809883a 	mov	r4,r17
 200023c:	800b883a 	mov	r5,r16
 2000240:	100d883a 	mov	r6,r2
 2000244:	180f883a 	mov	r7,r3
 2000248:	2006a040 	call	2006a04 <__subdf3>
 200024c:	9809883a 	mov	r4,r19
 2000250:	900b883a 	mov	r5,r18
 2000254:	100d883a 	mov	r6,r2
 2000258:	180f883a 	mov	r7,r3
 200025c:	2004d380 	call	2004d38 <__adddf3>
 2000260:	1009883a 	mov	r4,r2
 2000264:	180b883a 	mov	r5,r3
 2000268:	200753c0 	call	200753c <__truncdfsf2>
}
 200026c:	dfc00817 	ldw	ra,32(sp)
 2000270:	ddc00717 	ldw	r23,28(sp)
 2000274:	dd800617 	ldw	r22,24(sp)
 2000278:	dd400517 	ldw	r21,20(sp)
 200027c:	dd000417 	ldw	r20,16(sp)
 2000280:	dcc00317 	ldw	r19,12(sp)
 2000284:	dc800217 	ldw	r18,8(sp)
 2000288:	dc400117 	ldw	r17,4(sp)
 200028c:	dc000017 	ldw	r16,0(sp)
 2000290:	dec00904 	addi	sp,sp,36
 2000294:	f800283a 	ret

02000298 <drop_wave>:

/*
 * Retorna um valor (do tipo float) referente a funcao DROP WAVE, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float drop_wave(float x1, float x2){
 2000298:	defffb04 	addi	sp,sp,-20
 200029c:	dfc00415 	stw	ra,16(sp)
 20002a0:	dcc00315 	stw	r19,12(sp)
 20002a4:	dc800215 	stw	r18,8(sp)
 20002a8:	dc400115 	stw	r17,4(sp)
 20002ac:	2825883a 	mov	r18,r5
 20002b0:	dc000015 	stw	r16,0(sp)

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
 20002b4:	200742c0 	call	200742c <__extendsfdf2>
 20002b8:	9009883a 	mov	r4,r18
 20002bc:	1023883a 	mov	r17,r2
 20002c0:	1821883a 	mov	r16,r3
 20002c4:	200742c0 	call	200742c <__extendsfdf2>
 20002c8:	8809883a 	mov	r4,r17
 20002cc:	800b883a 	mov	r5,r16
 20002d0:	880d883a 	mov	r6,r17
 20002d4:	800f883a 	mov	r7,r16
 20002d8:	1027883a 	mov	r19,r2
 20002dc:	1825883a 	mov	r18,r3
 20002e0:	20061980 	call	2006198 <__muldf3>
 20002e4:	9809883a 	mov	r4,r19
 20002e8:	900b883a 	mov	r5,r18
 20002ec:	980d883a 	mov	r6,r19
 20002f0:	900f883a 	mov	r7,r18
 20002f4:	1023883a 	mov	r17,r2
 20002f8:	1821883a 	mov	r16,r3
 20002fc:	20061980 	call	2006198 <__muldf3>
 2000300:	100d883a 	mov	r6,r2
 2000304:	180f883a 	mov	r7,r3
 2000308:	8809883a 	mov	r4,r17
 200030c:	800b883a 	mov	r5,r16
 2000310:	2004d380 	call	2004d38 <__adddf3>
 2000314:	180b883a 	mov	r5,r3
 2000318:	1009883a 	mov	r4,r2
 200031c:	200753c0 	call	200753c <__truncdfsf2>
    float valor = de_jongs(x1,x2);
    //float part1 = 1.0 + cos(12.0 * sqrt(valor));
    //float part2 = (0.5 * valor) + 2.0;
    //return - (part1/part2);

    return -((1.0 + cos(12.0 * sqrt(valor)))/((0.5 * valor) + 2.0));
 2000320:	1009883a 	mov	r4,r2
 2000324:	200742c0 	call	200742c <__extendsfdf2>
 2000328:	1009883a 	mov	r4,r2
 200032c:	180b883a 	mov	r5,r3
 2000330:	1023883a 	mov	r17,r2
 2000334:	1821883a 	mov	r16,r3
 2000338:	20016ec0 	call	20016ec <sqrt>
 200033c:	000d883a 	mov	r6,zero
 2000340:	01d00a34 	movhi	r7,16424
 2000344:	1009883a 	mov	r4,r2
 2000348:	180b883a 	mov	r5,r3
 200034c:	20061980 	call	2006198 <__muldf3>
 2000350:	1009883a 	mov	r4,r2
 2000354:	180b883a 	mov	r5,r3
 2000358:	20016000 	call	2001600 <cos>
 200035c:	1009883a 	mov	r4,r2
 2000360:	180b883a 	mov	r5,r3
 2000364:	000d883a 	mov	r6,zero
 2000368:	01cffc34 	movhi	r7,16368
 200036c:	2004d380 	call	2004d38 <__adddf3>
 2000370:	8809883a 	mov	r4,r17
 2000374:	800b883a 	mov	r5,r16
 2000378:	000d883a 	mov	r6,zero
 200037c:	01cff834 	movhi	r7,16352
 2000380:	1027883a 	mov	r19,r2
 2000384:	1825883a 	mov	r18,r3
 2000388:	20061980 	call	2006198 <__muldf3>
 200038c:	1009883a 	mov	r4,r2
 2000390:	180b883a 	mov	r5,r3
 2000394:	000d883a 	mov	r6,zero
 2000398:	01d00034 	movhi	r7,16384
 200039c:	2004d380 	call	2004d38 <__adddf3>
 20003a0:	9809883a 	mov	r4,r19
 20003a4:	900b883a 	mov	r5,r18
 20003a8:	100d883a 	mov	r6,r2
 20003ac:	180f883a 	mov	r7,r3
 20003b0:	20055d40 	call	20055d4 <__divdf3>
 20003b4:	1009883a 	mov	r4,r2
 20003b8:	180b883a 	mov	r5,r3
 20003bc:	200753c0 	call	200753c <__truncdfsf2>
 20003c0:	10a0003c 	xorhi	r2,r2,32768
}
 20003c4:	dfc00417 	ldw	ra,16(sp)
 20003c8:	dcc00317 	ldw	r19,12(sp)
 20003cc:	dc800217 	ldw	r18,8(sp)
 20003d0:	dc400117 	ldw	r17,4(sp)
 20003d4:	dc000017 	ldw	r16,0(sp)
 20003d8:	dec00504 	addi	sp,sp,20
 20003dc:	f800283a 	ret

020003e0 <griewangk>:

/*
 * Retorna um valor (do tipo float) referente a funcao GRIEWANGK, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float griewangk(float x1, float x2){
 20003e0:	defff704 	addi	sp,sp,-36
 20003e4:	dfc00815 	stw	ra,32(sp)
 20003e8:	ddc00715 	stw	r23,28(sp)
 20003ec:	dd800615 	stw	r22,24(sp)
 20003f0:	dd400515 	stw	r21,20(sp)
 20003f4:	dd000415 	stw	r20,16(sp)
 20003f8:	dcc00315 	stw	r19,12(sp)
 20003fc:	dc800215 	stw	r18,8(sp)
 2000400:	dc400115 	stw	r17,4(sp)
 2000404:	dc000015 	stw	r16,0(sp)
 2000408:	2821883a 	mov	r16,r5

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
 200040c:	200742c0 	call	200742c <__extendsfdf2>
 2000410:	8009883a 	mov	r4,r16
 2000414:	1027883a 	mov	r19,r2
 2000418:	1825883a 	mov	r18,r3
 200041c:	200742c0 	call	200742c <__extendsfdf2>
    float valor = de_jongs(x1,x2);
    //float part1 = valor/4000.0;
    //float part2 = (cos(x1) * cos(x2/sqrt(2)));

    //return part1 - part2 + 1;
    return (valor/4000.0) - (cos(x1) * cos(x2/sqrt(2))) + 1;
 2000420:	9809883a 	mov	r4,r19
 2000424:	900b883a 	mov	r5,r18

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
 2000428:	1023883a 	mov	r17,r2
 200042c:	1821883a 	mov	r16,r3
    float valor = de_jongs(x1,x2);
    //float part1 = valor/4000.0;
    //float part2 = (cos(x1) * cos(x2/sqrt(2)));

    //return part1 - part2 + 1;
    return (valor/4000.0) - (cos(x1) * cos(x2/sqrt(2))) + 1;
 2000430:	20016000 	call	2001600 <cos>
 2000434:	01999ff4 	movhi	r6,26239
 2000438:	01cffdf4 	movhi	r7,16375
 200043c:	8809883a 	mov	r4,r17
 2000440:	800b883a 	mov	r5,r16
 2000444:	318ef344 	addi	r6,r6,15309
 2000448:	39e82784 	addi	r7,r7,-24418
 200044c:	102f883a 	mov	r23,r2
 2000450:	182d883a 	mov	r22,r3
 2000454:	20055d40 	call	20055d4 <__divdf3>
 2000458:	1009883a 	mov	r4,r2
 200045c:	180b883a 	mov	r5,r3
 2000460:	20016000 	call	2001600 <cos>

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
 2000464:	9809883a 	mov	r4,r19
 2000468:	900b883a 	mov	r5,r18
 200046c:	980d883a 	mov	r6,r19
 2000470:	900f883a 	mov	r7,r18
    float valor = de_jongs(x1,x2);
    //float part1 = valor/4000.0;
    //float part2 = (cos(x1) * cos(x2/sqrt(2)));

    //return part1 - part2 + 1;
    return (valor/4000.0) - (cos(x1) * cos(x2/sqrt(2))) + 1;
 2000474:	102b883a 	mov	r21,r2
 2000478:	1829883a 	mov	r20,r3

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
 200047c:	20061980 	call	2006198 <__muldf3>
 2000480:	8809883a 	mov	r4,r17
 2000484:	800b883a 	mov	r5,r16
 2000488:	880d883a 	mov	r6,r17
 200048c:	800f883a 	mov	r7,r16
 2000490:	1027883a 	mov	r19,r2
 2000494:	1825883a 	mov	r18,r3
 2000498:	20061980 	call	2006198 <__muldf3>
 200049c:	100d883a 	mov	r6,r2
 20004a0:	180f883a 	mov	r7,r3
 20004a4:	9809883a 	mov	r4,r19
 20004a8:	900b883a 	mov	r5,r18
 20004ac:	2004d380 	call	2004d38 <__adddf3>
 20004b0:	180b883a 	mov	r5,r3
 20004b4:	1009883a 	mov	r4,r2
 20004b8:	200753c0 	call	200753c <__truncdfsf2>
    float valor = de_jongs(x1,x2);
    //float part1 = valor/4000.0;
    //float part2 = (cos(x1) * cos(x2/sqrt(2)));

    //return part1 - part2 + 1;
    return (valor/4000.0) - (cos(x1) * cos(x2/sqrt(2))) + 1;
 20004bc:	1009883a 	mov	r4,r2
 20004c0:	200742c0 	call	200742c <__extendsfdf2>
 20004c4:	01d02bf4 	movhi	r7,16559
 20004c8:	1009883a 	mov	r4,r2
 20004cc:	180b883a 	mov	r5,r3
 20004d0:	000d883a 	mov	r6,zero
 20004d4:	39d00004 	addi	r7,r7,16384
 20004d8:	20055d40 	call	20055d4 <__divdf3>
 20004dc:	b809883a 	mov	r4,r23
 20004e0:	b00b883a 	mov	r5,r22
 20004e4:	a80d883a 	mov	r6,r21
 20004e8:	a00f883a 	mov	r7,r20
 20004ec:	1023883a 	mov	r17,r2
 20004f0:	1821883a 	mov	r16,r3
 20004f4:	20061980 	call	2006198 <__muldf3>
 20004f8:	8809883a 	mov	r4,r17
 20004fc:	800b883a 	mov	r5,r16
 2000500:	100d883a 	mov	r6,r2
 2000504:	180f883a 	mov	r7,r3
 2000508:	2006a040 	call	2006a04 <__subdf3>
 200050c:	000d883a 	mov	r6,zero
 2000510:	01cffc34 	movhi	r7,16368
 2000514:	1009883a 	mov	r4,r2
 2000518:	180b883a 	mov	r5,r3
 200051c:	2004d380 	call	2004d38 <__adddf3>
 2000520:	1009883a 	mov	r4,r2
 2000524:	180b883a 	mov	r5,r3
 2000528:	200753c0 	call	200753c <__truncdfsf2>
}
 200052c:	dfc00817 	ldw	ra,32(sp)
 2000530:	ddc00717 	ldw	r23,28(sp)
 2000534:	dd800617 	ldw	r22,24(sp)
 2000538:	dd400517 	ldw	r21,20(sp)
 200053c:	dd000417 	ldw	r20,16(sp)
 2000540:	dcc00317 	ldw	r19,12(sp)
 2000544:	dc800217 	ldw	r18,8(sp)
 2000548:	dc400117 	ldw	r17,4(sp)
 200054c:	dc000017 	ldw	r16,0(sp)
 2000550:	dec00904 	addi	sp,sp,36
 2000554:	f800283a 	ret

02000558 <shubert>:

/*
 * Retorna um valor (do tipo float) referente a funcao SHUBERT, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float shubert(float x1, float x2){
 2000558:	defff204 	addi	sp,sp,-56
 200055c:	ddc00b15 	stw	r23,44(sp)
 2000560:	dd800a15 	stw	r22,40(sp)
 2000564:	dd400915 	stw	r21,36(sp)
 2000568:	dc800615 	stw	r18,24(sp)
 200056c:	dfc00d15 	stw	ra,52(sp)
 2000570:	df000c15 	stw	fp,48(sp)
 2000574:	dd000815 	stw	r20,32(sp)
 2000578:	dcc00715 	stw	r19,28(sp)
 200057c:	dc400515 	stw	r17,20(sp)
 2000580:	dc000415 	stw	r16,16(sp)
 2000584:	202f883a 	mov	r23,r4
 2000588:	282d883a 	mov	r22,r5
    float sum1 = 0.0;
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
 200058c:	04800044 	movi	r18,1
/*
 * Retorna um valor (do tipo float) referente a funcao SHUBERT, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float shubert(float x1, float x2){
    float sum1 = 0.0;
    float sum2 = 0.0;
 2000590:	0011883a 	mov	r8,zero

/*
 * Retorna um valor (do tipo float) referente a funcao SHUBERT, dado duas entrada, x1 e x2(tambem do tipo float)
 */
float shubert(float x1, float x2){
    float sum1 = 0.0;
 2000594:	002b883a 	mov	r21,zero
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
 2000598:	02400184 	movi	r9,6
        sum1 += (i * cos((i + 1.0) * x1 + i));
 200059c:	9009883a 	mov	r4,r18
 20005a0:	da400315 	stw	r9,12(sp)
 20005a4:	da000215 	stw	r8,8(sp)
 20005a8:	200735c0 	call	200735c <__floatsidf>
 20005ac:	180b883a 	mov	r5,r3
 20005b0:	000d883a 	mov	r6,zero
 20005b4:	01cffc34 	movhi	r7,16368
 20005b8:	1009883a 	mov	r4,r2
 20005bc:	1023883a 	mov	r17,r2
 20005c0:	1821883a 	mov	r16,r3
 20005c4:	2004d380 	call	2004d38 <__adddf3>
 20005c8:	b809883a 	mov	r4,r23
 20005cc:	1039883a 	mov	fp,r2
 20005d0:	1829883a 	mov	r20,r3
 20005d4:	200742c0 	call	200742c <__extendsfdf2>
 20005d8:	e009883a 	mov	r4,fp
 20005dc:	a00b883a 	mov	r5,r20
 20005e0:	100d883a 	mov	r6,r2
 20005e4:	180f883a 	mov	r7,r3
 20005e8:	20061980 	call	2006198 <__muldf3>
 20005ec:	880d883a 	mov	r6,r17
 20005f0:	800f883a 	mov	r7,r16
 20005f4:	1009883a 	mov	r4,r2
 20005f8:	180b883a 	mov	r5,r3
 20005fc:	2004d380 	call	2004d38 <__adddf3>
 2000600:	180b883a 	mov	r5,r3
 2000604:	1009883a 	mov	r4,r2
 2000608:	20016000 	call	2001600 <cos>
 200060c:	a809883a 	mov	r4,r21
 2000610:	d8800015 	stw	r2,0(sp)
 2000614:	d8c00115 	stw	r3,4(sp)
 2000618:	200742c0 	call	200742c <__extendsfdf2>
 200061c:	d9800017 	ldw	r6,0(sp)
 2000620:	d9c00117 	ldw	r7,4(sp)
 2000624:	8809883a 	mov	r4,r17
 2000628:	800b883a 	mov	r5,r16
 200062c:	102b883a 	mov	r21,r2
 2000630:	1827883a 	mov	r19,r3
 2000634:	20061980 	call	2006198 <__muldf3>
 2000638:	100d883a 	mov	r6,r2
 200063c:	180f883a 	mov	r7,r3
 2000640:	a809883a 	mov	r4,r21
 2000644:	980b883a 	mov	r5,r19
 2000648:	2004d380 	call	2004d38 <__adddf3>
 200064c:	180b883a 	mov	r5,r3
 2000650:	1009883a 	mov	r4,r2
 2000654:	200753c0 	call	200753c <__truncdfsf2>
        sum2 += (i * cos((i + 1.0) * x2 + i));
 2000658:	b009883a 	mov	r4,r22
    float sum1 = 0.0;
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
        sum1 += (i * cos((i + 1.0) * x1 + i));
 200065c:	1027883a 	mov	r19,r2
 2000660:	102b883a 	mov	r21,r2
        sum2 += (i * cos((i + 1.0) * x2 + i));
 2000664:	200742c0 	call	200742c <__extendsfdf2>
 2000668:	e009883a 	mov	r4,fp
 200066c:	a00b883a 	mov	r5,r20
 2000670:	100d883a 	mov	r6,r2
 2000674:	180f883a 	mov	r7,r3
 2000678:	20061980 	call	2006198 <__muldf3>
 200067c:	880d883a 	mov	r6,r17
 2000680:	800f883a 	mov	r7,r16
 2000684:	1009883a 	mov	r4,r2
 2000688:	180b883a 	mov	r5,r3
 200068c:	2004d380 	call	2004d38 <__adddf3>
 2000690:	180b883a 	mov	r5,r3
 2000694:	1009883a 	mov	r4,r2
 2000698:	20016000 	call	2001600 <cos>
 200069c:	da000217 	ldw	r8,8(sp)
 20006a0:	d8800015 	stw	r2,0(sp)
 20006a4:	d8c00115 	stw	r3,4(sp)
 20006a8:	4009883a 	mov	r4,r8
 20006ac:	200742c0 	call	200742c <__extendsfdf2>
 20006b0:	d9800017 	ldw	r6,0(sp)
 20006b4:	d9c00117 	ldw	r7,4(sp)
 20006b8:	8809883a 	mov	r4,r17
 20006bc:	800b883a 	mov	r5,r16
 20006c0:	1039883a 	mov	fp,r2
 20006c4:	1829883a 	mov	r20,r3
 20006c8:	20061980 	call	2006198 <__muldf3>
 20006cc:	e009883a 	mov	r4,fp
 20006d0:	a00b883a 	mov	r5,r20
 20006d4:	100d883a 	mov	r6,r2
 20006d8:	180f883a 	mov	r7,r3
 20006dc:	2004d380 	call	2004d38 <__adddf3>
 20006e0:	1009883a 	mov	r4,r2
 20006e4:	180b883a 	mov	r5,r3
 20006e8:	200753c0 	call	200753c <__truncdfsf2>
float shubert(float x1, float x2){
    float sum1 = 0.0;
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
 20006ec:	da400317 	ldw	r9,12(sp)
 20006f0:	94800044 	addi	r18,r18,1
        sum1 += (i * cos((i + 1.0) * x1 + i));
        sum2 += (i * cos((i + 1.0) * x2 + i));
 20006f4:	1011883a 	mov	r8,r2
float shubert(float x1, float x2){
    float sum1 = 0.0;
    float sum2 = 0.0;

    int i;
    for(i = 1; i <= 5; i++){
 20006f8:	927fa81e 	bne	r18,r9,200059c <__alt_mem_onchip_memory2_0+0xfdff059c>
        sum1 += (i * cos((i + 1.0) * x1 + i));
        sum2 += (i * cos((i + 1.0) * x2 + i));
    }

    return sum1*sum2;
 20006fc:	9809883a 	mov	r4,r19
 2000700:	100b883a 	mov	r5,r2
 2000704:	20042400 	call	2004240 <__mulsf3>

}
 2000708:	dfc00d17 	ldw	ra,52(sp)
 200070c:	df000c17 	ldw	fp,48(sp)
 2000710:	ddc00b17 	ldw	r23,44(sp)
 2000714:	dd800a17 	ldw	r22,40(sp)
 2000718:	dd400917 	ldw	r21,36(sp)
 200071c:	dd000817 	ldw	r20,32(sp)
 2000720:	dcc00717 	ldw	r19,28(sp)
 2000724:	dc800617 	ldw	r18,24(sp)
 2000728:	dc400517 	ldw	r17,20(sp)
 200072c:	dc000417 	ldw	r16,16(sp)
 2000730:	dec00e04 	addi	sp,sp,56
 2000734:	f800283a 	ret

02000738 <d_de_jongs>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DE JONGS
 */
void d_de_jongs(float d[]){
    d[0] = -5.12;
 2000738:	00b02934 	movhi	r2,49316
 200073c:	10b5c284 	addi	r2,r2,-10486
 2000740:	20800015 	stw	r2,0(r4)
    d[1] = 5.12;
 2000744:	00902934 	movhi	r2,16548
 2000748:	10b5c284 	addi	r2,r2,-10486
 200074c:	20800115 	stw	r2,4(r4)
 2000750:	f800283a 	ret

02000754 <d_rastrigin>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark RASTRIGIN
 */
void d_rastrigin(float d[]){
    d[0] = -2.0;
 2000754:	00b00034 	movhi	r2,49152
 2000758:	20800015 	stw	r2,0(r4)
    d[1] = 2.0;
 200075c:	00900034 	movhi	r2,16384
 2000760:	20800115 	stw	r2,4(r4)
 2000764:	f800283a 	ret

02000768 <d_drop_wave>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DROP WAVE
 */
void d_drop_wave(float d[]){
    d[0] = -2.0;
 2000768:	00b00034 	movhi	r2,49152
 200076c:	20800015 	stw	r2,0(r4)
    d[1] = 2.0;
 2000770:	00900034 	movhi	r2,16384
 2000774:	20800115 	stw	r2,4(r4)
 2000778:	f800283a 	ret

0200077c <d_griewangk>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark GRIEWANGK
 */
void d_griewangk(float d[]){
    d[0] = -4.0;
 200077c:	00b02034 	movhi	r2,49280
 2000780:	20800015 	stw	r2,0(r4)
    d[1] = 4.0;
 2000784:	00902034 	movhi	r2,16512
 2000788:	20800115 	stw	r2,4(r4)
 200078c:	f800283a 	ret

02000790 <d_shubert>:

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark SHUBERT
 */
void d_shubert(float d[]){
    d[0] = -3.0;
 2000790:	00b01034 	movhi	r2,49216
 2000794:	20800015 	stw	r2,0(r4)
    d[1] = 3.0;
 2000798:	00901034 	movhi	r2,16448
 200079c:	20800115 	stw	r2,4(r4)
 20007a0:	f800283a 	ret

020007a4 <obter_numero_uniforme>:


/*
 * Esta funcao retorna um valor (do tipo float) aleatorio uniforme entre 0 e 1.
 */
float obter_numero_uniforme(){
 20007a4:	defffd04 	addi	sp,sp,-12
 20007a8:	dfc00215 	stw	ra,8(sp)
 20007ac:	dc400115 	stw	r17,4(sp)
 20007b0:	dc000015 	stw	r16,0(sp)
    int max_mix = rand() % 100; //aumenta a aleatoriedade
 20007b4:	2007f480 	call	2007f48 <rand>
 20007b8:	1009883a 	mov	r4,r2
 20007bc:	01401904 	movi	r5,100
 20007c0:	2003c140 	call	2003c14 <__modsi3>
 20007c4:	1023883a 	mov	r17,r2
    int i;
    for (i = 0; i < max_mix; i++) rand(); //aumenta a aleatoriedade
 20007c8:	0021883a 	mov	r16,zero
 20007cc:	8440030e 	bge	r16,r17,20007dc <obter_numero_uniforme+0x38>
 20007d0:	2007f480 	call	2007f48 <rand>
 20007d4:	84000044 	addi	r16,r16,1
 20007d8:	003ffc06 	br	20007cc <__alt_mem_onchip_memory2_0+0xfdff07cc>

    return (float) rand() / (float) RAND_MAX;
 20007dc:	2007f480 	call	2007f48 <rand>
 20007e0:	1009883a 	mov	r4,r2
 20007e4:	2004c040 	call	2004c04 <__floatsisf>
 20007e8:	1009883a 	mov	r4,r2
 20007ec:	014c0034 	movhi	r5,12288
 20007f0:	20042400 	call	2004240 <__mulsf3>
}
 20007f4:	dfc00217 	ldw	ra,8(sp)
 20007f8:	dc400117 	ldw	r17,4(sp)
 20007fc:	dc000017 	ldw	r16,0(sp)
 2000800:	dec00304 	addi	sp,sp,12
 2000804:	f800283a 	ret

02000808 <obter_numero_uniforme_continuo>:
 *  - limite inferior
 *  - limite superior
 *
 * Retorna um valor (do tipo float) aleatorio uniforme continuo.
 */
float obter_numero_uniforme_continuo(float l_inf, float l_sup){
 2000808:	defffc04 	addi	sp,sp,-16
 200080c:	dfc00315 	stw	ra,12(sp)
 2000810:	dc800215 	stw	r18,8(sp)
 2000814:	dc400115 	stw	r17,4(sp)
 2000818:	2825883a 	mov	r18,r5
 200081c:	dc000015 	stw	r16,0(sp)
 2000820:	2021883a 	mov	r16,r4
    float u = obter_numero_uniforme();
 2000824:	20007a40 	call	20007a4 <obter_numero_uniforme>
    return l_inf + (l_sup - l_inf) * u;
 2000828:	9009883a 	mov	r4,r18
 200082c:	800b883a 	mov	r5,r16
 *  - limite superior
 *
 * Retorna um valor (do tipo float) aleatorio uniforme continuo.
 */
float obter_numero_uniforme_continuo(float l_inf, float l_sup){
    float u = obter_numero_uniforme();
 2000830:	1023883a 	mov	r17,r2
    return l_inf + (l_sup - l_inf) * u;
 2000834:	20046900 	call	2004690 <__subsf3>
 2000838:	880b883a 	mov	r5,r17
 200083c:	1009883a 	mov	r4,r2
 2000840:	20042400 	call	2004240 <__mulsf3>
 2000844:	8009883a 	mov	r4,r16
 2000848:	100b883a 	mov	r5,r2
 200084c:	2003ca80 	call	2003ca8 <__addsf3>
}
 2000850:	dfc00317 	ldw	ra,12(sp)
 2000854:	dc800217 	ldw	r18,8(sp)
 2000858:	dc400117 	ldw	r17,4(sp)
 200085c:	dc000017 	ldw	r16,0(sp)
 2000860:	dec00404 	addi	sp,sp,16
 2000864:	f800283a 	ret

02000868 <obter_numero_uniforme_discreto>:
 *  - limite inferior
 *  - limite superior
 *
 * Retorna um valor (do tipo int) aleatorio uniforme discreto.
 */
int obter_numero_uniforme_discreto(float l_inf, float l_sup){
 2000868:	defffb04 	addi	sp,sp,-20
 200086c:	dfc00415 	stw	ra,16(sp)
 2000870:	dcc00315 	stw	r19,12(sp)
 2000874:	dc800215 	stw	r18,8(sp)
 2000878:	dc400115 	stw	r17,4(sp)
 200087c:	dc000015 	stw	r16,0(sp)
 2000880:	2823883a 	mov	r17,r5
 2000884:	2021883a 	mov	r16,r4
    float u = obter_numero_uniforme();
 2000888:	20007a40 	call	20007a4 <obter_numero_uniforme>

    return l_inf + (int)((l_sup - l_inf + 1.0) * u);
 200088c:	800b883a 	mov	r5,r16
 2000890:	8809883a 	mov	r4,r17
 *  - limite superior
 *
 * Retorna um valor (do tipo int) aleatorio uniforme discreto.
 */
int obter_numero_uniforme_discreto(float l_inf, float l_sup){
    float u = obter_numero_uniforme();
 2000894:	1027883a 	mov	r19,r2

    return l_inf + (int)((l_sup - l_inf + 1.0) * u);
 2000898:	20046900 	call	2004690 <__subsf3>
 200089c:	1009883a 	mov	r4,r2
 20008a0:	200742c0 	call	200742c <__extendsfdf2>
 20008a4:	180b883a 	mov	r5,r3
 20008a8:	000d883a 	mov	r6,zero
 20008ac:	01cffc34 	movhi	r7,16368
 20008b0:	1009883a 	mov	r4,r2
 20008b4:	2004d380 	call	2004d38 <__adddf3>
 20008b8:	9809883a 	mov	r4,r19
 20008bc:	1025883a 	mov	r18,r2
 20008c0:	1823883a 	mov	r17,r3
 20008c4:	200742c0 	call	200742c <__extendsfdf2>
 20008c8:	100d883a 	mov	r6,r2
 20008cc:	180f883a 	mov	r7,r3
 20008d0:	9009883a 	mov	r4,r18
 20008d4:	880b883a 	mov	r5,r17
 20008d8:	20061980 	call	2006198 <__muldf3>
 20008dc:	180b883a 	mov	r5,r3
 20008e0:	1009883a 	mov	r4,r2
 20008e4:	20072d40 	call	20072d4 <__fixdfsi>
 20008e8:	1009883a 	mov	r4,r2
 20008ec:	2004c040 	call	2004c04 <__floatsisf>
 20008f0:	8009883a 	mov	r4,r16
 20008f4:	100b883a 	mov	r5,r2
 20008f8:	2003ca80 	call	2003ca8 <__addsf3>
 20008fc:	1009883a 	mov	r4,r2
 2000900:	2004b8c0 	call	2004b8c <__fixsfsi>
}
 2000904:	dfc00417 	ldw	ra,16(sp)
 2000908:	dcc00317 	ldw	r19,12(sp)
 200090c:	dc800217 	ldw	r18,8(sp)
 2000910:	dc400117 	ldw	r17,4(sp)
 2000914:	dc000017 	ldw	r16,0(sp)
 2000918:	dec00504 	addi	sp,sp,20
 200091c:	f800283a 	ret

02000920 <merge>:
    float x1;
    float x2;
    float fitness;
}t_individuo;

void merge(struct t_individuo vet[], int tam_vet) {
 2000920:	defff504 	addi	sp,sp,-44
 2000924:	dd400615 	stw	r21,24(sp)
 2000928:	dd000515 	stw	r20,20(sp)
 200092c:	202b883a 	mov	r21,r4
 2000930:	2829883a 	mov	r20,r5

    int mid;
    int i, j, k;
    struct t_individuo* tmp;

    tmp = (struct t_individuo*) malloc(tam_vet * sizeof(struct t_individuo));
 2000934:	2809883a 	mov	r4,r5
 2000938:	01400304 	movi	r5,12
    float x1;
    float x2;
    float fitness;
}t_individuo;

void merge(struct t_individuo vet[], int tam_vet) {
 200093c:	dfc00a15 	stw	ra,40(sp)
 2000940:	dcc00415 	stw	r19,16(sp)
 2000944:	df000915 	stw	fp,36(sp)
 2000948:	ddc00815 	stw	r23,32(sp)
 200094c:	dd800715 	stw	r22,28(sp)
 2000950:	dc800315 	stw	r18,12(sp)
 2000954:	dc400215 	stw	r17,8(sp)
 2000958:	dc000115 	stw	r16,4(sp)

    int mid;
    int i, j, k;
    struct t_individuo* tmp;

    tmp = (struct t_individuo*) malloc(tam_vet * sizeof(struct t_individuo));
 200095c:	2003c800 	call	2003c80 <__mulsi3>
 2000960:	1009883a 	mov	r4,r2
 2000964:	20077480 	call	2007748 <malloc>
 2000968:	1027883a 	mov	r19,r2

    if (tmp == NULL) {
 200096c:	1000021e 	bne	r2,zero,2000978 <merge+0x58>
        exit(1);
 2000970:	01000044 	movi	r4,1
 2000974:	200000c0 	call	200000c <_exit>
    }

    mid = tam_vet / 2;
 2000978:	a022d7fa 	srli	r17,r20,31
 200097c:	102d883a 	mov	r22,r2
    i = 0;
    j = mid;
    k = 0;
 2000980:	002f883a 	mov	r23,zero

    if (tmp == NULL) {
        exit(1);
    }

    mid = tam_vet / 2;
 2000984:	8d23883a 	add	r17,r17,r20
 2000988:	8823d07a 	srai	r17,r17,1
    i = 0;
 200098c:	0021883a 	mov	r16,zero

    if (tmp == NULL) {
        exit(1);
    }

    mid = tam_vet / 2;
 2000990:	8825883a 	mov	r18,r17
    i = 0;
    j = mid;
    k = 0;

    while (i < mid && j < tam_vet) {
 2000994:	84400c16 	blt	r16,r17,20009c8 <merge+0xa8>
 2000998:	902d883a 	mov	r22,r18
            tmp[k] = vet[j++];
        }
        ++k;
    }

    if (i == mid) {
 200099c:	84402526 	beq	r16,r17,2000a34 <merge+0x114>
 20009a0:	8009883a 	mov	r4,r16
 20009a4:	01400304 	movi	r5,12
 20009a8:	2003c800 	call	2003c80 <__mulsi3>
 20009ac:	b809883a 	mov	r4,r23
 20009b0:	01400304 	movi	r5,12
 20009b4:	1039883a 	mov	fp,r2
 20009b8:	2003c800 	call	2003c80 <__mulsi3>
 20009bc:	102d883a 	mov	r22,r2
 20009c0:	0025883a 	mov	r18,zero
 20009c4:	00003006 	br	2000a88 <merge+0x168>
    mid = tam_vet / 2;
    i = 0;
    j = mid;
    k = 0;

    while (i < mid && j < tam_vet) {
 20009c8:	953ff30e 	bge	r18,r20,2000998 <__alt_mem_onchip_memory2_0+0xfdff0998>
        if (vet[i].fitness <= vet[j].fitness) {
 20009cc:	8009883a 	mov	r4,r16
 20009d0:	01400304 	movi	r5,12
 20009d4:	2003c800 	call	2003c80 <__mulsi3>
 20009d8:	9009883a 	mov	r4,r18
 20009dc:	01400304 	movi	r5,12
 20009e0:	a8b9883a 	add	fp,r21,r2
 20009e4:	2003c800 	call	2003c80 <__mulsi3>
 20009e8:	a887883a 	add	r3,r21,r2
 20009ec:	19400217 	ldw	r5,8(r3)
 20009f0:	e1000217 	ldw	r4,8(fp)
 20009f4:	d8c00015 	stw	r3,0(sp)
 20009f8:	20041880 	call	2004188 <__lesf2>
 20009fc:	d8c00017 	ldw	r3,0(sp)
 2000a00:	00800416 	blt	zero,r2,2000a14 <merge+0xf4>
            tmp[k] = vet[i++];
 2000a04:	84000044 	addi	r16,r16,1
 2000a08:	b009883a 	mov	r4,r22
 2000a0c:	e00b883a 	mov	r5,fp
 2000a10:	00000306 	br	2000a20 <merge+0x100>
        }
        else {
            tmp[k] = vet[j++];
 2000a14:	94800044 	addi	r18,r18,1
 2000a18:	b009883a 	mov	r4,r22
 2000a1c:	180b883a 	mov	r5,r3
 2000a20:	01800304 	movi	r6,12
 2000a24:	2007df40 	call	2007df4 <memcpy>
        }
        ++k;
 2000a28:	bdc00044 	addi	r23,r23,1
 2000a2c:	b5800304 	addi	r22,r22,12
 2000a30:	003fd806 	br	2000994 <__alt_mem_onchip_memory2_0+0xfdff0994>
 2000a34:	9009883a 	mov	r4,r18
 2000a38:	01400304 	movi	r5,12
 2000a3c:	2003c800 	call	2003c80 <__mulsi3>
 2000a40:	b809883a 	mov	r4,r23
 2000a44:	01400304 	movi	r5,12
 2000a48:	1023883a 	mov	r17,r2
 2000a4c:	2003c800 	call	2003c80 <__mulsi3>
 2000a50:	1025883a 	mov	r18,r2
    }

    if (i == mid) {
 2000a54:	0021883a 	mov	r16,zero
        while (j < tam_vet) {
 2000a58:	b500090e 	bge	r22,r20,2000a80 <merge+0x160>
 2000a5c:	8489883a 	add	r4,r16,r18
 2000a60:	844b883a 	add	r5,r16,r17
            tmp[k++] = vet[j++];
 2000a64:	9909883a 	add	r4,r19,r4
 2000a68:	a94b883a 	add	r5,r21,r5
 2000a6c:	01800304 	movi	r6,12
 2000a70:	b5800044 	addi	r22,r22,1
 2000a74:	2007df40 	call	2007df4 <memcpy>
 2000a78:	84000304 	addi	r16,r16,12
 2000a7c:	003ff606 	br	2000a58 <__alt_mem_onchip_memory2_0+0xfdff0a58>
            tmp[k] = vet[j++];
        }
        ++k;
    }

    if (i == mid) {
 2000a80:	0021883a 	mov	r16,zero
 2000a84:	00000a06 	br	2000ab0 <merge+0x190>
        while (j < tam_vet) {
            tmp[k++] = vet[j++];
        }
    }
    else {
        while (i < mid) {
 2000a88:	847ffd0e 	bge	r16,r17,2000a80 <__alt_mem_onchip_memory2_0+0xfdff0a80>
 2000a8c:	9589883a 	add	r4,r18,r22
 2000a90:	970b883a 	add	r5,r18,fp
            tmp[k++] = vet[i++];
 2000a94:	9909883a 	add	r4,r19,r4
 2000a98:	a94b883a 	add	r5,r21,r5
 2000a9c:	01800304 	movi	r6,12
 2000aa0:	84000044 	addi	r16,r16,1
 2000aa4:	2007df40 	call	2007df4 <memcpy>
 2000aa8:	94800304 	addi	r18,r18,12
 2000aac:	003ff606 	br	2000a88 <__alt_mem_onchip_memory2_0+0xfdff0a88>
        }
    }

    for (i = 0; i < tam_vet; ++i) {
 2000ab0:	8500090e 	bge	r16,r20,2000ad8 <merge+0x1b8>
 2000ab4:	8009883a 	mov	r4,r16
 2000ab8:	01400304 	movi	r5,12
 2000abc:	2003c800 	call	2003c80 <__mulsi3>
        vet[i] = tmp[i];
 2000ac0:	a889883a 	add	r4,r21,r2
 2000ac4:	988b883a 	add	r5,r19,r2
 2000ac8:	01800304 	movi	r6,12
 2000acc:	2007df40 	call	2007df4 <memcpy>
        while (i < mid) {
            tmp[k++] = vet[i++];
        }
    }

    for (i = 0; i < tam_vet; ++i) {
 2000ad0:	84000044 	addi	r16,r16,1
 2000ad4:	003ff606 	br	2000ab0 <__alt_mem_onchip_memory2_0+0xfdff0ab0>
        vet[i] = tmp[i];
    }

    free(tmp);
 2000ad8:	9809883a 	mov	r4,r19
}
 2000adc:	dfc00a17 	ldw	ra,40(sp)
 2000ae0:	df000917 	ldw	fp,36(sp)
 2000ae4:	ddc00817 	ldw	r23,32(sp)
 2000ae8:	dd800717 	ldw	r22,28(sp)
 2000aec:	dd400617 	ldw	r21,24(sp)
 2000af0:	dd000517 	ldw	r20,20(sp)
 2000af4:	dcc00417 	ldw	r19,16(sp)
 2000af8:	dc800317 	ldw	r18,12(sp)
 2000afc:	dc400217 	ldw	r17,8(sp)
 2000b00:	dc000117 	ldw	r16,4(sp)
 2000b04:	dec00b04 	addi	sp,sp,44

    for (i = 0; i < tam_vet; ++i) {
        vet[i] = tmp[i];
    }

    free(tmp);
 2000b08:	200775c1 	jmpi	200775c <free>

02000b0c <mergeSort>:
 * Ordenacao da Populacao pelo Fitness
 * O procedimento abaixo implementa o algoritmo de Ordenacao MERGE SORT.
 */
void mergeSort(struct t_individuo vet[], int tam_vet) {
    int mid;
    if (tam_vet > 1) {
 2000b0c:	00800044 	movi	r2,1
 2000b10:	1140180e 	bge	r2,r5,2000b74 <mergeSort+0x68>

/*
 * Ordenacao da Populacao pelo Fitness
 * O procedimento abaixo implementa o algoritmo de Ordenacao MERGE SORT.
 */
void mergeSort(struct t_individuo vet[], int tam_vet) {
 2000b14:	defffc04 	addi	sp,sp,-16
 2000b18:	dc800215 	stw	r18,8(sp)
    int mid;
    if (tam_vet > 1) {
        mid = tam_vet / 2;
 2000b1c:	28a5d83a 	sra	r18,r5,r2

/*
 * Ordenacao da Populacao pelo Fitness
 * O procedimento abaixo implementa o algoritmo de Ordenacao MERGE SORT.
 */
void mergeSort(struct t_individuo vet[], int tam_vet) {
 2000b20:	dc000015 	stw	r16,0(sp)
 2000b24:	2821883a 	mov	r16,r5
    int mid;
    if (tam_vet > 1) {
        mid = tam_vet / 2;
        mergeSort(vet, mid);
 2000b28:	900b883a 	mov	r5,r18

/*
 * Ordenacao da Populacao pelo Fitness
 * O procedimento abaixo implementa o algoritmo de Ordenacao MERGE SORT.
 */
void mergeSort(struct t_individuo vet[], int tam_vet) {
 2000b2c:	dfc00315 	stw	ra,12(sp)
 2000b30:	dc400115 	stw	r17,4(sp)
 2000b34:	2023883a 	mov	r17,r4
    int mid;
    if (tam_vet > 1) {
        mid = tam_vet / 2;
        mergeSort(vet, mid);
 2000b38:	2000b0c0 	call	2000b0c <mergeSort>
        mergeSort(vet+mid, tam_vet-mid);
 2000b3c:	9009883a 	mov	r4,r18
 2000b40:	01400304 	movi	r5,12
 2000b44:	2003c800 	call	2003c80 <__mulsi3>
 2000b48:	8889883a 	add	r4,r17,r2
 2000b4c:	848bc83a 	sub	r5,r16,r18
 2000b50:	2000b0c0 	call	2000b0c <mergeSort>
        merge(vet, tam_vet);
 2000b54:	8809883a 	mov	r4,r17
 2000b58:	800b883a 	mov	r5,r16
    }
}
 2000b5c:	dfc00317 	ldw	ra,12(sp)
 2000b60:	dc800217 	ldw	r18,8(sp)
 2000b64:	dc400117 	ldw	r17,4(sp)
 2000b68:	dc000017 	ldw	r16,0(sp)
 2000b6c:	dec00404 	addi	sp,sp,16
    int mid;
    if (tam_vet > 1) {
        mid = tam_vet / 2;
        mergeSort(vet, mid);
        mergeSort(vet+mid, tam_vet-mid);
        merge(vet, tam_vet);
 2000b70:	20009201 	jmpi	2000920 <merge>
 2000b74:	f800283a 	ret

02000b78 <obter_fitness>:
    }
}

float obter_fitness(int funcao, float x1, float x2){
 2000b78:	defffa04 	addi	sp,sp,-24
 2000b7c:	dfc00515 	stw	ra,20(sp)
 2000b80:	dd000415 	stw	r20,16(sp)
 2000b84:	dcc00315 	stw	r19,12(sp)
 2000b88:	dc800215 	stw	r18,8(sp)
 2000b8c:	dc400115 	stw	r17,4(sp)
 2000b90:	dc000015 	stw	r16,0(sp)
    float fitness = 0.0;

    switch (funcao)
 2000b94:	213fffc4 	addi	r4,r4,-1
 2000b98:	00800104 	movi	r2,4
 2000b9c:	11004d36 	bltu	r2,r4,2000cd4 <obter_fitness+0x15c>
 2000ba0:	200890ba 	slli	r4,r4,2
 2000ba4:	00808034 	movhi	r2,512
 2000ba8:	1082f004 	addi	r2,r2,3008
 2000bac:	2089883a 	add	r4,r4,r2
 2000bb0:	20800017 	ldw	r2,0(r4)
 2000bb4:	3021883a 	mov	r16,r6
            break;
        case 4:
            fitness = griewangk(x1,x2);
            break;
        case 5:
            fitness = shubert(x1,x2);
 2000bb8:	2809883a 	mov	r4,r5
}

float obter_fitness(int funcao, float x1, float x2){
    float fitness = 0.0;

    switch (funcao)
 2000bbc:	1000683a 	jmp	r2
 2000bc0:	02000bd4 	movui	r8,47
 2000bc4:	02000c44 	movi	r8,49
 2000bc8:	02000c68 	cmpgeui	r8,zero,49
 2000bcc:	02000c8c 	andi	r8,zero,50
 2000bd0:	02000cb0 	cmpltui	r8,zero,50

/*
 * Retorna um valor (do tipo float) referente a funcao DE JONGS, dado duas entrada, x1 e x2(tambem do tipo float);
 */
float de_jongs(float x1, float x2){
    return pow(x1,2.0) + pow(x2,2.0);
 2000bd4:	200742c0 	call	200742c <__extendsfdf2>
 2000bd8:	8009883a 	mov	r4,r16
 2000bdc:	1029883a 	mov	r20,r2
 2000be0:	1823883a 	mov	r17,r3
 2000be4:	200742c0 	call	200742c <__extendsfdf2>
 2000be8:	a009883a 	mov	r4,r20
 2000bec:	880b883a 	mov	r5,r17
 2000bf0:	a00d883a 	mov	r6,r20
 2000bf4:	880f883a 	mov	r7,r17
 2000bf8:	1027883a 	mov	r19,r2
 2000bfc:	1825883a 	mov	r18,r3
 2000c00:	20061980 	call	2006198 <__muldf3>
 2000c04:	9809883a 	mov	r4,r19
 2000c08:	900b883a 	mov	r5,r18
 2000c0c:	980d883a 	mov	r6,r19
 2000c10:	900f883a 	mov	r7,r18
 2000c14:	1023883a 	mov	r17,r2
 2000c18:	1821883a 	mov	r16,r3
 2000c1c:	20061980 	call	2006198 <__muldf3>
 2000c20:	8809883a 	mov	r4,r17
 2000c24:	800b883a 	mov	r5,r16
 2000c28:	100d883a 	mov	r6,r2
 2000c2c:	180f883a 	mov	r7,r3
 2000c30:	2004d380 	call	2004d38 <__adddf3>
 2000c34:	1009883a 	mov	r4,r2
 2000c38:	180b883a 	mov	r5,r3
 2000c3c:	200753c0 	call	200753c <__truncdfsf2>

    switch (funcao)
    {
        case 1:
            fitness = de_jongs(x1,x2);
            break;
 2000c40:	00002806 	br	2000ce4 <obter_fitness+0x16c>
        case 2:
            fitness = rastrigin(x1,x2);
 2000c44:	300b883a 	mov	r5,r6
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
 2000c48:	dfc00517 	ldw	ra,20(sp)
 2000c4c:	dd000417 	ldw	r20,16(sp)
 2000c50:	dcc00317 	ldw	r19,12(sp)
 2000c54:	dc800217 	ldw	r18,8(sp)
 2000c58:	dc400117 	ldw	r17,4(sp)
 2000c5c:	dc000017 	ldw	r16,0(sp)
 2000c60:	dec00604 	addi	sp,sp,24
    {
        case 1:
            fitness = de_jongs(x1,x2);
            break;
        case 2:
            fitness = rastrigin(x1,x2);
 2000c64:	20001001 	jmpi	2000100 <rastrigin>
            break;
        case 3:
            fitness = drop_wave(x1,x2);
 2000c68:	300b883a 	mov	r5,r6
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
 2000c6c:	dfc00517 	ldw	ra,20(sp)
 2000c70:	dd000417 	ldw	r20,16(sp)
 2000c74:	dcc00317 	ldw	r19,12(sp)
 2000c78:	dc800217 	ldw	r18,8(sp)
 2000c7c:	dc400117 	ldw	r17,4(sp)
 2000c80:	dc000017 	ldw	r16,0(sp)
 2000c84:	dec00604 	addi	sp,sp,24
            break;
        case 2:
            fitness = rastrigin(x1,x2);
            break;
        case 3:
            fitness = drop_wave(x1,x2);
 2000c88:	20002981 	jmpi	2000298 <drop_wave>
            break;
        case 4:
            fitness = griewangk(x1,x2);
 2000c8c:	300b883a 	mov	r5,r6
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
 2000c90:	dfc00517 	ldw	ra,20(sp)
 2000c94:	dd000417 	ldw	r20,16(sp)
 2000c98:	dcc00317 	ldw	r19,12(sp)
 2000c9c:	dc800217 	ldw	r18,8(sp)
 2000ca0:	dc400117 	ldw	r17,4(sp)
 2000ca4:	dc000017 	ldw	r16,0(sp)
 2000ca8:	dec00604 	addi	sp,sp,24
            break;
        case 3:
            fitness = drop_wave(x1,x2);
            break;
        case 4:
            fitness = griewangk(x1,x2);
 2000cac:	20003e01 	jmpi	20003e0 <griewangk>
            break;
        case 5:
            fitness = shubert(x1,x2);
 2000cb0:	300b883a 	mov	r5,r6
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
 2000cb4:	dfc00517 	ldw	ra,20(sp)
 2000cb8:	dd000417 	ldw	r20,16(sp)
 2000cbc:	dcc00317 	ldw	r19,12(sp)
 2000cc0:	dc800217 	ldw	r18,8(sp)
 2000cc4:	dc400117 	ldw	r17,4(sp)
 2000cc8:	dc000017 	ldw	r16,0(sp)
 2000ccc:	dec00604 	addi	sp,sp,24
            break;
        case 4:
            fitness = griewangk(x1,x2);
            break;
        case 5:
            fitness = shubert(x1,x2);
 2000cd0:	20005581 	jmpi	2000558 <shubert>
            break;
        default:
            printf ("\nERRO!\n");
 2000cd4:	01008074 	movhi	r4,513
 2000cd8:	2125c404 	addi	r4,r4,-26864
 2000cdc:	2007f240 	call	2007f24 <puts>
        merge(vet, tam_vet);
    }
}

float obter_fitness(int funcao, float x1, float x2){
    float fitness = 0.0;
 2000ce0:	0005883a 	mov	r2,zero
        default:
            printf ("\nERRO!\n");
    }

    return fitness;
}
 2000ce4:	dfc00517 	ldw	ra,20(sp)
 2000ce8:	dd000417 	ldw	r20,16(sp)
 2000cec:	dcc00317 	ldw	r19,12(sp)
 2000cf0:	dc800217 	ldw	r18,8(sp)
 2000cf4:	dc400117 	ldw	r17,4(sp)
 2000cf8:	dc000017 	ldw	r16,0(sp)
 2000cfc:	dec00604 	addi	sp,sp,24
 2000d00:	f800283a 	ret

02000d04 <identificar_dominio>:

void identificar_dominio(int funcao, float *l_inf, float *l_sup){
 2000d04:	defffb04 	addi	sp,sp,-20
 2000d08:	dcc00315 	stw	r19,12(sp)
 2000d0c:	dc800215 	stw	r18,8(sp)
 2000d10:	dfc00415 	stw	ra,16(sp)
 2000d14:	dc400115 	stw	r17,4(sp)
 2000d18:	dc000015 	stw	r16,0(sp)
    float d[2];
    switch (funcao)
 2000d1c:	213fffc4 	addi	r4,r4,-1
 2000d20:	00800104 	movi	r2,4
    }

    return fitness;
}

void identificar_dominio(int funcao, float *l_inf, float *l_sup){
 2000d24:	2827883a 	mov	r19,r5
 2000d28:	3025883a 	mov	r18,r6
    float d[2];
    switch (funcao)
 2000d2c:	11001436 	bltu	r2,r4,2000d80 <identificar_dominio+0x7c>
 2000d30:	200890ba 	slli	r4,r4,2
 2000d34:	00808034 	movhi	r2,512
 2000d38:	10835204 	addi	r2,r2,3400
 2000d3c:	2089883a 	add	r4,r4,r2
 2000d40:	20800017 	ldw	r2,0(r4)
 2000d44:	1000683a 	jmp	r2
 2000d48:	02000d90 	cmplti	r8,zero,54
 2000d4c:	02000d5c 	xori	r8,zero,53
 2000d50:	02000d5c 	xori	r8,zero,53
 2000d54:	02000d68 	cmpgeui	r8,zero,53
 2000d58:	02000d74 	movhi	r8,53
/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark RASTRIGIN
 */
void d_rastrigin(float d[]){
    d[0] = -2.0;
    d[1] = 2.0;
 2000d5c:	04100034 	movhi	r16,16384

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark RASTRIGIN
 */
void d_rastrigin(float d[]){
    d[0] = -2.0;
 2000d60:	04700034 	movhi	r17,49152
 2000d64:	00000e06 	br	2000da0 <identificar_dominio+0x9c>
/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark GRIEWANGK
 */
void d_griewangk(float d[]){
    d[0] = -4.0;
    d[1] = 4.0;
 2000d68:	04102034 	movhi	r16,16512

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark GRIEWANGK
 */
void d_griewangk(float d[]){
    d[0] = -4.0;
 2000d6c:	04702034 	movhi	r17,49280
 2000d70:	00000b06 	br	2000da0 <identificar_dominio+0x9c>
/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark SHUBERT
 */
void d_shubert(float d[]){
    d[0] = -3.0;
    d[1] = 3.0;
 2000d74:	04101034 	movhi	r16,16448

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark SHUBERT
 */
void d_shubert(float d[]){
    d[0] = -3.0;
 2000d78:	04701034 	movhi	r17,49216
 2000d7c:	00000806 	br	2000da0 <identificar_dominio+0x9c>
            break;
        case 5:
            d_shubert(d);
            break;
        default:
            printf ("\nERRO!\n");
 2000d80:	01008074 	movhi	r4,513
 2000d84:	2125c404 	addi	r4,r4,-26864
 2000d88:	2007f240 	call	2007f24 <puts>
 2000d8c:	00000406 	br	2000da0 <identificar_dominio+0x9c>
/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DE JONGS
 */
void d_de_jongs(float d[]){
    d[0] = -5.12;
    d[1] = 5.12;
 2000d90:	04102934 	movhi	r16,16548

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DE JONGS
 */
void d_de_jongs(float d[]){
    d[0] = -5.12;
 2000d94:	04702934 	movhi	r17,49316
    d[1] = 5.12;
 2000d98:	8435c284 	addi	r16,r16,-10486

/*
 * Implementacao da funcao que informa os valores de dominio referente a funcao de benchmark DE JONGS
 */
void d_de_jongs(float d[]){
    d[0] = -5.12;
 2000d9c:	8c75c284 	addi	r17,r17,-10486
            d_shubert(d);
            break;
        default:
            printf ("\nERRO!\n");
    }
    *l_inf = d[0];
 2000da0:	9c400015 	stw	r17,0(r19)
    *l_sup = d[1];
 2000da4:	94000015 	stw	r16,0(r18)
}
 2000da8:	dfc00417 	ldw	ra,16(sp)
 2000dac:	dcc00317 	ldw	r19,12(sp)
 2000db0:	dc800217 	ldw	r18,8(sp)
 2000db4:	dc400117 	ldw	r17,4(sp)
 2000db8:	dc000017 	ldw	r16,0(sp)
 2000dbc:	dec00504 	addi	sp,sp,20
 2000dc0:	f800283a 	ret

02000dc4 <encontra_melhor_individuo>:

/*
 * O procedimento abaixo eh responsavel por encontrar o melhor individuo (o que possui o menor fitness) no vetor "vet".
 */
void encontra_melhor_individuo(struct t_individuo vet[], int tam_vet, struct t_individuo *melhor){
 2000dc4:	defffa04 	addi	sp,sp,-24
 2000dc8:	dc800215 	stw	r18,8(sp)
 2000dcc:	2025883a 	mov	r18,r4
 2000dd0:	dd000415 	stw	r20,16(sp)
 2000dd4:	dcc00315 	stw	r19,12(sp)
    int i;
    *melhor = vet[0];
 2000dd8:	3009883a 	mov	r4,r6
}

/*
 * O procedimento abaixo eh responsavel por encontrar o melhor individuo (o que possui o menor fitness) no vetor "vet".
 */
void encontra_melhor_individuo(struct t_individuo vet[], int tam_vet, struct t_individuo *melhor){
 2000ddc:	2829883a 	mov	r20,r5
 2000de0:	3027883a 	mov	r19,r6
    int i;
    *melhor = vet[0];
 2000de4:	900b883a 	mov	r5,r18
 2000de8:	01800304 	movi	r6,12
}

/*
 * O procedimento abaixo eh responsavel por encontrar o melhor individuo (o que possui o menor fitness) no vetor "vet".
 */
void encontra_melhor_individuo(struct t_individuo vet[], int tam_vet, struct t_individuo *melhor){
 2000dec:	dc400115 	stw	r17,4(sp)
 2000df0:	dc000015 	stw	r16,0(sp)
 2000df4:	dfc00515 	stw	ra,20(sp)
 2000df8:	94400504 	addi	r17,r18,20
    int i;
    *melhor = vet[0];
 2000dfc:	2007df40 	call	2007df4 <memcpy>
    for(i = 1; i < tam_vet; i++){
 2000e00:	04000044 	movi	r16,1
 2000e04:	85000e0e 	bge	r16,r20,2000e40 <encontra_melhor_individuo+0x7c>
        if (vet[i].fitness < melhor->fitness) *melhor = vet[i];
 2000e08:	89000017 	ldw	r4,0(r17)
 2000e0c:	99400217 	ldw	r5,8(r19)
 2000e10:	20041880 	call	2004188 <__lesf2>
 2000e14:	1000070e 	bge	r2,zero,2000e34 <encontra_melhor_individuo+0x70>
 2000e18:	8009883a 	mov	r4,r16
 2000e1c:	01400304 	movi	r5,12
 2000e20:	2003c800 	call	2003c80 <__mulsi3>
 2000e24:	9809883a 	mov	r4,r19
 2000e28:	908b883a 	add	r5,r18,r2
 2000e2c:	01800304 	movi	r6,12
 2000e30:	2007df40 	call	2007df4 <memcpy>
 * O procedimento abaixo eh responsavel por encontrar o melhor individuo (o que possui o menor fitness) no vetor "vet".
 */
void encontra_melhor_individuo(struct t_individuo vet[], int tam_vet, struct t_individuo *melhor){
    int i;
    *melhor = vet[0];
    for(i = 1; i < tam_vet; i++){
 2000e34:	84000044 	addi	r16,r16,1
 2000e38:	8c400304 	addi	r17,r17,12
 2000e3c:	003ff106 	br	2000e04 <__alt_mem_onchip_memory2_0+0xfdff0e04>
        if (vet[i].fitness < melhor->fitness) *melhor = vet[i];
    }
}
 2000e40:	dfc00517 	ldw	ra,20(sp)
 2000e44:	dd000417 	ldw	r20,16(sp)
 2000e48:	dcc00317 	ldw	r19,12(sp)
 2000e4c:	dc800217 	ldw	r18,8(sp)
 2000e50:	dc400117 	ldw	r17,4(sp)
 2000e54:	dc000017 	ldw	r16,0(sp)
 2000e58:	dec00604 	addi	sp,sp,24
 2000e5c:	f800283a 	ret

02000e60 <imprimir_individuo>:

/*
 * Procedimento para imprimir um unico individuo do tipo t_individuo
 */
void imprimir_individuo(struct t_individuo individuo){
 2000e60:	defffc04 	addi	sp,sp,-16
 2000e64:	dfc00315 	stw	ra,12(sp)
 2000e68:	d9400115 	stw	r5,4(sp)
 2000e6c:	d9800215 	stw	r6,8(sp)
    printf("x1 = %f\n",individuo.x1);
 2000e70:	200742c0 	call	200742c <__extendsfdf2>
 2000e74:	01008074 	movhi	r4,513
 2000e78:	100b883a 	mov	r5,r2
 2000e7c:	180d883a 	mov	r6,r3
 2000e80:	2125c604 	addi	r4,r4,-26856
 2000e84:	2007e580 	call	2007e58 <printf>
    printf("x2 = %f\n",individuo.x2);
 2000e88:	d9000117 	ldw	r4,4(sp)
 2000e8c:	200742c0 	call	200742c <__extendsfdf2>
 2000e90:	01008074 	movhi	r4,513
 2000e94:	100b883a 	mov	r5,r2
 2000e98:	180d883a 	mov	r6,r3
 2000e9c:	2125c904 	addi	r4,r4,-26844
 2000ea0:	2007e580 	call	2007e58 <printf>
    printf("fitness = %f\n\n",individuo.fitness);
 2000ea4:	d9000217 	ldw	r4,8(sp)
 2000ea8:	200742c0 	call	200742c <__extendsfdf2>
 2000eac:	01008074 	movhi	r4,513
 2000eb0:	2125cc04 	addi	r4,r4,-26832
 2000eb4:	100b883a 	mov	r5,r2
 2000eb8:	180d883a 	mov	r6,r3
}
 2000ebc:	dfc00317 	ldw	ra,12(sp)
 2000ec0:	dec00404 	addi	sp,sp,16
 * Procedimento para imprimir um unico individuo do tipo t_individuo
 */
void imprimir_individuo(struct t_individuo individuo){
    printf("x1 = %f\n",individuo.x1);
    printf("x2 = %f\n",individuo.x2);
    printf("fitness = %f\n\n",individuo.fitness);
 2000ec4:	2007e581 	jmpi	2007e58 <printf>

02000ec8 <imprimir_populacao>:
}

/*
 * Procedimento para imprimir um vetor de t_individuo
 */
void imprimir_populacao(struct t_individuo populacao[], int total_individuos){
 2000ec8:	defffc04 	addi	sp,sp,-16
 2000ecc:	dc800215 	stw	r18,8(sp)
 2000ed0:	dc400115 	stw	r17,4(sp)
 2000ed4:	dc000015 	stw	r16,0(sp)
 2000ed8:	dfc00315 	stw	ra,12(sp)
 2000edc:	2825883a 	mov	r18,r5
 2000ee0:	24400204 	addi	r17,r4,8
    int i;
    for(i = 0; i < total_individuos; ++i){
 2000ee4:	0021883a 	mov	r16,zero
 2000ee8:	84800a0e 	bge	r16,r18,2000f14 <imprimir_populacao+0x4c>
        //printf("(%d) x1 = %f; x2 = %f\n",i,populacao[i].x1,populacao[i].x2);
        printf("fitness: %f\n",populacao[i].fitness);
 2000eec:	89000017 	ldw	r4,0(r17)
/*
 * Procedimento para imprimir um vetor de t_individuo
 */
void imprimir_populacao(struct t_individuo populacao[], int total_individuos){
    int i;
    for(i = 0; i < total_individuos; ++i){
 2000ef0:	84000044 	addi	r16,r16,1
 2000ef4:	8c400304 	addi	r17,r17,12
        //printf("(%d) x1 = %f; x2 = %f\n",i,populacao[i].x1,populacao[i].x2);
        printf("fitness: %f\n",populacao[i].fitness);
 2000ef8:	200742c0 	call	200742c <__extendsfdf2>
 2000efc:	01008074 	movhi	r4,513
 2000f00:	2125d004 	addi	r4,r4,-26816
 2000f04:	100b883a 	mov	r5,r2
 2000f08:	180d883a 	mov	r6,r3
 2000f0c:	2007e580 	call	2007e58 <printf>
 2000f10:	003ff506 	br	2000ee8 <__alt_mem_onchip_memory2_0+0xfdff0ee8>

        //printf("fitness: %d\n\n",obter_numero_uniforme_discreto(0,4)); //4 inclusive
    }
}
 2000f14:	dfc00317 	ldw	ra,12(sp)
 2000f18:	dc800217 	ldw	r18,8(sp)
 2000f1c:	dc400117 	ldw	r17,4(sp)
 2000f20:	dc000017 	ldw	r16,0(sp)
 2000f24:	dec00404 	addi	sp,sp,16
 2000f28:	f800283a 	ret

02000f2c <gerar_populacao_inicial>:
 *  - a populacao (vetor de "t_individuo")
 *  - o tamanho da populacao ("total_individuos")
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void gerar_populacao_inicial(struct t_individuo populacao[], int total_individuos, int funcao){
 2000f2c:	defff704 	addi	sp,sp,-36
 2000f30:	dd400715 	stw	r21,28(sp)
 2000f34:	dd000615 	stw	r20,24(sp)
 2000f38:	dc000215 	stw	r16,8(sp)
 2000f3c:	282b883a 	mov	r21,r5
 2000f40:	2021883a 	mov	r16,r4
 2000f44:	3029883a 	mov	r20,r6

    float l_inf = 0.0;
    float l_sup = 0.0;
    identificar_dominio(funcao,&l_inf,&l_sup);
 2000f48:	3009883a 	mov	r4,r6
 2000f4c:	d9400104 	addi	r5,sp,4
 2000f50:	d80d883a 	mov	r6,sp
 *  - a populacao (vetor de "t_individuo")
 *  - o tamanho da populacao ("total_individuos")
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void gerar_populacao_inicial(struct t_individuo populacao[], int total_individuos, int funcao){
 2000f54:	dcc00515 	stw	r19,20(sp)
 2000f58:	dc800415 	stw	r18,16(sp)
 2000f5c:	dc400315 	stw	r17,12(sp)
 2000f60:	dfc00815 	stw	ra,32(sp)

    float l_inf = 0.0;
 2000f64:	d8000115 	stw	zero,4(sp)
    float l_sup = 0.0;
 2000f68:	d8000015 	stw	zero,0(sp)
 2000f6c:	84800104 	addi	r18,r16,4
    identificar_dominio(funcao,&l_inf,&l_sup);
 2000f70:	2000d040 	call	2000d04 <identificar_dominio>
 2000f74:	84c00204 	addi	r19,r16,8

    int i;
    for(i = 0; i < total_individuos; ++i){
 2000f78:	0023883a 	mov	r17,zero
 2000f7c:	8d40120e 	bge	r17,r21,2000fc8 <gerar_populacao_inicial+0x9c>
        populacao[i].x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
 2000f80:	d9000117 	ldw	r4,4(sp)
 2000f84:	d9400017 	ldw	r5,0(sp)
    float l_inf = 0.0;
    float l_sup = 0.0;
    identificar_dominio(funcao,&l_inf,&l_sup);

    int i;
    for(i = 0; i < total_individuos; ++i){
 2000f88:	8c400044 	addi	r17,r17,1
 2000f8c:	84000304 	addi	r16,r16,12
        populacao[i].x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
 2000f90:	20008080 	call	2000808 <obter_numero_uniforme_continuo>
        populacao[i].x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
 2000f94:	d9000117 	ldw	r4,4(sp)
 2000f98:	d9400017 	ldw	r5,0(sp)
    float l_sup = 0.0;
    identificar_dominio(funcao,&l_inf,&l_sup);

    int i;
    for(i = 0; i < total_individuos; ++i){
        populacao[i].x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
 2000f9c:	80bffd15 	stw	r2,-12(r16)
 2000fa0:	94800304 	addi	r18,r18,12
        populacao[i].x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
 2000fa4:	20008080 	call	2000808 <obter_numero_uniforme_continuo>
 2000fa8:	90bffd15 	stw	r2,-12(r18)
        populacao[i].fitness = obter_fitness(funcao, populacao[i].x1, populacao[i].x2);
 2000fac:	817ffd17 	ldw	r5,-12(r16)
 2000fb0:	a009883a 	mov	r4,r20
 2000fb4:	100d883a 	mov	r6,r2
 2000fb8:	2000b780 	call	2000b78 <obter_fitness>
 2000fbc:	98800015 	stw	r2,0(r19)
 2000fc0:	9cc00304 	addi	r19,r19,12
 2000fc4:	003fed06 	br	2000f7c <__alt_mem_onchip_memory2_0+0xfdff0f7c>
    }

}
 2000fc8:	dfc00817 	ldw	ra,32(sp)
 2000fcc:	dd400717 	ldw	r21,28(sp)
 2000fd0:	dd000617 	ldw	r20,24(sp)
 2000fd4:	dcc00517 	ldw	r19,20(sp)
 2000fd8:	dc800417 	ldw	r18,16(sp)
 2000fdc:	dc400317 	ldw	r17,12(sp)
 2000fe0:	dc000217 	ldw	r16,8(sp)
 2000fe4:	dec00904 	addi	sp,sp,36
 2000fe8:	f800283a 	ret

02000fec <op_mutacao>:
 *  - a probabilidade (baixa) de mutacao informada pelo usuario no Menu (prob_mutacao)
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 *
 */
void op_mutacao(struct t_individuo *filho, float prob_mutacao, int funcao){
 2000fec:	defffa04 	addi	sp,sp,-24
 2000ff0:	dc800415 	stw	r18,16(sp)
 2000ff4:	dc400315 	stw	r17,12(sp)
 2000ff8:	dc000215 	stw	r16,8(sp)
 2000ffc:	dfc00515 	stw	ra,20(sp)
 2001000:	2021883a 	mov	r16,r4
 2001004:	2825883a 	mov	r18,r5
 2001008:	3023883a 	mov	r17,r6
    float u = obter_numero_uniforme();
 200100c:	20007a40 	call	20007a4 <obter_numero_uniforme>

    if (u <= prob_mutacao){
 2001010:	1009883a 	mov	r4,r2
 2001014:	900b883a 	mov	r5,r18
 2001018:	20041880 	call	2004188 <__lesf2>
 200101c:	00801316 	blt	zero,r2,200106c <op_mutacao+0x80>

        float l_inf = 0.0;
        float l_sup = 0.0;
        identificar_dominio(funcao,&l_inf,&l_sup);
 2001020:	d80d883a 	mov	r6,sp
 2001024:	8809883a 	mov	r4,r17
 2001028:	d9400104 	addi	r5,sp,4
void op_mutacao(struct t_individuo *filho, float prob_mutacao, int funcao){
    float u = obter_numero_uniforme();

    if (u <= prob_mutacao){

        float l_inf = 0.0;
 200102c:	d8000115 	stw	zero,4(sp)
        float l_sup = 0.0;
 2001030:	d8000015 	stw	zero,0(sp)
        identificar_dominio(funcao,&l_inf,&l_sup);
 2001034:	2000d040 	call	2000d04 <identificar_dominio>

        filho->x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
 2001038:	d9000117 	ldw	r4,4(sp)
 200103c:	d9400017 	ldw	r5,0(sp)
 2001040:	20008080 	call	2000808 <obter_numero_uniforme_continuo>
        filho->x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
 2001044:	d9000117 	ldw	r4,4(sp)
 2001048:	d9400017 	ldw	r5,0(sp)

        float l_inf = 0.0;
        float l_sup = 0.0;
        identificar_dominio(funcao,&l_inf,&l_sup);

        filho->x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
 200104c:	80800015 	stw	r2,0(r16)
        filho->x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
 2001050:	20008080 	call	2000808 <obter_numero_uniforme_continuo>
        filho->fitness = obter_fitness(funcao, filho->x1, filho->x2);
 2001054:	81400017 	ldw	r5,0(r16)
        float l_inf = 0.0;
        float l_sup = 0.0;
        identificar_dominio(funcao,&l_inf,&l_sup);

        filho->x1 = obter_numero_uniforme_continuo(l_inf,l_sup);
        filho->x2 = obter_numero_uniforme_continuo(l_inf,l_sup);
 2001058:	80800115 	stw	r2,4(r16)
        filho->fitness = obter_fitness(funcao, filho->x1, filho->x2);
 200105c:	8809883a 	mov	r4,r17
 2001060:	100d883a 	mov	r6,r2
 2001064:	2000b780 	call	2000b78 <obter_fitness>
 2001068:	80800215 	stw	r2,8(r16)
    }

}
 200106c:	dfc00517 	ldw	ra,20(sp)
 2001070:	dc800417 	ldw	r18,16(sp)
 2001074:	dc400317 	ldw	r17,12(sp)
 2001078:	dc000217 	ldw	r16,8(sp)
 200107c:	dec00604 	addi	sp,sp,24
 2001080:	f800283a 	ret

02001084 <op_recombinacao>:
 *  - os pais selecionados no torneio ("pai" e "mae")
 *  - o novo individuo (filho ou descendente) a ser gerado pela recombinacao dos dois pais selecionados
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
 2001084:	defff704 	addi	sp,sp,-36
 2001088:	dc800515 	stw	r18,20(sp)
 200108c:	2825883a 	mov	r18,r5
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
 2001090:	014fc034 	movhi	r5,16128
 *  - os pais selecionados no torneio ("pai" e "mae")
 *  - o novo individuo (filho ou descendente) a ser gerado pela recombinacao dos dois pais selecionados
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
 2001094:	dfc00715 	stw	ra,28(sp)
 2001098:	d9c00815 	stw	r7,32(sp)
 200109c:	dcc00615 	stw	r19,24(sp)
 20010a0:	dc400415 	stw	r17,16(sp)
 20010a4:	dc000315 	stw	r16,12(sp)
 20010a8:	3823883a 	mov	r17,r7
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
 20010ac:	20042400 	call	2004240 <__mulsf3>
 20010b0:	8809883a 	mov	r4,r17
 20010b4:	014fc034 	movhi	r5,16128
 *  - os pais selecionados no torneio ("pai" e "mae")
 *  - o novo individuo (filho ou descendente) a ser gerado pela recombinacao dos dois pais selecionados
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
 20010b8:	dc000b17 	ldw	r16,44(sp)
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
 20010bc:	1027883a 	mov	r19,r2
 20010c0:	20042400 	call	2004240 <__mulsf3>
 20010c4:	9809883a 	mov	r4,r19
 20010c8:	100b883a 	mov	r5,r2
 20010cc:	2003ca80 	call	2003ca8 <__addsf3>
    filho->x2 = alpha*pai.x2 + (1 - alpha)*mae.x2;
 20010d0:	9009883a 	mov	r4,r18
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
 20010d4:	80800015 	stw	r2,0(r16)
    filho->x2 = alpha*pai.x2 + (1 - alpha)*mae.x2;
 20010d8:	014fc034 	movhi	r5,16128
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
 20010dc:	1023883a 	mov	r17,r2
    filho->x2 = alpha*pai.x2 + (1 - alpha)*mae.x2;
 20010e0:	20042400 	call	2004240 <__mulsf3>
 20010e4:	d9000917 	ldw	r4,36(sp)
 20010e8:	014fc034 	movhi	r5,16128
 20010ec:	1025883a 	mov	r18,r2
 20010f0:	20042400 	call	2004240 <__mulsf3>
 20010f4:	9009883a 	mov	r4,r18
 20010f8:	100b883a 	mov	r5,r2
 20010fc:	2003ca80 	call	2003ca8 <__addsf3>
    filho->fitness = obter_fitness(funcao, filho->x1, filho->x2);
 2001100:	d9000c17 	ldw	r4,48(sp)
 */
void op_recombinacao(struct t_individuo pai,struct t_individuo mae,struct t_individuo *filho, int funcao){
    float alpha = 0.5;

    filho->x1 = alpha*pai.x1 + (1 - alpha)*mae.x1;
    filho->x2 = alpha*pai.x2 + (1 - alpha)*mae.x2;
 2001104:	100d883a 	mov	r6,r2
 2001108:	80800115 	stw	r2,4(r16)
    filho->fitness = obter_fitness(funcao, filho->x1, filho->x2);
 200110c:	880b883a 	mov	r5,r17
 2001110:	2000b780 	call	2000b78 <obter_fitness>
 2001114:	80800215 	stw	r2,8(r16)
}
 2001118:	dfc00717 	ldw	ra,28(sp)
 200111c:	dcc00617 	ldw	r19,24(sp)
 2001120:	dc800517 	ldw	r18,20(sp)
 2001124:	dc400417 	ldw	r17,16(sp)
 2001128:	dc000317 	ldw	r16,12(sp)
 200112c:	dec00904 	addi	sp,sp,36
 2001130:	f800283a 	ret

02001134 <op_selecao_de_pais>:
 *  - o tamanho da populacao ("total_individuos")
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 *  - os pais a serem selecionados no torneio ("pai" e "mae"). [SELECAO POR TORNEIO, onde a letra grega "tau" = 3]
 */
void op_selecao_de_pais(struct t_individuo populacao[], int total_individuos, struct t_individuo *pai, struct t_individuo *mae){
 2001134:	defff004 	addi	sp,sp,-64
 2001138:	dc400a15 	stw	r17,40(sp)
 200113c:	2023883a 	mov	r17,r4
	struct t_individuo sorteio[3]; //valor eh 3 pois foi definido no enunciado, isto e, letra grega "tau" = 3

    sorteio[0] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
 2001140:	293fffc4 	addi	r4,r5,-1
 *  - o tamanho da populacao ("total_individuos")
 *  - o ID (ou codigo) da funcao a ser otimizada. Este ID eh necessario para se reconhecer a funcao
 *      facilitando a obtencao do dominio e do fitness de tal funcao.
 *  - os pais a serem selecionados no torneio ("pai" e "mae"). [SELECAO POR TORNEIO, onde a letra grega "tau" = 3]
 */
void op_selecao_de_pais(struct t_individuo populacao[], int total_individuos, struct t_individuo *pai, struct t_individuo *mae){
 2001144:	dfc00f15 	stw	ra,60(sp)
 2001148:	dd400e15 	stw	r21,56(sp)
 200114c:	dd000d15 	stw	r20,52(sp)
 2001150:	302b883a 	mov	r21,r6
 2001154:	3829883a 	mov	r20,r7
 2001158:	dcc00c15 	stw	r19,48(sp)
 200115c:	dc800b15 	stw	r18,44(sp)
 2001160:	dc000915 	stw	r16,36(sp)
	struct t_individuo sorteio[3]; //valor eh 3 pois foi definido no enunciado, isto e, letra grega "tau" = 3

    sorteio[0] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
 2001164:	2004c040 	call	2004c04 <__floatsisf>
 2001168:	0009883a 	mov	r4,zero
 200116c:	100b883a 	mov	r5,r2
 2001170:	1025883a 	mov	r18,r2
 2001174:	20008680 	call	2000868 <obter_numero_uniforme_discreto>
 2001178:	1009883a 	mov	r4,r2
 200117c:	01400304 	movi	r5,12
 2001180:	04000304 	movi	r16,12
 2001184:	2003c800 	call	2003c80 <__mulsi3>
 2001188:	800d883a 	mov	r6,r16
 200118c:	d809883a 	mov	r4,sp
 2001190:	888b883a 	add	r5,r17,r2
 2001194:	2007df40 	call	2007df4 <memcpy>
    sorteio[1] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
 2001198:	900b883a 	mov	r5,r18
 200119c:	0009883a 	mov	r4,zero
 20011a0:	20008680 	call	2000868 <obter_numero_uniforme_discreto>
 20011a4:	800b883a 	mov	r5,r16
 20011a8:	1009883a 	mov	r4,r2
 20011ac:	2003c800 	call	2003c80 <__mulsi3>
 20011b0:	800d883a 	mov	r6,r16
 20011b4:	dc09883a 	add	r4,sp,r16
 20011b8:	888b883a 	add	r5,r17,r2
 20011bc:	2007df40 	call	2007df4 <memcpy>
    sorteio[2] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
 20011c0:	900b883a 	mov	r5,r18
 20011c4:	0009883a 	mov	r4,zero
 20011c8:	20008680 	call	2000868 <obter_numero_uniforme_discreto>
 20011cc:	800b883a 	mov	r5,r16
 20011d0:	1009883a 	mov	r4,r2
 20011d4:	2003c800 	call	2003c80 <__mulsi3>
 20011d8:	d9000604 	addi	r4,sp,24
 20011dc:	888b883a 	add	r5,r17,r2
 20011e0:	800d883a 	mov	r6,r16
 20011e4:	2007df40 	call	2007df4 <memcpy>
    encontra_melhor_individuo(sorteio,3,pai);
 20011e8:	04c000c4 	movi	r19,3
 20011ec:	a80d883a 	mov	r6,r21
 20011f0:	d809883a 	mov	r4,sp
 20011f4:	980b883a 	mov	r5,r19
 20011f8:	2000dc40 	call	2000dc4 <encontra_melhor_individuo>

    sorteio[0] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
 20011fc:	900b883a 	mov	r5,r18
 2001200:	0009883a 	mov	r4,zero
 2001204:	20008680 	call	2000868 <obter_numero_uniforme_discreto>
 2001208:	800b883a 	mov	r5,r16
 200120c:	1009883a 	mov	r4,r2
 2001210:	2003c800 	call	2003c80 <__mulsi3>
 2001214:	800d883a 	mov	r6,r16
 2001218:	d809883a 	mov	r4,sp
 200121c:	888b883a 	add	r5,r17,r2
 2001220:	2007df40 	call	2007df4 <memcpy>
    sorteio[1] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
 2001224:	900b883a 	mov	r5,r18
 2001228:	0009883a 	mov	r4,zero
 200122c:	20008680 	call	2000868 <obter_numero_uniforme_discreto>
 2001230:	800b883a 	mov	r5,r16
 2001234:	1009883a 	mov	r4,r2
 2001238:	2003c800 	call	2003c80 <__mulsi3>
 200123c:	800d883a 	mov	r6,r16
 2001240:	dc09883a 	add	r4,sp,r16
 2001244:	888b883a 	add	r5,r17,r2
 2001248:	2007df40 	call	2007df4 <memcpy>
    sorteio[2] = populacao[obter_numero_uniforme_discreto(0,total_individuos-1)];
 200124c:	900b883a 	mov	r5,r18
 2001250:	0009883a 	mov	r4,zero
 2001254:	20008680 	call	2000868 <obter_numero_uniforme_discreto>
 2001258:	800b883a 	mov	r5,r16
 200125c:	1009883a 	mov	r4,r2
 2001260:	2003c800 	call	2003c80 <__mulsi3>
 2001264:	d9000604 	addi	r4,sp,24
 2001268:	888b883a 	add	r5,r17,r2
 200126c:	800d883a 	mov	r6,r16
 2001270:	2007df40 	call	2007df4 <memcpy>
    encontra_melhor_individuo(sorteio,3,mae);
 2001274:	d809883a 	mov	r4,sp
 2001278:	980b883a 	mov	r5,r19
 200127c:	a00d883a 	mov	r6,r20
 2001280:	2000dc40 	call	2000dc4 <encontra_melhor_individuo>

}
 2001284:	dfc00f17 	ldw	ra,60(sp)
 2001288:	dd400e17 	ldw	r21,56(sp)
 200128c:	dd000d17 	ldw	r20,52(sp)
 2001290:	dcc00c17 	ldw	r19,48(sp)
 2001294:	dc800b17 	ldw	r18,44(sp)
 2001298:	dc400a17 	ldw	r17,40(sp)
 200129c:	dc000917 	ldw	r16,36(sp)
 20012a0:	dec01004 	addi	sp,sp,64
 20012a4:	f800283a 	ret

020012a8 <op_selecao_de_sobreviventes>:
 *  - o tamanho da populacao ("total_individuos")
 *  - o vetor que representada novos individuos ("novos_individuos")
 *  - "descarte": a quantidade de individuos a estarem presentes no vetor "novos_individuos"
 *
 */
void op_selecao_de_sobreviventes(struct t_individuo populacao[], int total_individuos, struct t_individuo novos_individuos[], int descarte){
 20012a8:	defffb04 	addi	sp,sp,-20
 20012ac:	dc000015 	stw	r16,0(sp)
 20012b0:	2021883a 	mov	r16,r4
 20012b4:	2809883a 	mov	r4,r5
 20012b8:	01400304 	movi	r5,12
 20012bc:	dcc00315 	stw	r19,12(sp)
 20012c0:	dc800215 	stw	r18,8(sp)
 20012c4:	dc400115 	stw	r17,4(sp)
 20012c8:	dfc00415 	stw	ra,16(sp)
 20012cc:	3027883a 	mov	r19,r6
 20012d0:	3825883a 	mov	r18,r7
 20012d4:	2003c800 	call	2003c80 <__mulsi3>
 20012d8:	80a1883a 	add	r16,r16,r2
    int i = 0;
    int j = total_individuos-1;

    for(i = 0; i < descarte; i++, j--){
 20012dc:	0023883a 	mov	r17,zero
 20012e0:	843ffd04 	addi	r16,r16,-12
 20012e4:	8c80090e 	bge	r17,r18,200130c <op_selecao_de_sobreviventes+0x64>
 20012e8:	8809883a 	mov	r4,r17
 20012ec:	01400304 	movi	r5,12
 20012f0:	2003c800 	call	2003c80 <__mulsi3>
        populacao[j] = novos_individuos[i];
 20012f4:	8009883a 	mov	r4,r16
 20012f8:	988b883a 	add	r5,r19,r2
 20012fc:	01800304 	movi	r6,12
 2001300:	2007df40 	call	2007df4 <memcpy>
 */
void op_selecao_de_sobreviventes(struct t_individuo populacao[], int total_individuos, struct t_individuo novos_individuos[], int descarte){
    int i = 0;
    int j = total_individuos-1;

    for(i = 0; i < descarte; i++, j--){
 2001304:	8c400044 	addi	r17,r17,1
 2001308:	003ff506 	br	20012e0 <__alt_mem_onchip_memory2_0+0xfdff12e0>
        populacao[j] = novos_individuos[i];
    }
}
 200130c:	dfc00417 	ldw	ra,16(sp)
 2001310:	dcc00317 	ldw	r19,12(sp)
 2001314:	dc800217 	ldw	r18,8(sp)
 2001318:	dc400117 	ldw	r17,4(sp)
 200131c:	dc000017 	ldw	r16,0(sp)
 2001320:	dec00504 	addi	sp,sp,20
 2001324:	f800283a 	ret

02001328 <executar>:
 *  - o tamanho da populacao (ou total de individuos "total_individuos" da populacao)
 *  - a quantidade "descarte" de individuos a serem substituidos na proxima geracao
 *  - por quantas "geracoes" a populacao inicial sera evoluida
 *  - a probabilidade (baixa) de mutacao (prob_mutacao)
 */
void executar(int funcao, int total_individuos, int descarte, int geracoes, float prob_mutacao){
 2001328:	deffe504 	addi	sp,sp,-108
 200132c:	df001915 	stw	fp,100(sp)
 2001330:	df001904 	addi	fp,sp,100
 2001334:	e0800217 	ldw	r2,8(fp)
 2001338:	dfc01a15 	stw	ra,104(sp)
 200133c:	dd001515 	stw	r20,84(sp)
 2001340:	dcc01415 	stw	r19,80(sp)
 2001344:	dc801315 	stw	r18,76(sp)
 2001348:	dc401215 	stw	r17,72(sp)
 200134c:	dc001115 	stw	r16,68(sp)
 2001350:	ddc01815 	stw	r23,96(sp)
 2001354:	dd801715 	stw	r22,92(sp)
 2001358:	dd401615 	stw	r21,88(sp)
 200135c:	2027883a 	mov	r19,r4
    srand((unsigned)time(NULL));
 2001360:	0009883a 	mov	r4,zero
 *  - o tamanho da populacao (ou total de individuos "total_individuos" da populacao)
 *  - a quantidade "descarte" de individuos a serem substituidos na proxima geracao
 *  - por quantas "geracoes" a populacao inicial sera evoluida
 *  - a probabilidade (baixa) de mutacao (prob_mutacao)
 */
void executar(int funcao, int total_individuos, int descarte, int geracoes, float prob_mutacao){
 2001364:	e1fff415 	stw	r7,-48(fp)
 2001368:	2823883a 	mov	r17,r5
 200136c:	3029883a 	mov	r20,r6
 2001370:	e0bff515 	stw	r2,-44(fp)
    srand((unsigned)time(NULL));
 2001374:	20080100 	call	2008010 <time>
 2001378:	1009883a 	mov	r4,r2
 200137c:	2007f380 	call	2007f38 <srand>

    /*
     * A Populacao e representada como um vetor de "t_individuo", cujo o tamanho e "total_individuos" (definido previamente pelo usuario).
     * A variavel "total_individuos" e equivalente a letra grega "mu" especificada no enunciado do trabalho.
     */
    t_individuo populacao[total_individuos];
 2001380:	8809883a 	mov	r4,r17
 2001384:	01400304 	movi	r5,12
 2001388:	2003c800 	call	2003c80 <__mulsi3>
 200138c:	00ffff04 	movi	r3,-4
 2001390:	10800184 	addi	r2,r2,6
 2001394:	10c4703a 	and	r2,r2,r3
 2001398:	d8b7c83a 	sub	sp,sp,r2
 200139c:	dc000404 	addi	r16,sp,16

    gerar_populacao_inicial(populacao, total_individuos, funcao);
 20013a0:	880b883a 	mov	r5,r17
 20013a4:	980d883a 	mov	r6,r19
 20013a8:	8009883a 	mov	r4,r16
 20013ac:	2000f2c0 	call	2000f2c <gerar_populacao_inicial>

    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
 20013b0:	01008074 	movhi	r4,513
 20013b4:	2125d404 	addi	r4,r4,-26800
 20013b8:	2007f240 	call	2007f24 <puts>
    for(g = 0; g < geracoes; g++){

        t_individuo novos_individuos[descarte]; //vetor de novos individuos
 20013bc:	a009883a 	mov	r4,r20
 20013c0:	01400304 	movi	r5,12
 20013c4:	2003c800 	call	2003c80 <__mulsi3>
 20013c8:	10800184 	addi	r2,r2,6
 20013cc:	00ffff04 	movi	r3,-4
 20013d0:	10c6703a 	and	r3,r2,r3
    gerar_populacao_inicial(populacao, total_individuos, funcao);

    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
    for(g = 0; g < geracoes; g++){
 20013d4:	0025883a 	mov	r18,zero

        t_individuo novos_individuos[descarte]; //vetor de novos individuos
 20013d8:	e0fff615 	stw	r3,-40(fp)
    gerar_populacao_inicial(populacao, total_individuos, funcao);

    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
    for(g = 0; g < geracoes; g++){
 20013dc:	e0bff417 	ldw	r2,-48(fp)
 20013e0:	9080420e 	bge	r18,r2,20014ec <executar+0x1c4>

        t_individuo novos_individuos[descarte]; //vetor de novos individuos
 20013e4:	e0bff617 	ldw	r2,-40(fp)
 20013e8:	d82f883a 	mov	r23,sp

        int i;
        for(i = 0; i < descarte; i++){
 20013ec:	002d883a 	mov	r22,zero
    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
    for(g = 0; g < geracoes; g++){

        t_individuo novos_individuos[descarte]; //vetor de novos individuos
 20013f0:	d8b7c83a 	sub	sp,sp,r2
 20013f4:	dd400404 	addi	r21,sp,16
        	struct t_individuo pai;
        	struct t_individuo mae;
        	struct t_individuo filho;

            //printf("SELECAO DE PAIS\n");
            op_selecao_de_pais(populacao, total_individuos, &pai, &mae);
 20013f8:	8009883a 	mov	r4,r16
 20013fc:	880b883a 	mov	r5,r17
    for(g = 0; g < geracoes; g++){

        t_individuo novos_individuos[descarte]; //vetor de novos individuos

        int i;
        for(i = 0; i < descarte; i++){
 2001400:	b5001c0e 	bge	r22,r20,2001474 <executar+0x14c>
        	struct t_individuo pai;
        	struct t_individuo mae;
        	struct t_individuo filho;

            //printf("SELECAO DE PAIS\n");
            op_selecao_de_pais(populacao, total_individuos, &pai, &mae);
 2001404:	e1bff104 	addi	r6,fp,-60
 2001408:	e1ffee04 	addi	r7,fp,-72
 200140c:	20011340 	call	2001134 <op_selecao_de_pais>
            //imprimir_individuo(pai);
            //imprimir_individuo(mae);

            //printf("RECOMBINACAO\n");
            op_recombinacao(pai,mae,&filho,funcao);
 2001410:	e0bfeb04 	addi	r2,fp,-84
 2001414:	d8800215 	stw	r2,8(sp)
 2001418:	dcc00315 	stw	r19,12(sp)
 200141c:	e0bfef17 	ldw	r2,-68(fp)
 2001420:	d8800015 	stw	r2,0(sp)
 2001424:	e0bff017 	ldw	r2,-64(fp)
 2001428:	d8800115 	stw	r2,4(sp)
 200142c:	e1ffee17 	ldw	r7,-72(fp)
 2001430:	e13ff117 	ldw	r4,-60(fp)
 2001434:	e17ff217 	ldw	r5,-56(fp)
 2001438:	e1bff317 	ldw	r6,-52(fp)
 200143c:	20010840 	call	2001084 <op_recombinacao>
            //imprimir_individuo(filho);

            //printf("MUTACAO\n");
            op_mutacao(&filho,prob_mutacao,funcao);
 2001440:	e17ff517 	ldw	r5,-44(fp)
 2001444:	980d883a 	mov	r6,r19
 2001448:	e13feb04 	addi	r4,fp,-84
 200144c:	2000fec0 	call	2000fec <op_mutacao>
 2001450:	b009883a 	mov	r4,r22
 2001454:	01400304 	movi	r5,12
 2001458:	2003c800 	call	2003c80 <__mulsi3>
            //imprimir_individuo(filho);

            novos_individuos[i] = filho;
 200145c:	a889883a 	add	r4,r21,r2
 2001460:	e17feb04 	addi	r5,fp,-84
 2001464:	01800304 	movi	r6,12
 2001468:	2007df40 	call	2007df4 <memcpy>
    for(g = 0; g < geracoes; g++){

        t_individuo novos_individuos[descarte]; //vetor de novos individuos

        int i;
        for(i = 0; i < descarte; i++){
 200146c:	b5800044 	addi	r22,r22,1
 2001470:	003fe106 	br	20013f8 <__alt_mem_onchip_memory2_0+0xfdff13f8>
            //imprimir_individuo(filho);

            novos_individuos[i] = filho;
        }

        mergeSort(populacao, total_individuos);
 2001474:	2000b0c0 	call	2000b0c <mergeSort>

        op_selecao_de_sobreviventes(populacao,total_individuos,novos_individuos,descarte);
 2001478:	a80d883a 	mov	r6,r21
 200147c:	a00f883a 	mov	r7,r20
 2001480:	8009883a 	mov	r4,r16
 2001484:	880b883a 	mov	r5,r17
 2001488:	20012a80 	call	20012a8 <op_selecao_de_sobreviventes>

        mergeSort(populacao, total_individuos);
 200148c:	880b883a 	mov	r5,r17
 2001490:	8009883a 	mov	r4,r16
 2001494:	2000b0c0 	call	2000b0c <mergeSort>

        // Saida de Dados
        printf("%d\t%f\t%f\t%f\n",g,populacao[0].x1,populacao[0].x2,populacao[0].fitness); //saida de dados
 2001498:	81000017 	ldw	r4,0(r16)
 200149c:	200742c0 	call	200742c <__extendsfdf2>
 20014a0:	81000117 	ldw	r4,4(r16)
 20014a4:	182b883a 	mov	r21,r3
 20014a8:	e0bff715 	stw	r2,-36(fp)
 20014ac:	200742c0 	call	200742c <__extendsfdf2>
 20014b0:	d8800015 	stw	r2,0(sp)
 20014b4:	d8c00115 	stw	r3,4(sp)
 20014b8:	81000217 	ldw	r4,8(r16)
 20014bc:	200742c0 	call	200742c <__extendsfdf2>
 20014c0:	d8800215 	stw	r2,8(sp)
 20014c4:	d8c00315 	stw	r3,12(sp)
 20014c8:	e1bff717 	ldw	r6,-36(fp)
 20014cc:	01008074 	movhi	r4,513
 20014d0:	900b883a 	mov	r5,r18
 20014d4:	2125db04 	addi	r4,r4,-26772
 20014d8:	a80f883a 	mov	r7,r21
 20014dc:	2007e580 	call	2007e58 <printf>
    gerar_populacao_inicial(populacao, total_individuos, funcao);

    int g = 0; //contador de geracoes

    printf("\n#\tx_1\t\tx_2\t\tf(x_1, x_2)\n"); //Saida de Dados
    for(g = 0; g < geracoes; g++){
 20014e0:	94800044 	addi	r18,r18,1
 20014e4:	b837883a 	mov	sp,r23
 20014e8:	003fbc06 	br	20013dc <__alt_mem_onchip_memory2_0+0xfdff13dc>
        // Saida de Dados
        printf("%d\t%f\t%f\t%f\n",g,populacao[0].x1,populacao[0].x2,populacao[0].fitness); //saida de dados

    }

}
 20014ec:	e6fff804 	addi	sp,fp,-32
 20014f0:	dfc00917 	ldw	ra,36(sp)
 20014f4:	df000817 	ldw	fp,32(sp)
 20014f8:	ddc00717 	ldw	r23,28(sp)
 20014fc:	dd800617 	ldw	r22,24(sp)
 2001500:	dd400517 	ldw	r21,20(sp)
 2001504:	dd000417 	ldw	r20,16(sp)
 2001508:	dcc00317 	ldw	r19,12(sp)
 200150c:	dc800217 	ldw	r18,8(sp)
 2001510:	dc400117 	ldw	r17,4(sp)
 2001514:	dc000017 	ldw	r16,0(sp)
 2001518:	dec00a04 	addi	sp,sp,40
 200151c:	f800283a 	ret

02001520 <menu>:
    int total_individuos = 1000;
    int descarte = 100;
    int geracoes = 10;
    float prob_mutacao = 0.1;

    printf("\n\nAlgoritmos Geneticos\n");
 2001520:	01008074 	movhi	r4,513
/*
 * No procedimento menu() abaixo que esta implementada a entrada de dados simples, onde:
 *  - mostra o nome de cada uma das funcoes do benchmark;
 *  - o usuario define qual funcao otimizar e parametros do algoritmo genetico.
 */
void menu(){
 2001524:	defffe04 	addi	sp,sp,-8
    int total_individuos = 1000;
    int descarte = 100;
    int geracoes = 10;
    float prob_mutacao = 0.1;

    printf("\n\nAlgoritmos Geneticos\n");
 2001528:	2125df04 	addi	r4,r4,-26756
/*
 * No procedimento menu() abaixo que esta implementada a entrada de dados simples, onde:
 *  - mostra o nome de cada uma das funcoes do benchmark;
 *  - o usuario define qual funcao otimizar e parametros do algoritmo genetico.
 */
void menu(){
 200152c:	dfc00115 	stw	ra,4(sp)
    int total_individuos = 1000;
    int descarte = 100;
    int geracoes = 10;
    float prob_mutacao = 0.1;

    printf("\n\nAlgoritmos Geneticos\n");
 2001530:	2007f240 	call	2007f24 <puts>
    printf("========== =========\n\n");
 2001534:	01008074 	movhi	r4,513
 2001538:	2125e504 	addi	r4,r4,-26732
 200153c:	2007f240 	call	2007f24 <puts>
    printf("1) De Jongs\n");
 2001540:	01008074 	movhi	r4,513
 2001544:	2125eb04 	addi	r4,r4,-26708
 2001548:	2007f240 	call	2007f24 <puts>
    printf("2) Rastrigin\n");
 200154c:	01008074 	movhi	r4,513
 2001550:	2125ee04 	addi	r4,r4,-26696
 2001554:	2007f240 	call	2007f24 <puts>
    printf("3) DropWave\n");
 2001558:	01008074 	movhi	r4,513
 200155c:	2125f204 	addi	r4,r4,-26680
 2001560:	2007f240 	call	2007f24 <puts>
    printf("4) Griegwangk\n");
 2001564:	01008074 	movhi	r4,513
 2001568:	2125f504 	addi	r4,r4,-26668
 200156c:	2007f240 	call	2007f24 <puts>
    printf("5) Shubert\n\n");
 2001570:	01008074 	movhi	r4,513
 2001574:	2125f904 	addi	r4,r4,-26652
 2001578:	2007f240 	call	2007f24 <puts>

    printf("Selecione a funcao a minimizar : ");
 200157c:	01008074 	movhi	r4,513
 2001580:	2125fc04 	addi	r4,r4,-26640
 2001584:	2007e580 	call	2007e58 <printf>
    if (funcao < 1 || funcao > 5){
        printf("\nOpcao Invalida! Opcoes possiveis: 1-5 !!!\n");
        return;
    }

    printf("Total de individuos da populacao : ");
 2001588:	01008074 	movhi	r4,513
 200158c:	21260504 	addi	r4,r4,-26604
 2001590:	2007e580 	call	2007e58 <printf>
    if (total_individuos < 1){
        printf("\nErro! O tamanho da populacao deve ser maior do que zero !!!\n");
        return;
    }

    printf("Total de descendentes a descartar : ");
 2001594:	01008074 	movhi	r4,513
 2001598:	21260e04 	addi	r4,r4,-26568
 200159c:	2007e580 	call	2007e58 <printf>
    if (descarte < 1){
        printf("\nErro! O total de descendentes a descartar deve ser maior do que zero !!!\n");
        return;
    }

    printf("Total de geracoes a evoluir : ");
 20015a0:	01008074 	movhi	r4,513
 20015a4:	21261804 	addi	r4,r4,-26528
 20015a8:	2007e580 	call	2007e58 <printf>
    if (geracoes < 1){
        printf("\nErro! O total de geracoes a evoluir deve ser maior do que zero !!!\n");
        return;
    }

    printf("Probabilidade de mutacao : ");
 20015ac:	01008074 	movhi	r4,513
 20015b0:	21262004 	addi	r4,r4,-26496
 20015b4:	2007e580 	call	2007e58 <printf>
    if (prob_mutacao < 0 || prob_mutacao > 1){
        printf("\nErro! A probabilidade de mutacao deve estar no intervalo entre 0 e 1 !!!\n");
        return;
    }

    executar(funcao, total_individuos, descarte, geracoes, prob_mutacao);
 20015b8:	008f7374 	movhi	r2,15821
 20015bc:	10b33344 	addi	r2,r2,-13107
 20015c0:	d8800015 	stw	r2,0(sp)
 20015c4:	01000044 	movi	r4,1
 20015c8:	0140fa04 	movi	r5,1000
 20015cc:	01801904 	movi	r6,100
 20015d0:	01c00284 	movi	r7,10
 20015d4:	20013280 	call	2001328 <executar>

}
 20015d8:	dfc00117 	ldw	ra,4(sp)
 20015dc:	dec00204 	addi	sp,sp,8
 20015e0:	f800283a 	ret

020015e4 <main>:

// ******************* MAIN ************************
int main(){
 20015e4:	deffff04 	addi	sp,sp,-4
 20015e8:	dfc00015 	stw	ra,0(sp)

    //int op = 1;

    //do{
        menu();
 20015ec:	20015200 	call	2001520 <menu>
        //printf("\nTecle:\n- 0 (Zero) para FINALIZAR;\n- qualquer digito (1-9) para Continuar:\n");
        //scanf("%d",&op);
    //} while (op != 0);

    return 0;
}
 20015f0:	0005883a 	mov	r2,zero
 20015f4:	dfc00017 	ldw	ra,0(sp)
 20015f8:	dec00104 	addi	sp,sp,4
 20015fc:	f800283a 	ret

02001600 <cos>:
 2001600:	00a00034 	movhi	r2,32768
 2001604:	defffa04 	addi	sp,sp,-24
 2001608:	10bfffc4 	addi	r2,r2,-1
 200160c:	00cffa74 	movhi	r3,16361
 2001610:	dfc00515 	stw	ra,20(sp)
 2001614:	2884703a 	and	r2,r5,r2
 2001618:	18c87ec4 	addi	r3,r3,8699
 200161c:	280f883a 	mov	r7,r5
 2001620:	1880170e 	bge	r3,r2,2001680 <cos+0x80>
 2001624:	00dffc34 	movhi	r3,32752
 2001628:	18ffffc4 	addi	r3,r3,-1
 200162c:	1880050e 	bge	r3,r2,2001644 <cos+0x44>
 2001630:	200d883a 	mov	r6,r4
 2001634:	2006a040 	call	2006a04 <__subdf3>
 2001638:	dfc00517 	ldw	ra,20(sp)
 200163c:	dec00604 	addi	sp,sp,24
 2001640:	f800283a 	ret
 2001644:	d9800104 	addi	r6,sp,4
 2001648:	200181c0 	call	200181c <__ieee754_rem_pio2>
 200164c:	108000cc 	andi	r2,r2,3
 2001650:	00c00044 	movi	r3,1
 2001654:	10c01726 	beq	r2,r3,20016b4 <cos+0xb4>
 2001658:	01000084 	movi	r4,2
 200165c:	11000e26 	beq	r2,r4,2001698 <cos+0x98>
 2001660:	10001c26 	beq	r2,zero,20016d4 <cos+0xd4>
 2001664:	d9000117 	ldw	r4,4(sp)
 2001668:	d9400217 	ldw	r5,8(sp)
 200166c:	d9800317 	ldw	r6,12(sp)
 2001670:	d9c00417 	ldw	r7,16(sp)
 2001674:	d8c00015 	stw	r3,0(sp)
 2001678:	20034200 	call	2003420 <__kernel_sin>
 200167c:	003fee06 	br	2001638 <__alt_mem_onchip_memory2_0+0xfdff1638>
 2001680:	000d883a 	mov	r6,zero
 2001684:	000f883a 	mov	r7,zero
 2001688:	200224c0 	call	200224c <__kernel_cos>
 200168c:	dfc00517 	ldw	ra,20(sp)
 2001690:	dec00604 	addi	sp,sp,24
 2001694:	f800283a 	ret
 2001698:	d9000117 	ldw	r4,4(sp)
 200169c:	d9400217 	ldw	r5,8(sp)
 20016a0:	d9800317 	ldw	r6,12(sp)
 20016a4:	d9c00417 	ldw	r7,16(sp)
 20016a8:	200224c0 	call	200224c <__kernel_cos>
 20016ac:	18e0003c 	xorhi	r3,r3,32768
 20016b0:	003fe106 	br	2001638 <__alt_mem_onchip_memory2_0+0xfdff1638>
 20016b4:	d9000117 	ldw	r4,4(sp)
 20016b8:	d9400217 	ldw	r5,8(sp)
 20016bc:	d9800317 	ldw	r6,12(sp)
 20016c0:	d9c00417 	ldw	r7,16(sp)
 20016c4:	d8800015 	stw	r2,0(sp)
 20016c8:	20034200 	call	2003420 <__kernel_sin>
 20016cc:	18e0003c 	xorhi	r3,r3,32768
 20016d0:	003fd906 	br	2001638 <__alt_mem_onchip_memory2_0+0xfdff1638>
 20016d4:	d9000117 	ldw	r4,4(sp)
 20016d8:	d9400217 	ldw	r5,8(sp)
 20016dc:	d9800317 	ldw	r6,12(sp)
 20016e0:	d9c00417 	ldw	r7,16(sp)
 20016e4:	200224c0 	call	200224c <__kernel_cos>
 20016e8:	003fd306 	br	2001638 <__alt_mem_onchip_memory2_0+0xfdff1638>

020016ec <sqrt>:
 20016ec:	defff104 	addi	sp,sp,-60
 20016f0:	dd000d15 	stw	r20,52(sp)
 20016f4:	05008074 	movhi	r20,513
 20016f8:	dcc00c15 	stw	r19,48(sp)
 20016fc:	dc800b15 	stw	r18,44(sp)
 2001700:	dc400a15 	stw	r17,40(sp)
 2001704:	dc000915 	stw	r16,36(sp)
 2001708:	dfc00e15 	stw	ra,56(sp)
 200170c:	a5281904 	addi	r20,r20,-24476
 2001710:	2027883a 	mov	r19,r4
 2001714:	2825883a 	mov	r18,r5
 2001718:	2001fb80 	call	2001fb8 <__ieee754_sqrt>
 200171c:	1821883a 	mov	r16,r3
 2001720:	a0c00017 	ldw	r3,0(r20)
 2001724:	1023883a 	mov	r17,r2
 2001728:	00bfffc4 	movi	r2,-1
 200172c:	18800a26 	beq	r3,r2,2001758 <sqrt+0x6c>
 2001730:	9809883a 	mov	r4,r19
 2001734:	900b883a 	mov	r5,r18
 2001738:	20038f00 	call	20038f0 <__fpclassifyd>
 200173c:	10000626 	beq	r2,zero,2001758 <sqrt+0x6c>
 2001740:	9809883a 	mov	r4,r19
 2001744:	900b883a 	mov	r5,r18
 2001748:	000d883a 	mov	r6,zero
 200174c:	000f883a 	mov	r7,zero
 2001750:	20060b80 	call	20060b8 <__ledf2>
 2001754:	10000a16 	blt	r2,zero,2001780 <sqrt+0x94>
 2001758:	8805883a 	mov	r2,r17
 200175c:	8007883a 	mov	r3,r16
 2001760:	dfc00e17 	ldw	ra,56(sp)
 2001764:	dd000d17 	ldw	r20,52(sp)
 2001768:	dcc00c17 	ldw	r19,48(sp)
 200176c:	dc800b17 	ldw	r18,44(sp)
 2001770:	dc400a17 	ldw	r17,40(sp)
 2001774:	dc000917 	ldw	r16,36(sp)
 2001778:	dec00f04 	addi	sp,sp,60
 200177c:	f800283a 	ret
 2001780:	00800044 	movi	r2,1
 2001784:	d8800015 	stw	r2,0(sp)
 2001788:	a4000017 	ldw	r16,0(r20)
 200178c:	00808074 	movhi	r2,513
 2001790:	10a62704 	addi	r2,r2,-26468
 2001794:	d8800115 	stw	r2,4(sp)
 2001798:	d8000815 	stw	zero,32(sp)
 200179c:	dcc00415 	stw	r19,16(sp)
 20017a0:	dc800515 	stw	r18,20(sp)
 20017a4:	dcc00215 	stw	r19,8(sp)
 20017a8:	dc800315 	stw	r18,12(sp)
 20017ac:	80000a1e 	bne	r16,zero,20017d8 <sqrt+0xec>
 20017b0:	d8000615 	stw	zero,24(sp)
 20017b4:	d8000715 	stw	zero,28(sp)
 20017b8:	d809883a 	mov	r4,sp
 20017bc:	20039640 	call	2003964 <matherr>
 20017c0:	10000e26 	beq	r2,zero,20017fc <sqrt+0x110>
 20017c4:	d8800817 	ldw	r2,32(sp)
 20017c8:	1000101e 	bne	r2,zero,200180c <sqrt+0x120>
 20017cc:	d8800617 	ldw	r2,24(sp)
 20017d0:	d8c00717 	ldw	r3,28(sp)
 20017d4:	003fe206 	br	2001760 <__alt_mem_onchip_memory2_0+0xfdff1760>
 20017d8:	0009883a 	mov	r4,zero
 20017dc:	000b883a 	mov	r5,zero
 20017e0:	000d883a 	mov	r6,zero
 20017e4:	000f883a 	mov	r7,zero
 20017e8:	20055d40 	call	20055d4 <__divdf3>
 20017ec:	d8800615 	stw	r2,24(sp)
 20017f0:	d8c00715 	stw	r3,28(sp)
 20017f4:	00800084 	movi	r2,2
 20017f8:	80bfef1e 	bne	r16,r2,20017b8 <__alt_mem_onchip_memory2_0+0xfdff17b8>
 20017fc:	20077380 	call	2007738 <__errno>
 2001800:	00c00844 	movi	r3,33
 2001804:	10c00015 	stw	r3,0(r2)
 2001808:	003fee06 	br	20017c4 <__alt_mem_onchip_memory2_0+0xfdff17c4>
 200180c:	20077380 	call	2007738 <__errno>
 2001810:	d8c00817 	ldw	r3,32(sp)
 2001814:	10c00015 	stw	r3,0(r2)
 2001818:	003fec06 	br	20017cc <__alt_mem_onchip_memory2_0+0xfdff17cc>

0200181c <__ieee754_rem_pio2>:
 200181c:	02200034 	movhi	r8,32768
 2001820:	deffea04 	addi	sp,sp,-88
 2001824:	423fffc4 	addi	r8,r8,-1
 2001828:	00cffa74 	movhi	r3,16361
 200182c:	ddc01315 	stw	r23,76(sp)
 2001830:	dc400d15 	stw	r17,52(sp)
 2001834:	dfc01515 	stw	ra,84(sp)
 2001838:	df001415 	stw	fp,80(sp)
 200183c:	dd801215 	stw	r22,72(sp)
 2001840:	dd401115 	stw	r21,68(sp)
 2001844:	dd001015 	stw	r20,64(sp)
 2001848:	dcc00f15 	stw	r19,60(sp)
 200184c:	dc800e15 	stw	r18,56(sp)
 2001850:	dc000c15 	stw	r16,48(sp)
 2001854:	2a2e703a 	and	r23,r5,r8
 2001858:	18c87ec4 	addi	r3,r3,8699
 200185c:	2823883a 	mov	r17,r5
 2001860:	1dc0790e 	bge	r3,r23,2001a48 <__ieee754_rem_pio2+0x22c>
 2001864:	009000f4 	movhi	r2,16387
 2001868:	10b65ec4 	addi	r2,r2,-9861
 200186c:	3021883a 	mov	r16,r6
 2001870:	2027883a 	mov	r19,r4
 2001874:	15c02316 	blt	r2,r23,2001904 <__ieee754_rem_pio2+0xe8>
 2001878:	01cffe74 	movhi	r7,16377
 200187c:	39c87ec4 	addi	r7,r7,8699
 2001880:	01951034 	movhi	r6,21568
 2001884:	0141800e 	bge	zero,r5,2001e88 <__ieee754_rem_pio2+0x66c>
 2001888:	2006a040 	call	2006a04 <__subdf3>
 200188c:	1025883a 	mov	r18,r2
 2001890:	008ffe74 	movhi	r2,16377
 2001894:	10887ec4 	addi	r2,r2,8699
 2001898:	1823883a 	mov	r17,r3
 200189c:	b8808426 	beq	r23,r2,2001ab0 <__ieee754_rem_pio2+0x294>
 20018a0:	018698b4 	movhi	r6,6754
 20018a4:	01cf7474 	movhi	r7,15825
 20018a8:	3198cc44 	addi	r6,r6,25393
 20018ac:	39ed1844 	addi	r7,r7,-19359
 20018b0:	9009883a 	mov	r4,r18
 20018b4:	180b883a 	mov	r5,r3
 20018b8:	2006a040 	call	2006a04 <__subdf3>
 20018bc:	100d883a 	mov	r6,r2
 20018c0:	180f883a 	mov	r7,r3
 20018c4:	9009883a 	mov	r4,r18
 20018c8:	880b883a 	mov	r5,r17
 20018cc:	80800015 	stw	r2,0(r16)
 20018d0:	80c00115 	stw	r3,4(r16)
 20018d4:	2006a040 	call	2006a04 <__subdf3>
 20018d8:	018698b4 	movhi	r6,6754
 20018dc:	01cf7474 	movhi	r7,15825
 20018e0:	1009883a 	mov	r4,r2
 20018e4:	180b883a 	mov	r5,r3
 20018e8:	3198cc44 	addi	r6,r6,25393
 20018ec:	39ed1844 	addi	r7,r7,-19359
 20018f0:	2006a040 	call	2006a04 <__subdf3>
 20018f4:	80800215 	stw	r2,8(r16)
 20018f8:	80c00315 	stw	r3,12(r16)
 20018fc:	00800044 	movi	r2,1
 2001900:	00005606 	br	2001a5c <__ieee754_rem_pio2+0x240>
 2001904:	00904e74 	movhi	r2,16697
 2001908:	10887ec4 	addi	r2,r2,8699
 200190c:	15c0890e 	bge	r2,r23,2001b34 <__ieee754_rem_pio2+0x318>
 2001910:	009ffc34 	movhi	r2,32752
 2001914:	10bfffc4 	addi	r2,r2,-1
 2001918:	15c05c16 	blt	r2,r23,2001a8c <__ieee754_rem_pio2+0x270>
 200191c:	b829d53a 	srai	r20,r23,20
 2001920:	a53efa84 	addi	r20,r20,-1046
 2001924:	a024953a 	slli	r18,r20,20
 2001928:	bca5c83a 	sub	r18,r23,r18
 200192c:	900b883a 	mov	r5,r18
 2001930:	20072d40 	call	20072d4 <__fixdfsi>
 2001934:	1009883a 	mov	r4,r2
 2001938:	200735c0 	call	200735c <__floatsidf>
 200193c:	9809883a 	mov	r4,r19
 2001940:	900b883a 	mov	r5,r18
 2001944:	100d883a 	mov	r6,r2
 2001948:	180f883a 	mov	r7,r3
 200194c:	d8800215 	stw	r2,8(sp)
 2001950:	d8c00315 	stw	r3,12(sp)
 2001954:	2006a040 	call	2006a04 <__subdf3>
 2001958:	000d883a 	mov	r6,zero
 200195c:	01d05c34 	movhi	r7,16752
 2001960:	1009883a 	mov	r4,r2
 2001964:	180b883a 	mov	r5,r3
 2001968:	20061980 	call	2006198 <__muldf3>
 200196c:	180b883a 	mov	r5,r3
 2001970:	1009883a 	mov	r4,r2
 2001974:	182b883a 	mov	r21,r3
 2001978:	102d883a 	mov	r22,r2
 200197c:	20072d40 	call	20072d4 <__fixdfsi>
 2001980:	1009883a 	mov	r4,r2
 2001984:	200735c0 	call	200735c <__floatsidf>
 2001988:	100d883a 	mov	r6,r2
 200198c:	180f883a 	mov	r7,r3
 2001990:	b009883a 	mov	r4,r22
 2001994:	a80b883a 	mov	r5,r21
 2001998:	1027883a 	mov	r19,r2
 200199c:	1825883a 	mov	r18,r3
 20019a0:	d8800415 	stw	r2,16(sp)
 20019a4:	d8c00515 	stw	r3,20(sp)
 20019a8:	2006a040 	call	2006a04 <__subdf3>
 20019ac:	1009883a 	mov	r4,r2
 20019b0:	180b883a 	mov	r5,r3
 20019b4:	000d883a 	mov	r6,zero
 20019b8:	01d05c34 	movhi	r7,16752
 20019bc:	20061980 	call	2006198 <__muldf3>
 20019c0:	1009883a 	mov	r4,r2
 20019c4:	180b883a 	mov	r5,r3
 20019c8:	000d883a 	mov	r6,zero
 20019cc:	000f883a 	mov	r7,zero
 20019d0:	d8800615 	stw	r2,24(sp)
 20019d4:	d8c00715 	stw	r3,28(sp)
 20019d8:	2005f540 	call	2005f54 <__eqdf2>
 20019dc:	1001491e 	bne	r2,zero,2001f04 <__ieee754_rem_pio2+0x6e8>
 20019e0:	000f883a 	mov	r7,zero
 20019e4:	9809883a 	mov	r4,r19
 20019e8:	900b883a 	mov	r5,r18
 20019ec:	000d883a 	mov	r6,zero
 20019f0:	2005f540 	call	2005f54 <__eqdf2>
 20019f4:	100f003a 	cmpeq	r7,r2,zero
 20019f8:	00800084 	movi	r2,2
 20019fc:	11cfc83a 	sub	r7,r2,r7
 2001a00:	00800084 	movi	r2,2
 2001a04:	d8800015 	stw	r2,0(sp)
 2001a08:	00808074 	movhi	r2,513
 2001a0c:	10a64904 	addi	r2,r2,-26332
 2001a10:	d8800115 	stw	r2,4(sp)
 2001a14:	d9000204 	addi	r4,sp,8
 2001a18:	800b883a 	mov	r5,r16
 2001a1c:	a00d883a 	mov	r6,r20
 2001a20:	20026f00 	call	20026f0 <__kernel_rem_pio2>
 2001a24:	88000d0e 	bge	r17,zero,2001a5c <__ieee754_rem_pio2+0x240>
 2001a28:	81000117 	ldw	r4,4(r16)
 2001a2c:	80c00317 	ldw	r3,12(r16)
 2001a30:	0085c83a 	sub	r2,zero,r2
 2001a34:	2120003c 	xorhi	r4,r4,32768
 2001a38:	18e0003c 	xorhi	r3,r3,32768
 2001a3c:	81000115 	stw	r4,4(r16)
 2001a40:	80c00315 	stw	r3,12(r16)
 2001a44:	00000506 	br	2001a5c <__ieee754_rem_pio2+0x240>
 2001a48:	31000015 	stw	r4,0(r6)
 2001a4c:	31400115 	stw	r5,4(r6)
 2001a50:	30000215 	stw	zero,8(r6)
 2001a54:	30000315 	stw	zero,12(r6)
 2001a58:	0005883a 	mov	r2,zero
 2001a5c:	dfc01517 	ldw	ra,84(sp)
 2001a60:	df001417 	ldw	fp,80(sp)
 2001a64:	ddc01317 	ldw	r23,76(sp)
 2001a68:	dd801217 	ldw	r22,72(sp)
 2001a6c:	dd401117 	ldw	r21,68(sp)
 2001a70:	dd001017 	ldw	r20,64(sp)
 2001a74:	dcc00f17 	ldw	r19,60(sp)
 2001a78:	dc800e17 	ldw	r18,56(sp)
 2001a7c:	dc400d17 	ldw	r17,52(sp)
 2001a80:	dc000c17 	ldw	r16,48(sp)
 2001a84:	dec01604 	addi	sp,sp,88
 2001a88:	f800283a 	ret
 2001a8c:	200d883a 	mov	r6,r4
 2001a90:	280f883a 	mov	r7,r5
 2001a94:	2006a040 	call	2006a04 <__subdf3>
 2001a98:	80800215 	stw	r2,8(r16)
 2001a9c:	80800015 	stw	r2,0(r16)
 2001aa0:	80c00315 	stw	r3,12(r16)
 2001aa4:	80c00115 	stw	r3,4(r16)
 2001aa8:	0005883a 	mov	r2,zero
 2001aac:	003feb06 	br	2001a5c <__alt_mem_onchip_memory2_0+0xfdff1a5c>
 2001ab0:	01cf7474 	movhi	r7,15825
 2001ab4:	9009883a 	mov	r4,r18
 2001ab8:	39ed1844 	addi	r7,r7,-19359
 2001abc:	01869834 	movhi	r6,6752
 2001ac0:	180b883a 	mov	r5,r3
 2001ac4:	2006a040 	call	2006a04 <__subdf3>
 2001ac8:	018b80f4 	movhi	r6,11779
 2001acc:	01cee8f4 	movhi	r7,15267
 2001ad0:	1009883a 	mov	r4,r2
 2001ad4:	180b883a 	mov	r5,r3
 2001ad8:	319c1cc4 	addi	r6,r6,28787
 2001adc:	39c66284 	addi	r7,r7,6538
 2001ae0:	1025883a 	mov	r18,r2
 2001ae4:	1823883a 	mov	r17,r3
 2001ae8:	2006a040 	call	2006a04 <__subdf3>
 2001aec:	100d883a 	mov	r6,r2
 2001af0:	180f883a 	mov	r7,r3
 2001af4:	9009883a 	mov	r4,r18
 2001af8:	880b883a 	mov	r5,r17
 2001afc:	80800015 	stw	r2,0(r16)
 2001b00:	80c00115 	stw	r3,4(r16)
 2001b04:	2006a040 	call	2006a04 <__subdf3>
 2001b08:	018b80f4 	movhi	r6,11779
 2001b0c:	01cee8f4 	movhi	r7,15267
 2001b10:	1009883a 	mov	r4,r2
 2001b14:	180b883a 	mov	r5,r3
 2001b18:	319c1cc4 	addi	r6,r6,28787
 2001b1c:	39c66284 	addi	r7,r7,6538
 2001b20:	2006a040 	call	2006a04 <__subdf3>
 2001b24:	80800215 	stw	r2,8(r16)
 2001b28:	80c00315 	stw	r3,12(r16)
 2001b2c:	00800044 	movi	r2,1
 2001b30:	003fca06 	br	2001a5c <__alt_mem_onchip_memory2_0+0xfdff1a5c>
 2001b34:	20036e80 	call	20036e8 <fabs>
 2001b38:	019b72b4 	movhi	r6,28106
 2001b3c:	01cff934 	movhi	r7,16356
 2001b40:	1009883a 	mov	r4,r2
 2001b44:	180b883a 	mov	r5,r3
 2001b48:	31b220c4 	addi	r6,r6,-14205
 2001b4c:	39d7cc04 	addi	r7,r7,24368
 2001b50:	102d883a 	mov	r22,r2
 2001b54:	182b883a 	mov	r21,r3
 2001b58:	20061980 	call	2006198 <__muldf3>
 2001b5c:	000d883a 	mov	r6,zero
 2001b60:	01cff834 	movhi	r7,16352
 2001b64:	1009883a 	mov	r4,r2
 2001b68:	180b883a 	mov	r5,r3
 2001b6c:	2004d380 	call	2004d38 <__adddf3>
 2001b70:	180b883a 	mov	r5,r3
 2001b74:	1009883a 	mov	r4,r2
 2001b78:	20072d40 	call	20072d4 <__fixdfsi>
 2001b7c:	1009883a 	mov	r4,r2
 2001b80:	1025883a 	mov	r18,r2
 2001b84:	200735c0 	call	200735c <__floatsidf>
 2001b88:	01cffe74 	movhi	r7,16377
 2001b8c:	1009883a 	mov	r4,r2
 2001b90:	180b883a 	mov	r5,r3
 2001b94:	39c87ec4 	addi	r7,r7,8699
 2001b98:	01951034 	movhi	r6,21568
 2001b9c:	1029883a 	mov	r20,r2
 2001ba0:	1827883a 	mov	r19,r3
 2001ba4:	20061980 	call	2006198 <__muldf3>
 2001ba8:	b009883a 	mov	r4,r22
 2001bac:	a80b883a 	mov	r5,r21
 2001bb0:	100d883a 	mov	r6,r2
 2001bb4:	180f883a 	mov	r7,r3
 2001bb8:	2006a040 	call	2006a04 <__subdf3>
 2001bbc:	018698b4 	movhi	r6,6754
 2001bc0:	01cf7474 	movhi	r7,15825
 2001bc4:	a009883a 	mov	r4,r20
 2001bc8:	3198cc44 	addi	r6,r6,25393
 2001bcc:	39ed1844 	addi	r7,r7,-19359
 2001bd0:	980b883a 	mov	r5,r19
 2001bd4:	1039883a 	mov	fp,r2
 2001bd8:	d8c00815 	stw	r3,32(sp)
 2001bdc:	20061980 	call	2006198 <__muldf3>
 2001be0:	010007c4 	movi	r4,31
 2001be4:	e017883a 	mov	r11,fp
 2001be8:	da800817 	ldw	r10,32(sp)
 2001bec:	102d883a 	mov	r22,r2
 2001bf0:	182b883a 	mov	r21,r3
 2001bf4:	24802816 	blt	r4,r18,2001c98 <__ieee754_rem_pio2+0x47c>
 2001bf8:	927fffc4 	addi	r9,r18,-1
 2001bfc:	4a53883a 	add	r9,r9,r9
 2001c00:	01008074 	movhi	r4,513
 2001c04:	21262904 	addi	r4,r4,-26460
 2001c08:	4a53883a 	add	r9,r9,r9
 2001c0c:	2253883a 	add	r9,r4,r9
 2001c10:	49000017 	ldw	r4,0(r9)
 2001c14:	25c02026 	beq	r4,r23,2001c98 <__ieee754_rem_pio2+0x47c>
 2001c18:	e009883a 	mov	r4,fp
 2001c1c:	500b883a 	mov	r5,r10
 2001c20:	100d883a 	mov	r6,r2
 2001c24:	180f883a 	mov	r7,r3
 2001c28:	da800b15 	stw	r10,44(sp)
 2001c2c:	df000a15 	stw	fp,40(sp)
 2001c30:	2006a040 	call	2006a04 <__subdf3>
 2001c34:	da800b17 	ldw	r10,44(sp)
 2001c38:	dac00a17 	ldw	r11,40(sp)
 2001c3c:	1019883a 	mov	r12,r2
 2001c40:	1813883a 	mov	r9,r3
 2001c44:	80800015 	stw	r2,0(r16)
 2001c48:	80c00115 	stw	r3,4(r16)
 2001c4c:	600d883a 	mov	r6,r12
 2001c50:	480f883a 	mov	r7,r9
 2001c54:	5809883a 	mov	r4,r11
 2001c58:	500b883a 	mov	r5,r10
 2001c5c:	da400b15 	stw	r9,44(sp)
 2001c60:	db000a15 	stw	r12,40(sp)
 2001c64:	2006a040 	call	2006a04 <__subdf3>
 2001c68:	1009883a 	mov	r4,r2
 2001c6c:	180b883a 	mov	r5,r3
 2001c70:	b00d883a 	mov	r6,r22
 2001c74:	a80f883a 	mov	r7,r21
 2001c78:	2006a040 	call	2006a04 <__subdf3>
 2001c7c:	80800215 	stw	r2,8(r16)
 2001c80:	80c00315 	stw	r3,12(r16)
 2001c84:	da400b17 	ldw	r9,44(sp)
 2001c88:	db000a17 	ldw	r12,40(sp)
 2001c8c:	88009f16 	blt	r17,zero,2001f0c <__ieee754_rem_pio2+0x6f0>
 2001c90:	9005883a 	mov	r2,r18
 2001c94:	003f7106 	br	2001a5c <__alt_mem_onchip_memory2_0+0xfdff1a5c>
 2001c98:	d9400817 	ldw	r5,32(sp)
 2001c9c:	e009883a 	mov	r4,fp
 2001ca0:	100d883a 	mov	r6,r2
 2001ca4:	180f883a 	mov	r7,r3
 2001ca8:	da800b15 	stw	r10,44(sp)
 2001cac:	dac00a15 	stw	r11,40(sp)
 2001cb0:	2006a040 	call	2006a04 <__subdf3>
 2001cb4:	1019883a 	mov	r12,r2
 2001cb8:	1804d53a 	srli	r2,r3,20
 2001cbc:	b811d53a 	srai	r8,r23,20
 2001cc0:	1813883a 	mov	r9,r3
 2001cc4:	1081ffcc 	andi	r2,r2,2047
 2001cc8:	80c00115 	stw	r3,4(r16)
 2001ccc:	83000015 	stw	r12,0(r16)
 2001cd0:	4085c83a 	sub	r2,r8,r2
 2001cd4:	00c00404 	movi	r3,16
 2001cd8:	da800b17 	ldw	r10,44(sp)
 2001cdc:	dac00a17 	ldw	r11,40(sp)
 2001ce0:	18bfda0e 	bge	r3,r2,2001c4c <__alt_mem_onchip_memory2_0+0xfdff1c4c>
 2001ce4:	01cf7474 	movhi	r7,15825
 2001ce8:	39ed1844 	addi	r7,r7,-19359
 2001cec:	a009883a 	mov	r4,r20
 2001cf0:	980b883a 	mov	r5,r19
 2001cf4:	01869834 	movhi	r6,6752
 2001cf8:	da000a15 	stw	r8,40(sp)
 2001cfc:	20061980 	call	2006198 <__muldf3>
 2001d00:	d9400817 	ldw	r5,32(sp)
 2001d04:	e009883a 	mov	r4,fp
 2001d08:	100d883a 	mov	r6,r2
 2001d0c:	180f883a 	mov	r7,r3
 2001d10:	102d883a 	mov	r22,r2
 2001d14:	182b883a 	mov	r21,r3
 2001d18:	2006a040 	call	2006a04 <__subdf3>
 2001d1c:	d9400817 	ldw	r5,32(sp)
 2001d20:	e009883a 	mov	r4,fp
 2001d24:	100d883a 	mov	r6,r2
 2001d28:	180f883a 	mov	r7,r3
 2001d2c:	182f883a 	mov	r23,r3
 2001d30:	d8800915 	stw	r2,36(sp)
 2001d34:	2006a040 	call	2006a04 <__subdf3>
 2001d38:	b00d883a 	mov	r6,r22
 2001d3c:	a80f883a 	mov	r7,r21
 2001d40:	1009883a 	mov	r4,r2
 2001d44:	180b883a 	mov	r5,r3
 2001d48:	2006a040 	call	2006a04 <__subdf3>
 2001d4c:	018b80f4 	movhi	r6,11779
 2001d50:	01cee8f4 	movhi	r7,15267
 2001d54:	a009883a 	mov	r4,r20
 2001d58:	980b883a 	mov	r5,r19
 2001d5c:	319c1cc4 	addi	r6,r6,28787
 2001d60:	39c66284 	addi	r7,r7,6538
 2001d64:	102d883a 	mov	r22,r2
 2001d68:	182b883a 	mov	r21,r3
 2001d6c:	20061980 	call	2006198 <__muldf3>
 2001d70:	b00d883a 	mov	r6,r22
 2001d74:	a80f883a 	mov	r7,r21
 2001d78:	1009883a 	mov	r4,r2
 2001d7c:	180b883a 	mov	r5,r3
 2001d80:	2006a040 	call	2006a04 <__subdf3>
 2001d84:	d9000917 	ldw	r4,36(sp)
 2001d88:	b80b883a 	mov	r5,r23
 2001d8c:	100d883a 	mov	r6,r2
 2001d90:	180f883a 	mov	r7,r3
 2001d94:	102d883a 	mov	r22,r2
 2001d98:	182b883a 	mov	r21,r3
 2001d9c:	2006a040 	call	2006a04 <__subdf3>
 2001da0:	1019883a 	mov	r12,r2
 2001da4:	1804d53a 	srli	r2,r3,20
 2001da8:	da000a17 	ldw	r8,40(sp)
 2001dac:	83000015 	stw	r12,0(r16)
 2001db0:	1081ffcc 	andi	r2,r2,2047
 2001db4:	4091c83a 	sub	r8,r8,r2
 2001db8:	80c00115 	stw	r3,4(r16)
 2001dbc:	00800c44 	movi	r2,49
 2001dc0:	1813883a 	mov	r9,r3
 2001dc4:	1200790e 	bge	r2,r8,2001fac <__ieee754_rem_pio2+0x790>
 2001dc8:	01cee8f4 	movhi	r7,15267
 2001dcc:	39c66284 	addi	r7,r7,6538
 2001dd0:	a009883a 	mov	r4,r20
 2001dd4:	980b883a 	mov	r5,r19
 2001dd8:	018b8034 	movhi	r6,11776
 2001ddc:	20061980 	call	2006198 <__muldf3>
 2001de0:	d9000917 	ldw	r4,36(sp)
 2001de4:	b80b883a 	mov	r5,r23
 2001de8:	100d883a 	mov	r6,r2
 2001dec:	180f883a 	mov	r7,r3
 2001df0:	102d883a 	mov	r22,r2
 2001df4:	182b883a 	mov	r21,r3
 2001df8:	2006a040 	call	2006a04 <__subdf3>
 2001dfc:	d9000917 	ldw	r4,36(sp)
 2001e00:	b80b883a 	mov	r5,r23
 2001e04:	100d883a 	mov	r6,r2
 2001e08:	180f883a 	mov	r7,r3
 2001e0c:	d8c00b15 	stw	r3,44(sp)
 2001e10:	d8800a15 	stw	r2,40(sp)
 2001e14:	2006a040 	call	2006a04 <__subdf3>
 2001e18:	b00d883a 	mov	r6,r22
 2001e1c:	a80f883a 	mov	r7,r21
 2001e20:	1009883a 	mov	r4,r2
 2001e24:	180b883a 	mov	r5,r3
 2001e28:	2006a040 	call	2006a04 <__subdf3>
 2001e2c:	01894834 	movhi	r6,9504
 2001e30:	01ce5f34 	movhi	r7,14716
 2001e34:	a009883a 	mov	r4,r20
 2001e38:	980b883a 	mov	r5,r19
 2001e3c:	31927044 	addi	r6,r6,18881
 2001e40:	39e0e684 	addi	r7,r7,-31846
 2001e44:	102d883a 	mov	r22,r2
 2001e48:	182b883a 	mov	r21,r3
 2001e4c:	20061980 	call	2006198 <__muldf3>
 2001e50:	b00d883a 	mov	r6,r22
 2001e54:	a80f883a 	mov	r7,r21
 2001e58:	1009883a 	mov	r4,r2
 2001e5c:	180b883a 	mov	r5,r3
 2001e60:	2006a040 	call	2006a04 <__subdf3>
 2001e64:	dac00a17 	ldw	r11,40(sp)
 2001e68:	da800b17 	ldw	r10,44(sp)
 2001e6c:	102d883a 	mov	r22,r2
 2001e70:	182b883a 	mov	r21,r3
 2001e74:	5809883a 	mov	r4,r11
 2001e78:	500b883a 	mov	r5,r10
 2001e7c:	100d883a 	mov	r6,r2
 2001e80:	180f883a 	mov	r7,r3
 2001e84:	003f6a06 	br	2001c30 <__alt_mem_onchip_memory2_0+0xfdff1c30>
 2001e88:	2004d380 	call	2004d38 <__adddf3>
 2001e8c:	1025883a 	mov	r18,r2
 2001e90:	008ffe74 	movhi	r2,16377
 2001e94:	10887ec4 	addi	r2,r2,8699
 2001e98:	1823883a 	mov	r17,r3
 2001e9c:	b8802226 	beq	r23,r2,2001f28 <__ieee754_rem_pio2+0x70c>
 2001ea0:	018698b4 	movhi	r6,6754
 2001ea4:	01cf7474 	movhi	r7,15825
 2001ea8:	3198cc44 	addi	r6,r6,25393
 2001eac:	39ed1844 	addi	r7,r7,-19359
 2001eb0:	9009883a 	mov	r4,r18
 2001eb4:	180b883a 	mov	r5,r3
 2001eb8:	2004d380 	call	2004d38 <__adddf3>
 2001ebc:	100d883a 	mov	r6,r2
 2001ec0:	180f883a 	mov	r7,r3
 2001ec4:	9009883a 	mov	r4,r18
 2001ec8:	880b883a 	mov	r5,r17
 2001ecc:	80800015 	stw	r2,0(r16)
 2001ed0:	80c00115 	stw	r3,4(r16)
 2001ed4:	2006a040 	call	2006a04 <__subdf3>
 2001ed8:	018698b4 	movhi	r6,6754
 2001edc:	01cf7474 	movhi	r7,15825
 2001ee0:	1009883a 	mov	r4,r2
 2001ee4:	180b883a 	mov	r5,r3
 2001ee8:	3198cc44 	addi	r6,r6,25393
 2001eec:	39ed1844 	addi	r7,r7,-19359
 2001ef0:	2004d380 	call	2004d38 <__adddf3>
 2001ef4:	80800215 	stw	r2,8(r16)
 2001ef8:	80c00315 	stw	r3,12(r16)
 2001efc:	00bfffc4 	movi	r2,-1
 2001f00:	003ed606 	br	2001a5c <__alt_mem_onchip_memory2_0+0xfdff1a5c>
 2001f04:	01c000c4 	movi	r7,3
 2001f08:	003ebd06 	br	2001a00 <__alt_mem_onchip_memory2_0+0xfdff1a00>
 2001f0c:	4a60003c 	xorhi	r9,r9,32768
 2001f10:	18e0003c 	xorhi	r3,r3,32768
 2001f14:	83000015 	stw	r12,0(r16)
 2001f18:	82400115 	stw	r9,4(r16)
 2001f1c:	80c00315 	stw	r3,12(r16)
 2001f20:	0485c83a 	sub	r2,zero,r18
 2001f24:	003ecd06 	br	2001a5c <__alt_mem_onchip_memory2_0+0xfdff1a5c>
 2001f28:	01cf7474 	movhi	r7,15825
 2001f2c:	9009883a 	mov	r4,r18
 2001f30:	39ed1844 	addi	r7,r7,-19359
 2001f34:	01869834 	movhi	r6,6752
 2001f38:	180b883a 	mov	r5,r3
 2001f3c:	2004d380 	call	2004d38 <__adddf3>
 2001f40:	018b80f4 	movhi	r6,11779
 2001f44:	01cee8f4 	movhi	r7,15267
 2001f48:	1009883a 	mov	r4,r2
 2001f4c:	180b883a 	mov	r5,r3
 2001f50:	319c1cc4 	addi	r6,r6,28787
 2001f54:	39c66284 	addi	r7,r7,6538
 2001f58:	1025883a 	mov	r18,r2
 2001f5c:	1823883a 	mov	r17,r3
 2001f60:	2004d380 	call	2004d38 <__adddf3>
 2001f64:	100d883a 	mov	r6,r2
 2001f68:	180f883a 	mov	r7,r3
 2001f6c:	9009883a 	mov	r4,r18
 2001f70:	880b883a 	mov	r5,r17
 2001f74:	80800015 	stw	r2,0(r16)
 2001f78:	80c00115 	stw	r3,4(r16)
 2001f7c:	2006a040 	call	2006a04 <__subdf3>
 2001f80:	018b80f4 	movhi	r6,11779
 2001f84:	01cee8f4 	movhi	r7,15267
 2001f88:	1009883a 	mov	r4,r2
 2001f8c:	180b883a 	mov	r5,r3
 2001f90:	319c1cc4 	addi	r6,r6,28787
 2001f94:	39c66284 	addi	r7,r7,6538
 2001f98:	2004d380 	call	2004d38 <__adddf3>
 2001f9c:	80800215 	stw	r2,8(r16)
 2001fa0:	80c00315 	stw	r3,12(r16)
 2001fa4:	00bfffc4 	movi	r2,-1
 2001fa8:	003eac06 	br	2001a5c <__alt_mem_onchip_memory2_0+0xfdff1a5c>
 2001fac:	dac00917 	ldw	r11,36(sp)
 2001fb0:	b815883a 	mov	r10,r23
 2001fb4:	003f2506 	br	2001c4c <__alt_mem_onchip_memory2_0+0xfdff1c4c>

02001fb8 <__ieee754_sqrt>:
 2001fb8:	defffd04 	addi	sp,sp,-12
 2001fbc:	dc400115 	stw	r17,4(sp)
 2001fc0:	dc000015 	stw	r16,0(sp)
 2001fc4:	dfc00215 	stw	ra,8(sp)
 2001fc8:	28dffc2c 	andhi	r3,r5,32752
 2001fcc:	009ffc34 	movhi	r2,32752
 2001fd0:	2821883a 	mov	r16,r5
 2001fd4:	2023883a 	mov	r17,r4
 2001fd8:	18807c26 	beq	r3,r2,20021cc <__ieee754_sqrt+0x214>
 2001fdc:	2011883a 	mov	r8,r4
 2001fe0:	01405f0e 	bge	zero,r5,2002160 <__ieee754_sqrt+0x1a8>
 2001fe4:	2815d53a 	srai	r10,r5,20
 2001fe8:	50006a26 	beq	r10,zero,2002194 <__ieee754_sqrt+0x1dc>
 2001fec:	00800434 	movhi	r2,16
 2001ff0:	52bf0044 	addi	r10,r10,-1023
 2001ff4:	10bfffc4 	addi	r2,r2,-1
 2001ff8:	8084703a 	and	r2,r16,r2
 2001ffc:	50c0004c 	andi	r3,r10,1
 2002000:	10800434 	orhi	r2,r2,16
 2002004:	18004f1e 	bne	r3,zero,2002144 <__ieee754_sqrt+0x18c>
 2002008:	4006d7fa 	srli	r3,r8,31
 200200c:	5015d07a 	srai	r10,r10,1
 2002010:	1085883a 	add	r2,r2,r2
 2002014:	10c5883a 	add	r2,r2,r3
 2002018:	01800584 	movi	r6,22
 200201c:	4207883a 	add	r3,r8,r8
 2002020:	0013883a 	mov	r9,zero
 2002024:	000b883a 	mov	r5,zero
 2002028:	01000834 	movhi	r4,32
 200202c:	290f883a 	add	r7,r5,r4
 2002030:	1810d7fa 	srli	r8,r3,31
 2002034:	31bfffc4 	addi	r6,r6,-1
 2002038:	11c00316 	blt	r2,r7,2002048 <__ieee754_sqrt+0x90>
 200203c:	11c5c83a 	sub	r2,r2,r7
 2002040:	390b883a 	add	r5,r7,r4
 2002044:	4913883a 	add	r9,r9,r4
 2002048:	1085883a 	add	r2,r2,r2
 200204c:	1205883a 	add	r2,r2,r8
 2002050:	18c7883a 	add	r3,r3,r3
 2002054:	2008d07a 	srli	r4,r4,1
 2002058:	303ff41e 	bne	r6,zero,200202c <__alt_mem_onchip_memory2_0+0xfdff202c>
 200205c:	01200034 	movhi	r4,32768
 2002060:	01c00804 	movi	r7,32
 2002064:	0011883a 	mov	r8,zero
 2002068:	0017883a 	mov	r11,zero
 200206c:	201b883a 	mov	r13,r4
 2002070:	00000806 	br	2002094 <__ieee754_sqrt+0xdc>
 2002074:	11401726 	beq	r2,r5,20020d4 <__ieee754_sqrt+0x11c>
 2002078:	180cd7fa 	srli	r6,r3,31
 200207c:	1085883a 	add	r2,r2,r2
 2002080:	39ffffc4 	addi	r7,r7,-1
 2002084:	1185883a 	add	r2,r2,r6
 2002088:	18c7883a 	add	r3,r3,r3
 200208c:	2008d07a 	srli	r4,r4,1
 2002090:	38001726 	beq	r7,zero,20020f0 <__ieee754_sqrt+0x138>
 2002094:	590d883a 	add	r6,r11,r4
 2002098:	28bff60e 	bge	r5,r2,2002074 <__alt_mem_onchip_memory2_0+0xfdff2074>
 200209c:	3320002c 	andhi	r12,r6,32768
 20020a0:	3117883a 	add	r11,r6,r4
 20020a4:	63400826 	beq	r12,r13,20020c8 <__ieee754_sqrt+0x110>
 20020a8:	2819883a 	mov	r12,r5
 20020ac:	1145c83a 	sub	r2,r2,r5
 20020b0:	1980012e 	bgeu	r3,r6,20020b8 <__ieee754_sqrt+0x100>
 20020b4:	10bfffc4 	addi	r2,r2,-1
 20020b8:	1987c83a 	sub	r3,r3,r6
 20020bc:	4111883a 	add	r8,r8,r4
 20020c0:	600b883a 	mov	r5,r12
 20020c4:	003fec06 	br	2002078 <__alt_mem_onchip_memory2_0+0xfdff2078>
 20020c8:	583ff716 	blt	r11,zero,20020a8 <__alt_mem_onchip_memory2_0+0xfdff20a8>
 20020cc:	2b000044 	addi	r12,r5,1
 20020d0:	003ff606 	br	20020ac <__alt_mem_onchip_memory2_0+0xfdff20ac>
 20020d4:	19801936 	bltu	r3,r6,200213c <__ieee754_sqrt+0x184>
 20020d8:	3320002c 	andhi	r12,r6,32768
 20020dc:	3117883a 	add	r11,r6,r4
 20020e0:	63404626 	beq	r12,r13,20021fc <__ieee754_sqrt+0x244>
 20020e4:	1019883a 	mov	r12,r2
 20020e8:	0005883a 	mov	r2,zero
 20020ec:	003ff206 	br	20020b8 <__alt_mem_onchip_memory2_0+0xfdff20b8>
 20020f0:	10c4b03a 	or	r2,r2,r3
 20020f4:	10000426 	beq	r2,zero,2002108 <__ieee754_sqrt+0x150>
 20020f8:	00bfffc4 	movi	r2,-1
 20020fc:	40804326 	beq	r8,r2,200220c <__ieee754_sqrt+0x254>
 2002100:	4080004c 	andi	r2,r8,1
 2002104:	1211883a 	add	r8,r2,r8
 2002108:	4004d07a 	srli	r2,r8,1
 200210c:	4807d07a 	srai	r3,r9,1
 2002110:	010ff834 	movhi	r4,16352
 2002114:	4a40004c 	andi	r9,r9,1
 2002118:	1909883a 	add	r4,r3,r4
 200211c:	48000e1e 	bne	r9,zero,2002158 <__ieee754_sqrt+0x1a0>
 2002120:	5006953a 	slli	r3,r10,20
 2002124:	1907883a 	add	r3,r3,r4
 2002128:	dfc00217 	ldw	ra,8(sp)
 200212c:	dc400117 	ldw	r17,4(sp)
 2002130:	dc000017 	ldw	r16,0(sp)
 2002134:	dec00304 	addi	sp,sp,12
 2002138:	f800283a 	ret
 200213c:	100b883a 	mov	r5,r2
 2002140:	003fcd06 	br	2002078 <__alt_mem_onchip_memory2_0+0xfdff2078>
 2002144:	4006d7fa 	srli	r3,r8,31
 2002148:	1085883a 	add	r2,r2,r2
 200214c:	4211883a 	add	r8,r8,r8
 2002150:	10c5883a 	add	r2,r2,r3
 2002154:	003fac06 	br	2002008 <__alt_mem_onchip_memory2_0+0xfdff2008>
 2002158:	10a00034 	orhi	r2,r2,32768
 200215c:	003ff006 	br	2002120 <__alt_mem_onchip_memory2_0+0xfdff2120>
 2002160:	00a00034 	movhi	r2,32768
 2002164:	10bfffc4 	addi	r2,r2,-1
 2002168:	2884703a 	and	r2,r5,r2
 200216c:	1104b03a 	or	r2,r2,r4
 2002170:	10001f26 	beq	r2,zero,20021f0 <__ieee754_sqrt+0x238>
 2002174:	28002c1e 	bne	r5,zero,2002228 <__ieee754_sqrt+0x270>
 2002178:	0015883a 	mov	r10,zero
 200217c:	4020d2fa 	srli	r16,r8,11
 2002180:	52bffac4 	addi	r10,r10,-21
 2002184:	4010957a 	slli	r8,r8,21
 2002188:	803ffc26 	beq	r16,zero,200217c <__alt_mem_onchip_memory2_0+0xfdff217c>
 200218c:	8080042c 	andhi	r2,r16,16
 2002190:	1000211e 	bne	r2,zero,2002218 <__ieee754_sqrt+0x260>
 2002194:	0005883a 	mov	r2,zero
 2002198:	8421883a 	add	r16,r16,r16
 200219c:	80c0042c 	andhi	r3,r16,16
 20021a0:	10800044 	addi	r2,r2,1
 20021a4:	183ffc26 	beq	r3,zero,2002198 <__alt_mem_onchip_memory2_0+0xfdff2198>
 20021a8:	01000044 	movi	r4,1
 20021ac:	00c00804 	movi	r3,32
 20021b0:	2089c83a 	sub	r4,r4,r2
 20021b4:	1887c83a 	sub	r3,r3,r2
 20021b8:	40c6d83a 	srl	r3,r8,r3
 20021bc:	5115883a 	add	r10,r10,r4
 20021c0:	4090983a 	sll	r8,r8,r2
 20021c4:	80e0b03a 	or	r16,r16,r3
 20021c8:	003f8806 	br	2001fec <__alt_mem_onchip_memory2_0+0xfdff1fec>
 20021cc:	200d883a 	mov	r6,r4
 20021d0:	280f883a 	mov	r7,r5
 20021d4:	20061980 	call	2006198 <__muldf3>
 20021d8:	1009883a 	mov	r4,r2
 20021dc:	180b883a 	mov	r5,r3
 20021e0:	880d883a 	mov	r6,r17
 20021e4:	800f883a 	mov	r7,r16
 20021e8:	2004d380 	call	2004d38 <__adddf3>
 20021ec:	003fce06 	br	2002128 <__alt_mem_onchip_memory2_0+0xfdff2128>
 20021f0:	2005883a 	mov	r2,r4
 20021f4:	2807883a 	mov	r3,r5
 20021f8:	003fcb06 	br	2002128 <__alt_mem_onchip_memory2_0+0xfdff2128>
 20021fc:	583fb30e 	bge	r11,zero,20020cc <__alt_mem_onchip_memory2_0+0xfdff20cc>
 2002200:	0005883a 	mov	r2,zero
 2002204:	2819883a 	mov	r12,r5
 2002208:	003fab06 	br	20020b8 <__alt_mem_onchip_memory2_0+0xfdff20b8>
 200220c:	4a400044 	addi	r9,r9,1
 2002210:	0005883a 	mov	r2,zero
 2002214:	003fbd06 	br	200210c <__alt_mem_onchip_memory2_0+0xfdff210c>
 2002218:	00c00804 	movi	r3,32
 200221c:	01000044 	movi	r4,1
 2002220:	0005883a 	mov	r2,zero
 2002224:	003fe406 	br	20021b8 <__alt_mem_onchip_memory2_0+0xfdff21b8>
 2002228:	200d883a 	mov	r6,r4
 200222c:	280f883a 	mov	r7,r5
 2002230:	2006a040 	call	2006a04 <__subdf3>
 2002234:	1009883a 	mov	r4,r2
 2002238:	180b883a 	mov	r5,r3
 200223c:	100d883a 	mov	r6,r2
 2002240:	180f883a 	mov	r7,r3
 2002244:	20055d40 	call	20055d4 <__divdf3>
 2002248:	003fb706 	br	2002128 <__alt_mem_onchip_memory2_0+0xfdff2128>

0200224c <__kernel_cos>:
 200224c:	defff304 	addi	sp,sp,-52
 2002250:	dc000315 	stw	r16,12(sp)
 2002254:	04200034 	movhi	r16,32768
 2002258:	843fffc4 	addi	r16,r16,-1
 200225c:	008f9034 	movhi	r2,15936
 2002260:	df000b15 	stw	fp,44(sp)
 2002264:	ddc00a15 	stw	r23,40(sp)
 2002268:	dd800915 	stw	r22,36(sp)
 200226c:	dcc00615 	stw	r19,24(sp)
 2002270:	dfc00c15 	stw	ra,48(sp)
 2002274:	dd400815 	stw	r21,32(sp)
 2002278:	dd000715 	stw	r20,28(sp)
 200227c:	dc800515 	stw	r18,20(sp)
 2002280:	dc400415 	stw	r17,16(sp)
 2002284:	2c20703a 	and	r16,r5,r16
 2002288:	10bfffc4 	addi	r2,r2,-1
 200228c:	2827883a 	mov	r19,r5
 2002290:	202d883a 	mov	r22,r4
 2002294:	302f883a 	mov	r23,r6
 2002298:	3839883a 	mov	fp,r7
 200229c:	14007516 	blt	r2,r16,2002474 <__kernel_cos+0x228>
 20022a0:	20072d40 	call	20072d4 <__fixdfsi>
 20022a4:	10010f26 	beq	r2,zero,20026e4 <__kernel_cos+0x498>
 20022a8:	b00d883a 	mov	r6,r22
 20022ac:	980f883a 	mov	r7,r19
 20022b0:	b009883a 	mov	r4,r22
 20022b4:	980b883a 	mov	r5,r19
 20022b8:	20061980 	call	2006198 <__muldf3>
 20022bc:	01afa234 	movhi	r6,48776
 20022c0:	01ef6a74 	movhi	r7,48553
 20022c4:	1009883a 	mov	r4,r2
 20022c8:	180b883a 	mov	r5,r3
 20022cc:	318e3504 	addi	r6,r6,14548
 20022d0:	39feba44 	addi	r7,r7,-1303
 20022d4:	102b883a 	mov	r21,r2
 20022d8:	1829883a 	mov	r20,r3
 20022dc:	20061980 	call	2006198 <__muldf3>
 20022e0:	01af6d74 	movhi	r6,48565
 20022e4:	01cf88b4 	movhi	r7,15906
 20022e8:	1009883a 	mov	r4,r2
 20022ec:	180b883a 	mov	r5,r3
 20022f0:	31ac7104 	addi	r6,r6,-20028
 20022f4:	39fba784 	addi	r7,r7,-4450
 20022f8:	2004d380 	call	2004d38 <__adddf3>
 20022fc:	1009883a 	mov	r4,r2
 2002300:	180b883a 	mov	r5,r3
 2002304:	a80d883a 	mov	r6,r21
 2002308:	a00f883a 	mov	r7,r20
 200230c:	20061980 	call	2006198 <__muldf3>
 2002310:	01a02734 	movhi	r6,32924
 2002314:	01cfa4b4 	movhi	r7,16018
 2002318:	1009883a 	mov	r4,r2
 200231c:	180b883a 	mov	r5,r3
 2002320:	3194ab44 	addi	r6,r6,21165
 2002324:	39df93c4 	addi	r7,r7,32335
 2002328:	2006a040 	call	2006a04 <__subdf3>
 200232c:	1009883a 	mov	r4,r2
 2002330:	180b883a 	mov	r5,r3
 2002334:	a80d883a 	mov	r6,r21
 2002338:	a00f883a 	mov	r7,r20
 200233c:	20061980 	call	2006198 <__muldf3>
 2002340:	018672f4 	movhi	r6,6603
 2002344:	01cfbeb4 	movhi	r7,16122
 2002348:	1009883a 	mov	r4,r2
 200234c:	180b883a 	mov	r5,r3
 2002350:	31856404 	addi	r6,r6,5520
 2002354:	39c06804 	addi	r7,r7,416
 2002358:	2004d380 	call	2004d38 <__adddf3>
 200235c:	1009883a 	mov	r4,r2
 2002360:	180b883a 	mov	r5,r3
 2002364:	a80d883a 	mov	r6,r21
 2002368:	a00f883a 	mov	r7,r20
 200236c:	20061980 	call	2006198 <__muldf3>
 2002370:	0185b074 	movhi	r6,5825
 2002374:	01cfd5f4 	movhi	r7,16215
 2002378:	1009883a 	mov	r4,r2
 200237c:	180b883a 	mov	r5,r3
 2002380:	31945dc4 	addi	r6,r6,20855
 2002384:	39f05b04 	addi	r7,r7,-16020
 2002388:	2006a040 	call	2006a04 <__subdf3>
 200238c:	1009883a 	mov	r4,r2
 2002390:	180b883a 	mov	r5,r3
 2002394:	a80d883a 	mov	r6,r21
 2002398:	a00f883a 	mov	r7,r20
 200239c:	20061980 	call	2006198 <__muldf3>
 20023a0:	01955574 	movhi	r6,21845
 20023a4:	01cfe974 	movhi	r7,16293
 20023a8:	1009883a 	mov	r4,r2
 20023ac:	180b883a 	mov	r5,r3
 20023b0:	31955304 	addi	r6,r6,21836
 20023b4:	39d55544 	addi	r7,r7,21845
 20023b8:	2004d380 	call	2004d38 <__adddf3>
 20023bc:	1009883a 	mov	r4,r2
 20023c0:	180b883a 	mov	r5,r3
 20023c4:	a80d883a 	mov	r6,r21
 20023c8:	a00f883a 	mov	r7,r20
 20023cc:	20061980 	call	2006198 <__muldf3>
 20023d0:	1017883a 	mov	r11,r2
 20023d4:	1815883a 	mov	r10,r3
 20023d8:	a809883a 	mov	r4,r21
 20023dc:	a00b883a 	mov	r5,r20
 20023e0:	000d883a 	mov	r6,zero
 20023e4:	01cff834 	movhi	r7,16352
 20023e8:	da800215 	stw	r10,8(sp)
 20023ec:	dac00115 	stw	r11,4(sp)
 20023f0:	20061980 	call	2006198 <__muldf3>
 20023f4:	dac00117 	ldw	r11,4(sp)
 20023f8:	da800217 	ldw	r10,8(sp)
 20023fc:	a809883a 	mov	r4,r21
 2002400:	580d883a 	mov	r6,r11
 2002404:	500f883a 	mov	r7,r10
 2002408:	a00b883a 	mov	r5,r20
 200240c:	1023883a 	mov	r17,r2
 2002410:	1821883a 	mov	r16,r3
 2002414:	20061980 	call	2006198 <__muldf3>
 2002418:	b009883a 	mov	r4,r22
 200241c:	980b883a 	mov	r5,r19
 2002420:	b80d883a 	mov	r6,r23
 2002424:	e00f883a 	mov	r7,fp
 2002428:	1029883a 	mov	r20,r2
 200242c:	1825883a 	mov	r18,r3
 2002430:	20061980 	call	2006198 <__muldf3>
 2002434:	a009883a 	mov	r4,r20
 2002438:	900b883a 	mov	r5,r18
 200243c:	100d883a 	mov	r6,r2
 2002440:	180f883a 	mov	r7,r3
 2002444:	2006a040 	call	2006a04 <__subdf3>
 2002448:	8809883a 	mov	r4,r17
 200244c:	800b883a 	mov	r5,r16
 2002450:	100d883a 	mov	r6,r2
 2002454:	180f883a 	mov	r7,r3
 2002458:	2006a040 	call	2006a04 <__subdf3>
 200245c:	0009883a 	mov	r4,zero
 2002460:	014ffc34 	movhi	r5,16368
 2002464:	100d883a 	mov	r6,r2
 2002468:	180f883a 	mov	r7,r3
 200246c:	2006a040 	call	2006a04 <__subdf3>
 2002470:	00008b06 	br	20026a0 <__kernel_cos+0x454>
 2002474:	200d883a 	mov	r6,r4
 2002478:	280f883a 	mov	r7,r5
 200247c:	20061980 	call	2006198 <__muldf3>
 2002480:	01afa234 	movhi	r6,48776
 2002484:	01ef6a74 	movhi	r7,48553
 2002488:	318e3504 	addi	r6,r6,14548
 200248c:	39feba44 	addi	r7,r7,-1303
 2002490:	1009883a 	mov	r4,r2
 2002494:	180b883a 	mov	r5,r3
 2002498:	1025883a 	mov	r18,r2
 200249c:	1823883a 	mov	r17,r3
 20024a0:	20061980 	call	2006198 <__muldf3>
 20024a4:	01af6d74 	movhi	r6,48565
 20024a8:	01cf88b4 	movhi	r7,15906
 20024ac:	1009883a 	mov	r4,r2
 20024b0:	180b883a 	mov	r5,r3
 20024b4:	31ac7104 	addi	r6,r6,-20028
 20024b8:	39fba784 	addi	r7,r7,-4450
 20024bc:	2004d380 	call	2004d38 <__adddf3>
 20024c0:	1009883a 	mov	r4,r2
 20024c4:	180b883a 	mov	r5,r3
 20024c8:	900d883a 	mov	r6,r18
 20024cc:	880f883a 	mov	r7,r17
 20024d0:	20061980 	call	2006198 <__muldf3>
 20024d4:	01a02734 	movhi	r6,32924
 20024d8:	01cfa4b4 	movhi	r7,16018
 20024dc:	1009883a 	mov	r4,r2
 20024e0:	180b883a 	mov	r5,r3
 20024e4:	3194ab44 	addi	r6,r6,21165
 20024e8:	39df93c4 	addi	r7,r7,32335
 20024ec:	2006a040 	call	2006a04 <__subdf3>
 20024f0:	1009883a 	mov	r4,r2
 20024f4:	180b883a 	mov	r5,r3
 20024f8:	900d883a 	mov	r6,r18
 20024fc:	880f883a 	mov	r7,r17
 2002500:	20061980 	call	2006198 <__muldf3>
 2002504:	018672f4 	movhi	r6,6603
 2002508:	01cfbeb4 	movhi	r7,16122
 200250c:	1009883a 	mov	r4,r2
 2002510:	180b883a 	mov	r5,r3
 2002514:	31856404 	addi	r6,r6,5520
 2002518:	39c06804 	addi	r7,r7,416
 200251c:	2004d380 	call	2004d38 <__adddf3>
 2002520:	1009883a 	mov	r4,r2
 2002524:	180b883a 	mov	r5,r3
 2002528:	900d883a 	mov	r6,r18
 200252c:	880f883a 	mov	r7,r17
 2002530:	20061980 	call	2006198 <__muldf3>
 2002534:	0185b074 	movhi	r6,5825
 2002538:	01cfd5f4 	movhi	r7,16215
 200253c:	1009883a 	mov	r4,r2
 2002540:	180b883a 	mov	r5,r3
 2002544:	31945dc4 	addi	r6,r6,20855
 2002548:	39f05b04 	addi	r7,r7,-16020
 200254c:	2006a040 	call	2006a04 <__subdf3>
 2002550:	1009883a 	mov	r4,r2
 2002554:	180b883a 	mov	r5,r3
 2002558:	900d883a 	mov	r6,r18
 200255c:	880f883a 	mov	r7,r17
 2002560:	20061980 	call	2006198 <__muldf3>
 2002564:	01955574 	movhi	r6,21845
 2002568:	01cfe974 	movhi	r7,16293
 200256c:	1009883a 	mov	r4,r2
 2002570:	180b883a 	mov	r5,r3
 2002574:	31955304 	addi	r6,r6,21836
 2002578:	39d55544 	addi	r7,r7,21845
 200257c:	2004d380 	call	2004d38 <__adddf3>
 2002580:	1009883a 	mov	r4,r2
 2002584:	180b883a 	mov	r5,r3
 2002588:	900d883a 	mov	r6,r18
 200258c:	880f883a 	mov	r7,r17
 2002590:	20061980 	call	2006198 <__muldf3>
 2002594:	1013883a 	mov	r9,r2
 2002598:	1017883a 	mov	r11,r2
 200259c:	008ff4f4 	movhi	r2,16339
 20025a0:	108ccc84 	addi	r2,r2,13106
 20025a4:	902b883a 	mov	r21,r18
 20025a8:	8829883a 	mov	r20,r17
 20025ac:	1811883a 	mov	r8,r3
 20025b0:	1815883a 	mov	r10,r3
 20025b4:	143f880e 	bge	r2,r16,20023d8 <__alt_mem_onchip_memory2_0+0xfdff23d8>
 20025b8:	008ffa74 	movhi	r2,16361
 20025bc:	14004416 	blt	r2,r16,20026d0 <__kernel_cos+0x484>
 20025c0:	00bff834 	movhi	r2,65504
 20025c4:	80a1883a 	add	r16,r16,r2
 20025c8:	0009883a 	mov	r4,zero
 20025cc:	014ffc34 	movhi	r5,16368
 20025d0:	000d883a 	mov	r6,zero
 20025d4:	800f883a 	mov	r7,r16
 20025d8:	da400115 	stw	r9,4(sp)
 20025dc:	d8c00215 	stw	r3,8(sp)
 20025e0:	2006a040 	call	2006a04 <__subdf3>
 20025e4:	da000217 	ldw	r8,8(sp)
 20025e8:	da400117 	ldw	r9,4(sp)
 20025ec:	102b883a 	mov	r21,r2
 20025f0:	d8c00015 	stw	r3,0(sp)
 20025f4:	9009883a 	mov	r4,r18
 20025f8:	880b883a 	mov	r5,r17
 20025fc:	000d883a 	mov	r6,zero
 2002600:	01cff834 	movhi	r7,16352
 2002604:	da000215 	stw	r8,8(sp)
 2002608:	da400115 	stw	r9,4(sp)
 200260c:	20061980 	call	2006198 <__muldf3>
 2002610:	800f883a 	mov	r7,r16
 2002614:	1009883a 	mov	r4,r2
 2002618:	180b883a 	mov	r5,r3
 200261c:	000d883a 	mov	r6,zero
 2002620:	2006a040 	call	2006a04 <__subdf3>
 2002624:	da400117 	ldw	r9,4(sp)
 2002628:	da000217 	ldw	r8,8(sp)
 200262c:	9009883a 	mov	r4,r18
 2002630:	480d883a 	mov	r6,r9
 2002634:	400f883a 	mov	r7,r8
 2002638:	880b883a 	mov	r5,r17
 200263c:	1029883a 	mov	r20,r2
 2002640:	1821883a 	mov	r16,r3
 2002644:	20061980 	call	2006198 <__muldf3>
 2002648:	b009883a 	mov	r4,r22
 200264c:	980b883a 	mov	r5,r19
 2002650:	b80d883a 	mov	r6,r23
 2002654:	e00f883a 	mov	r7,fp
 2002658:	1025883a 	mov	r18,r2
 200265c:	1823883a 	mov	r17,r3
 2002660:	20061980 	call	2006198 <__muldf3>
 2002664:	9009883a 	mov	r4,r18
 2002668:	880b883a 	mov	r5,r17
 200266c:	100d883a 	mov	r6,r2
 2002670:	180f883a 	mov	r7,r3
 2002674:	2006a040 	call	2006a04 <__subdf3>
 2002678:	a009883a 	mov	r4,r20
 200267c:	800b883a 	mov	r5,r16
 2002680:	100d883a 	mov	r6,r2
 2002684:	180f883a 	mov	r7,r3
 2002688:	2006a040 	call	2006a04 <__subdf3>
 200268c:	d9400017 	ldw	r5,0(sp)
 2002690:	a809883a 	mov	r4,r21
 2002694:	100d883a 	mov	r6,r2
 2002698:	180f883a 	mov	r7,r3
 200269c:	2006a040 	call	2006a04 <__subdf3>
 20026a0:	dfc00c17 	ldw	ra,48(sp)
 20026a4:	df000b17 	ldw	fp,44(sp)
 20026a8:	ddc00a17 	ldw	r23,40(sp)
 20026ac:	dd800917 	ldw	r22,36(sp)
 20026b0:	dd400817 	ldw	r21,32(sp)
 20026b4:	dd000717 	ldw	r20,28(sp)
 20026b8:	dcc00617 	ldw	r19,24(sp)
 20026bc:	dc800517 	ldw	r18,20(sp)
 20026c0:	dc400417 	ldw	r17,16(sp)
 20026c4:	dc000317 	ldw	r16,12(sp)
 20026c8:	dec00d04 	addi	sp,sp,52
 20026cc:	f800283a 	ret
 20026d0:	008ff9f4 	movhi	r2,16359
 20026d4:	002b883a 	mov	r21,zero
 20026d8:	d8800015 	stw	r2,0(sp)
 20026dc:	040ff4b4 	movhi	r16,16338
 20026e0:	003fc406 	br	20025f4 <__alt_mem_onchip_memory2_0+0xfdff25f4>
 20026e4:	0005883a 	mov	r2,zero
 20026e8:	00cffc34 	movhi	r3,16368
 20026ec:	003fec06 	br	20026a0 <__alt_mem_onchip_memory2_0+0xfdff26a0>

020026f0 <__kernel_rem_pio2>:
 20026f0:	deff5b04 	addi	sp,sp,-660
 20026f4:	da00a517 	ldw	r8,660(sp)
 20026f8:	00c08074 	movhi	r3,513
 20026fc:	18e69b04 	addi	r3,r3,-26004
 2002700:	4205883a 	add	r2,r8,r8
 2002704:	1085883a 	add	r2,r2,r2
 2002708:	1885883a 	add	r2,r3,r2
 200270c:	d9008d15 	stw	r4,564(sp)
 2002710:	d9409015 	stw	r5,576(sp)
 2002714:	313fff44 	addi	r4,r6,-3
 2002718:	01400604 	movi	r5,24
 200271c:	dd80a115 	stw	r22,644(sp)
 2002720:	dc009b15 	stw	r16,620(sp)
 2002724:	dfc0a415 	stw	ra,656(sp)
 2002728:	df00a315 	stw	fp,652(sp)
 200272c:	ddc0a215 	stw	r23,648(sp)
 2002730:	dd40a015 	stw	r21,640(sp)
 2002734:	dd009f15 	stw	r20,636(sp)
 2002738:	dcc09e15 	stw	r19,632(sp)
 200273c:	dc809d15 	stw	r18,628(sp)
 2002740:	dc409c15 	stw	r17,624(sp)
 2002744:	3021883a 	mov	r16,r6
 2002748:	d9c09315 	stw	r7,588(sp)
 200274c:	15800017 	ldw	r22,0(r2)
 2002750:	2003bc00 	call	2003bc0 <__divsi3>
 2002754:	da009317 	ldw	r8,588(sp)
 2002758:	d8809215 	stw	r2,584(sp)
 200275c:	423fffc4 	addi	r8,r8,-1
 2002760:	da008c15 	stw	r8,560(sp)
 2002764:	10032c16 	blt	r2,zero,2003418 <__kernel_rem_pio2+0xd28>
 2002768:	da009217 	ldw	r8,584(sp)
 200276c:	01400604 	movi	r5,24
 2002770:	0208303a 	nor	r4,zero,r8
 2002774:	2003c800 	call	2003c80 <__mulsi3>
 2002778:	da008c17 	ldw	r8,560(sp)
 200277c:	1421883a 	add	r16,r2,r16
 2002780:	d8809217 	ldw	r2,584(sp)
 2002784:	4587883a 	add	r3,r8,r22
 2002788:	dc008f15 	stw	r16,572(sp)
 200278c:	1223c83a 	sub	r17,r2,r8
 2002790:	18001016 	blt	r3,zero,20027d4 <__kernel_rem_pio2+0xe4>
 2002794:	da00a617 	ldw	r8,664(sp)
 2002798:	8c65883a 	add	r18,r17,r17
 200279c:	94a5883a 	add	r18,r18,r18
 20027a0:	88c7883a 	add	r3,r17,r3
 20027a4:	dcc05004 	addi	r19,sp,320
 20027a8:	44a5883a 	add	r18,r8,r18
 20027ac:	1c000044 	addi	r16,r3,1
 20027b0:	88014616 	blt	r17,zero,2002ccc <__kernel_rem_pio2+0x5dc>
 20027b4:	91000017 	ldw	r4,0(r18)
 20027b8:	200735c0 	call	200735c <__floatsidf>
 20027bc:	98800015 	stw	r2,0(r19)
 20027c0:	98c00115 	stw	r3,4(r19)
 20027c4:	8c400044 	addi	r17,r17,1
 20027c8:	9cc00204 	addi	r19,r19,8
 20027cc:	94800104 	addi	r18,r18,4
 20027d0:	8c3ff71e 	bne	r17,r16,20027b0 <__alt_mem_onchip_memory2_0+0xfdff27b0>
 20027d4:	b0002116 	blt	r22,zero,200285c <__kernel_rem_pio2+0x16c>
 20027d8:	da009317 	ldw	r8,588(sp)
 20027dc:	b02490fa 	slli	r18,r22,3
 20027e0:	d8805004 	addi	r2,sp,320
 20027e4:	402e90fa 	slli	r23,r8,3
 20027e8:	d823883a 	mov	r17,sp
 20027ec:	dc004e04 	addi	r16,sp,312
 20027f0:	14b9883a 	add	fp,r2,r18
 20027f4:	da008c17 	ldw	r8,560(sp)
 20027f8:	40015916 	blt	r8,zero,2002d60 <__kernel_rem_pio2+0x670>
 20027fc:	dcc08d17 	ldw	r19,564(sp)
 2002800:	85e5883a 	add	r18,r16,r23
 2002804:	002b883a 	mov	r21,zero
 2002808:	0029883a 	mov	r20,zero
 200280c:	99000017 	ldw	r4,0(r19)
 2002810:	99400117 	ldw	r5,4(r19)
 2002814:	91800017 	ldw	r6,0(r18)
 2002818:	91c00117 	ldw	r7,4(r18)
 200281c:	94bffe04 	addi	r18,r18,-8
 2002820:	9cc00204 	addi	r19,r19,8
 2002824:	20061980 	call	2006198 <__muldf3>
 2002828:	a809883a 	mov	r4,r21
 200282c:	a00b883a 	mov	r5,r20
 2002830:	100d883a 	mov	r6,r2
 2002834:	180f883a 	mov	r7,r3
 2002838:	2004d380 	call	2004d38 <__adddf3>
 200283c:	102b883a 	mov	r21,r2
 2002840:	1829883a 	mov	r20,r3
 2002844:	84bff11e 	bne	r16,r18,200280c <__alt_mem_onchip_memory2_0+0xfdff280c>
 2002848:	8d400015 	stw	r21,0(r17)
 200284c:	8d000115 	stw	r20,4(r17)
 2002850:	84000204 	addi	r16,r16,8
 2002854:	8c400204 	addi	r17,r17,8
 2002858:	873fe61e 	bne	r16,fp,20027f4 <__alt_mem_onchip_memory2_0+0xfdff27f4>
 200285c:	b02090ba 	slli	r16,r22,2
 2002860:	d9009317 	ldw	r4,588(sp)
 2002864:	017ffe04 	movi	r5,-8
 2002868:	8161883a 	add	r16,r16,r5
 200286c:	2003c800 	call	2003c80 <__mulsi3>
 2002870:	d8808e15 	stw	r2,568(sp)
 2002874:	b0bfffc4 	addi	r2,r22,-1
 2002878:	1085883a 	add	r2,r2,r2
 200287c:	da007804 	addi	r8,sp,480
 2002880:	4411883a 	add	r8,r8,r16
 2002884:	1085883a 	add	r2,r2,r2
 2002888:	80c00104 	addi	r3,r16,4
 200288c:	d885883a 	add	r2,sp,r2
 2002890:	da009515 	stw	r8,596(sp)
 2002894:	da007804 	addi	r8,sp,480
 2002898:	40d1883a 	add	r8,r8,r3
 200289c:	10807804 	addi	r2,r2,480
 20028a0:	da009615 	stw	r8,600(sp)
 20028a4:	b021883a 	mov	r16,r22
 20028a8:	d8809715 	stw	r2,604(sp)
 20028ac:	dd809415 	stw	r22,592(sp)
 20028b0:	800490fa 	slli	r2,r16,3
 20028b4:	d885883a 	add	r2,sp,r2
 20028b8:	15c00017 	ldw	r23,0(r2)
 20028bc:	15000117 	ldw	r20,4(r2)
 20028c0:	04002d0e 	bge	zero,r16,2002978 <__kernel_rem_pio2+0x288>
 20028c4:	00880034 	movhi	r2,8192
 20028c8:	10bfffc4 	addi	r2,r2,-1
 20028cc:	80a5883a 	add	r18,r16,r2
 20028d0:	902490fa 	slli	r18,r18,3
 20028d4:	8423883a 	add	r17,r16,r16
 20028d8:	8c63883a 	add	r17,r17,r17
 20028dc:	dcc07804 	addi	r19,sp,480
 20028e0:	dca5883a 	add	r18,sp,r18
 20028e4:	9c63883a 	add	r17,r19,r17
 20028e8:	000d883a 	mov	r6,zero
 20028ec:	01cf9c34 	movhi	r7,15984
 20028f0:	b809883a 	mov	r4,r23
 20028f4:	a00b883a 	mov	r5,r20
 20028f8:	20061980 	call	2006198 <__muldf3>
 20028fc:	180b883a 	mov	r5,r3
 2002900:	1009883a 	mov	r4,r2
 2002904:	20072d40 	call	20072d4 <__fixdfsi>
 2002908:	1009883a 	mov	r4,r2
 200290c:	200735c0 	call	200735c <__floatsidf>
 2002910:	1009883a 	mov	r4,r2
 2002914:	180b883a 	mov	r5,r3
 2002918:	000d883a 	mov	r6,zero
 200291c:	01d05c34 	movhi	r7,16752
 2002920:	102d883a 	mov	r22,r2
 2002924:	182b883a 	mov	r21,r3
 2002928:	20061980 	call	2006198 <__muldf3>
 200292c:	b809883a 	mov	r4,r23
 2002930:	a00b883a 	mov	r5,r20
 2002934:	100d883a 	mov	r6,r2
 2002938:	180f883a 	mov	r7,r3
 200293c:	2006a040 	call	2006a04 <__subdf3>
 2002940:	180b883a 	mov	r5,r3
 2002944:	1009883a 	mov	r4,r2
 2002948:	20072d40 	call	20072d4 <__fixdfsi>
 200294c:	91800017 	ldw	r6,0(r18)
 2002950:	91c00117 	ldw	r7,4(r18)
 2002954:	98800015 	stw	r2,0(r19)
 2002958:	b009883a 	mov	r4,r22
 200295c:	a80b883a 	mov	r5,r21
 2002960:	2004d380 	call	2004d38 <__adddf3>
 2002964:	9cc00104 	addi	r19,r19,4
 2002968:	102f883a 	mov	r23,r2
 200296c:	1829883a 	mov	r20,r3
 2002970:	94bffe04 	addi	r18,r18,-8
 2002974:	9c7fdc1e 	bne	r19,r17,20028e8 <__alt_mem_onchip_memory2_0+0xfdff28e8>
 2002978:	d9808f17 	ldw	r6,572(sp)
 200297c:	a00b883a 	mov	r5,r20
 2002980:	b809883a 	mov	r4,r23
 2002984:	200396c0 	call	200396c <scalbn>
 2002988:	000d883a 	mov	r6,zero
 200298c:	01cff034 	movhi	r7,16320
 2002990:	1009883a 	mov	r4,r2
 2002994:	180b883a 	mov	r5,r3
 2002998:	1025883a 	mov	r18,r2
 200299c:	1823883a 	mov	r17,r3
 20029a0:	20061980 	call	2006198 <__muldf3>
 20029a4:	1009883a 	mov	r4,r2
 20029a8:	180b883a 	mov	r5,r3
 20029ac:	20036fc0 	call	20036fc <floor>
 20029b0:	1009883a 	mov	r4,r2
 20029b4:	180b883a 	mov	r5,r3
 20029b8:	000d883a 	mov	r6,zero
 20029bc:	01d00834 	movhi	r7,16416
 20029c0:	20061980 	call	2006198 <__muldf3>
 20029c4:	100d883a 	mov	r6,r2
 20029c8:	180f883a 	mov	r7,r3
 20029cc:	9009883a 	mov	r4,r18
 20029d0:	880b883a 	mov	r5,r17
 20029d4:	2006a040 	call	2006a04 <__subdf3>
 20029d8:	180b883a 	mov	r5,r3
 20029dc:	1009883a 	mov	r4,r2
 20029e0:	1825883a 	mov	r18,r3
 20029e4:	1027883a 	mov	r19,r2
 20029e8:	20072d40 	call	20072d4 <__fixdfsi>
 20029ec:	1009883a 	mov	r4,r2
 20029f0:	1023883a 	mov	r17,r2
 20029f4:	200735c0 	call	200735c <__floatsidf>
 20029f8:	9809883a 	mov	r4,r19
 20029fc:	900b883a 	mov	r5,r18
 2002a00:	100d883a 	mov	r6,r2
 2002a04:	180f883a 	mov	r7,r3
 2002a08:	2006a040 	call	2006a04 <__subdf3>
 2002a0c:	da008f17 	ldw	r8,572(sp)
 2002a10:	1019883a 	mov	r12,r2
 2002a14:	1029883a 	mov	r20,r2
 2002a18:	1817883a 	mov	r11,r3
 2002a1c:	0200ae0e 	bge	zero,r8,2002cd8 <__kernel_rem_pio2+0x5e8>
 2002a20:	80bfffc4 	addi	r2,r16,-1
 2002a24:	1085883a 	add	r2,r2,r2
 2002a28:	1085883a 	add	r2,r2,r2
 2002a2c:	d885883a 	add	r2,sp,r2
 2002a30:	10807804 	addi	r2,r2,480
 2002a34:	11400017 	ldw	r5,0(r2)
 2002a38:	01000604 	movi	r4,24
 2002a3c:	2209c83a 	sub	r4,r4,r8
 2002a40:	290dd83a 	sra	r6,r5,r4
 2002a44:	048005c4 	movi	r18,23
 2002a48:	9225c83a 	sub	r18,r18,r8
 2002a4c:	3108983a 	sll	r4,r6,r4
 2002a50:	89a3883a 	add	r17,r17,r6
 2002a54:	2909c83a 	sub	r4,r5,r4
 2002a58:	24a5d83a 	sra	r18,r4,r18
 2002a5c:	11000015 	stw	r4,0(r2)
 2002a60:	04802a0e 	bge	zero,r18,2002b0c <__kernel_rem_pio2+0x41c>
 2002a64:	8c400044 	addi	r17,r17,1
 2002a68:	0400c40e 	bge	zero,r16,2002d7c <__kernel_rem_pio2+0x68c>
 2002a6c:	01404034 	movhi	r5,256
 2002a70:	297fffc4 	addi	r5,r5,-1
 2002a74:	da007804 	addi	r8,sp,480
 2002a78:	0015883a 	mov	r10,zero
 2002a7c:	0027883a 	mov	r19,zero
 2002a80:	01004034 	movhi	r4,256
 2002a84:	00000706 	br	2002aa4 <__kernel_rem_pio2+0x3b4>
 2002a88:	208dc83a 	sub	r6,r4,r2
 2002a8c:	10000226 	beq	r2,zero,2002a98 <__kernel_rem_pio2+0x3a8>
 2002a90:	41800015 	stw	r6,0(r8)
 2002a94:	04c00044 	movi	r19,1
 2002a98:	52800044 	addi	r10,r10,1
 2002a9c:	42000104 	addi	r8,r8,4
 2002aa0:	5400080e 	bge	r10,r16,2002ac4 <__kernel_rem_pio2+0x3d4>
 2002aa4:	40800017 	ldw	r2,0(r8)
 2002aa8:	983ff726 	beq	r19,zero,2002a88 <__alt_mem_onchip_memory2_0+0xfdff2a88>
 2002aac:	2885c83a 	sub	r2,r5,r2
 2002ab0:	40800015 	stw	r2,0(r8)
 2002ab4:	52800044 	addi	r10,r10,1
 2002ab8:	04c00044 	movi	r19,1
 2002abc:	42000104 	addi	r8,r8,4
 2002ac0:	543ff816 	blt	r10,r16,2002aa4 <__alt_mem_onchip_memory2_0+0xfdff2aa4>
 2002ac4:	da008f17 	ldw	r8,572(sp)
 2002ac8:	02000e0e 	bge	zero,r8,2002b04 <__kernel_rem_pio2+0x414>
 2002acc:	00800044 	movi	r2,1
 2002ad0:	40808a26 	beq	r8,r2,2002cfc <__kernel_rem_pio2+0x60c>
 2002ad4:	00800084 	movi	r2,2
 2002ad8:	40800a1e 	bne	r8,r2,2002b04 <__kernel_rem_pio2+0x414>
 2002adc:	80bfffc4 	addi	r2,r16,-1
 2002ae0:	1085883a 	add	r2,r2,r2
 2002ae4:	1085883a 	add	r2,r2,r2
 2002ae8:	d885883a 	add	r2,sp,r2
 2002aec:	10807804 	addi	r2,r2,480
 2002af0:	11400017 	ldw	r5,0(r2)
 2002af4:	01001034 	movhi	r4,64
 2002af8:	213fffc4 	addi	r4,r4,-1
 2002afc:	2908703a 	and	r4,r5,r4
 2002b00:	11000015 	stw	r4,0(r2)
 2002b04:	00800084 	movi	r2,2
 2002b08:	90805a26 	beq	r18,r2,2002c74 <__kernel_rem_pio2+0x584>
 2002b0c:	580b883a 	mov	r5,r11
 2002b10:	a009883a 	mov	r4,r20
 2002b14:	000d883a 	mov	r6,zero
 2002b18:	000f883a 	mov	r7,zero
 2002b1c:	dac09a15 	stw	r11,616(sp)
 2002b20:	2005f540 	call	2005f54 <__eqdf2>
 2002b24:	dac09a17 	ldw	r11,616(sp)
 2002b28:	1000961e 	bne	r2,zero,2002d84 <__kernel_rem_pio2+0x694>
 2002b2c:	da009417 	ldw	r8,592(sp)
 2002b30:	817fffc4 	addi	r5,r16,-1
 2002b34:	2a000b16 	blt	r5,r8,2002b64 <__kernel_rem_pio2+0x474>
 2002b38:	800490ba 	slli	r2,r16,2
 2002b3c:	d9809617 	ldw	r6,600(sp)
 2002b40:	d9007804 	addi	r4,sp,480
 2002b44:	10bfff04 	addi	r2,r2,-4
 2002b48:	0007883a 	mov	r3,zero
 2002b4c:	2085883a 	add	r2,r4,r2
 2002b50:	11000017 	ldw	r4,0(r2)
 2002b54:	10bfff04 	addi	r2,r2,-4
 2002b58:	1906b03a 	or	r3,r3,r4
 2002b5c:	11bffc1e 	bne	r2,r6,2002b50 <__alt_mem_onchip_memory2_0+0xfdff2b50>
 2002b60:	18013c1e 	bne	r3,zero,2003054 <__kernel_rem_pio2+0x964>
 2002b64:	da009717 	ldw	r8,604(sp)
 2002b68:	40800017 	ldw	r2,0(r8)
 2002b6c:	1001371e 	bne	r2,zero,200304c <__kernel_rem_pio2+0x95c>
 2002b70:	d8809517 	ldw	r2,596(sp)
 2002b74:	00c00044 	movi	r3,1
 2002b78:	10bfff04 	addi	r2,r2,-4
 2002b7c:	11000117 	ldw	r4,4(r2)
 2002b80:	18c00044 	addi	r3,r3,1
 2002b84:	203ffc26 	beq	r4,zero,2002b78 <__alt_mem_onchip_memory2_0+0xfdff2b78>
 2002b88:	80c7883a 	add	r3,r16,r3
 2002b8c:	80800044 	addi	r2,r16,1
 2002b90:	d8c09115 	stw	r3,580(sp)
 2002b94:	18803216 	blt	r3,r2,2002c60 <__kernel_rem_pio2+0x570>
 2002b98:	da009317 	ldw	r8,588(sp)
 2002b9c:	8223883a 	add	r17,r16,r8
 2002ba0:	da009117 	ldw	r8,580(sp)
 2002ba4:	882290fa 	slli	r17,r17,3
 2002ba8:	45000044 	addi	r20,r8,1
 2002bac:	da009217 	ldw	r8,584(sp)
 2002bb0:	a02890fa 	slli	r20,r20,3
 2002bb4:	1227883a 	add	r19,r2,r8
 2002bb8:	100490fa 	slli	r2,r2,3
 2002bbc:	da00a617 	ldw	r8,664(sp)
 2002bc0:	9ce7883a 	add	r19,r19,r19
 2002bc4:	9ce7883a 	add	r19,r19,r19
 2002bc8:	d8a5883a 	add	r18,sp,r2
 2002bcc:	d8805004 	addi	r2,sp,320
 2002bd0:	44e7883a 	add	r19,r8,r19
 2002bd4:	1463883a 	add	r17,r2,r17
 2002bd8:	dd29883a 	add	r20,sp,r20
 2002bdc:	99000017 	ldw	r4,0(r19)
 2002be0:	200735c0 	call	200735c <__floatsidf>
 2002be4:	da008c17 	ldw	r8,560(sp)
 2002be8:	88800015 	stw	r2,0(r17)
 2002bec:	88c00115 	stw	r3,4(r17)
 2002bf0:	40001d16 	blt	r8,zero,2002c68 <__kernel_rem_pio2+0x578>
 2002bf4:	da008e17 	ldw	r8,568(sp)
 2002bf8:	dd808d17 	ldw	r22,564(sp)
 2002bfc:	8821883a 	mov	r16,r17
 2002c00:	8a2b883a 	add	r21,r17,r8
 2002c04:	0039883a 	mov	fp,zero
 2002c08:	002f883a 	mov	r23,zero
 2002c0c:	b1000017 	ldw	r4,0(r22)
 2002c10:	b1400117 	ldw	r5,4(r22)
 2002c14:	81800017 	ldw	r6,0(r16)
 2002c18:	81c00117 	ldw	r7,4(r16)
 2002c1c:	843ffe04 	addi	r16,r16,-8
 2002c20:	b5800204 	addi	r22,r22,8
 2002c24:	20061980 	call	2006198 <__muldf3>
 2002c28:	e009883a 	mov	r4,fp
 2002c2c:	b80b883a 	mov	r5,r23
 2002c30:	100d883a 	mov	r6,r2
 2002c34:	180f883a 	mov	r7,r3
 2002c38:	2004d380 	call	2004d38 <__adddf3>
 2002c3c:	1039883a 	mov	fp,r2
 2002c40:	182f883a 	mov	r23,r3
 2002c44:	857ff11e 	bne	r16,r21,2002c0c <__alt_mem_onchip_memory2_0+0xfdff2c0c>
 2002c48:	97000015 	stw	fp,0(r18)
 2002c4c:	95c00115 	stw	r23,4(r18)
 2002c50:	94800204 	addi	r18,r18,8
 2002c54:	9cc00104 	addi	r19,r19,4
 2002c58:	8c400204 	addi	r17,r17,8
 2002c5c:	953fdf1e 	bne	r18,r20,2002bdc <__alt_mem_onchip_memory2_0+0xfdff2bdc>
 2002c60:	dc009117 	ldw	r16,580(sp)
 2002c64:	003f1206 	br	20028b0 <__alt_mem_onchip_memory2_0+0xfdff28b0>
 2002c68:	0039883a 	mov	fp,zero
 2002c6c:	002f883a 	mov	r23,zero
 2002c70:	003ff506 	br	2002c48 <__alt_mem_onchip_memory2_0+0xfdff2c48>
 2002c74:	0009883a 	mov	r4,zero
 2002c78:	014ffc34 	movhi	r5,16368
 2002c7c:	600d883a 	mov	r6,r12
 2002c80:	180f883a 	mov	r7,r3
 2002c84:	2006a040 	call	2006a04 <__subdf3>
 2002c88:	1029883a 	mov	r20,r2
 2002c8c:	1817883a 	mov	r11,r3
 2002c90:	983f9e26 	beq	r19,zero,2002b0c <__alt_mem_onchip_memory2_0+0xfdff2b0c>
 2002c94:	d9808f17 	ldw	r6,572(sp)
 2002c98:	0009883a 	mov	r4,zero
 2002c9c:	014ffc34 	movhi	r5,16368
 2002ca0:	d8c09a15 	stw	r3,616(sp)
 2002ca4:	200396c0 	call	200396c <scalbn>
 2002ca8:	dac09a17 	ldw	r11,616(sp)
 2002cac:	a009883a 	mov	r4,r20
 2002cb0:	100d883a 	mov	r6,r2
 2002cb4:	580b883a 	mov	r5,r11
 2002cb8:	180f883a 	mov	r7,r3
 2002cbc:	2006a040 	call	2006a04 <__subdf3>
 2002cc0:	1029883a 	mov	r20,r2
 2002cc4:	1817883a 	mov	r11,r3
 2002cc8:	003f9006 	br	2002b0c <__alt_mem_onchip_memory2_0+0xfdff2b0c>
 2002ccc:	0005883a 	mov	r2,zero
 2002cd0:	0007883a 	mov	r3,zero
 2002cd4:	003eb906 	br	20027bc <__alt_mem_onchip_memory2_0+0xfdff27bc>
 2002cd8:	da008f17 	ldw	r8,572(sp)
 2002cdc:	4000121e 	bne	r8,zero,2002d28 <__kernel_rem_pio2+0x638>
 2002ce0:	80bfffc4 	addi	r2,r16,-1
 2002ce4:	1085883a 	add	r2,r2,r2
 2002ce8:	1085883a 	add	r2,r2,r2
 2002cec:	d885883a 	add	r2,sp,r2
 2002cf0:	14807817 	ldw	r18,480(r2)
 2002cf4:	9025d5fa 	srai	r18,r18,23
 2002cf8:	003f5906 	br	2002a60 <__alt_mem_onchip_memory2_0+0xfdff2a60>
 2002cfc:	80bfffc4 	addi	r2,r16,-1
 2002d00:	1085883a 	add	r2,r2,r2
 2002d04:	1085883a 	add	r2,r2,r2
 2002d08:	d885883a 	add	r2,sp,r2
 2002d0c:	10807804 	addi	r2,r2,480
 2002d10:	11000017 	ldw	r4,0(r2)
 2002d14:	01402034 	movhi	r5,128
 2002d18:	297fffc4 	addi	r5,r5,-1
 2002d1c:	2148703a 	and	r4,r4,r5
 2002d20:	11000015 	stw	r4,0(r2)
 2002d24:	003f7706 	br	2002b04 <__alt_mem_onchip_memory2_0+0xfdff2b04>
 2002d28:	180b883a 	mov	r5,r3
 2002d2c:	1009883a 	mov	r4,r2
 2002d30:	000d883a 	mov	r6,zero
 2002d34:	01cff834 	movhi	r7,16352
 2002d38:	d8c09915 	stw	r3,612(sp)
 2002d3c:	d8c09a15 	stw	r3,616(sp)
 2002d40:	d8809815 	stw	r2,608(sp)
 2002d44:	2005fd80 	call	2005fd8 <__gedf2>
 2002d48:	d8c09917 	ldw	r3,612(sp)
 2002d4c:	dac09a17 	ldw	r11,616(sp)
 2002d50:	db009817 	ldw	r12,608(sp)
 2002d54:	1000050e 	bge	r2,zero,2002d6c <__kernel_rem_pio2+0x67c>
 2002d58:	0025883a 	mov	r18,zero
 2002d5c:	003f6b06 	br	2002b0c <__alt_mem_onchip_memory2_0+0xfdff2b0c>
 2002d60:	002b883a 	mov	r21,zero
 2002d64:	0029883a 	mov	r20,zero
 2002d68:	003eb706 	br	2002848 <__alt_mem_onchip_memory2_0+0xfdff2848>
 2002d6c:	8c400044 	addi	r17,r17,1
 2002d70:	0401960e 	bge	zero,r16,20033cc <__kernel_rem_pio2+0xcdc>
 2002d74:	04800084 	movi	r18,2
 2002d78:	003f3c06 	br	2002a6c <__alt_mem_onchip_memory2_0+0xfdff2a6c>
 2002d7c:	0027883a 	mov	r19,zero
 2002d80:	003f5006 	br	2002ac4 <__alt_mem_onchip_memory2_0+0xfdff2ac4>
 2002d84:	da008f17 	ldw	r8,572(sp)
 2002d88:	a009883a 	mov	r4,r20
 2002d8c:	580b883a 	mov	r5,r11
 2002d90:	020dc83a 	sub	r6,zero,r8
 2002d94:	dc808c15 	stw	r18,560(sp)
 2002d98:	dd809417 	ldw	r22,592(sp)
 2002d9c:	dc408e15 	stw	r17,568(sp)
 2002da0:	200396c0 	call	200396c <scalbn>
 2002da4:	1009883a 	mov	r4,r2
 2002da8:	180b883a 	mov	r5,r3
 2002dac:	000d883a 	mov	r6,zero
 2002db0:	01d05c34 	movhi	r7,16752
 2002db4:	1029883a 	mov	r20,r2
 2002db8:	182f883a 	mov	r23,r3
 2002dbc:	2005fd80 	call	2005fd8 <__gedf2>
 2002dc0:	10018b16 	blt	r2,zero,20033f0 <__kernel_rem_pio2+0xd00>
 2002dc4:	01cf9c34 	movhi	r7,15984
 2002dc8:	000d883a 	mov	r6,zero
 2002dcc:	a009883a 	mov	r4,r20
 2002dd0:	b80b883a 	mov	r5,r23
 2002dd4:	20061980 	call	2006198 <__muldf3>
 2002dd8:	180b883a 	mov	r5,r3
 2002ddc:	1009883a 	mov	r4,r2
 2002de0:	20072d40 	call	20072d4 <__fixdfsi>
 2002de4:	840d883a 	add	r6,r16,r16
 2002de8:	318d883a 	add	r6,r6,r6
 2002dec:	1009883a 	mov	r4,r2
 2002df0:	d9a7883a 	add	r19,sp,r6
 2002df4:	102b883a 	mov	r21,r2
 2002df8:	200735c0 	call	200735c <__floatsidf>
 2002dfc:	1009883a 	mov	r4,r2
 2002e00:	180b883a 	mov	r5,r3
 2002e04:	000d883a 	mov	r6,zero
 2002e08:	01d05c34 	movhi	r7,16752
 2002e0c:	20061980 	call	2006198 <__muldf3>
 2002e10:	a009883a 	mov	r4,r20
 2002e14:	b80b883a 	mov	r5,r23
 2002e18:	100d883a 	mov	r6,r2
 2002e1c:	180f883a 	mov	r7,r3
 2002e20:	2006a040 	call	2006a04 <__subdf3>
 2002e24:	180b883a 	mov	r5,r3
 2002e28:	1009883a 	mov	r4,r2
 2002e2c:	20072d40 	call	20072d4 <__fixdfsi>
 2002e30:	da008f17 	ldw	r8,572(sp)
 2002e34:	84400044 	addi	r17,r16,1
 2002e38:	8c47883a 	add	r3,r17,r17
 2002e3c:	9cc07804 	addi	r19,r19,480
 2002e40:	18c7883a 	add	r3,r3,r3
 2002e44:	98800015 	stw	r2,0(r19)
 2002e48:	d8c7883a 	add	r3,sp,r3
 2002e4c:	42000604 	addi	r8,r8,24
 2002e50:	da008f15 	stw	r8,572(sp)
 2002e54:	1d407815 	stw	r21,480(r3)
 2002e58:	d9808f17 	ldw	r6,572(sp)
 2002e5c:	0009883a 	mov	r4,zero
 2002e60:	014ffc34 	movhi	r5,16368
 2002e64:	200396c0 	call	200396c <scalbn>
 2002e68:	1029883a 	mov	r20,r2
 2002e6c:	182b883a 	mov	r21,r3
 2002e70:	88006e16 	blt	r17,zero,200302c <__kernel_rem_pio2+0x93c>
 2002e74:	881090fa 	slli	r8,r17,3
 2002e78:	d8c07804 	addi	r3,sp,480
 2002e7c:	dc3ffe04 	addi	r16,sp,-8
 2002e80:	da008d15 	stw	r8,564(sp)
 2002e84:	d8808d17 	ldw	r2,564(sp)
 2002e88:	8c51883a 	add	r8,r17,r17
 2002e8c:	4211883a 	add	r8,r8,r8
 2002e90:	d8a7883a 	add	r19,sp,r2
 2002e94:	1a2f883a 	add	r23,r3,r8
 2002e98:	9839883a 	mov	fp,r19
 2002e9c:	b9000017 	ldw	r4,0(r23)
 2002ea0:	e73ffe04 	addi	fp,fp,-8
 2002ea4:	bdffff04 	addi	r23,r23,-4
 2002ea8:	200735c0 	call	200735c <__floatsidf>
 2002eac:	a00d883a 	mov	r6,r20
 2002eb0:	a80f883a 	mov	r7,r21
 2002eb4:	1009883a 	mov	r4,r2
 2002eb8:	180b883a 	mov	r5,r3
 2002ebc:	20061980 	call	2006198 <__muldf3>
 2002ec0:	a009883a 	mov	r4,r20
 2002ec4:	a80b883a 	mov	r5,r21
 2002ec8:	e0800215 	stw	r2,8(fp)
 2002ecc:	e0c00315 	stw	r3,12(fp)
 2002ed0:	000d883a 	mov	r6,zero
 2002ed4:	01cf9c34 	movhi	r7,15984
 2002ed8:	20061980 	call	2006198 <__muldf3>
 2002edc:	1029883a 	mov	r20,r2
 2002ee0:	182b883a 	mov	r21,r3
 2002ee4:	e43fed1e 	bne	fp,r16,2002e9c <__alt_mem_onchip_memory2_0+0xfdff2e9c>
 2002ee8:	8a000044 	addi	r8,r17,1
 2002eec:	0029883a 	mov	r20,zero
 2002ef0:	4039883a 	mov	fp,r8
 2002ef4:	dc408f15 	stw	r17,572(sp)
 2002ef8:	b0004916 	blt	r22,zero,2003020 <__kernel_rem_pio2+0x930>
 2002efc:	a0004816 	blt	r20,zero,2003020 <__kernel_rem_pio2+0x930>
 2002f00:	04008074 	movhi	r16,513
 2002f04:	84268b04 	addi	r16,r16,-26068
 2002f08:	982b883a 	mov	r21,r19
 2002f0c:	0023883a 	mov	r17,zero
 2002f10:	002f883a 	mov	r23,zero
 2002f14:	0025883a 	mov	r18,zero
 2002f18:	00000206 	br	2002f24 <__kernel_rem_pio2+0x834>
 2002f1c:	ad400204 	addi	r21,r21,8
 2002f20:	a4800f16 	blt	r20,r18,2002f60 <__kernel_rem_pio2+0x870>
 2002f24:	81000017 	ldw	r4,0(r16)
 2002f28:	81400117 	ldw	r5,4(r16)
 2002f2c:	a9800017 	ldw	r6,0(r21)
 2002f30:	a9c00117 	ldw	r7,4(r21)
 2002f34:	94800044 	addi	r18,r18,1
 2002f38:	84000204 	addi	r16,r16,8
 2002f3c:	20061980 	call	2006198 <__muldf3>
 2002f40:	8809883a 	mov	r4,r17
 2002f44:	b80b883a 	mov	r5,r23
 2002f48:	100d883a 	mov	r6,r2
 2002f4c:	180f883a 	mov	r7,r3
 2002f50:	2004d380 	call	2004d38 <__adddf3>
 2002f54:	1023883a 	mov	r17,r2
 2002f58:	182f883a 	mov	r23,r3
 2002f5c:	b4bfef0e 	bge	r22,r18,2002f1c <__alt_mem_onchip_memory2_0+0xfdff2f1c>
 2002f60:	a00490fa 	slli	r2,r20,3
 2002f64:	a5000044 	addi	r20,r20,1
 2002f68:	9cfffe04 	addi	r19,r19,-8
 2002f6c:	d885883a 	add	r2,sp,r2
 2002f70:	10802804 	addi	r2,r2,160
 2002f74:	14400015 	stw	r17,0(r2)
 2002f78:	15c00115 	stw	r23,4(r2)
 2002f7c:	a73fde1e 	bne	r20,fp,2002ef8 <__alt_mem_onchip_memory2_0+0xfdff2ef8>
 2002f80:	da00a517 	ldw	r8,660(sp)
 2002f84:	00800084 	movi	r2,2
 2002f88:	dc408f17 	ldw	r17,572(sp)
 2002f8c:	12007316 	blt	r2,r8,200315c <__kernel_rem_pio2+0xa6c>
 2002f90:	02004816 	blt	zero,r8,20030b4 <__kernel_rem_pio2+0x9c4>
 2002f94:	4000141e 	bne	r8,zero,2002fe8 <__kernel_rem_pio2+0x8f8>
 2002f98:	da008d17 	ldw	r8,564(sp)
 2002f9c:	d8802804 	addi	r2,sp,160
 2002fa0:	0007883a 	mov	r3,zero
 2002fa4:	1221883a 	add	r16,r2,r8
 2002fa8:	04ffffc4 	movi	r19,-1
 2002fac:	0005883a 	mov	r2,zero
 2002fb0:	81800017 	ldw	r6,0(r16)
 2002fb4:	81c00117 	ldw	r7,4(r16)
 2002fb8:	1009883a 	mov	r4,r2
 2002fbc:	180b883a 	mov	r5,r3
 2002fc0:	8c7fffc4 	addi	r17,r17,-1
 2002fc4:	2004d380 	call	2004d38 <__adddf3>
 2002fc8:	843ffe04 	addi	r16,r16,-8
 2002fcc:	8cfff81e 	bne	r17,r19,2002fb0 <__alt_mem_onchip_memory2_0+0xfdff2fb0>
 2002fd0:	da008c17 	ldw	r8,560(sp)
 2002fd4:	40000126 	beq	r8,zero,2002fdc <__kernel_rem_pio2+0x8ec>
 2002fd8:	18e0003c 	xorhi	r3,r3,32768
 2002fdc:	da009017 	ldw	r8,576(sp)
 2002fe0:	40800015 	stw	r2,0(r8)
 2002fe4:	40c00115 	stw	r3,4(r8)
 2002fe8:	da008e17 	ldw	r8,568(sp)
 2002fec:	408001cc 	andi	r2,r8,7
 2002ff0:	dfc0a417 	ldw	ra,656(sp)
 2002ff4:	df00a317 	ldw	fp,652(sp)
 2002ff8:	ddc0a217 	ldw	r23,648(sp)
 2002ffc:	dd80a117 	ldw	r22,644(sp)
 2003000:	dd40a017 	ldw	r21,640(sp)
 2003004:	dd009f17 	ldw	r20,636(sp)
 2003008:	dcc09e17 	ldw	r19,632(sp)
 200300c:	dc809d17 	ldw	r18,628(sp)
 2003010:	dc409c17 	ldw	r17,624(sp)
 2003014:	dc009b17 	ldw	r16,620(sp)
 2003018:	dec0a504 	addi	sp,sp,660
 200301c:	f800283a 	ret
 2003020:	0023883a 	mov	r17,zero
 2003024:	002f883a 	mov	r23,zero
 2003028:	003fcd06 	br	2002f60 <__alt_mem_onchip_memory2_0+0xfdff2f60>
 200302c:	da00a517 	ldw	r8,660(sp)
 2003030:	00800084 	movi	r2,2
 2003034:	1200d216 	blt	r2,r8,2003380 <__kernel_rem_pio2+0xc90>
 2003038:	0200c016 	blt	zero,r8,200333c <__kernel_rem_pio2+0xc4c>
 200303c:	403fea1e 	bne	r8,zero,2002fe8 <__alt_mem_onchip_memory2_0+0xfdff2fe8>
 2003040:	0005883a 	mov	r2,zero
 2003044:	0007883a 	mov	r3,zero
 2003048:	003fe106 	br	2002fd0 <__alt_mem_onchip_memory2_0+0xfdff2fd0>
 200304c:	00c00044 	movi	r3,1
 2003050:	003ecd06 	br	2002b88 <__alt_mem_onchip_memory2_0+0xfdff2b88>
 2003054:	2945883a 	add	r2,r5,r5
 2003058:	da008f17 	ldw	r8,572(sp)
 200305c:	1085883a 	add	r2,r2,r2
 2003060:	d885883a 	add	r2,sp,r2
 2003064:	10807817 	ldw	r2,480(r2)
 2003068:	423ffa04 	addi	r8,r8,-24
 200306c:	dc408e15 	stw	r17,568(sp)
 2003070:	dc808c15 	stw	r18,560(sp)
 2003074:	da008f15 	stw	r8,572(sp)
 2003078:	dd809417 	ldw	r22,592(sp)
 200307c:	2823883a 	mov	r17,r5
 2003080:	103f751e 	bne	r2,zero,2002e58 <__alt_mem_onchip_memory2_0+0xfdff2e58>
 2003084:	280490ba 	slli	r2,r5,2
 2003088:	d8c07804 	addi	r3,sp,480
 200308c:	10bfff04 	addi	r2,r2,-4
 2003090:	1885883a 	add	r2,r3,r2
 2003094:	4007883a 	mov	r3,r8
 2003098:	10bfff04 	addi	r2,r2,-4
 200309c:	11000117 	ldw	r4,4(r2)
 20030a0:	8c7fffc4 	addi	r17,r17,-1
 20030a4:	18fffa04 	addi	r3,r3,-24
 20030a8:	203ffb26 	beq	r4,zero,2003098 <__alt_mem_onchip_memory2_0+0xfdff3098>
 20030ac:	d8c08f15 	stw	r3,572(sp)
 20030b0:	003f6906 	br	2002e58 <__alt_mem_onchip_memory2_0+0xfdff2e58>
 20030b4:	da008d17 	ldw	r8,564(sp)
 20030b8:	d8802804 	addi	r2,sp,160
 20030bc:	dcc02604 	addi	r19,sp,152
 20030c0:	1221883a 	add	r16,r2,r8
 20030c4:	0007883a 	mov	r3,zero
 20030c8:	0005883a 	mov	r2,zero
 20030cc:	81800017 	ldw	r6,0(r16)
 20030d0:	81c00117 	ldw	r7,4(r16)
 20030d4:	1009883a 	mov	r4,r2
 20030d8:	843ffe04 	addi	r16,r16,-8
 20030dc:	180b883a 	mov	r5,r3
 20030e0:	2004d380 	call	2004d38 <__adddf3>
 20030e4:	84fff91e 	bne	r16,r19,20030cc <__alt_mem_onchip_memory2_0+0xfdff30cc>
 20030e8:	da008c17 	ldw	r8,560(sp)
 20030ec:	d9002817 	ldw	r4,160(sp)
 20030f0:	d9402917 	ldw	r5,164(sp)
 20030f4:	40009726 	beq	r8,zero,2003354 <__kernel_rem_pio2+0xc64>
 20030f8:	da009017 	ldw	r8,576(sp)
 20030fc:	19a0003c 	xorhi	r6,r3,32768
 2003100:	180f883a 	mov	r7,r3
 2003104:	41800115 	stw	r6,4(r8)
 2003108:	40800015 	stw	r2,0(r8)
 200310c:	100d883a 	mov	r6,r2
 2003110:	2006a040 	call	2006a04 <__subdf3>
 2003114:	04400c0e 	bge	zero,r17,2003148 <__kernel_rem_pio2+0xa58>
 2003118:	dc002a04 	addi	r16,sp,168
 200311c:	04c00044 	movi	r19,1
 2003120:	81800017 	ldw	r6,0(r16)
 2003124:	81c00117 	ldw	r7,4(r16)
 2003128:	1009883a 	mov	r4,r2
 200312c:	180b883a 	mov	r5,r3
 2003130:	9cc00044 	addi	r19,r19,1
 2003134:	2004d380 	call	2004d38 <__adddf3>
 2003138:	84000204 	addi	r16,r16,8
 200313c:	8cfff80e 	bge	r17,r19,2003120 <__alt_mem_onchip_memory2_0+0xfdff3120>
 2003140:	da008c17 	ldw	r8,560(sp)
 2003144:	40000126 	beq	r8,zero,200314c <__kernel_rem_pio2+0xa5c>
 2003148:	18e0003c 	xorhi	r3,r3,32768
 200314c:	da009017 	ldw	r8,576(sp)
 2003150:	40800215 	stw	r2,8(r8)
 2003154:	40c00315 	stw	r3,12(r8)
 2003158:	003fa306 	br	2002fe8 <__alt_mem_onchip_memory2_0+0xfdff2fe8>
 200315c:	da00a517 	ldw	r8,660(sp)
 2003160:	008000c4 	movi	r2,3
 2003164:	40bfa01e 	bne	r8,r2,2002fe8 <__alt_mem_onchip_memory2_0+0xfdff2fe8>
 2003168:	0440880e 	bge	zero,r17,200338c <__kernel_rem_pio2+0xc9c>
 200316c:	da008d17 	ldw	r8,564(sp)
 2003170:	882690fa 	slli	r19,r17,3
 2003174:	dd402804 	addi	r21,sp,160
 2003178:	da05883a 	add	r2,sp,r8
 200317c:	10802804 	addi	r2,r2,160
 2003180:	15c00017 	ldw	r23,0(r2)
 2003184:	15800117 	ldw	r22,4(r2)
 2003188:	9829883a 	mov	r20,r19
 200318c:	9cfffe04 	addi	r19,r19,-8
 2003190:	ace7883a 	add	r19,r21,r19
 2003194:	ad29883a 	add	r20,r21,r20
 2003198:	dac02604 	addi	r11,sp,152
 200319c:	8811883a 	mov	r8,r17
 20031a0:	9c400017 	ldw	r17,0(r19)
 20031a4:	9f000117 	ldw	fp,4(r19)
 20031a8:	b809883a 	mov	r4,r23
 20031ac:	b00b883a 	mov	r5,r22
 20031b0:	880d883a 	mov	r6,r17
 20031b4:	e00f883a 	mov	r7,fp
 20031b8:	da009815 	stw	r8,608(sp)
 20031bc:	dac09a15 	stw	r11,616(sp)
 20031c0:	2004d380 	call	2004d38 <__adddf3>
 20031c4:	8809883a 	mov	r4,r17
 20031c8:	e00b883a 	mov	r5,fp
 20031cc:	100d883a 	mov	r6,r2
 20031d0:	180f883a 	mov	r7,r3
 20031d4:	1025883a 	mov	r18,r2
 20031d8:	1821883a 	mov	r16,r3
 20031dc:	2006a040 	call	2006a04 <__subdf3>
 20031e0:	b809883a 	mov	r4,r23
 20031e4:	b00b883a 	mov	r5,r22
 20031e8:	100d883a 	mov	r6,r2
 20031ec:	180f883a 	mov	r7,r3
 20031f0:	2004d380 	call	2004d38 <__adddf3>
 20031f4:	dac09a17 	ldw	r11,616(sp)
 20031f8:	a0800015 	stw	r2,0(r20)
 20031fc:	a0c00115 	stw	r3,4(r20)
 2003200:	9c800015 	stw	r18,0(r19)
 2003204:	9c000115 	stw	r16,4(r19)
 2003208:	9cfffe04 	addi	r19,r19,-8
 200320c:	a53ffe04 	addi	r20,r20,-8
 2003210:	902f883a 	mov	r23,r18
 2003214:	802d883a 	mov	r22,r16
 2003218:	da009817 	ldw	r8,608(sp)
 200321c:	9affe01e 	bne	r19,r11,20031a0 <__alt_mem_onchip_memory2_0+0xfdff31a0>
 2003220:	00800044 	movi	r2,1
 2003224:	1200590e 	bge	r2,r8,200338c <__kernel_rem_pio2+0xc9c>
 2003228:	402290fa 	slli	r17,r8,3
 200322c:	da008d17 	ldw	r8,564(sp)
 2003230:	8c3ffe04 	addi	r16,r17,-8
 2003234:	da05883a 	add	r2,sp,r8
 2003238:	10802804 	addi	r2,r2,160
 200323c:	15800017 	ldw	r22,0(r2)
 2003240:	15000117 	ldw	r20,4(r2)
 2003244:	ac63883a 	add	r17,r21,r17
 2003248:	ac21883a 	add	r16,r21,r16
 200324c:	8827883a 	mov	r19,r17
 2003250:	8811883a 	mov	r8,r17
 2003254:	84400017 	ldw	r17,0(r16)
 2003258:	87000117 	ldw	fp,4(r16)
 200325c:	b00d883a 	mov	r6,r22
 2003260:	a00f883a 	mov	r7,r20
 2003264:	8809883a 	mov	r4,r17
 2003268:	e00b883a 	mov	r5,fp
 200326c:	da009815 	stw	r8,608(sp)
 2003270:	2004d380 	call	2004d38 <__adddf3>
 2003274:	8809883a 	mov	r4,r17
 2003278:	e00b883a 	mov	r5,fp
 200327c:	100d883a 	mov	r6,r2
 2003280:	180f883a 	mov	r7,r3
 2003284:	102f883a 	mov	r23,r2
 2003288:	1825883a 	mov	r18,r3
 200328c:	2006a040 	call	2006a04 <__subdf3>
 2003290:	b00d883a 	mov	r6,r22
 2003294:	a00f883a 	mov	r7,r20
 2003298:	1009883a 	mov	r4,r2
 200329c:	180b883a 	mov	r5,r3
 20032a0:	2004d380 	call	2004d38 <__adddf3>
 20032a4:	98800015 	stw	r2,0(r19)
 20032a8:	98c00115 	stw	r3,4(r19)
 20032ac:	85c00015 	stw	r23,0(r16)
 20032b0:	84800115 	stw	r18,4(r16)
 20032b4:	843ffe04 	addi	r16,r16,-8
 20032b8:	9cfffe04 	addi	r19,r19,-8
 20032bc:	b82d883a 	mov	r22,r23
 20032c0:	9029883a 	mov	r20,r18
 20032c4:	da009817 	ldw	r8,608(sp)
 20032c8:	ac3fe21e 	bne	r21,r16,2003254 <__alt_mem_onchip_memory2_0+0xfdff3254>
 20032cc:	4023883a 	mov	r17,r8
 20032d0:	dc002a04 	addi	r16,sp,168
 20032d4:	0005883a 	mov	r2,zero
 20032d8:	0007883a 	mov	r3,zero
 20032dc:	89800017 	ldw	r6,0(r17)
 20032e0:	89c00117 	ldw	r7,4(r17)
 20032e4:	1009883a 	mov	r4,r2
 20032e8:	8c7ffe04 	addi	r17,r17,-8
 20032ec:	180b883a 	mov	r5,r3
 20032f0:	2004d380 	call	2004d38 <__adddf3>
 20032f4:	8c3ff91e 	bne	r17,r16,20032dc <__alt_mem_onchip_memory2_0+0xfdff32dc>
 20032f8:	da008c17 	ldw	r8,560(sp)
 20032fc:	40002726 	beq	r8,zero,200339c <__kernel_rem_pio2+0xcac>
 2003300:	d9002b17 	ldw	r4,172(sp)
 2003304:	d9402917 	ldw	r5,164(sp)
 2003308:	d9802a17 	ldw	r6,168(sp)
 200330c:	da009017 	ldw	r8,576(sp)
 2003310:	d9c02817 	ldw	r7,160(sp)
 2003314:	2960003c 	xorhi	r5,r5,32768
 2003318:	2120003c 	xorhi	r4,r4,32768
 200331c:	18e0003c 	xorhi	r3,r3,32768
 2003320:	41c00015 	stw	r7,0(r8)
 2003324:	41400115 	stw	r5,4(r8)
 2003328:	41800215 	stw	r6,8(r8)
 200332c:	41000315 	stw	r4,12(r8)
 2003330:	40800415 	stw	r2,16(r8)
 2003334:	40c00515 	stw	r3,20(r8)
 2003338:	003f2b06 	br	2002fe8 <__alt_mem_onchip_memory2_0+0xfdff2fe8>
 200333c:	da008c17 	ldw	r8,560(sp)
 2003340:	0005883a 	mov	r2,zero
 2003344:	0007883a 	mov	r3,zero
 2003348:	d9002817 	ldw	r4,160(sp)
 200334c:	d9402917 	ldw	r5,164(sp)
 2003350:	403f691e 	bne	r8,zero,20030f8 <__alt_mem_onchip_memory2_0+0xfdff30f8>
 2003354:	da009017 	ldw	r8,576(sp)
 2003358:	100d883a 	mov	r6,r2
 200335c:	180f883a 	mov	r7,r3
 2003360:	40800015 	stw	r2,0(r8)
 2003364:	40c00115 	stw	r3,4(r8)
 2003368:	2006a040 	call	2006a04 <__subdf3>
 200336c:	047f6a16 	blt	zero,r17,2003118 <__alt_mem_onchip_memory2_0+0xfdff3118>
 2003370:	da009017 	ldw	r8,576(sp)
 2003374:	40800215 	stw	r2,8(r8)
 2003378:	40c00315 	stw	r3,12(r8)
 200337c:	003f1a06 	br	2002fe8 <__alt_mem_onchip_memory2_0+0xfdff2fe8>
 2003380:	da00a517 	ldw	r8,660(sp)
 2003384:	008000c4 	movi	r2,3
 2003388:	40bf171e 	bne	r8,r2,2002fe8 <__alt_mem_onchip_memory2_0+0xfdff2fe8>
 200338c:	da008c17 	ldw	r8,560(sp)
 2003390:	0005883a 	mov	r2,zero
 2003394:	0007883a 	mov	r3,zero
 2003398:	403fd91e 	bne	r8,zero,2003300 <__alt_mem_onchip_memory2_0+0xfdff3300>
 200339c:	da009017 	ldw	r8,576(sp)
 20033a0:	d9802817 	ldw	r6,160(sp)
 20033a4:	d9402a17 	ldw	r5,168(sp)
 20033a8:	d9002b17 	ldw	r4,172(sp)
 20033ac:	41800015 	stw	r6,0(r8)
 20033b0:	d9802917 	ldw	r6,164(sp)
 20033b4:	41400215 	stw	r5,8(r8)
 20033b8:	41000315 	stw	r4,12(r8)
 20033bc:	41800115 	stw	r6,4(r8)
 20033c0:	40800415 	stw	r2,16(r8)
 20033c4:	40c00515 	stw	r3,20(r8)
 20033c8:	003f0706 	br	2002fe8 <__alt_mem_onchip_memory2_0+0xfdff2fe8>
 20033cc:	a00d883a 	mov	r6,r20
 20033d0:	580f883a 	mov	r7,r11
 20033d4:	0009883a 	mov	r4,zero
 20033d8:	014ffc34 	movhi	r5,16368
 20033dc:	2006a040 	call	2006a04 <__subdf3>
 20033e0:	1029883a 	mov	r20,r2
 20033e4:	1817883a 	mov	r11,r3
 20033e8:	04800084 	movi	r18,2
 20033ec:	003dc706 	br	2002b0c <__alt_mem_onchip_memory2_0+0xfdff2b0c>
 20033f0:	840d883a 	add	r6,r16,r16
 20033f4:	318d883a 	add	r6,r6,r6
 20033f8:	d9a3883a 	add	r17,sp,r6
 20033fc:	a009883a 	mov	r4,r20
 2003400:	b80b883a 	mov	r5,r23
 2003404:	8c407804 	addi	r17,r17,480
 2003408:	20072d40 	call	20072d4 <__fixdfsi>
 200340c:	88800015 	stw	r2,0(r17)
 2003410:	8023883a 	mov	r17,r16
 2003414:	003e9006 	br	2002e58 <__alt_mem_onchip_memory2_0+0xfdff2e58>
 2003418:	d8009215 	stw	zero,584(sp)
 200341c:	003cd206 	br	2002768 <__alt_mem_onchip_memory2_0+0xfdff2768>

02003420 <__kernel_sin>:
 2003420:	00a00034 	movhi	r2,32768
 2003424:	defff404 	addi	sp,sp,-48
 2003428:	10bfffc4 	addi	r2,r2,-1
 200342c:	00cf9034 	movhi	r3,15936
 2003430:	ddc00915 	stw	r23,36(sp)
 2003434:	dd800815 	stw	r22,32(sp)
 2003438:	dc400315 	stw	r17,12(sp)
 200343c:	dc000215 	stw	r16,8(sp)
 2003440:	dfc00b15 	stw	ra,44(sp)
 2003444:	df000a15 	stw	fp,40(sp)
 2003448:	dd400715 	stw	r21,28(sp)
 200344c:	dd000615 	stw	r20,24(sp)
 2003450:	dcc00515 	stw	r19,20(sp)
 2003454:	dc800415 	stw	r18,16(sp)
 2003458:	2884703a 	and	r2,r5,r2
 200345c:	18ffffc4 	addi	r3,r3,-1
 2003460:	2821883a 	mov	r16,r5
 2003464:	2023883a 	mov	r17,r4
 2003468:	302f883a 	mov	r23,r6
 200346c:	382d883a 	mov	r22,r7
 2003470:	18800216 	blt	r3,r2,200347c <__kernel_sin+0x5c>
 2003474:	20072d40 	call	20072d4 <__fixdfsi>
 2003478:	10009826 	beq	r2,zero,20036dc <__kernel_sin+0x2bc>
 200347c:	8809883a 	mov	r4,r17
 2003480:	800b883a 	mov	r5,r16
 2003484:	880d883a 	mov	r6,r17
 2003488:	800f883a 	mov	r7,r16
 200348c:	20061980 	call	2006198 <__muldf3>
 2003490:	1009883a 	mov	r4,r2
 2003494:	180b883a 	mov	r5,r3
 2003498:	880d883a 	mov	r6,r17
 200349c:	800f883a 	mov	r7,r16
 20034a0:	1027883a 	mov	r19,r2
 20034a4:	1825883a 	mov	r18,r3
 20034a8:	20061980 	call	2006198 <__muldf3>
 20034ac:	0196b434 	movhi	r6,23248
 20034b0:	01cf79b4 	movhi	r7,15846
 20034b4:	9809883a 	mov	r4,r19
 20034b8:	900b883a 	mov	r5,r18
 20034bc:	31b55f04 	addi	r6,r6,-10884
 20034c0:	39f64e84 	addi	r7,r7,-9926
 20034c4:	102b883a 	mov	r21,r2
 20034c8:	1829883a 	mov	r20,r3
 20034cc:	20061980 	call	2006198 <__muldf3>
 20034d0:	01a28b34 	movhi	r6,35372
 20034d4:	01cf96f4 	movhi	r7,15963
 20034d8:	1009883a 	mov	r4,r2
 20034dc:	180b883a 	mov	r5,r3
 20034e0:	31a73ac4 	addi	r6,r6,-25365
 20034e4:	39f97984 	addi	r7,r7,-6682
 20034e8:	2006a040 	call	2006a04 <__subdf3>
 20034ec:	1009883a 	mov	r4,r2
 20034f0:	180b883a 	mov	r5,r3
 20034f4:	980d883a 	mov	r6,r19
 20034f8:	900f883a 	mov	r7,r18
 20034fc:	20061980 	call	2006198 <__muldf3>
 2003500:	0195ecb4 	movhi	r6,22450
 2003504:	01cfb1f4 	movhi	r7,16071
 2003508:	1009883a 	mov	r4,r2
 200350c:	180b883a 	mov	r5,r3
 2003510:	31bf9f44 	addi	r6,r6,-387
 2003514:	39c778c4 	addi	r7,r7,7651
 2003518:	2004d380 	call	2004d38 <__adddf3>
 200351c:	1009883a 	mov	r4,r2
 2003520:	180b883a 	mov	r5,r3
 2003524:	980d883a 	mov	r6,r19
 2003528:	900f883a 	mov	r7,r18
 200352c:	20061980 	call	2006198 <__muldf3>
 2003530:	01867074 	movhi	r6,6593
 2003534:	01cfcab4 	movhi	r7,16170
 2003538:	1009883a 	mov	r4,r2
 200353c:	180b883a 	mov	r5,r3
 2003540:	31987544 	addi	r6,r6,25045
 2003544:	39c06804 	addi	r7,r7,416
 2003548:	2006a040 	call	2006a04 <__subdf3>
 200354c:	1009883a 	mov	r4,r2
 2003550:	180b883a 	mov	r5,r3
 2003554:	980d883a 	mov	r6,r19
 2003558:	900f883a 	mov	r7,r18
 200355c:	20061980 	call	2006198 <__muldf3>
 2003560:	01844474 	movhi	r6,4369
 2003564:	01cfe074 	movhi	r7,16257
 2003568:	1009883a 	mov	r4,r2
 200356c:	180b883a 	mov	r5,r3
 2003570:	31be2984 	addi	r6,r6,-1882
 2003574:	39c44444 	addi	r7,r7,4369
 2003578:	2004d380 	call	2004d38 <__adddf3>
 200357c:	d9000c17 	ldw	r4,48(sp)
 2003580:	1839883a 	mov	fp,r3
 2003584:	20003e26 	beq	r4,zero,2003680 <__kernel_sin+0x260>
 2003588:	b809883a 	mov	r4,r23
 200358c:	b00b883a 	mov	r5,r22
 2003590:	000d883a 	mov	r6,zero
 2003594:	01cff834 	movhi	r7,16352
 2003598:	d8800015 	stw	r2,0(sp)
 200359c:	20061980 	call	2006198 <__muldf3>
 20035a0:	da000017 	ldw	r8,0(sp)
 20035a4:	a809883a 	mov	r4,r21
 20035a8:	a00b883a 	mov	r5,r20
 20035ac:	400d883a 	mov	r6,r8
 20035b0:	e00f883a 	mov	r7,fp
 20035b4:	d8c00115 	stw	r3,4(sp)
 20035b8:	d8800015 	stw	r2,0(sp)
 20035bc:	20061980 	call	2006198 <__muldf3>
 20035c0:	da800017 	ldw	r10,0(sp)
 20035c4:	da400117 	ldw	r9,4(sp)
 20035c8:	100d883a 	mov	r6,r2
 20035cc:	5009883a 	mov	r4,r10
 20035d0:	480b883a 	mov	r5,r9
 20035d4:	180f883a 	mov	r7,r3
 20035d8:	2006a040 	call	2006a04 <__subdf3>
 20035dc:	980d883a 	mov	r6,r19
 20035e0:	900f883a 	mov	r7,r18
 20035e4:	1009883a 	mov	r4,r2
 20035e8:	180b883a 	mov	r5,r3
 20035ec:	20061980 	call	2006198 <__muldf3>
 20035f0:	1009883a 	mov	r4,r2
 20035f4:	180b883a 	mov	r5,r3
 20035f8:	b80d883a 	mov	r6,r23
 20035fc:	b00f883a 	mov	r7,r22
 2003600:	2006a040 	call	2006a04 <__subdf3>
 2003604:	01955574 	movhi	r6,21845
 2003608:	01cff174 	movhi	r7,16325
 200360c:	a809883a 	mov	r4,r21
 2003610:	a00b883a 	mov	r5,r20
 2003614:	31955244 	addi	r6,r6,21833
 2003618:	39d55544 	addi	r7,r7,21845
 200361c:	1027883a 	mov	r19,r2
 2003620:	1825883a 	mov	r18,r3
 2003624:	20061980 	call	2006198 <__muldf3>
 2003628:	9809883a 	mov	r4,r19
 200362c:	900b883a 	mov	r5,r18
 2003630:	100d883a 	mov	r6,r2
 2003634:	180f883a 	mov	r7,r3
 2003638:	2004d380 	call	2004d38 <__adddf3>
 200363c:	8809883a 	mov	r4,r17
 2003640:	800b883a 	mov	r5,r16
 2003644:	100d883a 	mov	r6,r2
 2003648:	180f883a 	mov	r7,r3
 200364c:	2006a040 	call	2006a04 <__subdf3>
 2003650:	dfc00b17 	ldw	ra,44(sp)
 2003654:	df000a17 	ldw	fp,40(sp)
 2003658:	ddc00917 	ldw	r23,36(sp)
 200365c:	dd800817 	ldw	r22,32(sp)
 2003660:	dd400717 	ldw	r21,28(sp)
 2003664:	dd000617 	ldw	r20,24(sp)
 2003668:	dcc00517 	ldw	r19,20(sp)
 200366c:	dc800417 	ldw	r18,16(sp)
 2003670:	dc400317 	ldw	r17,12(sp)
 2003674:	dc000217 	ldw	r16,8(sp)
 2003678:	dec00c04 	addi	sp,sp,48
 200367c:	f800283a 	ret
 2003680:	9809883a 	mov	r4,r19
 2003684:	900b883a 	mov	r5,r18
 2003688:	100d883a 	mov	r6,r2
 200368c:	180f883a 	mov	r7,r3
 2003690:	20061980 	call	2006198 <__muldf3>
 2003694:	01955574 	movhi	r6,21845
 2003698:	01cff174 	movhi	r7,16325
 200369c:	1009883a 	mov	r4,r2
 20036a0:	180b883a 	mov	r5,r3
 20036a4:	31955244 	addi	r6,r6,21833
 20036a8:	39d55544 	addi	r7,r7,21845
 20036ac:	2006a040 	call	2006a04 <__subdf3>
 20036b0:	a80d883a 	mov	r6,r21
 20036b4:	a00f883a 	mov	r7,r20
 20036b8:	1009883a 	mov	r4,r2
 20036bc:	180b883a 	mov	r5,r3
 20036c0:	20061980 	call	2006198 <__muldf3>
 20036c4:	1009883a 	mov	r4,r2
 20036c8:	180b883a 	mov	r5,r3
 20036cc:	880d883a 	mov	r6,r17
 20036d0:	800f883a 	mov	r7,r16
 20036d4:	2004d380 	call	2004d38 <__adddf3>
 20036d8:	003fdd06 	br	2003650 <__alt_mem_onchip_memory2_0+0xfdff3650>
 20036dc:	8805883a 	mov	r2,r17
 20036e0:	8007883a 	mov	r3,r16
 20036e4:	003fda06 	br	2003650 <__alt_mem_onchip_memory2_0+0xfdff3650>

020036e8 <fabs>:
 20036e8:	00e00034 	movhi	r3,32768
 20036ec:	18ffffc4 	addi	r3,r3,-1
 20036f0:	2005883a 	mov	r2,r4
 20036f4:	28c6703a 	and	r3,r5,r3
 20036f8:	f800283a 	ret

020036fc <floor>:
 20036fc:	defff904 	addi	sp,sp,-28
 2003700:	dc800215 	stw	r18,8(sp)
 2003704:	2825d53a 	srai	r18,r5,20
 2003708:	dd000415 	stw	r20,16(sp)
 200370c:	dcc00315 	stw	r19,12(sp)
 2003710:	9481ffcc 	andi	r18,r18,2047
 2003714:	dc400115 	stw	r17,4(sp)
 2003718:	dc000015 	stw	r16,0(sp)
 200371c:	dfc00615 	stw	ra,24(sp)
 2003720:	dd400515 	stw	r21,20(sp)
 2003724:	94ff0044 	addi	r19,r18,-1023
 2003728:	018004c4 	movi	r6,19
 200372c:	2821883a 	mov	r16,r5
 2003730:	2005883a 	mov	r2,r4
 2003734:	280f883a 	mov	r7,r5
 2003738:	2829883a 	mov	r20,r5
 200373c:	2023883a 	mov	r17,r4
 2003740:	34c01916 	blt	r6,r19,20037a8 <floor+0xac>
 2003744:	98003d16 	blt	r19,zero,200383c <floor+0x140>
 2003748:	04800434 	movhi	r18,16
 200374c:	94bfffc4 	addi	r18,r18,-1
 2003750:	94e5d83a 	sra	r18,r18,r19
 2003754:	914c703a 	and	r6,r18,r5
 2003758:	310cb03a 	or	r6,r6,r4
 200375c:	30001626 	beq	r6,zero,20037b8 <floor+0xbc>
 2003760:	01a20034 	movhi	r6,34816
 2003764:	01df8e34 	movhi	r7,32312
 2003768:	319d6704 	addi	r6,r6,30108
 200376c:	39f90f04 	addi	r7,r7,-7108
 2003770:	2004d380 	call	2004d38 <__adddf3>
 2003774:	1009883a 	mov	r4,r2
 2003778:	180b883a 	mov	r5,r3
 200377c:	000d883a 	mov	r6,zero
 2003780:	000f883a 	mov	r7,zero
 2003784:	2005fd80 	call	2005fd8 <__gedf2>
 2003788:	0080040e 	bge	zero,r2,200379c <floor+0xa0>
 200378c:	80003d16 	blt	r16,zero,2003884 <floor+0x188>
 2003790:	04a0303a 	nor	r16,zero,r18
 2003794:	a420703a 	and	r16,r20,r16
 2003798:	0023883a 	mov	r17,zero
 200379c:	8805883a 	mov	r2,r17
 20037a0:	8007883a 	mov	r3,r16
 20037a4:	00000506 	br	20037bc <floor+0xc0>
 20037a8:	01800cc4 	movi	r6,51
 20037ac:	34c00c0e 	bge	r6,r19,20037e0 <floor+0xe4>
 20037b0:	01810004 	movi	r6,1024
 20037b4:	99803026 	beq	r19,r6,2003878 <floor+0x17c>
 20037b8:	3807883a 	mov	r3,r7
 20037bc:	dfc00617 	ldw	ra,24(sp)
 20037c0:	dd400517 	ldw	r21,20(sp)
 20037c4:	dd000417 	ldw	r20,16(sp)
 20037c8:	dcc00317 	ldw	r19,12(sp)
 20037cc:	dc800217 	ldw	r18,8(sp)
 20037d0:	dc400117 	ldw	r17,4(sp)
 20037d4:	dc000017 	ldw	r16,0(sp)
 20037d8:	dec00704 	addi	sp,sp,28
 20037dc:	f800283a 	ret
 20037e0:	01bfffc4 	movi	r6,-1
 20037e4:	957efb44 	addi	r21,r18,-1043
 20037e8:	356ad83a 	srl	r21,r6,r21
 20037ec:	a90c703a 	and	r6,r21,r4
 20037f0:	303ff126 	beq	r6,zero,20037b8 <__alt_mem_onchip_memory2_0+0xfdff37b8>
 20037f4:	01a20034 	movhi	r6,34816
 20037f8:	01df8e34 	movhi	r7,32312
 20037fc:	319d6704 	addi	r6,r6,30108
 2003800:	39f90f04 	addi	r7,r7,-7108
 2003804:	2004d380 	call	2004d38 <__adddf3>
 2003808:	1009883a 	mov	r4,r2
 200380c:	180b883a 	mov	r5,r3
 2003810:	000d883a 	mov	r6,zero
 2003814:	000f883a 	mov	r7,zero
 2003818:	2005fd80 	call	2005fd8 <__gedf2>
 200381c:	00bfdf0e 	bge	zero,r2,200379c <__alt_mem_onchip_memory2_0+0xfdff379c>
 2003820:	80001c16 	blt	r16,zero,2003894 <floor+0x198>
 2003824:	056a303a 	nor	r21,zero,r21
 2003828:	a021883a 	mov	r16,r20
 200382c:	8d62703a 	and	r17,r17,r21
 2003830:	8805883a 	mov	r2,r17
 2003834:	8007883a 	mov	r3,r16
 2003838:	003fe006 	br	20037bc <__alt_mem_onchip_memory2_0+0xfdff37bc>
 200383c:	01a20034 	movhi	r6,34816
 2003840:	01df8e34 	movhi	r7,32312
 2003844:	319d6704 	addi	r6,r6,30108
 2003848:	39f90f04 	addi	r7,r7,-7108
 200384c:	2004d380 	call	2004d38 <__adddf3>
 2003850:	1009883a 	mov	r4,r2
 2003854:	180b883a 	mov	r5,r3
 2003858:	000d883a 	mov	r6,zero
 200385c:	000f883a 	mov	r7,zero
 2003860:	2005fd80 	call	2005fd8 <__gedf2>
 2003864:	00bfcd0e 	bge	zero,r2,200379c <__alt_mem_onchip_memory2_0+0xfdff379c>
 2003868:	80001516 	blt	r16,zero,20038c0 <floor+0x1c4>
 200386c:	0023883a 	mov	r17,zero
 2003870:	0021883a 	mov	r16,zero
 2003874:	003fc906 	br	200379c <__alt_mem_onchip_memory2_0+0xfdff379c>
 2003878:	200d883a 	mov	r6,r4
 200387c:	2004d380 	call	2004d38 <__adddf3>
 2003880:	003fce06 	br	20037bc <__alt_mem_onchip_memory2_0+0xfdff37bc>
 2003884:	00800434 	movhi	r2,16
 2003888:	14e7d83a 	sra	r19,r2,r19
 200388c:	84e9883a 	add	r20,r16,r19
 2003890:	003fbf06 	br	2003790 <__alt_mem_onchip_memory2_0+0xfdff3790>
 2003894:	00800504 	movi	r2,20
 2003898:	98801326 	beq	r19,r2,20038e8 <floor+0x1ec>
 200389c:	00810cc4 	movi	r2,1075
 20038a0:	14a5c83a 	sub	r18,r2,r18
 20038a4:	00800044 	movi	r2,1
 20038a8:	1484983a 	sll	r2,r2,r18
 20038ac:	1445883a 	add	r2,r2,r17
 20038b0:	14400b2e 	bgeu	r2,r17,20038e0 <floor+0x1e4>
 20038b4:	85000044 	addi	r20,r16,1
 20038b8:	1023883a 	mov	r17,r2
 20038bc:	003fd906 	br	2003824 <__alt_mem_onchip_memory2_0+0xfdff3824>
 20038c0:	00a00034 	movhi	r2,32768
 20038c4:	10bfffc4 	addi	r2,r2,-1
 20038c8:	8084703a 	and	r2,r16,r2
 20038cc:	1462b03a 	or	r17,r2,r17
 20038d0:	883fb226 	beq	r17,zero,200379c <__alt_mem_onchip_memory2_0+0xfdff379c>
 20038d4:	0023883a 	mov	r17,zero
 20038d8:	042ffc34 	movhi	r16,49136
 20038dc:	003faf06 	br	200379c <__alt_mem_onchip_memory2_0+0xfdff379c>
 20038e0:	1023883a 	mov	r17,r2
 20038e4:	003fcf06 	br	2003824 <__alt_mem_onchip_memory2_0+0xfdff3824>
 20038e8:	85000044 	addi	r20,r16,1
 20038ec:	003fcd06 	br	2003824 <__alt_mem_onchip_memory2_0+0xfdff3824>

020038f0 <__fpclassifyd>:
 20038f0:	00a00034 	movhi	r2,32768
 20038f4:	10bfffc4 	addi	r2,r2,-1
 20038f8:	2884703a 	and	r2,r5,r2
 20038fc:	10000726 	beq	r2,zero,200391c <__fpclassifyd+0x2c>
 2003900:	00fffc34 	movhi	r3,65520
 2003904:	019ff834 	movhi	r6,32736
 2003908:	28c7883a 	add	r3,r5,r3
 200390c:	31bfffc4 	addi	r6,r6,-1
 2003910:	30c00536 	bltu	r6,r3,2003928 <__fpclassifyd+0x38>
 2003914:	00800104 	movi	r2,4
 2003918:	f800283a 	ret
 200391c:	2000021e 	bne	r4,zero,2003928 <__fpclassifyd+0x38>
 2003920:	00800084 	movi	r2,2
 2003924:	f800283a 	ret
 2003928:	00dffc34 	movhi	r3,32752
 200392c:	019ff834 	movhi	r6,32736
 2003930:	28cb883a 	add	r5,r5,r3
 2003934:	31bfffc4 	addi	r6,r6,-1
 2003938:	317ff62e 	bgeu	r6,r5,2003914 <__alt_mem_onchip_memory2_0+0xfdff3914>
 200393c:	01400434 	movhi	r5,16
 2003940:	297fffc4 	addi	r5,r5,-1
 2003944:	28800236 	bltu	r5,r2,2003950 <__fpclassifyd+0x60>
 2003948:	008000c4 	movi	r2,3
 200394c:	f800283a 	ret
 2003950:	10c00226 	beq	r2,r3,200395c <__fpclassifyd+0x6c>
 2003954:	0005883a 	mov	r2,zero
 2003958:	f800283a 	ret
 200395c:	2005003a 	cmpeq	r2,r4,zero
 2003960:	f800283a 	ret

02003964 <matherr>:
 2003964:	0005883a 	mov	r2,zero
 2003968:	f800283a 	ret

0200396c <scalbn>:
 200396c:	2a1ffc2c 	andhi	r8,r5,32752
 2003970:	4011d53a 	srai	r8,r8,20
 2003974:	defffe04 	addi	sp,sp,-8
 2003978:	dc000015 	stw	r16,0(sp)
 200397c:	dfc00115 	stw	ra,4(sp)
 2003980:	280f883a 	mov	r7,r5
 2003984:	2015883a 	mov	r10,r4
 2003988:	3021883a 	mov	r16,r6
 200398c:	4000251e 	bne	r8,zero,2003a24 <scalbn+0xb8>
 2003990:	00a00034 	movhi	r2,32768
 2003994:	10bfffc4 	addi	r2,r2,-1
 2003998:	2884703a 	and	r2,r5,r2
 200399c:	1104b03a 	or	r2,r2,r4
 20039a0:	10003126 	beq	r2,zero,2003a68 <scalbn+0xfc>
 20039a4:	01d0d434 	movhi	r7,17232
 20039a8:	000d883a 	mov	r6,zero
 20039ac:	20061980 	call	2006198 <__muldf3>
 20039b0:	013ffff4 	movhi	r4,65535
 20039b4:	210f2c04 	addi	r4,r4,15536
 20039b8:	1015883a 	mov	r10,r2
 20039bc:	180f883a 	mov	r7,r3
 20039c0:	81002f16 	blt	r16,r4,2003a80 <scalbn+0x114>
 20039c4:	1a5ffc2c 	andhi	r9,r3,32752
 20039c8:	4813d53a 	srai	r9,r9,20
 20039cc:	0081ff84 	movi	r2,2046
 20039d0:	180d883a 	mov	r6,r3
 20039d4:	4a3ff284 	addi	r8,r9,-54
 20039d8:	4411883a 	add	r8,r8,r16
 20039dc:	1200170e 	bge	r2,r8,2003a3c <scalbn+0xd0>
 20039e0:	01220034 	movhi	r4,34816
 20039e4:	015f8e34 	movhi	r5,32312
 20039e8:	500d883a 	mov	r6,r10
 20039ec:	211d6704 	addi	r4,r4,30108
 20039f0:	29790f04 	addi	r5,r5,-7108
 20039f4:	2003b380 	call	2003b38 <copysign>
 20039f8:	01a20034 	movhi	r6,34816
 20039fc:	01df8e34 	movhi	r7,32312
 2003a00:	1009883a 	mov	r4,r2
 2003a04:	180b883a 	mov	r5,r3
 2003a08:	319d6704 	addi	r6,r6,30108
 2003a0c:	39f90f04 	addi	r7,r7,-7108
 2003a10:	20061980 	call	2006198 <__muldf3>
 2003a14:	dfc00117 	ldw	ra,4(sp)
 2003a18:	dc000017 	ldw	r16,0(sp)
 2003a1c:	dec00204 	addi	sp,sp,8
 2003a20:	f800283a 	ret
 2003a24:	0081ffc4 	movi	r2,2047
 2003a28:	280d883a 	mov	r6,r5
 2003a2c:	40803126 	beq	r8,r2,2003af4 <scalbn+0x188>
 2003a30:	4411883a 	add	r8,r8,r16
 2003a34:	0081ff84 	movi	r2,2046
 2003a38:	123fe916 	blt	r2,r8,20039e0 <__alt_mem_onchip_memory2_0+0xfdff39e0>
 2003a3c:	02001b0e 	bge	zero,r8,2003aac <scalbn+0x140>
 2003a40:	4010953a 	slli	r8,r8,20
 2003a44:	00e00434 	movhi	r3,32784
 2003a48:	18ffffc4 	addi	r3,r3,-1
 2003a4c:	30ce703a 	and	r7,r6,r3
 2003a50:	5005883a 	mov	r2,r10
 2003a54:	41c6b03a 	or	r3,r8,r7
 2003a58:	dfc00117 	ldw	ra,4(sp)
 2003a5c:	dc000017 	ldw	r16,0(sp)
 2003a60:	dec00204 	addi	sp,sp,8
 2003a64:	f800283a 	ret
 2003a68:	2005883a 	mov	r2,r4
 2003a6c:	2807883a 	mov	r3,r5
 2003a70:	dfc00117 	ldw	ra,4(sp)
 2003a74:	dc000017 	ldw	r16,0(sp)
 2003a78:	dec00204 	addi	sp,sp,8
 2003a7c:	f800283a 	ret
 2003a80:	01b0be74 	movhi	r6,49913
 2003a84:	01c06974 	movhi	r7,421
 2003a88:	31bcd644 	addi	r6,r6,-3239
 2003a8c:	39db87c4 	addi	r7,r7,28191
 2003a90:	1009883a 	mov	r4,r2
 2003a94:	180b883a 	mov	r5,r3
 2003a98:	20061980 	call	2006198 <__muldf3>
 2003a9c:	dfc00117 	ldw	ra,4(sp)
 2003aa0:	dc000017 	ldw	r16,0(sp)
 2003aa4:	dec00204 	addi	sp,sp,8
 2003aa8:	f800283a 	ret
 2003aac:	00bff2c4 	movi	r2,-53
 2003ab0:	4080160e 	bge	r8,r2,2003b0c <scalbn+0x1a0>
 2003ab4:	00b0d414 	movui	r2,50000
 2003ab8:	143fc916 	blt	r2,r16,20039e0 <__alt_mem_onchip_memory2_0+0xfdff39e0>
 2003abc:	0130be74 	movhi	r4,49913
 2003ac0:	01406974 	movhi	r5,421
 2003ac4:	500d883a 	mov	r6,r10
 2003ac8:	213cd644 	addi	r4,r4,-3239
 2003acc:	295b87c4 	addi	r5,r5,28191
 2003ad0:	2003b380 	call	2003b38 <copysign>
 2003ad4:	01b0be74 	movhi	r6,49913
 2003ad8:	01c06974 	movhi	r7,421
 2003adc:	1009883a 	mov	r4,r2
 2003ae0:	180b883a 	mov	r5,r3
 2003ae4:	31bcd644 	addi	r6,r6,-3239
 2003ae8:	39db87c4 	addi	r7,r7,28191
 2003aec:	20061980 	call	2006198 <__muldf3>
 2003af0:	003fd906 	br	2003a58 <__alt_mem_onchip_memory2_0+0xfdff3a58>
 2003af4:	200d883a 	mov	r6,r4
 2003af8:	2004d380 	call	2004d38 <__adddf3>
 2003afc:	dfc00117 	ldw	ra,4(sp)
 2003b00:	dc000017 	ldw	r16,0(sp)
 2003b04:	dec00204 	addi	sp,sp,8
 2003b08:	f800283a 	ret
 2003b0c:	42000d84 	addi	r8,r8,54
 2003b10:	4012953a 	slli	r9,r8,20
 2003b14:	01e00434 	movhi	r7,32784
 2003b18:	39ffffc4 	addi	r7,r7,-1
 2003b1c:	31ca703a 	and	r5,r6,r7
 2003b20:	5009883a 	mov	r4,r10
 2003b24:	494ab03a 	or	r5,r9,r5
 2003b28:	000d883a 	mov	r6,zero
 2003b2c:	01cf2434 	movhi	r7,15504
 2003b30:	20061980 	call	2006198 <__muldf3>
 2003b34:	003fc806 	br	2003a58 <__alt_mem_onchip_memory2_0+0xfdff3a58>

02003b38 <copysign>:
 2003b38:	2005883a 	mov	r2,r4
 2003b3c:	01200034 	movhi	r4,32768
 2003b40:	213fffc4 	addi	r4,r4,-1
 2003b44:	38e0002c 	andhi	r3,r7,32768
 2003b48:	290a703a 	and	r5,r5,r4
 2003b4c:	1946b03a 	or	r3,r3,r5
 2003b50:	f800283a 	ret

02003b54 <udivmodsi4>:
 2003b54:	2900182e 	bgeu	r5,r4,2003bb8 <udivmodsi4+0x64>
 2003b58:	28001716 	blt	r5,zero,2003bb8 <udivmodsi4+0x64>
 2003b5c:	00800804 	movi	r2,32
 2003b60:	00c00044 	movi	r3,1
 2003b64:	00000206 	br	2003b70 <udivmodsi4+0x1c>
 2003b68:	10001126 	beq	r2,zero,2003bb0 <udivmodsi4+0x5c>
 2003b6c:	28000516 	blt	r5,zero,2003b84 <udivmodsi4+0x30>
 2003b70:	294b883a 	add	r5,r5,r5
 2003b74:	10bfffc4 	addi	r2,r2,-1
 2003b78:	18c7883a 	add	r3,r3,r3
 2003b7c:	293ffa36 	bltu	r5,r4,2003b68 <__alt_mem_onchip_memory2_0+0xfdff3b68>
 2003b80:	18000b26 	beq	r3,zero,2003bb0 <udivmodsi4+0x5c>
 2003b84:	0005883a 	mov	r2,zero
 2003b88:	21400236 	bltu	r4,r5,2003b94 <udivmodsi4+0x40>
 2003b8c:	2149c83a 	sub	r4,r4,r5
 2003b90:	10c4b03a 	or	r2,r2,r3
 2003b94:	1806d07a 	srli	r3,r3,1
 2003b98:	280ad07a 	srli	r5,r5,1
 2003b9c:	183ffa1e 	bne	r3,zero,2003b88 <__alt_mem_onchip_memory2_0+0xfdff3b88>
 2003ba0:	3000011e 	bne	r6,zero,2003ba8 <udivmodsi4+0x54>
 2003ba4:	f800283a 	ret
 2003ba8:	2005883a 	mov	r2,r4
 2003bac:	f800283a 	ret
 2003bb0:	0005883a 	mov	r2,zero
 2003bb4:	003ffa06 	br	2003ba0 <__alt_mem_onchip_memory2_0+0xfdff3ba0>
 2003bb8:	00c00044 	movi	r3,1
 2003bbc:	003ff106 	br	2003b84 <__alt_mem_onchip_memory2_0+0xfdff3b84>

02003bc0 <__divsi3>:
 2003bc0:	defffe04 	addi	sp,sp,-8
 2003bc4:	dfc00115 	stw	ra,4(sp)
 2003bc8:	dc000015 	stw	r16,0(sp)
 2003bcc:	20000b16 	blt	r4,zero,2003bfc <__divsi3+0x3c>
 2003bd0:	0021883a 	mov	r16,zero
 2003bd4:	28000c16 	blt	r5,zero,2003c08 <__divsi3+0x48>
 2003bd8:	000d883a 	mov	r6,zero
 2003bdc:	2003b540 	call	2003b54 <udivmodsi4>
 2003be0:	0407c83a 	sub	r3,zero,r16
 2003be4:	1884f03a 	xor	r2,r3,r2
 2003be8:	1405883a 	add	r2,r2,r16
 2003bec:	dfc00117 	ldw	ra,4(sp)
 2003bf0:	dc000017 	ldw	r16,0(sp)
 2003bf4:	dec00204 	addi	sp,sp,8
 2003bf8:	f800283a 	ret
 2003bfc:	0109c83a 	sub	r4,zero,r4
 2003c00:	04000044 	movi	r16,1
 2003c04:	283ff40e 	bge	r5,zero,2003bd8 <__alt_mem_onchip_memory2_0+0xfdff3bd8>
 2003c08:	014bc83a 	sub	r5,zero,r5
 2003c0c:	8400005c 	xori	r16,r16,1
 2003c10:	003ff106 	br	2003bd8 <__alt_mem_onchip_memory2_0+0xfdff3bd8>

02003c14 <__modsi3>:
 2003c14:	defffd04 	addi	sp,sp,-12
 2003c18:	dfc00215 	stw	ra,8(sp)
 2003c1c:	dc400115 	stw	r17,4(sp)
 2003c20:	dc000015 	stw	r16,0(sp)
 2003c24:	20000c16 	blt	r4,zero,2003c58 <__modsi3+0x44>
 2003c28:	0023883a 	mov	r17,zero
 2003c2c:	0021883a 	mov	r16,zero
 2003c30:	28000d16 	blt	r5,zero,2003c68 <__modsi3+0x54>
 2003c34:	01800044 	movi	r6,1
 2003c38:	2003b540 	call	2003b54 <udivmodsi4>
 2003c3c:	1404f03a 	xor	r2,r2,r16
 2003c40:	8885883a 	add	r2,r17,r2
 2003c44:	dfc00217 	ldw	ra,8(sp)
 2003c48:	dc400117 	ldw	r17,4(sp)
 2003c4c:	dc000017 	ldw	r16,0(sp)
 2003c50:	dec00304 	addi	sp,sp,12
 2003c54:	f800283a 	ret
 2003c58:	0109c83a 	sub	r4,zero,r4
 2003c5c:	04400044 	movi	r17,1
 2003c60:	043fffc4 	movi	r16,-1
 2003c64:	283ff30e 	bge	r5,zero,2003c34 <__alt_mem_onchip_memory2_0+0xfdff3c34>
 2003c68:	014bc83a 	sub	r5,zero,r5
 2003c6c:	003ff106 	br	2003c34 <__alt_mem_onchip_memory2_0+0xfdff3c34>

02003c70 <__udivsi3>:
 2003c70:	000d883a 	mov	r6,zero
 2003c74:	2003b541 	jmpi	2003b54 <udivmodsi4>

02003c78 <__umodsi3>:
 2003c78:	01800044 	movi	r6,1
 2003c7c:	2003b541 	jmpi	2003b54 <udivmodsi4>

02003c80 <__mulsi3>:
 2003c80:	0005883a 	mov	r2,zero
 2003c84:	20000726 	beq	r4,zero,2003ca4 <__mulsi3+0x24>
 2003c88:	20c0004c 	andi	r3,r4,1
 2003c8c:	2008d07a 	srli	r4,r4,1
 2003c90:	18000126 	beq	r3,zero,2003c98 <__mulsi3+0x18>
 2003c94:	1145883a 	add	r2,r2,r5
 2003c98:	294b883a 	add	r5,r5,r5
 2003c9c:	203ffa1e 	bne	r4,zero,2003c88 <__alt_mem_onchip_memory2_0+0xfdff3c88>
 2003ca0:	f800283a 	ret
 2003ca4:	f800283a 	ret

02003ca8 <__addsf3>:
 2003ca8:	defffc04 	addi	sp,sp,-16
 2003cac:	2004d7fa 	srli	r2,r4,31
 2003cb0:	280ed5fa 	srli	r7,r5,23
 2003cb4:	dc000015 	stw	r16,0(sp)
 2003cb8:	01802034 	movhi	r6,128
 2003cbc:	2020d5fa 	srli	r16,r4,23
 2003cc0:	31bfffc4 	addi	r6,r6,-1
 2003cc4:	2810d7fa 	srli	r8,r5,31
 2003cc8:	3108703a 	and	r4,r6,r4
 2003ccc:	dc800215 	stw	r18,8(sp)
 2003cd0:	314c703a 	and	r6,r6,r5
 2003cd4:	84003fcc 	andi	r16,r16,255
 2003cd8:	200690fa 	slli	r3,r4,3
 2003cdc:	dfc00315 	stw	ra,12(sp)
 2003ce0:	39003fcc 	andi	r4,r7,255
 2003ce4:	dc400115 	stw	r17,4(sp)
 2003ce8:	14803fcc 	andi	r18,r2,255
 2003cec:	300c90fa 	slli	r6,r6,3
 2003cf0:	810bc83a 	sub	r5,r16,r4
 2003cf4:	92004826 	beq	r18,r8,2003e18 <__addsf3+0x170>
 2003cf8:	01406c0e 	bge	zero,r5,2003eac <__addsf3+0x204>
 2003cfc:	20001e1e 	bne	r4,zero,2003d78 <__addsf3+0xd0>
 2003d00:	3000611e 	bne	r6,zero,2003e88 <__addsf3+0x1e0>
 2003d04:	188001cc 	andi	r2,r3,7
 2003d08:	10000426 	beq	r2,zero,2003d1c <__addsf3+0x74>
 2003d0c:	190003cc 	andi	r4,r3,15
 2003d10:	00800104 	movi	r2,4
 2003d14:	20800126 	beq	r4,r2,2003d1c <__addsf3+0x74>
 2003d18:	18c00104 	addi	r3,r3,4
 2003d1c:	1901002c 	andhi	r4,r3,1024
 2003d20:	9005883a 	mov	r2,r18
 2003d24:	20003426 	beq	r4,zero,2003df8 <__addsf3+0x150>
 2003d28:	81400044 	addi	r5,r16,1
 2003d2c:	01003fc4 	movi	r4,255
 2003d30:	29006926 	beq	r5,r4,2003ed8 <__addsf3+0x230>
 2003d34:	180691ba 	slli	r3,r3,6
 2003d38:	1808d27a 	srli	r4,r3,9
 2003d3c:	29403fcc 	andi	r5,r5,255
 2003d40:	280a95fa 	slli	r5,r5,23
 2003d44:	10803fcc 	andi	r2,r2,255
 2003d48:	00c02034 	movhi	r3,128
 2003d4c:	100497fa 	slli	r2,r2,31
 2003d50:	18ffffc4 	addi	r3,r3,-1
 2003d54:	20c6703a 	and	r3,r4,r3
 2003d58:	1946b03a 	or	r3,r3,r5
 2003d5c:	1884b03a 	or	r2,r3,r2
 2003d60:	dfc00317 	ldw	ra,12(sp)
 2003d64:	dc800217 	ldw	r18,8(sp)
 2003d68:	dc400117 	ldw	r17,4(sp)
 2003d6c:	dc000017 	ldw	r16,0(sp)
 2003d70:	dec00404 	addi	sp,sp,16
 2003d74:	f800283a 	ret
 2003d78:	00803fc4 	movi	r2,255
 2003d7c:	80bfe126 	beq	r16,r2,2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003d80:	31810034 	orhi	r6,r6,1024
 2003d84:	008006c4 	movi	r2,27
 2003d88:	11405b0e 	bge	r2,r5,2003ef8 <__addsf3+0x250>
 2003d8c:	01400044 	movi	r5,1
 2003d90:	1947c83a 	sub	r3,r3,r5
 2003d94:	1881002c 	andhi	r2,r3,1024
 2003d98:	10001426 	beq	r2,zero,2003dec <__addsf3+0x144>
 2003d9c:	04410034 	movhi	r17,1024
 2003da0:	8c7fffc4 	addi	r17,r17,-1
 2003da4:	1c62703a 	and	r17,r3,r17
 2003da8:	8809883a 	mov	r4,r17
 2003dac:	20076d40 	call	20076d4 <__clzsi2>
 2003db0:	10bffec4 	addi	r2,r2,-5
 2003db4:	88a2983a 	sll	r17,r17,r2
 2003db8:	14004a16 	blt	r2,r16,2003ee4 <__addsf3+0x23c>
 2003dbc:	140bc83a 	sub	r5,r2,r16
 2003dc0:	00c007c4 	movi	r3,31
 2003dc4:	1947c83a 	sub	r3,r3,r5
 2003dc8:	88c6983a 	sll	r3,r17,r3
 2003dcc:	29400044 	addi	r5,r5,1
 2003dd0:	8962d83a 	srl	r17,r17,r5
 2003dd4:	1806c03a 	cmpne	r3,r3,zero
 2003dd8:	0021883a 	mov	r16,zero
 2003ddc:	1c46b03a 	or	r3,r3,r17
 2003de0:	003fc806 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003de4:	1000e526 	beq	r2,zero,200417c <__addsf3+0x4d4>
 2003de8:	1007883a 	mov	r3,r2
 2003dec:	188001cc 	andi	r2,r3,7
 2003df0:	103fc61e 	bne	r2,zero,2003d0c <__alt_mem_onchip_memory2_0+0xfdff3d0c>
 2003df4:	9005883a 	mov	r2,r18
 2003df8:	01003fc4 	movi	r4,255
 2003dfc:	1806d0fa 	srli	r3,r3,3
 2003e00:	81001a26 	beq	r16,r4,2003e6c <__addsf3+0x1c4>
 2003e04:	01002034 	movhi	r4,128
 2003e08:	213fffc4 	addi	r4,r4,-1
 2003e0c:	800b883a 	mov	r5,r16
 2003e10:	1908703a 	and	r4,r3,r4
 2003e14:	003fc906 	br	2003d3c <__alt_mem_onchip_memory2_0+0xfdff3d3c>
 2003e18:	01403e0e 	bge	zero,r5,2003f14 <__addsf3+0x26c>
 2003e1c:	20001e26 	beq	r4,zero,2003e98 <__addsf3+0x1f0>
 2003e20:	01003fc4 	movi	r4,255
 2003e24:	813fb726 	beq	r16,r4,2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003e28:	31810034 	orhi	r6,r6,1024
 2003e2c:	010006c4 	movi	r4,27
 2003e30:	2140570e 	bge	r4,r5,2003f90 <__addsf3+0x2e8>
 2003e34:	01400044 	movi	r5,1
 2003e38:	1947883a 	add	r3,r3,r5
 2003e3c:	1901002c 	andhi	r4,r3,1024
 2003e40:	203fea26 	beq	r4,zero,2003dec <__alt_mem_onchip_memory2_0+0xfdff3dec>
 2003e44:	84000044 	addi	r16,r16,1
 2003e48:	01003fc4 	movi	r4,255
 2003e4c:	81007526 	beq	r16,r4,2004024 <__addsf3+0x37c>
 2003e50:	00bf0034 	movhi	r2,64512
 2003e54:	10bfffc4 	addi	r2,r2,-1
 2003e58:	1900004c 	andi	r4,r3,1
 2003e5c:	1886703a 	and	r3,r3,r2
 2003e60:	1806d07a 	srli	r3,r3,1
 2003e64:	1906b03a 	or	r3,r3,r4
 2003e68:	003fa606 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003e6c:	18001a26 	beq	r3,zero,2003ed8 <__addsf3+0x230>
 2003e70:	19001034 	orhi	r4,r3,64
 2003e74:	00c02034 	movhi	r3,128
 2003e78:	18ffffc4 	addi	r3,r3,-1
 2003e7c:	017fffc4 	movi	r5,-1
 2003e80:	20c8703a 	and	r4,r4,r3
 2003e84:	003fad06 	br	2003d3c <__alt_mem_onchip_memory2_0+0xfdff3d3c>
 2003e88:	297fffc4 	addi	r5,r5,-1
 2003e8c:	28002c1e 	bne	r5,zero,2003f40 <__addsf3+0x298>
 2003e90:	1987c83a 	sub	r3,r3,r6
 2003e94:	003fbf06 	br	2003d94 <__alt_mem_onchip_memory2_0+0xfdff3d94>
 2003e98:	303f9a26 	beq	r6,zero,2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003e9c:	297fffc4 	addi	r5,r5,-1
 2003ea0:	28004b1e 	bne	r5,zero,2003fd0 <__addsf3+0x328>
 2003ea4:	1987883a 	add	r3,r3,r6
 2003ea8:	003fe406 	br	2003e3c <__alt_mem_onchip_memory2_0+0xfdff3e3c>
 2003eac:	2800271e 	bne	r5,zero,2003f4c <__addsf3+0x2a4>
 2003eb0:	80800044 	addi	r2,r16,1
 2003eb4:	10803fcc 	andi	r2,r2,255
 2003eb8:	01000044 	movi	r4,1
 2003ebc:	2080520e 	bge	r4,r2,2004008 <__addsf3+0x360>
 2003ec0:	19a3c83a 	sub	r17,r3,r6
 2003ec4:	8881002c 	andhi	r2,r17,1024
 2003ec8:	10002c26 	beq	r2,zero,2003f7c <__addsf3+0x2d4>
 2003ecc:	30e3c83a 	sub	r17,r6,r3
 2003ed0:	4025883a 	mov	r18,r8
 2003ed4:	003fb406 	br	2003da8 <__alt_mem_onchip_memory2_0+0xfdff3da8>
 2003ed8:	017fffc4 	movi	r5,-1
 2003edc:	0009883a 	mov	r4,zero
 2003ee0:	003f9606 	br	2003d3c <__alt_mem_onchip_memory2_0+0xfdff3d3c>
 2003ee4:	00ff0034 	movhi	r3,64512
 2003ee8:	18ffffc4 	addi	r3,r3,-1
 2003eec:	80a1c83a 	sub	r16,r16,r2
 2003ef0:	88c6703a 	and	r3,r17,r3
 2003ef4:	003f8306 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003ef8:	00800804 	movi	r2,32
 2003efc:	1145c83a 	sub	r2,r2,r5
 2003f00:	3084983a 	sll	r2,r6,r2
 2003f04:	314cd83a 	srl	r6,r6,r5
 2003f08:	100ac03a 	cmpne	r5,r2,zero
 2003f0c:	298ab03a 	or	r5,r5,r6
 2003f10:	003f9f06 	br	2003d90 <__alt_mem_onchip_memory2_0+0xfdff3d90>
 2003f14:	2800451e 	bne	r5,zero,200402c <__addsf3+0x384>
 2003f18:	81000044 	addi	r4,r16,1
 2003f1c:	21c03fcc 	andi	r7,r4,255
 2003f20:	01400044 	movi	r5,1
 2003f24:	29c02d0e 	bge	r5,r7,2003fdc <__addsf3+0x334>
 2003f28:	01403fc4 	movi	r5,255
 2003f2c:	21403c26 	beq	r4,r5,2004020 <__addsf3+0x378>
 2003f30:	30c7883a 	add	r3,r6,r3
 2003f34:	1806d07a 	srli	r3,r3,1
 2003f38:	2021883a 	mov	r16,r4
 2003f3c:	003f7106 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003f40:	00803fc4 	movi	r2,255
 2003f44:	80bf8f1e 	bne	r16,r2,2003d84 <__alt_mem_onchip_memory2_0+0xfdff3d84>
 2003f48:	003f6e06 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003f4c:	80001726 	beq	r16,zero,2003fac <__addsf3+0x304>
 2003f50:	00803fc4 	movi	r2,255
 2003f54:	20801a26 	beq	r4,r2,2003fc0 <__addsf3+0x318>
 2003f58:	014bc83a 	sub	r5,zero,r5
 2003f5c:	18c10034 	orhi	r3,r3,1024
 2003f60:	008006c4 	movi	r2,27
 2003f64:	1140430e 	bge	r2,r5,2004074 <__addsf3+0x3cc>
 2003f68:	00c00044 	movi	r3,1
 2003f6c:	30c7c83a 	sub	r3,r6,r3
 2003f70:	2021883a 	mov	r16,r4
 2003f74:	4025883a 	mov	r18,r8
 2003f78:	003f8606 	br	2003d94 <__alt_mem_onchip_memory2_0+0xfdff3d94>
 2003f7c:	883f8a1e 	bne	r17,zero,2003da8 <__alt_mem_onchip_memory2_0+0xfdff3da8>
 2003f80:	0007883a 	mov	r3,zero
 2003f84:	0005883a 	mov	r2,zero
 2003f88:	0021883a 	mov	r16,zero
 2003f8c:	003f9a06 	br	2003df8 <__alt_mem_onchip_memory2_0+0xfdff3df8>
 2003f90:	01000804 	movi	r4,32
 2003f94:	2149c83a 	sub	r4,r4,r5
 2003f98:	3108983a 	sll	r4,r6,r4
 2003f9c:	314cd83a 	srl	r6,r6,r5
 2003fa0:	200ac03a 	cmpne	r5,r4,zero
 2003fa4:	298ab03a 	or	r5,r5,r6
 2003fa8:	003fa306 	br	2003e38 <__alt_mem_onchip_memory2_0+0xfdff3e38>
 2003fac:	18000426 	beq	r3,zero,2003fc0 <__addsf3+0x318>
 2003fb0:	014a303a 	nor	r5,zero,r5
 2003fb4:	283fed26 	beq	r5,zero,2003f6c <__alt_mem_onchip_memory2_0+0xfdff3f6c>
 2003fb8:	00803fc4 	movi	r2,255
 2003fbc:	20bfe81e 	bne	r4,r2,2003f60 <__alt_mem_onchip_memory2_0+0xfdff3f60>
 2003fc0:	3007883a 	mov	r3,r6
 2003fc4:	2021883a 	mov	r16,r4
 2003fc8:	4025883a 	mov	r18,r8
 2003fcc:	003f4d06 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003fd0:	01003fc4 	movi	r4,255
 2003fd4:	813f951e 	bne	r16,r4,2003e2c <__alt_mem_onchip_memory2_0+0xfdff3e2c>
 2003fd8:	003f4a06 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003fdc:	8000471e 	bne	r16,zero,20040fc <__addsf3+0x454>
 2003fe0:	18006126 	beq	r3,zero,2004168 <__addsf3+0x4c0>
 2003fe4:	303f4726 	beq	r6,zero,2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2003fe8:	1987883a 	add	r3,r3,r6
 2003fec:	1881002c 	andhi	r2,r3,1024
 2003ff0:	103f7e26 	beq	r2,zero,2003dec <__alt_mem_onchip_memory2_0+0xfdff3dec>
 2003ff4:	00bf0034 	movhi	r2,64512
 2003ff8:	10bfffc4 	addi	r2,r2,-1
 2003ffc:	2821883a 	mov	r16,r5
 2004000:	1886703a 	and	r3,r3,r2
 2004004:	003f3f06 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2004008:	8000141e 	bne	r16,zero,200405c <__addsf3+0x3b4>
 200400c:	1800311e 	bne	r3,zero,20040d4 <__addsf3+0x42c>
 2004010:	30004626 	beq	r6,zero,200412c <__addsf3+0x484>
 2004014:	3007883a 	mov	r3,r6
 2004018:	4025883a 	mov	r18,r8
 200401c:	003f3906 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2004020:	2021883a 	mov	r16,r4
 2004024:	0007883a 	mov	r3,zero
 2004028:	003f7306 	br	2003df8 <__alt_mem_onchip_memory2_0+0xfdff3df8>
 200402c:	8000181e 	bne	r16,zero,2004090 <__addsf3+0x3e8>
 2004030:	18002f26 	beq	r3,zero,20040f0 <__addsf3+0x448>
 2004034:	014a303a 	nor	r5,zero,r5
 2004038:	28000526 	beq	r5,zero,2004050 <__addsf3+0x3a8>
 200403c:	01c03fc4 	movi	r7,255
 2004040:	21c02b26 	beq	r4,r7,20040f0 <__addsf3+0x448>
 2004044:	01c006c4 	movi	r7,27
 2004048:	3940400e 	bge	r7,r5,200414c <__addsf3+0x4a4>
 200404c:	00c00044 	movi	r3,1
 2004050:	1987883a 	add	r3,r3,r6
 2004054:	2021883a 	mov	r16,r4
 2004058:	003f7806 	br	2003e3c <__alt_mem_onchip_memory2_0+0xfdff3e3c>
 200405c:	1800111e 	bne	r3,zero,20040a4 <__addsf3+0x3fc>
 2004060:	30003526 	beq	r6,zero,2004138 <__addsf3+0x490>
 2004064:	3007883a 	mov	r3,r6
 2004068:	4025883a 	mov	r18,r8
 200406c:	04003fc4 	movi	r16,255
 2004070:	003f2406 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2004074:	00800804 	movi	r2,32
 2004078:	1145c83a 	sub	r2,r2,r5
 200407c:	1884983a 	sll	r2,r3,r2
 2004080:	194ad83a 	srl	r5,r3,r5
 2004084:	1006c03a 	cmpne	r3,r2,zero
 2004088:	1946b03a 	or	r3,r3,r5
 200408c:	003fb706 	br	2003f6c <__alt_mem_onchip_memory2_0+0xfdff3f6c>
 2004090:	01c03fc4 	movi	r7,255
 2004094:	21c01626 	beq	r4,r7,20040f0 <__addsf3+0x448>
 2004098:	014bc83a 	sub	r5,zero,r5
 200409c:	18c10034 	orhi	r3,r3,1024
 20040a0:	003fe806 	br	2004044 <__alt_mem_onchip_memory2_0+0xfdff4044>
 20040a4:	30001f26 	beq	r6,zero,2004124 <__addsf3+0x47c>
 20040a8:	1806d0fa 	srli	r3,r3,3
 20040ac:	1880102c 	andhi	r2,r3,64
 20040b0:	10000526 	beq	r2,zero,20040c8 <__addsf3+0x420>
 20040b4:	300cd0fa 	srli	r6,r6,3
 20040b8:	3080102c 	andhi	r2,r6,64
 20040bc:	1000021e 	bne	r2,zero,20040c8 <__addsf3+0x420>
 20040c0:	3007883a 	mov	r3,r6
 20040c4:	4025883a 	mov	r18,r8
 20040c8:	180690fa 	slli	r3,r3,3
 20040cc:	04003fc4 	movi	r16,255
 20040d0:	003f0c06 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 20040d4:	303f0b26 	beq	r6,zero,2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 20040d8:	1985c83a 	sub	r2,r3,r6
 20040dc:	1101002c 	andhi	r4,r2,1024
 20040e0:	203f4026 	beq	r4,zero,2003de4 <__alt_mem_onchip_memory2_0+0xfdff3de4>
 20040e4:	30c7c83a 	sub	r3,r6,r3
 20040e8:	4025883a 	mov	r18,r8
 20040ec:	003f0506 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 20040f0:	3007883a 	mov	r3,r6
 20040f4:	2021883a 	mov	r16,r4
 20040f8:	003f0206 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 20040fc:	18001c26 	beq	r3,zero,2004170 <__addsf3+0x4c8>
 2004100:	30000826 	beq	r6,zero,2004124 <__addsf3+0x47c>
 2004104:	1806d0fa 	srli	r3,r3,3
 2004108:	1880102c 	andhi	r2,r3,64
 200410c:	103fee26 	beq	r2,zero,20040c8 <__alt_mem_onchip_memory2_0+0xfdff40c8>
 2004110:	300cd0fa 	srli	r6,r6,3
 2004114:	3080102c 	andhi	r2,r6,64
 2004118:	103feb1e 	bne	r2,zero,20040c8 <__alt_mem_onchip_memory2_0+0xfdff40c8>
 200411c:	3007883a 	mov	r3,r6
 2004120:	003fe906 	br	20040c8 <__alt_mem_onchip_memory2_0+0xfdff40c8>
 2004124:	04003fc4 	movi	r16,255
 2004128:	003ef606 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 200412c:	8007883a 	mov	r3,r16
 2004130:	0005883a 	mov	r2,zero
 2004134:	003f3006 	br	2003df8 <__alt_mem_onchip_memory2_0+0xfdff3df8>
 2004138:	00c10034 	movhi	r3,1024
 200413c:	0005883a 	mov	r2,zero
 2004140:	18fffe04 	addi	r3,r3,-8
 2004144:	04003fc4 	movi	r16,255
 2004148:	003f2b06 	br	2003df8 <__alt_mem_onchip_memory2_0+0xfdff3df8>
 200414c:	01c00804 	movi	r7,32
 2004150:	394fc83a 	sub	r7,r7,r5
 2004154:	19ce983a 	sll	r7,r3,r7
 2004158:	194ad83a 	srl	r5,r3,r5
 200415c:	3806c03a 	cmpne	r3,r7,zero
 2004160:	1946b03a 	or	r3,r3,r5
 2004164:	003fba06 	br	2004050 <__alt_mem_onchip_memory2_0+0xfdff4050>
 2004168:	3007883a 	mov	r3,r6
 200416c:	003ee506 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 2004170:	3007883a 	mov	r3,r6
 2004174:	04003fc4 	movi	r16,255
 2004178:	003ee206 	br	2003d04 <__alt_mem_onchip_memory2_0+0xfdff3d04>
 200417c:	0007883a 	mov	r3,zero
 2004180:	0005883a 	mov	r2,zero
 2004184:	003f1c06 	br	2003df8 <__alt_mem_onchip_memory2_0+0xfdff3df8>

02004188 <__lesf2>:
 2004188:	2004d5fa 	srli	r2,r4,23
 200418c:	280cd5fa 	srli	r6,r5,23
 2004190:	00c02034 	movhi	r3,128
 2004194:	18ffffc4 	addi	r3,r3,-1
 2004198:	10803fcc 	andi	r2,r2,255
 200419c:	01c03fc4 	movi	r7,255
 20041a0:	1910703a 	and	r8,r3,r4
 20041a4:	31803fcc 	andi	r6,r6,255
 20041a8:	1946703a 	and	r3,r3,r5
 20041ac:	2008d7fa 	srli	r4,r4,31
 20041b0:	280ad7fa 	srli	r5,r5,31
 20041b4:	11c00a26 	beq	r2,r7,20041e0 <__lesf2+0x58>
 20041b8:	31c01526 	beq	r6,r7,2004210 <__lesf2+0x88>
 20041bc:	10000a1e 	bne	r2,zero,20041e8 <__lesf2+0x60>
 20041c0:	4013003a 	cmpeq	r9,r8,zero
 20041c4:	480f883a 	mov	r7,r9
 20041c8:	30000d26 	beq	r6,zero,2004200 <__lesf2+0x78>
 20041cc:	29403fcc 	andi	r5,r5,255
 20041d0:	38001426 	beq	r7,zero,2004224 <__lesf2+0x9c>
 20041d4:	2800081e 	bne	r5,zero,20041f8 <__lesf2+0x70>
 20041d8:	00bfffc4 	movi	r2,-1
 20041dc:	f800283a 	ret
 20041e0:	40000c1e 	bne	r8,zero,2004214 <__lesf2+0x8c>
 20041e4:	30800a26 	beq	r6,r2,2004210 <__lesf2+0x88>
 20041e8:	30000d1e 	bne	r6,zero,2004220 <__lesf2+0x98>
 20041ec:	000f883a 	mov	r7,zero
 20041f0:	183ff61e 	bne	r3,zero,20041cc <__alt_mem_onchip_memory2_0+0xfdff41cc>
 20041f4:	203ff81e 	bne	r4,zero,20041d8 <__alt_mem_onchip_memory2_0+0xfdff41d8>
 20041f8:	00800044 	movi	r2,1
 20041fc:	f800283a 	ret
 2004200:	183ff21e 	bne	r3,zero,20041cc <__alt_mem_onchip_memory2_0+0xfdff41cc>
 2004204:	483ffb26 	beq	r9,zero,20041f4 <__alt_mem_onchip_memory2_0+0xfdff41f4>
 2004208:	0005883a 	mov	r2,zero
 200420c:	f800283a 	ret
 2004210:	18000226 	beq	r3,zero,200421c <__lesf2+0x94>
 2004214:	00800084 	movi	r2,2
 2004218:	f800283a 	ret
 200421c:	103fe826 	beq	r2,zero,20041c0 <__alt_mem_onchip_memory2_0+0xfdff41c0>
 2004220:	29403fcc 	andi	r5,r5,255
 2004224:	217ff31e 	bne	r4,r5,20041f4 <__alt_mem_onchip_memory2_0+0xfdff41f4>
 2004228:	30bff216 	blt	r6,r2,20041f4 <__alt_mem_onchip_memory2_0+0xfdff41f4>
 200422c:	11800216 	blt	r2,r6,2004238 <__lesf2+0xb0>
 2004230:	1a3ff036 	bltu	r3,r8,20041f4 <__alt_mem_onchip_memory2_0+0xfdff41f4>
 2004234:	40fff42e 	bgeu	r8,r3,2004208 <__alt_mem_onchip_memory2_0+0xfdff4208>
 2004238:	203fe726 	beq	r4,zero,20041d8 <__alt_mem_onchip_memory2_0+0xfdff41d8>
 200423c:	003fee06 	br	20041f8 <__alt_mem_onchip_memory2_0+0xfdff41f8>

02004240 <__mulsf3>:
 2004240:	defff504 	addi	sp,sp,-44
 2004244:	dc400215 	stw	r17,8(sp)
 2004248:	2022d5fa 	srli	r17,r4,23
 200424c:	dd400615 	stw	r21,24(sp)
 2004250:	202ad7fa 	srli	r21,r4,31
 2004254:	dc000115 	stw	r16,4(sp)
 2004258:	04002034 	movhi	r16,128
 200425c:	df000915 	stw	fp,36(sp)
 2004260:	dd000515 	stw	r20,20(sp)
 2004264:	843fffc4 	addi	r16,r16,-1
 2004268:	dfc00a15 	stw	ra,40(sp)
 200426c:	ddc00815 	stw	r23,32(sp)
 2004270:	dd800715 	stw	r22,28(sp)
 2004274:	dcc00415 	stw	r19,16(sp)
 2004278:	dc800315 	stw	r18,12(sp)
 200427c:	8c403fcc 	andi	r17,r17,255
 2004280:	8120703a 	and	r16,r16,r4
 2004284:	a829883a 	mov	r20,r21
 2004288:	af003fcc 	andi	fp,r21,255
 200428c:	88005026 	beq	r17,zero,20043d0 <__mulsf3+0x190>
 2004290:	00803fc4 	movi	r2,255
 2004294:	88802f26 	beq	r17,r2,2004354 <__mulsf3+0x114>
 2004298:	84002034 	orhi	r16,r16,128
 200429c:	802090fa 	slli	r16,r16,3
 20042a0:	8c7fe044 	addi	r17,r17,-127
 20042a4:	0025883a 	mov	r18,zero
 20042a8:	002f883a 	mov	r23,zero
 20042ac:	2804d5fa 	srli	r2,r5,23
 20042b0:	282cd7fa 	srli	r22,r5,31
 20042b4:	01002034 	movhi	r4,128
 20042b8:	213fffc4 	addi	r4,r4,-1
 20042bc:	10803fcc 	andi	r2,r2,255
 20042c0:	2166703a 	and	r19,r4,r5
 20042c4:	b1803fcc 	andi	r6,r22,255
 20042c8:	10004926 	beq	r2,zero,20043f0 <__mulsf3+0x1b0>
 20042cc:	00c03fc4 	movi	r3,255
 20042d0:	10c04326 	beq	r2,r3,20043e0 <__mulsf3+0x1a0>
 20042d4:	99402034 	orhi	r5,r19,128
 20042d8:	282690fa 	slli	r19,r5,3
 20042dc:	10bfe044 	addi	r2,r2,-127
 20042e0:	000b883a 	mov	r5,zero
 20042e4:	88a3883a 	add	r17,r17,r2
 20042e8:	2c86b03a 	or	r3,r5,r18
 20042ec:	008003c4 	movi	r2,15
 20042f0:	adaaf03a 	xor	r21,r21,r22
 20042f4:	8c800044 	addi	r18,r17,1
 20042f8:	10c06536 	bltu	r2,r3,2004490 <__mulsf3+0x250>
 20042fc:	180690ba 	slli	r3,r3,2
 2004300:	01008034 	movhi	r4,512
 2004304:	2110c504 	addi	r4,r4,17172
 2004308:	1907883a 	add	r3,r3,r4
 200430c:	18800017 	ldw	r2,0(r3)
 2004310:	1000683a 	jmp	r2
 2004314:	02004490 	cmplti	r8,zero,274
 2004318:	02004588 	cmpgei	r8,zero,278
 200431c:	02004588 	cmpgei	r8,zero,278
 2004320:	02004598 	cmpnei	r8,zero,278
 2004324:	02004364 	muli	r8,zero,269
 2004328:	02004364 	muli	r8,zero,269
 200432c:	0200447c 	xorhi	r8,zero,273
 2004330:	02004598 	cmpnei	r8,zero,278
 2004334:	02004364 	muli	r8,zero,269
 2004338:	0200447c 	xorhi	r8,zero,273
 200433c:	02004364 	muli	r8,zero,269
 2004340:	02004598 	cmpnei	r8,zero,278
 2004344:	02004368 	cmpgeui	r8,zero,269
 2004348:	02004368 	cmpgeui	r8,zero,269
 200434c:	02004368 	cmpgeui	r8,zero,269
 2004350:	020045a8 	cmpgeui	r8,zero,278
 2004354:	8000311e 	bne	r16,zero,200441c <__mulsf3+0x1dc>
 2004358:	04800204 	movi	r18,8
 200435c:	05c00084 	movi	r23,2
 2004360:	003fd206 	br	20042ac <__alt_mem_onchip_memory2_0+0xfdff42ac>
 2004364:	a839883a 	mov	fp,r21
 2004368:	00800084 	movi	r2,2
 200436c:	b880231e 	bne	r23,r2,20043fc <__mulsf3+0x1bc>
 2004370:	e500004c 	andi	r20,fp,1
 2004374:	00ffffc4 	movi	r3,-1
 2004378:	0009883a 	mov	r4,zero
 200437c:	18c03fcc 	andi	r3,r3,255
 2004380:	180695fa 	slli	r3,r3,23
 2004384:	a0803fcc 	andi	r2,r20,255
 2004388:	04002034 	movhi	r16,128
 200438c:	100497fa 	slli	r2,r2,31
 2004390:	843fffc4 	addi	r16,r16,-1
 2004394:	2420703a 	and	r16,r4,r16
 2004398:	80e0b03a 	or	r16,r16,r3
 200439c:	8084b03a 	or	r2,r16,r2
 20043a0:	dfc00a17 	ldw	ra,40(sp)
 20043a4:	df000917 	ldw	fp,36(sp)
 20043a8:	ddc00817 	ldw	r23,32(sp)
 20043ac:	dd800717 	ldw	r22,28(sp)
 20043b0:	dd400617 	ldw	r21,24(sp)
 20043b4:	dd000517 	ldw	r20,20(sp)
 20043b8:	dcc00417 	ldw	r19,16(sp)
 20043bc:	dc800317 	ldw	r18,12(sp)
 20043c0:	dc400217 	ldw	r17,8(sp)
 20043c4:	dc000117 	ldw	r16,4(sp)
 20043c8:	dec00b04 	addi	sp,sp,44
 20043cc:	f800283a 	ret
 20043d0:	8000151e 	bne	r16,zero,2004428 <__mulsf3+0x1e8>
 20043d4:	04800104 	movi	r18,4
 20043d8:	05c00044 	movi	r23,1
 20043dc:	003fb306 	br	20042ac <__alt_mem_onchip_memory2_0+0xfdff42ac>
 20043e0:	980b003a 	cmpeq	r5,r19,zero
 20043e4:	00c000c4 	movi	r3,3
 20043e8:	194bc83a 	sub	r5,r3,r5
 20043ec:	003fbd06 	br	20042e4 <__alt_mem_onchip_memory2_0+0xfdff42e4>
 20043f0:	9800181e 	bne	r19,zero,2004454 <__mulsf3+0x214>
 20043f4:	01400044 	movi	r5,1
 20043f8:	003fba06 	br	20042e4 <__alt_mem_onchip_memory2_0+0xfdff42e4>
 20043fc:	008000c4 	movi	r2,3
 2004400:	b8809d26 	beq	r23,r2,2004678 <__mulsf3+0x438>
 2004404:	00800044 	movi	r2,1
 2004408:	b880821e 	bne	r23,r2,2004614 <__mulsf3+0x3d4>
 200440c:	e0a8703a 	and	r20,fp,r2
 2004410:	0007883a 	mov	r3,zero
 2004414:	0009883a 	mov	r4,zero
 2004418:	003fd806 	br	200437c <__alt_mem_onchip_memory2_0+0xfdff437c>
 200441c:	04800304 	movi	r18,12
 2004420:	05c000c4 	movi	r23,3
 2004424:	003fa106 	br	20042ac <__alt_mem_onchip_memory2_0+0xfdff42ac>
 2004428:	8009883a 	mov	r4,r16
 200442c:	d9400015 	stw	r5,0(sp)
 2004430:	20076d40 	call	20076d4 <__clzsi2>
 2004434:	10fffec4 	addi	r3,r2,-5
 2004438:	047fe284 	movi	r17,-118
 200443c:	80e0983a 	sll	r16,r16,r3
 2004440:	88a3c83a 	sub	r17,r17,r2
 2004444:	0025883a 	mov	r18,zero
 2004448:	002f883a 	mov	r23,zero
 200444c:	d9400017 	ldw	r5,0(sp)
 2004450:	003f9606 	br	20042ac <__alt_mem_onchip_memory2_0+0xfdff42ac>
 2004454:	9809883a 	mov	r4,r19
 2004458:	d9800015 	stw	r6,0(sp)
 200445c:	20076d40 	call	20076d4 <__clzsi2>
 2004460:	10fffec4 	addi	r3,r2,-5
 2004464:	98e6983a 	sll	r19,r19,r3
 2004468:	00ffe284 	movi	r3,-118
 200446c:	1885c83a 	sub	r2,r3,r2
 2004470:	000b883a 	mov	r5,zero
 2004474:	d9800017 	ldw	r6,0(sp)
 2004478:	003f9a06 	br	20042e4 <__alt_mem_onchip_memory2_0+0xfdff42e4>
 200447c:	01002034 	movhi	r4,128
 2004480:	0029883a 	mov	r20,zero
 2004484:	213fffc4 	addi	r4,r4,-1
 2004488:	00ffffc4 	movi	r3,-1
 200448c:	003fbb06 	br	200437c <__alt_mem_onchip_memory2_0+0xfdff437c>
 2004490:	802ed43a 	srli	r23,r16,16
 2004494:	982cd43a 	srli	r22,r19,16
 2004498:	843fffcc 	andi	r16,r16,65535
 200449c:	9cffffcc 	andi	r19,r19,65535
 20044a0:	9809883a 	mov	r4,r19
 20044a4:	800b883a 	mov	r5,r16
 20044a8:	2003c800 	call	2003c80 <__mulsi3>
 20044ac:	9809883a 	mov	r4,r19
 20044b0:	b80b883a 	mov	r5,r23
 20044b4:	1029883a 	mov	r20,r2
 20044b8:	2003c800 	call	2003c80 <__mulsi3>
 20044bc:	b80b883a 	mov	r5,r23
 20044c0:	b009883a 	mov	r4,r22
 20044c4:	1027883a 	mov	r19,r2
 20044c8:	2003c800 	call	2003c80 <__mulsi3>
 20044cc:	b009883a 	mov	r4,r22
 20044d0:	800b883a 	mov	r5,r16
 20044d4:	102f883a 	mov	r23,r2
 20044d8:	2003c800 	call	2003c80 <__mulsi3>
 20044dc:	a008d43a 	srli	r4,r20,16
 20044e0:	9885883a 	add	r2,r19,r2
 20044e4:	1107883a 	add	r3,r2,r4
 20044e8:	1cc0022e 	bgeu	r3,r19,20044f4 <__mulsf3+0x2b4>
 20044ec:	00800074 	movhi	r2,1
 20044f0:	b8af883a 	add	r23,r23,r2
 20044f4:	1820943a 	slli	r16,r3,16
 20044f8:	a53fffcc 	andi	r20,r20,65535
 20044fc:	1806d43a 	srli	r3,r3,16
 2004500:	8529883a 	add	r20,r16,r20
 2004504:	a02091ba 	slli	r16,r20,6
 2004508:	b8c7883a 	add	r3,r23,r3
 200450c:	a028d6ba 	srli	r20,r20,26
 2004510:	180691ba 	slli	r3,r3,6
 2004514:	8020c03a 	cmpne	r16,r16,zero
 2004518:	8520b03a 	or	r16,r16,r20
 200451c:	80e0b03a 	or	r16,r16,r3
 2004520:	8082002c 	andhi	r2,r16,2048
 2004524:	10000426 	beq	r2,zero,2004538 <__mulsf3+0x2f8>
 2004528:	8004d07a 	srli	r2,r16,1
 200452c:	8400004c 	andi	r16,r16,1
 2004530:	9023883a 	mov	r17,r18
 2004534:	80a0b03a 	or	r16,r16,r2
 2004538:	88c01fc4 	addi	r3,r17,127
 200453c:	00c02d0e 	bge	zero,r3,20045f4 <__mulsf3+0x3b4>
 2004540:	808001cc 	andi	r2,r16,7
 2004544:	10000426 	beq	r2,zero,2004558 <__mulsf3+0x318>
 2004548:	810003cc 	andi	r4,r16,15
 200454c:	00800104 	movi	r2,4
 2004550:	20800126 	beq	r4,r2,2004558 <__mulsf3+0x318>
 2004554:	80a1883a 	add	r16,r16,r2
 2004558:	8082002c 	andhi	r2,r16,2048
 200455c:	10000426 	beq	r2,zero,2004570 <__mulsf3+0x330>
 2004560:	00be0034 	movhi	r2,63488
 2004564:	10bfffc4 	addi	r2,r2,-1
 2004568:	88c02004 	addi	r3,r17,128
 200456c:	80a0703a 	and	r16,r16,r2
 2004570:	00803f84 	movi	r2,254
 2004574:	10c01b0e 	bge	r2,r3,20045e4 <__mulsf3+0x3a4>
 2004578:	ad00004c 	andi	r20,r21,1
 200457c:	00ffffc4 	movi	r3,-1
 2004580:	0009883a 	mov	r4,zero
 2004584:	003f7d06 	br	200437c <__alt_mem_onchip_memory2_0+0xfdff437c>
 2004588:	9821883a 	mov	r16,r19
 200458c:	a839883a 	mov	fp,r21
 2004590:	282f883a 	mov	r23,r5
 2004594:	003f7406 	br	2004368 <__alt_mem_onchip_memory2_0+0xfdff4368>
 2004598:	9821883a 	mov	r16,r19
 200459c:	3039883a 	mov	fp,r6
 20045a0:	282f883a 	mov	r23,r5
 20045a4:	003f7006 	br	2004368 <__alt_mem_onchip_memory2_0+0xfdff4368>
 20045a8:	8080102c 	andhi	r2,r16,64
 20045ac:	10000826 	beq	r2,zero,20045d0 <__mulsf3+0x390>
 20045b0:	9880102c 	andhi	r2,r19,64
 20045b4:	1000061e 	bne	r2,zero,20045d0 <__mulsf3+0x390>
 20045b8:	00802034 	movhi	r2,128
 20045bc:	99001034 	orhi	r4,r19,64
 20045c0:	10bfffc4 	addi	r2,r2,-1
 20045c4:	b029883a 	mov	r20,r22
 20045c8:	2088703a 	and	r4,r4,r2
 20045cc:	003fae06 	br	2004488 <__alt_mem_onchip_memory2_0+0xfdff4488>
 20045d0:	00802034 	movhi	r2,128
 20045d4:	81001034 	orhi	r4,r16,64
 20045d8:	10bfffc4 	addi	r2,r2,-1
 20045dc:	2088703a 	and	r4,r4,r2
 20045e0:	003fa906 	br	2004488 <__alt_mem_onchip_memory2_0+0xfdff4488>
 20045e4:	802091ba 	slli	r16,r16,6
 20045e8:	ad00004c 	andi	r20,r21,1
 20045ec:	8008d27a 	srli	r4,r16,9
 20045f0:	003f6206 	br	200437c <__alt_mem_onchip_memory2_0+0xfdff437c>
 20045f4:	00ffe084 	movi	r3,-126
 20045f8:	1c47c83a 	sub	r3,r3,r17
 20045fc:	008006c4 	movi	r2,27
 2004600:	10c0070e 	bge	r2,r3,2004620 <__mulsf3+0x3e0>
 2004604:	ad00004c 	andi	r20,r21,1
 2004608:	0007883a 	mov	r3,zero
 200460c:	0009883a 	mov	r4,zero
 2004610:	003f5a06 	br	200437c <__alt_mem_onchip_memory2_0+0xfdff437c>
 2004614:	9023883a 	mov	r17,r18
 2004618:	e02b883a 	mov	r21,fp
 200461c:	003fc606 	br	2004538 <__alt_mem_onchip_memory2_0+0xfdff4538>
 2004620:	88802784 	addi	r2,r17,158
 2004624:	8084983a 	sll	r2,r16,r2
 2004628:	80e0d83a 	srl	r16,r16,r3
 200462c:	1004c03a 	cmpne	r2,r2,zero
 2004630:	1404b03a 	or	r2,r2,r16
 2004634:	10c001cc 	andi	r3,r2,7
 2004638:	18000426 	beq	r3,zero,200464c <__mulsf3+0x40c>
 200463c:	110003cc 	andi	r4,r2,15
 2004640:	00c00104 	movi	r3,4
 2004644:	20c00126 	beq	r4,r3,200464c <__mulsf3+0x40c>
 2004648:	10c5883a 	add	r2,r2,r3
 200464c:	10c1002c 	andhi	r3,r2,1024
 2004650:	18000426 	beq	r3,zero,2004664 <__mulsf3+0x424>
 2004654:	ad00004c 	andi	r20,r21,1
 2004658:	00c00044 	movi	r3,1
 200465c:	0009883a 	mov	r4,zero
 2004660:	003f4606 	br	200437c <__alt_mem_onchip_memory2_0+0xfdff437c>
 2004664:	100491ba 	slli	r2,r2,6
 2004668:	ad00004c 	andi	r20,r21,1
 200466c:	0007883a 	mov	r3,zero
 2004670:	1008d27a 	srli	r4,r2,9
 2004674:	003f4106 	br	200437c <__alt_mem_onchip_memory2_0+0xfdff437c>
 2004678:	00802034 	movhi	r2,128
 200467c:	81001034 	orhi	r4,r16,64
 2004680:	10bfffc4 	addi	r2,r2,-1
 2004684:	e500004c 	andi	r20,fp,1
 2004688:	2088703a 	and	r4,r4,r2
 200468c:	003f7e06 	br	2004488 <__alt_mem_onchip_memory2_0+0xfdff4488>

02004690 <__subsf3>:
 2004690:	defffc04 	addi	sp,sp,-16
 2004694:	280ed5fa 	srli	r7,r5,23
 2004698:	02002034 	movhi	r8,128
 200469c:	280d883a 	mov	r6,r5
 20046a0:	423fffc4 	addi	r8,r8,-1
 20046a4:	200ad5fa 	srli	r5,r4,23
 20046a8:	dc400115 	stw	r17,4(sp)
 20046ac:	2022d7fa 	srli	r17,r4,31
 20046b0:	4108703a 	and	r4,r8,r4
 20046b4:	dc000015 	stw	r16,0(sp)
 20046b8:	4190703a 	and	r8,r8,r6
 20046bc:	200690fa 	slli	r3,r4,3
 20046c0:	dfc00315 	stw	ra,12(sp)
 20046c4:	dc800215 	stw	r18,8(sp)
 20046c8:	39c03fcc 	andi	r7,r7,255
 20046cc:	01003fc4 	movi	r4,255
 20046d0:	8805883a 	mov	r2,r17
 20046d4:	2c003fcc 	andi	r16,r5,255
 20046d8:	8c403fcc 	andi	r17,r17,255
 20046dc:	300cd7fa 	srli	r6,r6,31
 20046e0:	401090fa 	slli	r8,r8,3
 20046e4:	39006126 	beq	r7,r4,200486c <__subsf3+0x1dc>
 20046e8:	3180005c 	xori	r6,r6,1
 20046ec:	89804926 	beq	r17,r6,2004814 <__subsf3+0x184>
 20046f0:	81c5c83a 	sub	r2,r16,r7
 20046f4:	0080710e 	bge	zero,r2,20048bc <__subsf3+0x22c>
 20046f8:	38001e1e 	bne	r7,zero,2004774 <__subsf3+0xe4>
 20046fc:	4000651e 	bne	r8,zero,2004894 <__subsf3+0x204>
 2004700:	188001cc 	andi	r2,r3,7
 2004704:	10000426 	beq	r2,zero,2004718 <__subsf3+0x88>
 2004708:	190003cc 	andi	r4,r3,15
 200470c:	00800104 	movi	r2,4
 2004710:	20800126 	beq	r4,r2,2004718 <__subsf3+0x88>
 2004714:	18c00104 	addi	r3,r3,4
 2004718:	1901002c 	andhi	r4,r3,1024
 200471c:	8880004c 	andi	r2,r17,1
 2004720:	20003426 	beq	r4,zero,20047f4 <__subsf3+0x164>
 2004724:	81400044 	addi	r5,r16,1
 2004728:	01003fc4 	movi	r4,255
 200472c:	29006e26 	beq	r5,r4,20048e8 <__subsf3+0x258>
 2004730:	180691ba 	slli	r3,r3,6
 2004734:	1808d27a 	srli	r4,r3,9
 2004738:	29403fcc 	andi	r5,r5,255
 200473c:	280a95fa 	slli	r5,r5,23
 2004740:	10803fcc 	andi	r2,r2,255
 2004744:	00c02034 	movhi	r3,128
 2004748:	100497fa 	slli	r2,r2,31
 200474c:	18ffffc4 	addi	r3,r3,-1
 2004750:	20c6703a 	and	r3,r4,r3
 2004754:	1946b03a 	or	r3,r3,r5
 2004758:	1884b03a 	or	r2,r3,r2
 200475c:	dfc00317 	ldw	ra,12(sp)
 2004760:	dc800217 	ldw	r18,8(sp)
 2004764:	dc400117 	ldw	r17,4(sp)
 2004768:	dc000017 	ldw	r16,0(sp)
 200476c:	dec00404 	addi	sp,sp,16
 2004770:	f800283a 	ret
 2004774:	01003fc4 	movi	r4,255
 2004778:	813fe126 	beq	r16,r4,2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 200477c:	42010034 	orhi	r8,r8,1024
 2004780:	010006c4 	movi	r4,27
 2004784:	2080600e 	bge	r4,r2,2004908 <__subsf3+0x278>
 2004788:	02000044 	movi	r8,1
 200478c:	1a07c83a 	sub	r3,r3,r8
 2004790:	1881002c 	andhi	r2,r3,1024
 2004794:	10001426 	beq	r2,zero,20047e8 <__subsf3+0x158>
 2004798:	04810034 	movhi	r18,1024
 200479c:	94bfffc4 	addi	r18,r18,-1
 20047a0:	1ca4703a 	and	r18,r3,r18
 20047a4:	9009883a 	mov	r4,r18
 20047a8:	20076d40 	call	20076d4 <__clzsi2>
 20047ac:	10bffec4 	addi	r2,r2,-5
 20047b0:	90a4983a 	sll	r18,r18,r2
 20047b4:	14004f16 	blt	r2,r16,20048f4 <__subsf3+0x264>
 20047b8:	140bc83a 	sub	r5,r2,r16
 20047bc:	00c007c4 	movi	r3,31
 20047c0:	1947c83a 	sub	r3,r3,r5
 20047c4:	90c6983a 	sll	r3,r18,r3
 20047c8:	29400044 	addi	r5,r5,1
 20047cc:	9164d83a 	srl	r18,r18,r5
 20047d0:	1806c03a 	cmpne	r3,r3,zero
 20047d4:	0021883a 	mov	r16,zero
 20047d8:	1c86b03a 	or	r3,r3,r18
 20047dc:	003fc806 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 20047e0:	1000e726 	beq	r2,zero,2004b80 <__subsf3+0x4f0>
 20047e4:	1007883a 	mov	r3,r2
 20047e8:	188001cc 	andi	r2,r3,7
 20047ec:	103fc61e 	bne	r2,zero,2004708 <__alt_mem_onchip_memory2_0+0xfdff4708>
 20047f0:	8880004c 	andi	r2,r17,1
 20047f4:	01003fc4 	movi	r4,255
 20047f8:	1806d0fa 	srli	r3,r3,3
 20047fc:	81001e26 	beq	r16,r4,2004878 <__subsf3+0x1e8>
 2004800:	01002034 	movhi	r4,128
 2004804:	213fffc4 	addi	r4,r4,-1
 2004808:	800b883a 	mov	r5,r16
 200480c:	1908703a 	and	r4,r3,r4
 2004810:	003fc906 	br	2004738 <__alt_mem_onchip_memory2_0+0xfdff4738>
 2004814:	81c9c83a 	sub	r4,r16,r7
 2004818:	0100420e 	bge	zero,r4,2004924 <__subsf3+0x294>
 200481c:	38002226 	beq	r7,zero,20048a8 <__subsf3+0x218>
 2004820:	01403fc4 	movi	r5,255
 2004824:	817fb626 	beq	r16,r5,2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004828:	42010034 	orhi	r8,r8,1024
 200482c:	014006c4 	movi	r5,27
 2004830:	2900580e 	bge	r5,r4,2004994 <__subsf3+0x304>
 2004834:	01000044 	movi	r4,1
 2004838:	1907883a 	add	r3,r3,r4
 200483c:	1901002c 	andhi	r4,r3,1024
 2004840:	203fe926 	beq	r4,zero,20047e8 <__alt_mem_onchip_memory2_0+0xfdff47e8>
 2004844:	84000044 	addi	r16,r16,1
 2004848:	01003fc4 	movi	r4,255
 200484c:	81007626 	beq	r16,r4,2004a28 <__subsf3+0x398>
 2004850:	00bf0034 	movhi	r2,64512
 2004854:	10bfffc4 	addi	r2,r2,-1
 2004858:	1900004c 	andi	r4,r3,1
 200485c:	1886703a 	and	r3,r3,r2
 2004860:	1806d07a 	srli	r3,r3,1
 2004864:	1906b03a 	or	r3,r3,r4
 2004868:	003fa506 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 200486c:	403f9e26 	beq	r8,zero,20046e8 <__alt_mem_onchip_memory2_0+0xfdff46e8>
 2004870:	31803fcc 	andi	r6,r6,255
 2004874:	003f9d06 	br	20046ec <__alt_mem_onchip_memory2_0+0xfdff46ec>
 2004878:	18001b26 	beq	r3,zero,20048e8 <__subsf3+0x258>
 200487c:	19001034 	orhi	r4,r3,64
 2004880:	00c02034 	movhi	r3,128
 2004884:	18ffffc4 	addi	r3,r3,-1
 2004888:	017fffc4 	movi	r5,-1
 200488c:	20c8703a 	and	r4,r4,r3
 2004890:	003fa906 	br	2004738 <__alt_mem_onchip_memory2_0+0xfdff4738>
 2004894:	10bfffc4 	addi	r2,r2,-1
 2004898:	103fbc26 	beq	r2,zero,200478c <__alt_mem_onchip_memory2_0+0xfdff478c>
 200489c:	01003fc4 	movi	r4,255
 20048a0:	813fb71e 	bne	r16,r4,2004780 <__alt_mem_onchip_memory2_0+0xfdff4780>
 20048a4:	003f9606 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 20048a8:	403f9526 	beq	r8,zero,2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 20048ac:	213fffc4 	addi	r4,r4,-1
 20048b0:	2000481e 	bne	r4,zero,20049d4 <__subsf3+0x344>
 20048b4:	1a07883a 	add	r3,r3,r8
 20048b8:	003fe006 	br	200483c <__alt_mem_onchip_memory2_0+0xfdff483c>
 20048bc:	1000241e 	bne	r2,zero,2004950 <__subsf3+0x2c0>
 20048c0:	80800044 	addi	r2,r16,1
 20048c4:	10803fcc 	andi	r2,r2,255
 20048c8:	01000044 	movi	r4,1
 20048cc:	20804f0e 	bge	r4,r2,2004a0c <__subsf3+0x37c>
 20048d0:	1a25c83a 	sub	r18,r3,r8
 20048d4:	9081002c 	andhi	r2,r18,1024
 20048d8:	10002926 	beq	r2,zero,2004980 <__subsf3+0x2f0>
 20048dc:	40e5c83a 	sub	r18,r8,r3
 20048e0:	3023883a 	mov	r17,r6
 20048e4:	003faf06 	br	20047a4 <__alt_mem_onchip_memory2_0+0xfdff47a4>
 20048e8:	017fffc4 	movi	r5,-1
 20048ec:	0009883a 	mov	r4,zero
 20048f0:	003f9106 	br	2004738 <__alt_mem_onchip_memory2_0+0xfdff4738>
 20048f4:	00ff0034 	movhi	r3,64512
 20048f8:	18ffffc4 	addi	r3,r3,-1
 20048fc:	80a1c83a 	sub	r16,r16,r2
 2004900:	90c6703a 	and	r3,r18,r3
 2004904:	003f7e06 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004908:	01000804 	movi	r4,32
 200490c:	2089c83a 	sub	r4,r4,r2
 2004910:	4108983a 	sll	r4,r8,r4
 2004914:	4090d83a 	srl	r8,r8,r2
 2004918:	2004c03a 	cmpne	r2,r4,zero
 200491c:	1210b03a 	or	r8,r2,r8
 2004920:	003f9a06 	br	200478c <__alt_mem_onchip_memory2_0+0xfdff478c>
 2004924:	2000421e 	bne	r4,zero,2004a30 <__subsf3+0x3a0>
 2004928:	81000044 	addi	r4,r16,1
 200492c:	21803fcc 	andi	r6,r4,255
 2004930:	01400044 	movi	r5,1
 2004934:	29802a0e 	bge	r5,r6,20049e0 <__subsf3+0x350>
 2004938:	01403fc4 	movi	r5,255
 200493c:	21403926 	beq	r4,r5,2004a24 <__subsf3+0x394>
 2004940:	40c7883a 	add	r3,r8,r3
 2004944:	1806d07a 	srli	r3,r3,1
 2004948:	2021883a 	mov	r16,r4
 200494c:	003f6c06 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004950:	80001726 	beq	r16,zero,20049b0 <__subsf3+0x320>
 2004954:	01003fc4 	movi	r4,255
 2004958:	39001a26 	beq	r7,r4,20049c4 <__subsf3+0x334>
 200495c:	0085c83a 	sub	r2,zero,r2
 2004960:	18c10034 	orhi	r3,r3,1024
 2004964:	010006c4 	movi	r4,27
 2004968:	2080430e 	bge	r4,r2,2004a78 <__subsf3+0x3e8>
 200496c:	00c00044 	movi	r3,1
 2004970:	40c7c83a 	sub	r3,r8,r3
 2004974:	3821883a 	mov	r16,r7
 2004978:	3023883a 	mov	r17,r6
 200497c:	003f8406 	br	2004790 <__alt_mem_onchip_memory2_0+0xfdff4790>
 2004980:	903f881e 	bne	r18,zero,20047a4 <__alt_mem_onchip_memory2_0+0xfdff47a4>
 2004984:	0007883a 	mov	r3,zero
 2004988:	0005883a 	mov	r2,zero
 200498c:	0021883a 	mov	r16,zero
 2004990:	003f9806 	br	20047f4 <__alt_mem_onchip_memory2_0+0xfdff47f4>
 2004994:	01400804 	movi	r5,32
 2004998:	290bc83a 	sub	r5,r5,r4
 200499c:	414a983a 	sll	r5,r8,r5
 20049a0:	4110d83a 	srl	r8,r8,r4
 20049a4:	2808c03a 	cmpne	r4,r5,zero
 20049a8:	2208b03a 	or	r4,r4,r8
 20049ac:	003fa206 	br	2004838 <__alt_mem_onchip_memory2_0+0xfdff4838>
 20049b0:	18000426 	beq	r3,zero,20049c4 <__subsf3+0x334>
 20049b4:	0084303a 	nor	r2,zero,r2
 20049b8:	103fed26 	beq	r2,zero,2004970 <__alt_mem_onchip_memory2_0+0xfdff4970>
 20049bc:	01003fc4 	movi	r4,255
 20049c0:	393fe81e 	bne	r7,r4,2004964 <__alt_mem_onchip_memory2_0+0xfdff4964>
 20049c4:	4007883a 	mov	r3,r8
 20049c8:	3821883a 	mov	r16,r7
 20049cc:	3023883a 	mov	r17,r6
 20049d0:	003f4b06 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 20049d4:	01403fc4 	movi	r5,255
 20049d8:	817f941e 	bne	r16,r5,200482c <__alt_mem_onchip_memory2_0+0xfdff482c>
 20049dc:	003f4806 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 20049e0:	8000471e 	bne	r16,zero,2004b00 <__subsf3+0x470>
 20049e4:	18006126 	beq	r3,zero,2004b6c <__subsf3+0x4dc>
 20049e8:	403f4526 	beq	r8,zero,2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 20049ec:	1a07883a 	add	r3,r3,r8
 20049f0:	1881002c 	andhi	r2,r3,1024
 20049f4:	103f7c26 	beq	r2,zero,20047e8 <__alt_mem_onchip_memory2_0+0xfdff47e8>
 20049f8:	00bf0034 	movhi	r2,64512
 20049fc:	10bfffc4 	addi	r2,r2,-1
 2004a00:	2821883a 	mov	r16,r5
 2004a04:	1886703a 	and	r3,r3,r2
 2004a08:	003f3d06 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004a0c:	8000141e 	bne	r16,zero,2004a60 <__subsf3+0x3d0>
 2004a10:	1800311e 	bne	r3,zero,2004ad8 <__subsf3+0x448>
 2004a14:	40004626 	beq	r8,zero,2004b30 <__subsf3+0x4a0>
 2004a18:	4007883a 	mov	r3,r8
 2004a1c:	3023883a 	mov	r17,r6
 2004a20:	003f3706 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004a24:	2021883a 	mov	r16,r4
 2004a28:	0007883a 	mov	r3,zero
 2004a2c:	003f7106 	br	20047f4 <__alt_mem_onchip_memory2_0+0xfdff47f4>
 2004a30:	8000181e 	bne	r16,zero,2004a94 <__subsf3+0x404>
 2004a34:	18002f26 	beq	r3,zero,2004af4 <__subsf3+0x464>
 2004a38:	0108303a 	nor	r4,zero,r4
 2004a3c:	20000526 	beq	r4,zero,2004a54 <__subsf3+0x3c4>
 2004a40:	01403fc4 	movi	r5,255
 2004a44:	39402b26 	beq	r7,r5,2004af4 <__subsf3+0x464>
 2004a48:	014006c4 	movi	r5,27
 2004a4c:	2900400e 	bge	r5,r4,2004b50 <__subsf3+0x4c0>
 2004a50:	00c00044 	movi	r3,1
 2004a54:	1a07883a 	add	r3,r3,r8
 2004a58:	3821883a 	mov	r16,r7
 2004a5c:	003f7706 	br	200483c <__alt_mem_onchip_memory2_0+0xfdff483c>
 2004a60:	1800111e 	bne	r3,zero,2004aa8 <__subsf3+0x418>
 2004a64:	40003526 	beq	r8,zero,2004b3c <__subsf3+0x4ac>
 2004a68:	4007883a 	mov	r3,r8
 2004a6c:	3023883a 	mov	r17,r6
 2004a70:	04003fc4 	movi	r16,255
 2004a74:	003f2206 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004a78:	01000804 	movi	r4,32
 2004a7c:	2089c83a 	sub	r4,r4,r2
 2004a80:	1908983a 	sll	r4,r3,r4
 2004a84:	1884d83a 	srl	r2,r3,r2
 2004a88:	2006c03a 	cmpne	r3,r4,zero
 2004a8c:	1886b03a 	or	r3,r3,r2
 2004a90:	003fb706 	br	2004970 <__alt_mem_onchip_memory2_0+0xfdff4970>
 2004a94:	01403fc4 	movi	r5,255
 2004a98:	39401626 	beq	r7,r5,2004af4 <__subsf3+0x464>
 2004a9c:	0109c83a 	sub	r4,zero,r4
 2004aa0:	18c10034 	orhi	r3,r3,1024
 2004aa4:	003fe806 	br	2004a48 <__alt_mem_onchip_memory2_0+0xfdff4a48>
 2004aa8:	40001f26 	beq	r8,zero,2004b28 <__subsf3+0x498>
 2004aac:	1806d0fa 	srli	r3,r3,3
 2004ab0:	1880102c 	andhi	r2,r3,64
 2004ab4:	10000526 	beq	r2,zero,2004acc <__subsf3+0x43c>
 2004ab8:	4010d0fa 	srli	r8,r8,3
 2004abc:	4080102c 	andhi	r2,r8,64
 2004ac0:	1000021e 	bne	r2,zero,2004acc <__subsf3+0x43c>
 2004ac4:	4007883a 	mov	r3,r8
 2004ac8:	3023883a 	mov	r17,r6
 2004acc:	180690fa 	slli	r3,r3,3
 2004ad0:	04003fc4 	movi	r16,255
 2004ad4:	003f0a06 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004ad8:	403f0926 	beq	r8,zero,2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004adc:	1a05c83a 	sub	r2,r3,r8
 2004ae0:	1101002c 	andhi	r4,r2,1024
 2004ae4:	203f3e26 	beq	r4,zero,20047e0 <__alt_mem_onchip_memory2_0+0xfdff47e0>
 2004ae8:	40c7c83a 	sub	r3,r8,r3
 2004aec:	3023883a 	mov	r17,r6
 2004af0:	003f0306 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004af4:	4007883a 	mov	r3,r8
 2004af8:	3821883a 	mov	r16,r7
 2004afc:	003f0006 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004b00:	18001c26 	beq	r3,zero,2004b74 <__subsf3+0x4e4>
 2004b04:	40000826 	beq	r8,zero,2004b28 <__subsf3+0x498>
 2004b08:	1806d0fa 	srli	r3,r3,3
 2004b0c:	1880102c 	andhi	r2,r3,64
 2004b10:	103fee26 	beq	r2,zero,2004acc <__alt_mem_onchip_memory2_0+0xfdff4acc>
 2004b14:	4010d0fa 	srli	r8,r8,3
 2004b18:	4080102c 	andhi	r2,r8,64
 2004b1c:	103feb1e 	bne	r2,zero,2004acc <__alt_mem_onchip_memory2_0+0xfdff4acc>
 2004b20:	4007883a 	mov	r3,r8
 2004b24:	003fe906 	br	2004acc <__alt_mem_onchip_memory2_0+0xfdff4acc>
 2004b28:	04003fc4 	movi	r16,255
 2004b2c:	003ef406 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004b30:	8007883a 	mov	r3,r16
 2004b34:	0005883a 	mov	r2,zero
 2004b38:	003f2e06 	br	20047f4 <__alt_mem_onchip_memory2_0+0xfdff47f4>
 2004b3c:	00c10034 	movhi	r3,1024
 2004b40:	0005883a 	mov	r2,zero
 2004b44:	18fffe04 	addi	r3,r3,-8
 2004b48:	04003fc4 	movi	r16,255
 2004b4c:	003f2906 	br	20047f4 <__alt_mem_onchip_memory2_0+0xfdff47f4>
 2004b50:	01400804 	movi	r5,32
 2004b54:	290bc83a 	sub	r5,r5,r4
 2004b58:	194a983a 	sll	r5,r3,r5
 2004b5c:	1908d83a 	srl	r4,r3,r4
 2004b60:	2806c03a 	cmpne	r3,r5,zero
 2004b64:	1906b03a 	or	r3,r3,r4
 2004b68:	003fba06 	br	2004a54 <__alt_mem_onchip_memory2_0+0xfdff4a54>
 2004b6c:	4007883a 	mov	r3,r8
 2004b70:	003ee306 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004b74:	4007883a 	mov	r3,r8
 2004b78:	04003fc4 	movi	r16,255
 2004b7c:	003ee006 	br	2004700 <__alt_mem_onchip_memory2_0+0xfdff4700>
 2004b80:	0007883a 	mov	r3,zero
 2004b84:	0005883a 	mov	r2,zero
 2004b88:	003f1a06 	br	20047f4 <__alt_mem_onchip_memory2_0+0xfdff47f4>

02004b8c <__fixsfsi>:
 2004b8c:	2006d5fa 	srli	r3,r4,23
 2004b90:	00802034 	movhi	r2,128
 2004b94:	10bfffc4 	addi	r2,r2,-1
 2004b98:	18c03fcc 	andi	r3,r3,255
 2004b9c:	01401f84 	movi	r5,126
 2004ba0:	1104703a 	and	r2,r2,r4
 2004ba4:	2008d7fa 	srli	r4,r4,31
 2004ba8:	28c0110e 	bge	r5,r3,2004bf0 <__fixsfsi+0x64>
 2004bac:	01402744 	movi	r5,157
 2004bb0:	28c00b16 	blt	r5,r3,2004be0 <__fixsfsi+0x54>
 2004bb4:	01402544 	movi	r5,149
 2004bb8:	10802034 	orhi	r2,r2,128
 2004bbc:	28c00e16 	blt	r5,r3,2004bf8 <__fixsfsi+0x6c>
 2004bc0:	01402584 	movi	r5,150
 2004bc4:	28c7c83a 	sub	r3,r5,r3
 2004bc8:	10c6d83a 	srl	r3,r2,r3
 2004bcc:	21003fcc 	andi	r4,r4,255
 2004bd0:	0105c83a 	sub	r2,zero,r4
 2004bd4:	1886f03a 	xor	r3,r3,r2
 2004bd8:	1905883a 	add	r2,r3,r4
 2004bdc:	f800283a 	ret
 2004be0:	00a00034 	movhi	r2,32768
 2004be4:	10bfffc4 	addi	r2,r2,-1
 2004be8:	2085883a 	add	r2,r4,r2
 2004bec:	f800283a 	ret
 2004bf0:	0005883a 	mov	r2,zero
 2004bf4:	f800283a 	ret
 2004bf8:	18ffda84 	addi	r3,r3,-150
 2004bfc:	10c6983a 	sll	r3,r2,r3
 2004c00:	003ff206 	br	2004bcc <__alt_mem_onchip_memory2_0+0xfdff4bcc>

02004c04 <__floatsisf>:
 2004c04:	defffd04 	addi	sp,sp,-12
 2004c08:	dc000015 	stw	r16,0(sp)
 2004c0c:	dfc00215 	stw	ra,8(sp)
 2004c10:	dc400115 	stw	r17,4(sp)
 2004c14:	2021883a 	mov	r16,r4
 2004c18:	20003a26 	beq	r4,zero,2004d04 <__floatsisf+0x100>
 2004c1c:	2022d7fa 	srli	r17,r4,31
 2004c20:	88000126 	beq	r17,zero,2004c28 <__floatsisf+0x24>
 2004c24:	0121c83a 	sub	r16,zero,r4
 2004c28:	8009883a 	mov	r4,r16
 2004c2c:	20076d40 	call	20076d4 <__clzsi2>
 2004c30:	00c02784 	movi	r3,158
 2004c34:	1887c83a 	sub	r3,r3,r2
 2004c38:	01802584 	movi	r6,150
 2004c3c:	800b883a 	mov	r5,r16
 2004c40:	30c01616 	blt	r6,r3,2004c9c <__floatsisf+0x98>
 2004c44:	01000204 	movi	r4,8
 2004c48:	2080020e 	bge	r4,r2,2004c54 <__floatsisf+0x50>
 2004c4c:	10bffe04 	addi	r2,r2,-8
 2004c50:	80a0983a 	sll	r16,r16,r2
 2004c54:	00802034 	movhi	r2,128
 2004c58:	10bfffc4 	addi	r2,r2,-1
 2004c5c:	8809883a 	mov	r4,r17
 2004c60:	80a0703a 	and	r16,r16,r2
 2004c64:	18803fcc 	andi	r2,r3,255
 2004c68:	100695fa 	slli	r3,r2,23
 2004c6c:	20803fcc 	andi	r2,r4,255
 2004c70:	100897fa 	slli	r4,r2,31
 2004c74:	00802034 	movhi	r2,128
 2004c78:	10bfffc4 	addi	r2,r2,-1
 2004c7c:	8084703a 	and	r2,r16,r2
 2004c80:	10c4b03a 	or	r2,r2,r3
 2004c84:	1104b03a 	or	r2,r2,r4
 2004c88:	dfc00217 	ldw	ra,8(sp)
 2004c8c:	dc400117 	ldw	r17,4(sp)
 2004c90:	dc000017 	ldw	r16,0(sp)
 2004c94:	dec00304 	addi	sp,sp,12
 2004c98:	f800283a 	ret
 2004c9c:	01002644 	movi	r4,153
 2004ca0:	20c01c16 	blt	r4,r3,2004d14 <__floatsisf+0x110>
 2004ca4:	01000144 	movi	r4,5
 2004ca8:	2080020e 	bge	r4,r2,2004cb4 <__floatsisf+0xb0>
 2004cac:	113ffec4 	addi	r4,r2,-5
 2004cb0:	290a983a 	sll	r5,r5,r4
 2004cb4:	043f0034 	movhi	r16,64512
 2004cb8:	843fffc4 	addi	r16,r16,-1
 2004cbc:	298001cc 	andi	r6,r5,7
 2004cc0:	2c20703a 	and	r16,r5,r16
 2004cc4:	30000426 	beq	r6,zero,2004cd8 <__floatsisf+0xd4>
 2004cc8:	294003cc 	andi	r5,r5,15
 2004ccc:	01000104 	movi	r4,4
 2004cd0:	29000126 	beq	r5,r4,2004cd8 <__floatsisf+0xd4>
 2004cd4:	8121883a 	add	r16,r16,r4
 2004cd8:	8101002c 	andhi	r4,r16,1024
 2004cdc:	20000526 	beq	r4,zero,2004cf4 <__floatsisf+0xf0>
 2004ce0:	00c027c4 	movi	r3,159
 2004ce4:	1887c83a 	sub	r3,r3,r2
 2004ce8:	00bf0034 	movhi	r2,64512
 2004cec:	10bfffc4 	addi	r2,r2,-1
 2004cf0:	80a0703a 	and	r16,r16,r2
 2004cf4:	802091ba 	slli	r16,r16,6
 2004cf8:	8809883a 	mov	r4,r17
 2004cfc:	8020d27a 	srli	r16,r16,9
 2004d00:	003fd806 	br	2004c64 <__alt_mem_onchip_memory2_0+0xfdff4c64>
 2004d04:	0009883a 	mov	r4,zero
 2004d08:	0007883a 	mov	r3,zero
 2004d0c:	0021883a 	mov	r16,zero
 2004d10:	003fd406 	br	2004c64 <__alt_mem_onchip_memory2_0+0xfdff4c64>
 2004d14:	01800144 	movi	r6,5
 2004d18:	110006c4 	addi	r4,r2,27
 2004d1c:	8108983a 	sll	r4,r16,r4
 2004d20:	308fc83a 	sub	r7,r6,r2
 2004d24:	81cad83a 	srl	r5,r16,r7
 2004d28:	2008c03a 	cmpne	r4,r4,zero
 2004d2c:	214ab03a 	or	r5,r4,r5
 2004d30:	30bfe00e 	bge	r6,r2,2004cb4 <__alt_mem_onchip_memory2_0+0xfdff4cb4>
 2004d34:	003fdd06 	br	2004cac <__alt_mem_onchip_memory2_0+0xfdff4cac>

02004d38 <__adddf3>:
 2004d38:	02000434 	movhi	r8,16
 2004d3c:	423fffc4 	addi	r8,r8,-1
 2004d40:	defffb04 	addi	sp,sp,-20
 2004d44:	2a12703a 	and	r9,r5,r8
 2004d48:	2806d7fa 	srli	r3,r5,31
 2004d4c:	3a10703a 	and	r8,r7,r8
 2004d50:	3804d53a 	srli	r2,r7,20
 2004d54:	3014d77a 	srli	r10,r6,29
 2004d58:	dc000015 	stw	r16,0(sp)
 2004d5c:	481290fa 	slli	r9,r9,3
 2004d60:	2820d53a 	srli	r16,r5,20
 2004d64:	401090fa 	slli	r8,r8,3
 2004d68:	200ad77a 	srli	r5,r4,29
 2004d6c:	380ed7fa 	srli	r7,r7,31
 2004d70:	dc800215 	stw	r18,8(sp)
 2004d74:	dc400115 	stw	r17,4(sp)
 2004d78:	dfc00415 	stw	ra,16(sp)
 2004d7c:	dcc00315 	stw	r19,12(sp)
 2004d80:	1c803fcc 	andi	r18,r3,255
 2004d84:	8401ffcc 	andi	r16,r16,2047
 2004d88:	494ab03a 	or	r5,r9,r5
 2004d8c:	202290fa 	slli	r17,r4,3
 2004d90:	1081ffcc 	andi	r2,r2,2047
 2004d94:	4290b03a 	or	r8,r8,r10
 2004d98:	300c90fa 	slli	r6,r6,3
 2004d9c:	91c07026 	beq	r18,r7,2004f60 <__adddf3+0x228>
 2004da0:	8087c83a 	sub	r3,r16,r2
 2004da4:	00c0b30e 	bge	zero,r3,2005074 <__adddf3+0x33c>
 2004da8:	10002a1e 	bne	r2,zero,2004e54 <__adddf3+0x11c>
 2004dac:	4184b03a 	or	r2,r8,r6
 2004db0:	1000991e 	bne	r2,zero,2005018 <__adddf3+0x2e0>
 2004db4:	888001cc 	andi	r2,r17,7
 2004db8:	10005b26 	beq	r2,zero,2004f28 <__adddf3+0x1f0>
 2004dbc:	88c003cc 	andi	r3,r17,15
 2004dc0:	00800104 	movi	r2,4
 2004dc4:	18805826 	beq	r3,r2,2004f28 <__adddf3+0x1f0>
 2004dc8:	89800104 	addi	r6,r17,4
 2004dcc:	3463803a 	cmpltu	r17,r6,r17
 2004dd0:	2c4b883a 	add	r5,r5,r17
 2004dd4:	2880202c 	andhi	r2,r5,128
 2004dd8:	9007883a 	mov	r3,r18
 2004ddc:	3023883a 	mov	r17,r6
 2004de0:	10005426 	beq	r2,zero,2004f34 <__adddf3+0x1fc>
 2004de4:	84000044 	addi	r16,r16,1
 2004de8:	0081ffc4 	movi	r2,2047
 2004dec:	8080c126 	beq	r16,r2,20050f4 <__adddf3+0x3bc>
 2004df0:	013fe034 	movhi	r4,65408
 2004df4:	213fffc4 	addi	r4,r4,-1
 2004df8:	290a703a 	and	r5,r5,r4
 2004dfc:	2804977a 	slli	r2,r5,29
 2004e00:	280a927a 	slli	r5,r5,9
 2004e04:	8822d0fa 	srli	r17,r17,3
 2004e08:	8401ffcc 	andi	r16,r16,2047
 2004e0c:	2808d33a 	srli	r4,r5,12
 2004e10:	1444b03a 	or	r2,r2,r17
 2004e14:	8401ffcc 	andi	r16,r16,2047
 2004e18:	800a953a 	slli	r5,r16,20
 2004e1c:	18c03fcc 	andi	r3,r3,255
 2004e20:	04000434 	movhi	r16,16
 2004e24:	180697fa 	slli	r3,r3,31
 2004e28:	843fffc4 	addi	r16,r16,-1
 2004e2c:	2420703a 	and	r16,r4,r16
 2004e30:	8160b03a 	or	r16,r16,r5
 2004e34:	80c6b03a 	or	r3,r16,r3
 2004e38:	dfc00417 	ldw	ra,16(sp)
 2004e3c:	dcc00317 	ldw	r19,12(sp)
 2004e40:	dc800217 	ldw	r18,8(sp)
 2004e44:	dc400117 	ldw	r17,4(sp)
 2004e48:	dc000017 	ldw	r16,0(sp)
 2004e4c:	dec00504 	addi	sp,sp,20
 2004e50:	f800283a 	ret
 2004e54:	0081ffc4 	movi	r2,2047
 2004e58:	80bfd626 	beq	r16,r2,2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2004e5c:	42002034 	orhi	r8,r8,128
 2004e60:	00800e04 	movi	r2,56
 2004e64:	10c0a616 	blt	r2,r3,2005100 <__adddf3+0x3c8>
 2004e68:	008007c4 	movi	r2,31
 2004e6c:	10c0c916 	blt	r2,r3,2005194 <__adddf3+0x45c>
 2004e70:	00800804 	movi	r2,32
 2004e74:	10c5c83a 	sub	r2,r2,r3
 2004e78:	408e983a 	sll	r7,r8,r2
 2004e7c:	30c8d83a 	srl	r4,r6,r3
 2004e80:	3084983a 	sll	r2,r6,r2
 2004e84:	40c6d83a 	srl	r3,r8,r3
 2004e88:	390cb03a 	or	r6,r7,r4
 2004e8c:	1004c03a 	cmpne	r2,r2,zero
 2004e90:	308cb03a 	or	r6,r6,r2
 2004e94:	898dc83a 	sub	r6,r17,r6
 2004e98:	89a3803a 	cmpltu	r17,r17,r6
 2004e9c:	28cbc83a 	sub	r5,r5,r3
 2004ea0:	2c4bc83a 	sub	r5,r5,r17
 2004ea4:	3023883a 	mov	r17,r6
 2004ea8:	2880202c 	andhi	r2,r5,128
 2004eac:	10006d26 	beq	r2,zero,2005064 <__adddf3+0x32c>
 2004eb0:	04c02034 	movhi	r19,128
 2004eb4:	9cffffc4 	addi	r19,r19,-1
 2004eb8:	2ce6703a 	and	r19,r5,r19
 2004ebc:	98007e26 	beq	r19,zero,20050b8 <__adddf3+0x380>
 2004ec0:	9809883a 	mov	r4,r19
 2004ec4:	20076d40 	call	20076d4 <__clzsi2>
 2004ec8:	10fffe04 	addi	r3,r2,-8
 2004ecc:	010007c4 	movi	r4,31
 2004ed0:	20c07f16 	blt	r4,r3,20050d0 <__adddf3+0x398>
 2004ed4:	01400a04 	movi	r5,40
 2004ed8:	2885c83a 	sub	r2,r5,r2
 2004edc:	888ad83a 	srl	r5,r17,r2
 2004ee0:	98e6983a 	sll	r19,r19,r3
 2004ee4:	88e2983a 	sll	r17,r17,r3
 2004ee8:	2ce6b03a 	or	r19,r5,r19
 2004eec:	1c007c16 	blt	r3,r16,20050e0 <__adddf3+0x3a8>
 2004ef0:	1c21c83a 	sub	r16,r3,r16
 2004ef4:	81400044 	addi	r5,r16,1
 2004ef8:	00c007c4 	movi	r3,31
 2004efc:	19409816 	blt	r3,r5,2005160 <__adddf3+0x428>
 2004f00:	1c21c83a 	sub	r16,r3,r16
 2004f04:	8c08983a 	sll	r4,r17,r16
 2004f08:	8946d83a 	srl	r3,r17,r5
 2004f0c:	9c20983a 	sll	r16,r19,r16
 2004f10:	2008c03a 	cmpne	r4,r4,zero
 2004f14:	994ad83a 	srl	r5,r19,r5
 2004f18:	1c06b03a 	or	r3,r3,r16
 2004f1c:	1922b03a 	or	r17,r3,r4
 2004f20:	0021883a 	mov	r16,zero
 2004f24:	003fa306 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2004f28:	2880202c 	andhi	r2,r5,128
 2004f2c:	9007883a 	mov	r3,r18
 2004f30:	103fac1e 	bne	r2,zero,2004de4 <__alt_mem_onchip_memory2_0+0xfdff4de4>
 2004f34:	2804977a 	slli	r2,r5,29
 2004f38:	8822d0fa 	srli	r17,r17,3
 2004f3c:	0101ffc4 	movi	r4,2047
 2004f40:	280ad0fa 	srli	r5,r5,3
 2004f44:	1444b03a 	or	r2,r2,r17
 2004f48:	81002c26 	beq	r16,r4,2004ffc <__adddf3+0x2c4>
 2004f4c:	8120703a 	and	r16,r16,r4
 2004f50:	01000434 	movhi	r4,16
 2004f54:	213fffc4 	addi	r4,r4,-1
 2004f58:	2908703a 	and	r4,r5,r4
 2004f5c:	003fad06 	br	2004e14 <__alt_mem_onchip_memory2_0+0xfdff4e14>
 2004f60:	8089c83a 	sub	r4,r16,r2
 2004f64:	01006a0e 	bge	zero,r4,2005110 <__adddf3+0x3d8>
 2004f68:	10003326 	beq	r2,zero,2005038 <__adddf3+0x300>
 2004f6c:	0081ffc4 	movi	r2,2047
 2004f70:	80bf9026 	beq	r16,r2,2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2004f74:	42002034 	orhi	r8,r8,128
 2004f78:	00800e04 	movi	r2,56
 2004f7c:	1100b116 	blt	r2,r4,2005244 <__adddf3+0x50c>
 2004f80:	008007c4 	movi	r2,31
 2004f84:	1100e216 	blt	r2,r4,2005310 <__adddf3+0x5d8>
 2004f88:	00800804 	movi	r2,32
 2004f8c:	1105c83a 	sub	r2,r2,r4
 2004f90:	4092983a 	sll	r9,r8,r2
 2004f94:	310ed83a 	srl	r7,r6,r4
 2004f98:	3084983a 	sll	r2,r6,r2
 2004f9c:	4110d83a 	srl	r8,r8,r4
 2004fa0:	49ccb03a 	or	r6,r9,r7
 2004fa4:	1004c03a 	cmpne	r2,r2,zero
 2004fa8:	308cb03a 	or	r6,r6,r2
 2004fac:	344d883a 	add	r6,r6,r17
 2004fb0:	3463803a 	cmpltu	r17,r6,r17
 2004fb4:	414b883a 	add	r5,r8,r5
 2004fb8:	2c4b883a 	add	r5,r5,r17
 2004fbc:	3023883a 	mov	r17,r6
 2004fc0:	2880202c 	andhi	r2,r5,128
 2004fc4:	10002726 	beq	r2,zero,2005064 <__adddf3+0x32c>
 2004fc8:	84000044 	addi	r16,r16,1
 2004fcc:	0081ffc4 	movi	r2,2047
 2004fd0:	8080ae26 	beq	r16,r2,200528c <__adddf3+0x554>
 2004fd4:	00bfe034 	movhi	r2,65408
 2004fd8:	10bfffc4 	addi	r2,r2,-1
 2004fdc:	288a703a 	and	r5,r5,r2
 2004fe0:	880cd07a 	srli	r6,r17,1
 2004fe4:	280897fa 	slli	r4,r5,31
 2004fe8:	88c0004c 	andi	r3,r17,1
 2004fec:	30e2b03a 	or	r17,r6,r3
 2004ff0:	280ad07a 	srli	r5,r5,1
 2004ff4:	8922b03a 	or	r17,r17,r4
 2004ff8:	003f6e06 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2004ffc:	1148b03a 	or	r4,r2,r5
 2005000:	20003c26 	beq	r4,zero,20050f4 <__adddf3+0x3bc>
 2005004:	29000234 	orhi	r4,r5,8
 2005008:	01400434 	movhi	r5,16
 200500c:	297fffc4 	addi	r5,r5,-1
 2005010:	2148703a 	and	r4,r4,r5
 2005014:	003f7f06 	br	2004e14 <__alt_mem_onchip_memory2_0+0xfdff4e14>
 2005018:	18ffffc4 	addi	r3,r3,-1
 200501c:	18004d1e 	bne	r3,zero,2005154 <__adddf3+0x41c>
 2005020:	898dc83a 	sub	r6,r17,r6
 2005024:	89a3803a 	cmpltu	r17,r17,r6
 2005028:	2a0bc83a 	sub	r5,r5,r8
 200502c:	2c4bc83a 	sub	r5,r5,r17
 2005030:	3023883a 	mov	r17,r6
 2005034:	003f9c06 	br	2004ea8 <__alt_mem_onchip_memory2_0+0xfdff4ea8>
 2005038:	4184b03a 	or	r2,r8,r6
 200503c:	103f5d26 	beq	r2,zero,2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2005040:	213fffc4 	addi	r4,r4,-1
 2005044:	203fd926 	beq	r4,zero,2004fac <__alt_mem_onchip_memory2_0+0xfdff4fac>
 2005048:	0081ffc4 	movi	r2,2047
 200504c:	80bfca1e 	bne	r16,r2,2004f78 <__alt_mem_onchip_memory2_0+0xfdff4f78>
 2005050:	003f5806 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2005054:	10c8b03a 	or	r4,r2,r3
 2005058:	20008b26 	beq	r4,zero,2005288 <__adddf3+0x550>
 200505c:	100b883a 	mov	r5,r2
 2005060:	1823883a 	mov	r17,r3
 2005064:	888001cc 	andi	r2,r17,7
 2005068:	103f541e 	bne	r2,zero,2004dbc <__alt_mem_onchip_memory2_0+0xfdff4dbc>
 200506c:	9007883a 	mov	r3,r18
 2005070:	003fb006 	br	2004f34 <__alt_mem_onchip_memory2_0+0xfdff4f34>
 2005074:	1800531e 	bne	r3,zero,20051c4 <__adddf3+0x48c>
 2005078:	80800044 	addi	r2,r16,1
 200507c:	1081ffcc 	andi	r2,r2,2047
 2005080:	00c00044 	movi	r3,1
 2005084:	1880990e 	bge	r3,r2,20052ec <__adddf3+0x5b4>
 2005088:	8985c83a 	sub	r2,r17,r6
 200508c:	8887803a 	cmpltu	r3,r17,r2
 2005090:	2a27c83a 	sub	r19,r5,r8
 2005094:	98e7c83a 	sub	r19,r19,r3
 2005098:	98c0202c 	andhi	r3,r19,128
 200509c:	18006226 	beq	r3,zero,2005228 <__adddf3+0x4f0>
 20050a0:	3463c83a 	sub	r17,r6,r17
 20050a4:	4151c83a 	sub	r8,r8,r5
 20050a8:	344d803a 	cmpltu	r6,r6,r17
 20050ac:	41a7c83a 	sub	r19,r8,r6
 20050b0:	3825883a 	mov	r18,r7
 20050b4:	983f821e 	bne	r19,zero,2004ec0 <__alt_mem_onchip_memory2_0+0xfdff4ec0>
 20050b8:	8809883a 	mov	r4,r17
 20050bc:	20076d40 	call	20076d4 <__clzsi2>
 20050c0:	10800804 	addi	r2,r2,32
 20050c4:	10fffe04 	addi	r3,r2,-8
 20050c8:	010007c4 	movi	r4,31
 20050cc:	20ff810e 	bge	r4,r3,2004ed4 <__alt_mem_onchip_memory2_0+0xfdff4ed4>
 20050d0:	14fff604 	addi	r19,r2,-40
 20050d4:	8ce6983a 	sll	r19,r17,r19
 20050d8:	0023883a 	mov	r17,zero
 20050dc:	1c3f840e 	bge	r3,r16,2004ef0 <__alt_mem_onchip_memory2_0+0xfdff4ef0>
 20050e0:	017fe034 	movhi	r5,65408
 20050e4:	297fffc4 	addi	r5,r5,-1
 20050e8:	80e1c83a 	sub	r16,r16,r3
 20050ec:	994a703a 	and	r5,r19,r5
 20050f0:	003f3006 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 20050f4:	0009883a 	mov	r4,zero
 20050f8:	0005883a 	mov	r2,zero
 20050fc:	003f4506 	br	2004e14 <__alt_mem_onchip_memory2_0+0xfdff4e14>
 2005100:	418cb03a 	or	r6,r8,r6
 2005104:	300cc03a 	cmpne	r6,r6,zero
 2005108:	0007883a 	mov	r3,zero
 200510c:	003f6106 	br	2004e94 <__alt_mem_onchip_memory2_0+0xfdff4e94>
 2005110:	2000921e 	bne	r4,zero,200535c <__adddf3+0x624>
 2005114:	80800044 	addi	r2,r16,1
 2005118:	11c1ffcc 	andi	r7,r2,2047
 200511c:	01000044 	movi	r4,1
 2005120:	21c0610e 	bge	r4,r7,20052a8 <__adddf3+0x570>
 2005124:	0101ffc4 	movi	r4,2047
 2005128:	1100a326 	beq	r2,r4,20053b8 <__adddf3+0x680>
 200512c:	344d883a 	add	r6,r6,r17
 2005130:	3463803a 	cmpltu	r17,r6,r17
 2005134:	414b883a 	add	r5,r8,r5
 2005138:	2c4b883a 	add	r5,r5,r17
 200513c:	282297fa 	slli	r17,r5,31
 2005140:	300cd07a 	srli	r6,r6,1
 2005144:	280ad07a 	srli	r5,r5,1
 2005148:	1021883a 	mov	r16,r2
 200514c:	89a2b03a 	or	r17,r17,r6
 2005150:	003f1806 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2005154:	0081ffc4 	movi	r2,2047
 2005158:	80bf411e 	bne	r16,r2,2004e60 <__alt_mem_onchip_memory2_0+0xfdff4e60>
 200515c:	003f1506 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2005160:	80bff844 	addi	r2,r16,-31
 2005164:	00c00804 	movi	r3,32
 2005168:	9884d83a 	srl	r2,r19,r2
 200516c:	28c04a26 	beq	r5,r3,2005298 <__adddf3+0x560>
 2005170:	00c00fc4 	movi	r3,63
 2005174:	1c21c83a 	sub	r16,r3,r16
 2005178:	9c26983a 	sll	r19,r19,r16
 200517c:	9c62b03a 	or	r17,r19,r17
 2005180:	8822c03a 	cmpne	r17,r17,zero
 2005184:	88a2b03a 	or	r17,r17,r2
 2005188:	000b883a 	mov	r5,zero
 200518c:	0021883a 	mov	r16,zero
 2005190:	003fb406 	br	2005064 <__alt_mem_onchip_memory2_0+0xfdff5064>
 2005194:	18bff804 	addi	r2,r3,-32
 2005198:	01000804 	movi	r4,32
 200519c:	4084d83a 	srl	r2,r8,r2
 20051a0:	19003f26 	beq	r3,r4,20052a0 <__adddf3+0x568>
 20051a4:	01001004 	movi	r4,64
 20051a8:	20c7c83a 	sub	r3,r4,r3
 20051ac:	40d0983a 	sll	r8,r8,r3
 20051b0:	418cb03a 	or	r6,r8,r6
 20051b4:	300cc03a 	cmpne	r6,r6,zero
 20051b8:	308cb03a 	or	r6,r6,r2
 20051bc:	0007883a 	mov	r3,zero
 20051c0:	003f3406 	br	2004e94 <__alt_mem_onchip_memory2_0+0xfdff4e94>
 20051c4:	80002326 	beq	r16,zero,2005254 <__adddf3+0x51c>
 20051c8:	0101ffc4 	movi	r4,2047
 20051cc:	11005e26 	beq	r2,r4,2005348 <__adddf3+0x610>
 20051d0:	00c7c83a 	sub	r3,zero,r3
 20051d4:	29402034 	orhi	r5,r5,128
 20051d8:	01000e04 	movi	r4,56
 20051dc:	20c07216 	blt	r4,r3,20053a8 <__adddf3+0x670>
 20051e0:	010007c4 	movi	r4,31
 20051e4:	20c0ce16 	blt	r4,r3,2005520 <__adddf3+0x7e8>
 20051e8:	01000804 	movi	r4,32
 20051ec:	20c9c83a 	sub	r4,r4,r3
 20051f0:	2914983a 	sll	r10,r5,r4
 20051f4:	88d2d83a 	srl	r9,r17,r3
 20051f8:	8908983a 	sll	r4,r17,r4
 20051fc:	28c6d83a 	srl	r3,r5,r3
 2005200:	5262b03a 	or	r17,r10,r9
 2005204:	2008c03a 	cmpne	r4,r4,zero
 2005208:	8922b03a 	or	r17,r17,r4
 200520c:	3463c83a 	sub	r17,r6,r17
 2005210:	40c7c83a 	sub	r3,r8,r3
 2005214:	344d803a 	cmpltu	r6,r6,r17
 2005218:	198bc83a 	sub	r5,r3,r6
 200521c:	1021883a 	mov	r16,r2
 2005220:	3825883a 	mov	r18,r7
 2005224:	003f2006 	br	2004ea8 <__alt_mem_onchip_memory2_0+0xfdff4ea8>
 2005228:	9886b03a 	or	r3,r19,r2
 200522c:	1800141e 	bne	r3,zero,2005280 <__adddf3+0x548>
 2005230:	0007883a 	mov	r3,zero
 2005234:	000b883a 	mov	r5,zero
 2005238:	0023883a 	mov	r17,zero
 200523c:	0021883a 	mov	r16,zero
 2005240:	003f3c06 	br	2004f34 <__alt_mem_onchip_memory2_0+0xfdff4f34>
 2005244:	418cb03a 	or	r6,r8,r6
 2005248:	300cc03a 	cmpne	r6,r6,zero
 200524c:	0011883a 	mov	r8,zero
 2005250:	003f5606 	br	2004fac <__alt_mem_onchip_memory2_0+0xfdff4fac>
 2005254:	2c48b03a 	or	r4,r5,r17
 2005258:	20003b26 	beq	r4,zero,2005348 <__adddf3+0x610>
 200525c:	00c6303a 	nor	r3,zero,r3
 2005260:	1800371e 	bne	r3,zero,2005340 <__adddf3+0x608>
 2005264:	3463c83a 	sub	r17,r6,r17
 2005268:	414bc83a 	sub	r5,r8,r5
 200526c:	344d803a 	cmpltu	r6,r6,r17
 2005270:	298bc83a 	sub	r5,r5,r6
 2005274:	1021883a 	mov	r16,r2
 2005278:	3825883a 	mov	r18,r7
 200527c:	003f0a06 	br	2004ea8 <__alt_mem_onchip_memory2_0+0xfdff4ea8>
 2005280:	1023883a 	mov	r17,r2
 2005284:	003f0d06 	br	2004ebc <__alt_mem_onchip_memory2_0+0xfdff4ebc>
 2005288:	0007883a 	mov	r3,zero
 200528c:	000b883a 	mov	r5,zero
 2005290:	0023883a 	mov	r17,zero
 2005294:	003f2706 	br	2004f34 <__alt_mem_onchip_memory2_0+0xfdff4f34>
 2005298:	0027883a 	mov	r19,zero
 200529c:	003fb706 	br	200517c <__alt_mem_onchip_memory2_0+0xfdff517c>
 20052a0:	0011883a 	mov	r8,zero
 20052a4:	003fc206 	br	20051b0 <__alt_mem_onchip_memory2_0+0xfdff51b0>
 20052a8:	2c44b03a 	or	r2,r5,r17
 20052ac:	8000871e 	bne	r16,zero,20054cc <__adddf3+0x794>
 20052b0:	1000b126 	beq	r2,zero,2005578 <__adddf3+0x840>
 20052b4:	4184b03a 	or	r2,r8,r6
 20052b8:	103ebe26 	beq	r2,zero,2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 20052bc:	3445883a 	add	r2,r6,r17
 20052c0:	1463803a 	cmpltu	r17,r2,r17
 20052c4:	414b883a 	add	r5,r8,r5
 20052c8:	2c4b883a 	add	r5,r5,r17
 20052cc:	28c0202c 	andhi	r3,r5,128
 20052d0:	1023883a 	mov	r17,r2
 20052d4:	183f6326 	beq	r3,zero,2005064 <__alt_mem_onchip_memory2_0+0xfdff5064>
 20052d8:	00bfe034 	movhi	r2,65408
 20052dc:	10bfffc4 	addi	r2,r2,-1
 20052e0:	2021883a 	mov	r16,r4
 20052e4:	288a703a 	and	r5,r5,r2
 20052e8:	003eb206 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 20052ec:	2c44b03a 	or	r2,r5,r17
 20052f0:	8000251e 	bne	r16,zero,2005388 <__adddf3+0x650>
 20052f4:	10004b1e 	bne	r2,zero,2005424 <__adddf3+0x6ec>
 20052f8:	4184b03a 	or	r2,r8,r6
 20052fc:	103fe226 	beq	r2,zero,2005288 <__alt_mem_onchip_memory2_0+0xfdff5288>
 2005300:	400b883a 	mov	r5,r8
 2005304:	3023883a 	mov	r17,r6
 2005308:	3825883a 	mov	r18,r7
 200530c:	003ea906 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2005310:	20bff804 	addi	r2,r4,-32
 2005314:	01c00804 	movi	r7,32
 2005318:	4084d83a 	srl	r2,r8,r2
 200531c:	21c07e26 	beq	r4,r7,2005518 <__adddf3+0x7e0>
 2005320:	01c01004 	movi	r7,64
 2005324:	3909c83a 	sub	r4,r7,r4
 2005328:	4110983a 	sll	r8,r8,r4
 200532c:	418cb03a 	or	r6,r8,r6
 2005330:	300cc03a 	cmpne	r6,r6,zero
 2005334:	308cb03a 	or	r6,r6,r2
 2005338:	0011883a 	mov	r8,zero
 200533c:	003f1b06 	br	2004fac <__alt_mem_onchip_memory2_0+0xfdff4fac>
 2005340:	0101ffc4 	movi	r4,2047
 2005344:	113fa41e 	bne	r2,r4,20051d8 <__alt_mem_onchip_memory2_0+0xfdff51d8>
 2005348:	400b883a 	mov	r5,r8
 200534c:	3023883a 	mov	r17,r6
 2005350:	1021883a 	mov	r16,r2
 2005354:	3825883a 	mov	r18,r7
 2005358:	003e9606 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 200535c:	80001a1e 	bne	r16,zero,20053c8 <__adddf3+0x690>
 2005360:	2c4eb03a 	or	r7,r5,r17
 2005364:	38005526 	beq	r7,zero,20054bc <__adddf3+0x784>
 2005368:	0108303a 	nor	r4,zero,r4
 200536c:	2000511e 	bne	r4,zero,20054b4 <__adddf3+0x77c>
 2005370:	89a3883a 	add	r17,r17,r6
 2005374:	414b883a 	add	r5,r8,r5
 2005378:	898d803a 	cmpltu	r6,r17,r6
 200537c:	298b883a 	add	r5,r5,r6
 2005380:	1021883a 	mov	r16,r2
 2005384:	003f0e06 	br	2004fc0 <__alt_mem_onchip_memory2_0+0xfdff4fc0>
 2005388:	1000341e 	bne	r2,zero,200545c <__adddf3+0x724>
 200538c:	4184b03a 	or	r2,r8,r6
 2005390:	10006f26 	beq	r2,zero,2005550 <__adddf3+0x818>
 2005394:	400b883a 	mov	r5,r8
 2005398:	3023883a 	mov	r17,r6
 200539c:	3825883a 	mov	r18,r7
 20053a0:	0401ffc4 	movi	r16,2047
 20053a4:	003e8306 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 20053a8:	2c62b03a 	or	r17,r5,r17
 20053ac:	8822c03a 	cmpne	r17,r17,zero
 20053b0:	0007883a 	mov	r3,zero
 20053b4:	003f9506 	br	200520c <__alt_mem_onchip_memory2_0+0xfdff520c>
 20053b8:	1021883a 	mov	r16,r2
 20053bc:	000b883a 	mov	r5,zero
 20053c0:	0023883a 	mov	r17,zero
 20053c4:	003edb06 	br	2004f34 <__alt_mem_onchip_memory2_0+0xfdff4f34>
 20053c8:	01c1ffc4 	movi	r7,2047
 20053cc:	11c03b26 	beq	r2,r7,20054bc <__adddf3+0x784>
 20053d0:	0109c83a 	sub	r4,zero,r4
 20053d4:	29402034 	orhi	r5,r5,128
 20053d8:	01c00e04 	movi	r7,56
 20053dc:	39006216 	blt	r7,r4,2005568 <__adddf3+0x830>
 20053e0:	01c007c4 	movi	r7,31
 20053e4:	39006b16 	blt	r7,r4,2005594 <__adddf3+0x85c>
 20053e8:	01c00804 	movi	r7,32
 20053ec:	390fc83a 	sub	r7,r7,r4
 20053f0:	29d4983a 	sll	r10,r5,r7
 20053f4:	8912d83a 	srl	r9,r17,r4
 20053f8:	89ce983a 	sll	r7,r17,r7
 20053fc:	2908d83a 	srl	r4,r5,r4
 2005400:	5262b03a 	or	r17,r10,r9
 2005404:	380ac03a 	cmpne	r5,r7,zero
 2005408:	8962b03a 	or	r17,r17,r5
 200540c:	89a3883a 	add	r17,r17,r6
 2005410:	2211883a 	add	r8,r4,r8
 2005414:	898d803a 	cmpltu	r6,r17,r6
 2005418:	418b883a 	add	r5,r8,r6
 200541c:	1021883a 	mov	r16,r2
 2005420:	003ee706 	br	2004fc0 <__alt_mem_onchip_memory2_0+0xfdff4fc0>
 2005424:	4184b03a 	or	r2,r8,r6
 2005428:	103e6226 	beq	r2,zero,2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 200542c:	8987c83a 	sub	r3,r17,r6
 2005430:	88c9803a 	cmpltu	r4,r17,r3
 2005434:	2a05c83a 	sub	r2,r5,r8
 2005438:	1105c83a 	sub	r2,r2,r4
 200543c:	1100202c 	andhi	r4,r2,128
 2005440:	203f0426 	beq	r4,zero,2005054 <__alt_mem_onchip_memory2_0+0xfdff5054>
 2005444:	3463c83a 	sub	r17,r6,r17
 2005448:	414bc83a 	sub	r5,r8,r5
 200544c:	344d803a 	cmpltu	r6,r6,r17
 2005450:	298bc83a 	sub	r5,r5,r6
 2005454:	3825883a 	mov	r18,r7
 2005458:	003e5606 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 200545c:	4184b03a 	or	r2,r8,r6
 2005460:	10002b26 	beq	r2,zero,2005510 <__adddf3+0x7d8>
 2005464:	2804d0fa 	srli	r2,r5,3
 2005468:	8822d0fa 	srli	r17,r17,3
 200546c:	280a977a 	slli	r5,r5,29
 2005470:	10c0022c 	andhi	r3,r2,8
 2005474:	2c62b03a 	or	r17,r5,r17
 2005478:	18000826 	beq	r3,zero,200549c <__adddf3+0x764>
 200547c:	4008d0fa 	srli	r4,r8,3
 2005480:	20c0022c 	andhi	r3,r4,8
 2005484:	1800051e 	bne	r3,zero,200549c <__adddf3+0x764>
 2005488:	300cd0fa 	srli	r6,r6,3
 200548c:	4010977a 	slli	r8,r8,29
 2005490:	2005883a 	mov	r2,r4
 2005494:	3825883a 	mov	r18,r7
 2005498:	41a2b03a 	or	r17,r8,r6
 200549c:	880ad77a 	srli	r5,r17,29
 20054a0:	100490fa 	slli	r2,r2,3
 20054a4:	882290fa 	slli	r17,r17,3
 20054a8:	0401ffc4 	movi	r16,2047
 20054ac:	288ab03a 	or	r5,r5,r2
 20054b0:	003e4006 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 20054b4:	01c1ffc4 	movi	r7,2047
 20054b8:	11ffc71e 	bne	r2,r7,20053d8 <__alt_mem_onchip_memory2_0+0xfdff53d8>
 20054bc:	400b883a 	mov	r5,r8
 20054c0:	3023883a 	mov	r17,r6
 20054c4:	1021883a 	mov	r16,r2
 20054c8:	003e3a06 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 20054cc:	10002d26 	beq	r2,zero,2005584 <__adddf3+0x84c>
 20054d0:	4184b03a 	or	r2,r8,r6
 20054d4:	10000e26 	beq	r2,zero,2005510 <__adddf3+0x7d8>
 20054d8:	2804d0fa 	srli	r2,r5,3
 20054dc:	8822d0fa 	srli	r17,r17,3
 20054e0:	280a977a 	slli	r5,r5,29
 20054e4:	10c0022c 	andhi	r3,r2,8
 20054e8:	2c62b03a 	or	r17,r5,r17
 20054ec:	183feb26 	beq	r3,zero,200549c <__alt_mem_onchip_memory2_0+0xfdff549c>
 20054f0:	4008d0fa 	srli	r4,r8,3
 20054f4:	20c0022c 	andhi	r3,r4,8
 20054f8:	183fe81e 	bne	r3,zero,200549c <__alt_mem_onchip_memory2_0+0xfdff549c>
 20054fc:	300cd0fa 	srli	r6,r6,3
 2005500:	4010977a 	slli	r8,r8,29
 2005504:	2005883a 	mov	r2,r4
 2005508:	41a2b03a 	or	r17,r8,r6
 200550c:	003fe306 	br	200549c <__alt_mem_onchip_memory2_0+0xfdff549c>
 2005510:	0401ffc4 	movi	r16,2047
 2005514:	003e2706 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2005518:	0011883a 	mov	r8,zero
 200551c:	003f8306 	br	200532c <__alt_mem_onchip_memory2_0+0xfdff532c>
 2005520:	193ff804 	addi	r4,r3,-32
 2005524:	02400804 	movi	r9,32
 2005528:	2908d83a 	srl	r4,r5,r4
 200552c:	1a402526 	beq	r3,r9,20055c4 <__adddf3+0x88c>
 2005530:	02401004 	movi	r9,64
 2005534:	48c7c83a 	sub	r3,r9,r3
 2005538:	28ca983a 	sll	r5,r5,r3
 200553c:	2c62b03a 	or	r17,r5,r17
 2005540:	8822c03a 	cmpne	r17,r17,zero
 2005544:	8922b03a 	or	r17,r17,r4
 2005548:	0007883a 	mov	r3,zero
 200554c:	003f2f06 	br	200520c <__alt_mem_onchip_memory2_0+0xfdff520c>
 2005550:	01402034 	movhi	r5,128
 2005554:	0007883a 	mov	r3,zero
 2005558:	297fffc4 	addi	r5,r5,-1
 200555c:	047ffe04 	movi	r17,-8
 2005560:	0401ffc4 	movi	r16,2047
 2005564:	003e7306 	br	2004f34 <__alt_mem_onchip_memory2_0+0xfdff4f34>
 2005568:	2c62b03a 	or	r17,r5,r17
 200556c:	8822c03a 	cmpne	r17,r17,zero
 2005570:	0009883a 	mov	r4,zero
 2005574:	003fa506 	br	200540c <__alt_mem_onchip_memory2_0+0xfdff540c>
 2005578:	400b883a 	mov	r5,r8
 200557c:	3023883a 	mov	r17,r6
 2005580:	003e0c06 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2005584:	400b883a 	mov	r5,r8
 2005588:	3023883a 	mov	r17,r6
 200558c:	0401ffc4 	movi	r16,2047
 2005590:	003e0806 	br	2004db4 <__alt_mem_onchip_memory2_0+0xfdff4db4>
 2005594:	21fff804 	addi	r7,r4,-32
 2005598:	02400804 	movi	r9,32
 200559c:	29ced83a 	srl	r7,r5,r7
 20055a0:	22400a26 	beq	r4,r9,20055cc <__adddf3+0x894>
 20055a4:	02401004 	movi	r9,64
 20055a8:	4909c83a 	sub	r4,r9,r4
 20055ac:	290a983a 	sll	r5,r5,r4
 20055b0:	2c62b03a 	or	r17,r5,r17
 20055b4:	8822c03a 	cmpne	r17,r17,zero
 20055b8:	89e2b03a 	or	r17,r17,r7
 20055bc:	0009883a 	mov	r4,zero
 20055c0:	003f9206 	br	200540c <__alt_mem_onchip_memory2_0+0xfdff540c>
 20055c4:	000b883a 	mov	r5,zero
 20055c8:	003fdc06 	br	200553c <__alt_mem_onchip_memory2_0+0xfdff553c>
 20055cc:	000b883a 	mov	r5,zero
 20055d0:	003ff706 	br	20055b0 <__alt_mem_onchip_memory2_0+0xfdff55b0>

020055d4 <__divdf3>:
 20055d4:	defff004 	addi	sp,sp,-64
 20055d8:	dc800815 	stw	r18,32(sp)
 20055dc:	2824d53a 	srli	r18,r5,20
 20055e0:	dd800c15 	stw	r22,48(sp)
 20055e4:	282cd7fa 	srli	r22,r5,31
 20055e8:	dc000615 	stw	r16,24(sp)
 20055ec:	04000434 	movhi	r16,16
 20055f0:	df000e15 	stw	fp,56(sp)
 20055f4:	dd000a15 	stw	r20,40(sp)
 20055f8:	dcc00915 	stw	r19,36(sp)
 20055fc:	dc400715 	stw	r17,28(sp)
 2005600:	843fffc4 	addi	r16,r16,-1
 2005604:	dfc00f15 	stw	ra,60(sp)
 2005608:	ddc00d15 	stw	r23,52(sp)
 200560c:	dd400b15 	stw	r21,44(sp)
 2005610:	9481ffcc 	andi	r18,r18,2047
 2005614:	2029883a 	mov	r20,r4
 2005618:	2027883a 	mov	r19,r4
 200561c:	2c22703a 	and	r17,r5,r16
 2005620:	b7003fcc 	andi	fp,r22,255
 2005624:	90005e26 	beq	r18,zero,20057a0 <__divdf3+0x1cc>
 2005628:	0081ffc4 	movi	r2,2047
 200562c:	90803526 	beq	r18,r2,2005704 <__divdf3+0x130>
 2005630:	8c000434 	orhi	r16,r17,16
 2005634:	2004d77a 	srli	r2,r4,29
 2005638:	802090fa 	slli	r16,r16,3
 200563c:	202690fa 	slli	r19,r4,3
 2005640:	94bf0044 	addi	r18,r18,-1023
 2005644:	80a2b03a 	or	r17,r16,r2
 2005648:	0029883a 	mov	r20,zero
 200564c:	0011883a 	mov	r8,zero
 2005650:	380ad53a 	srli	r5,r7,20
 2005654:	382ed7fa 	srli	r23,r7,31
 2005658:	04000434 	movhi	r16,16
 200565c:	843fffc4 	addi	r16,r16,-1
 2005660:	2941ffcc 	andi	r5,r5,2047
 2005664:	302b883a 	mov	r21,r6
 2005668:	3c20703a 	and	r16,r7,r16
 200566c:	ba403fcc 	andi	r9,r23,255
 2005670:	28006726 	beq	r5,zero,2005810 <__divdf3+0x23c>
 2005674:	0081ffc4 	movi	r2,2047
 2005678:	28805f26 	beq	r5,r2,20057f8 <__divdf3+0x224>
 200567c:	84000434 	orhi	r16,r16,16
 2005680:	3004d77a 	srli	r2,r6,29
 2005684:	802090fa 	slli	r16,r16,3
 2005688:	302a90fa 	slli	r21,r6,3
 200568c:	297f0044 	addi	r5,r5,-1023
 2005690:	80a0b03a 	or	r16,r16,r2
 2005694:	000f883a 	mov	r7,zero
 2005698:	3d06b03a 	or	r3,r7,r20
 200569c:	180690ba 	slli	r3,r3,2
 20056a0:	00808034 	movhi	r2,512
 20056a4:	1095b104 	addi	r2,r2,22212
 20056a8:	1885883a 	add	r2,r3,r2
 20056ac:	10800017 	ldw	r2,0(r2)
 20056b0:	b5c8f03a 	xor	r4,r22,r23
 20056b4:	200d883a 	mov	r6,r4
 20056b8:	25003fcc 	andi	r20,r4,255
 20056bc:	9165c83a 	sub	r18,r18,r5
 20056c0:	1000683a 	jmp	r2
 20056c4:	0200590c 	andi	r8,zero,356
 20056c8:	0200573c 	xorhi	r8,zero,348
 20056cc:	020058d0 	cmplti	r8,zero,355
 20056d0:	02005720 	cmpeqi	r8,zero,348
 20056d4:	020058d0 	cmplti	r8,zero,355
 20056d8:	020058a4 	muli	r8,zero,354
 20056dc:	020058d0 	cmplti	r8,zero,355
 20056e0:	02005720 	cmpeqi	r8,zero,348
 20056e4:	0200573c 	xorhi	r8,zero,348
 20056e8:	0200573c 	xorhi	r8,zero,348
 20056ec:	020058a4 	muli	r8,zero,354
 20056f0:	02005720 	cmpeqi	r8,zero,348
 20056f4:	02005730 	cmpltui	r8,zero,348
 20056f8:	02005730 	cmpltui	r8,zero,348
 20056fc:	02005730 	cmpltui	r8,zero,348
 2005700:	020058e0 	cmpeqi	r8,zero,355
 2005704:	8904b03a 	or	r2,r17,r4
 2005708:	1000631e 	bne	r2,zero,2005898 <__divdf3+0x2c4>
 200570c:	05000204 	movi	r20,8
 2005710:	0023883a 	mov	r17,zero
 2005714:	0027883a 	mov	r19,zero
 2005718:	02000084 	movi	r8,2
 200571c:	003fcc06 	br	2005650 <__alt_mem_onchip_memory2_0+0xfdff5650>
 2005720:	8023883a 	mov	r17,r16
 2005724:	a827883a 	mov	r19,r21
 2005728:	4839883a 	mov	fp,r9
 200572c:	3811883a 	mov	r8,r7
 2005730:	00800084 	movi	r2,2
 2005734:	4081531e 	bne	r8,r2,2005c84 <__divdf3+0x6b0>
 2005738:	e029883a 	mov	r20,fp
 200573c:	a180004c 	andi	r6,r20,1
 2005740:	0201ffc4 	movi	r8,2047
 2005744:	000b883a 	mov	r5,zero
 2005748:	0027883a 	mov	r19,zero
 200574c:	4010953a 	slli	r8,r8,20
 2005750:	30c03fcc 	andi	r3,r6,255
 2005754:	04000434 	movhi	r16,16
 2005758:	180697fa 	slli	r3,r3,31
 200575c:	843fffc4 	addi	r16,r16,-1
 2005760:	2c20703a 	and	r16,r5,r16
 2005764:	8220b03a 	or	r16,r16,r8
 2005768:	80c6b03a 	or	r3,r16,r3
 200576c:	9805883a 	mov	r2,r19
 2005770:	dfc00f17 	ldw	ra,60(sp)
 2005774:	df000e17 	ldw	fp,56(sp)
 2005778:	ddc00d17 	ldw	r23,52(sp)
 200577c:	dd800c17 	ldw	r22,48(sp)
 2005780:	dd400b17 	ldw	r21,44(sp)
 2005784:	dd000a17 	ldw	r20,40(sp)
 2005788:	dcc00917 	ldw	r19,36(sp)
 200578c:	dc800817 	ldw	r18,32(sp)
 2005790:	dc400717 	ldw	r17,28(sp)
 2005794:	dc000617 	ldw	r16,24(sp)
 2005798:	dec01004 	addi	sp,sp,64
 200579c:	f800283a 	ret
 20057a0:	8904b03a 	or	r2,r17,r4
 20057a4:	10003726 	beq	r2,zero,2005884 <__divdf3+0x2b0>
 20057a8:	88014d26 	beq	r17,zero,2005ce0 <__divdf3+0x70c>
 20057ac:	8809883a 	mov	r4,r17
 20057b0:	d9800215 	stw	r6,8(sp)
 20057b4:	d9c00515 	stw	r7,20(sp)
 20057b8:	20076d40 	call	20076d4 <__clzsi2>
 20057bc:	d9800217 	ldw	r6,8(sp)
 20057c0:	d9c00517 	ldw	r7,20(sp)
 20057c4:	1007883a 	mov	r3,r2
 20057c8:	01000a04 	movi	r4,40
 20057cc:	1cfffe04 	addi	r19,r3,-8
 20057d0:	20c9c83a 	sub	r4,r4,r3
 20057d4:	8cca983a 	sll	r5,r17,r19
 20057d8:	a108d83a 	srl	r4,r20,r4
 20057dc:	a4e6983a 	sll	r19,r20,r19
 20057e0:	2162b03a 	or	r17,r4,r5
 20057e4:	04bf0344 	movi	r18,-1011
 20057e8:	90e5c83a 	sub	r18,r18,r3
 20057ec:	0029883a 	mov	r20,zero
 20057f0:	0011883a 	mov	r8,zero
 20057f4:	003f9606 	br	2005650 <__alt_mem_onchip_memory2_0+0xfdff5650>
 20057f8:	8184b03a 	or	r2,r16,r6
 20057fc:	10001f1e 	bne	r2,zero,200587c <__divdf3+0x2a8>
 2005800:	0021883a 	mov	r16,zero
 2005804:	002b883a 	mov	r21,zero
 2005808:	01c00084 	movi	r7,2
 200580c:	003fa206 	br	2005698 <__alt_mem_onchip_memory2_0+0xfdff5698>
 2005810:	8184b03a 	or	r2,r16,r6
 2005814:	10001526 	beq	r2,zero,200586c <__divdf3+0x298>
 2005818:	80013d26 	beq	r16,zero,2005d10 <__divdf3+0x73c>
 200581c:	8009883a 	mov	r4,r16
 2005820:	d9800215 	stw	r6,8(sp)
 2005824:	da000315 	stw	r8,12(sp)
 2005828:	da400415 	stw	r9,16(sp)
 200582c:	20076d40 	call	20076d4 <__clzsi2>
 2005830:	d9800217 	ldw	r6,8(sp)
 2005834:	da000317 	ldw	r8,12(sp)
 2005838:	da400417 	ldw	r9,16(sp)
 200583c:	1007883a 	mov	r3,r2
 2005840:	01000a04 	movi	r4,40
 2005844:	1d7ffe04 	addi	r21,r3,-8
 2005848:	20c9c83a 	sub	r4,r4,r3
 200584c:	8560983a 	sll	r16,r16,r21
 2005850:	3108d83a 	srl	r4,r6,r4
 2005854:	356a983a 	sll	r21,r6,r21
 2005858:	2420b03a 	or	r16,r4,r16
 200585c:	017f0344 	movi	r5,-1011
 2005860:	28cbc83a 	sub	r5,r5,r3
 2005864:	000f883a 	mov	r7,zero
 2005868:	003f8b06 	br	2005698 <__alt_mem_onchip_memory2_0+0xfdff5698>
 200586c:	0021883a 	mov	r16,zero
 2005870:	002b883a 	mov	r21,zero
 2005874:	01c00044 	movi	r7,1
 2005878:	003f8706 	br	2005698 <__alt_mem_onchip_memory2_0+0xfdff5698>
 200587c:	01c000c4 	movi	r7,3
 2005880:	003f8506 	br	2005698 <__alt_mem_onchip_memory2_0+0xfdff5698>
 2005884:	05000104 	movi	r20,4
 2005888:	0023883a 	mov	r17,zero
 200588c:	0027883a 	mov	r19,zero
 2005890:	02000044 	movi	r8,1
 2005894:	003f6e06 	br	2005650 <__alt_mem_onchip_memory2_0+0xfdff5650>
 2005898:	05000304 	movi	r20,12
 200589c:	020000c4 	movi	r8,3
 20058a0:	003f6b06 	br	2005650 <__alt_mem_onchip_memory2_0+0xfdff5650>
 20058a4:	01400434 	movhi	r5,16
 20058a8:	000d883a 	mov	r6,zero
 20058ac:	297fffc4 	addi	r5,r5,-1
 20058b0:	04ffffc4 	movi	r19,-1
 20058b4:	0201ffc4 	movi	r8,2047
 20058b8:	003fa406 	br	200574c <__alt_mem_onchip_memory2_0+0xfdff574c>
 20058bc:	043f0084 	movi	r16,-1022
 20058c0:	84a1c83a 	sub	r16,r16,r18
 20058c4:	00800e04 	movi	r2,56
 20058c8:	14014d0e 	bge	r2,r16,2005e00 <__divdf3+0x82c>
 20058cc:	a180004c 	andi	r6,r20,1
 20058d0:	0011883a 	mov	r8,zero
 20058d4:	000b883a 	mov	r5,zero
 20058d8:	0027883a 	mov	r19,zero
 20058dc:	003f9b06 	br	200574c <__alt_mem_onchip_memory2_0+0xfdff574c>
 20058e0:	8880022c 	andhi	r2,r17,8
 20058e4:	1000f026 	beq	r2,zero,2005ca8 <__divdf3+0x6d4>
 20058e8:	8080022c 	andhi	r2,r16,8
 20058ec:	1000ee1e 	bne	r2,zero,2005ca8 <__divdf3+0x6d4>
 20058f0:	00800434 	movhi	r2,16
 20058f4:	81400234 	orhi	r5,r16,8
 20058f8:	10bfffc4 	addi	r2,r2,-1
 20058fc:	b80d883a 	mov	r6,r23
 2005900:	288a703a 	and	r5,r5,r2
 2005904:	a827883a 	mov	r19,r21
 2005908:	003fea06 	br	20058b4 <__alt_mem_onchip_memory2_0+0xfdff58b4>
 200590c:	84411c36 	bltu	r16,r17,2005d80 <__divdf3+0x7ac>
 2005910:	8c011a26 	beq	r17,r16,2005d7c <__divdf3+0x7a8>
 2005914:	94bfffc4 	addi	r18,r18,-1
 2005918:	dcc00015 	stw	r19,0(sp)
 200591c:	8811883a 	mov	r8,r17
 2005920:	002d883a 	mov	r22,zero
 2005924:	a80cd63a 	srli	r6,r21,24
 2005928:	8020923a 	slli	r16,r16,8
 200592c:	a82a923a 	slli	r21,r21,8
 2005930:	4009883a 	mov	r4,r8
 2005934:	342eb03a 	or	r23,r6,r16
 2005938:	dd400115 	stw	r21,4(sp)
 200593c:	b82ad43a 	srli	r21,r23,16
 2005940:	da000315 	stw	r8,12(sp)
 2005944:	bcffffcc 	andi	r19,r23,65535
 2005948:	a80b883a 	mov	r5,r21
 200594c:	2003c700 	call	2003c70 <__udivsi3>
 2005950:	1009883a 	mov	r4,r2
 2005954:	980b883a 	mov	r5,r19
 2005958:	1023883a 	mov	r17,r2
 200595c:	2003c800 	call	2003c80 <__mulsi3>
 2005960:	da000317 	ldw	r8,12(sp)
 2005964:	a80b883a 	mov	r5,r21
 2005968:	1039883a 	mov	fp,r2
 200596c:	4009883a 	mov	r4,r8
 2005970:	2003c780 	call	2003c78 <__umodsi3>
 2005974:	d8c00017 	ldw	r3,0(sp)
 2005978:	1004943a 	slli	r2,r2,16
 200597c:	1810d43a 	srli	r8,r3,16
 2005980:	120eb03a 	or	r7,r2,r8
 2005984:	3f00062e 	bgeu	r7,fp,20059a0 <__divdf3+0x3cc>
 2005988:	3dcf883a 	add	r7,r7,r23
 200598c:	88bfffc4 	addi	r2,r17,-1
 2005990:	3dc10a36 	bltu	r7,r23,2005dbc <__divdf3+0x7e8>
 2005994:	3f01092e 	bgeu	r7,fp,2005dbc <__divdf3+0x7e8>
 2005998:	8c7fff84 	addi	r17,r17,-2
 200599c:	3dcf883a 	add	r7,r7,r23
 20059a0:	3f39c83a 	sub	fp,r7,fp
 20059a4:	e009883a 	mov	r4,fp
 20059a8:	a80b883a 	mov	r5,r21
 20059ac:	2003c700 	call	2003c70 <__udivsi3>
 20059b0:	1009883a 	mov	r4,r2
 20059b4:	980b883a 	mov	r5,r19
 20059b8:	1021883a 	mov	r16,r2
 20059bc:	2003c800 	call	2003c80 <__mulsi3>
 20059c0:	e009883a 	mov	r4,fp
 20059c4:	a80b883a 	mov	r5,r21
 20059c8:	d8800315 	stw	r2,12(sp)
 20059cc:	2003c780 	call	2003c78 <__umodsi3>
 20059d0:	d9000017 	ldw	r4,0(sp)
 20059d4:	1004943a 	slli	r2,r2,16
 20059d8:	da000317 	ldw	r8,12(sp)
 20059dc:	20ffffcc 	andi	r3,r4,65535
 20059e0:	10ceb03a 	or	r7,r2,r3
 20059e4:	3a00062e 	bgeu	r7,r8,2005a00 <__divdf3+0x42c>
 20059e8:	3dcf883a 	add	r7,r7,r23
 20059ec:	80bfffc4 	addi	r2,r16,-1
 20059f0:	3dc0f036 	bltu	r7,r23,2005db4 <__divdf3+0x7e0>
 20059f4:	3a00ef2e 	bgeu	r7,r8,2005db4 <__divdf3+0x7e0>
 20059f8:	843fff84 	addi	r16,r16,-2
 20059fc:	3dcf883a 	add	r7,r7,r23
 2005a00:	d8c00117 	ldw	r3,4(sp)
 2005a04:	8822943a 	slli	r17,r17,16
 2005a08:	3a0fc83a 	sub	r7,r7,r8
 2005a0c:	1806d43a 	srli	r3,r3,16
 2005a10:	8462b03a 	or	r17,r16,r17
 2005a14:	8affffcc 	andi	r11,r17,65535
 2005a18:	d8c00015 	stw	r3,0(sp)
 2005a1c:	d8c00117 	ldw	r3,4(sp)
 2005a20:	8820d43a 	srli	r16,r17,16
 2005a24:	5809883a 	mov	r4,r11
 2005a28:	1f3fffcc 	andi	fp,r3,65535
 2005a2c:	e00b883a 	mov	r5,fp
 2005a30:	d9c00515 	stw	r7,20(sp)
 2005a34:	dac00215 	stw	r11,8(sp)
 2005a38:	2003c800 	call	2003c80 <__mulsi3>
 2005a3c:	8009883a 	mov	r4,r16
 2005a40:	e00b883a 	mov	r5,fp
 2005a44:	d8800415 	stw	r2,16(sp)
 2005a48:	2003c800 	call	2003c80 <__mulsi3>
 2005a4c:	d9400017 	ldw	r5,0(sp)
 2005a50:	8009883a 	mov	r4,r16
 2005a54:	d8800315 	stw	r2,12(sp)
 2005a58:	2003c800 	call	2003c80 <__mulsi3>
 2005a5c:	dac00217 	ldw	r11,8(sp)
 2005a60:	d9400017 	ldw	r5,0(sp)
 2005a64:	d8800215 	stw	r2,8(sp)
 2005a68:	5809883a 	mov	r4,r11
 2005a6c:	2003c800 	call	2003c80 <__mulsi3>
 2005a70:	da400417 	ldw	r9,16(sp)
 2005a74:	da800317 	ldw	r10,12(sp)
 2005a78:	d9c00517 	ldw	r7,20(sp)
 2005a7c:	480ad43a 	srli	r5,r9,16
 2005a80:	5085883a 	add	r2,r10,r2
 2005a84:	db000217 	ldw	r12,8(sp)
 2005a88:	1151883a 	add	r8,r2,r5
 2005a8c:	4280022e 	bgeu	r8,r10,2005a98 <__divdf3+0x4c4>
 2005a90:	00800074 	movhi	r2,1
 2005a94:	6099883a 	add	r12,r12,r2
 2005a98:	400ad43a 	srli	r5,r8,16
 2005a9c:	4010943a 	slli	r8,r8,16
 2005aa0:	4c3fffcc 	andi	r16,r9,65535
 2005aa4:	6149883a 	add	r4,r12,r5
 2005aa8:	4411883a 	add	r8,r8,r16
 2005aac:	3900a736 	bltu	r7,r4,2005d4c <__divdf3+0x778>
 2005ab0:	3900c426 	beq	r7,r4,2005dc4 <__divdf3+0x7f0>
 2005ab4:	3909c83a 	sub	r4,r7,r4
 2005ab8:	b221c83a 	sub	r16,r22,r8
 2005abc:	b42d803a 	cmpltu	r22,r22,r16
 2005ac0:	25adc83a 	sub	r22,r4,r22
 2005ac4:	b5c0c626 	beq	r22,r23,2005de0 <__divdf3+0x80c>
 2005ac8:	b009883a 	mov	r4,r22
 2005acc:	a80b883a 	mov	r5,r21
 2005ad0:	2003c700 	call	2003c70 <__udivsi3>
 2005ad4:	1009883a 	mov	r4,r2
 2005ad8:	980b883a 	mov	r5,r19
 2005adc:	d8800315 	stw	r2,12(sp)
 2005ae0:	2003c800 	call	2003c80 <__mulsi3>
 2005ae4:	a80b883a 	mov	r5,r21
 2005ae8:	b009883a 	mov	r4,r22
 2005aec:	d8800415 	stw	r2,16(sp)
 2005af0:	2003c780 	call	2003c78 <__umodsi3>
 2005af4:	1004943a 	slli	r2,r2,16
 2005af8:	800ed43a 	srli	r7,r16,16
 2005afc:	da400417 	ldw	r9,16(sp)
 2005b00:	da000317 	ldw	r8,12(sp)
 2005b04:	11cab03a 	or	r5,r2,r7
 2005b08:	2a40062e 	bgeu	r5,r9,2005b24 <__divdf3+0x550>
 2005b0c:	2dcb883a 	add	r5,r5,r23
 2005b10:	40bfffc4 	addi	r2,r8,-1
 2005b14:	2dc0b436 	bltu	r5,r23,2005de8 <__divdf3+0x814>
 2005b18:	2a40b32e 	bgeu	r5,r9,2005de8 <__divdf3+0x814>
 2005b1c:	423fff84 	addi	r8,r8,-2
 2005b20:	2dcb883a 	add	r5,r5,r23
 2005b24:	2a6dc83a 	sub	r22,r5,r9
 2005b28:	b009883a 	mov	r4,r22
 2005b2c:	a80b883a 	mov	r5,r21
 2005b30:	da000315 	stw	r8,12(sp)
 2005b34:	2003c700 	call	2003c70 <__udivsi3>
 2005b38:	980b883a 	mov	r5,r19
 2005b3c:	1009883a 	mov	r4,r2
 2005b40:	d8800415 	stw	r2,16(sp)
 2005b44:	2003c800 	call	2003c80 <__mulsi3>
 2005b48:	b009883a 	mov	r4,r22
 2005b4c:	a80b883a 	mov	r5,r21
 2005b50:	1027883a 	mov	r19,r2
 2005b54:	2003c780 	call	2003c78 <__umodsi3>
 2005b58:	1004943a 	slli	r2,r2,16
 2005b5c:	843fffcc 	andi	r16,r16,65535
 2005b60:	da000317 	ldw	r8,12(sp)
 2005b64:	140eb03a 	or	r7,r2,r16
 2005b68:	da400417 	ldw	r9,16(sp)
 2005b6c:	3cc0062e 	bgeu	r7,r19,2005b88 <__divdf3+0x5b4>
 2005b70:	3dcf883a 	add	r7,r7,r23
 2005b74:	48bfffc4 	addi	r2,r9,-1
 2005b78:	3dc09d36 	bltu	r7,r23,2005df0 <__divdf3+0x81c>
 2005b7c:	3cc09c2e 	bgeu	r7,r19,2005df0 <__divdf3+0x81c>
 2005b80:	4a7fff84 	addi	r9,r9,-2
 2005b84:	3dcf883a 	add	r7,r7,r23
 2005b88:	4010943a 	slli	r8,r8,16
 2005b8c:	3cebc83a 	sub	r21,r7,r19
 2005b90:	e00b883a 	mov	r5,fp
 2005b94:	4a26b03a 	or	r19,r9,r8
 2005b98:	99ffffcc 	andi	r7,r19,65535
 2005b9c:	9820d43a 	srli	r16,r19,16
 2005ba0:	3809883a 	mov	r4,r7
 2005ba4:	d9c00515 	stw	r7,20(sp)
 2005ba8:	2003c800 	call	2003c80 <__mulsi3>
 2005bac:	8009883a 	mov	r4,r16
 2005bb0:	e00b883a 	mov	r5,fp
 2005bb4:	102d883a 	mov	r22,r2
 2005bb8:	2003c800 	call	2003c80 <__mulsi3>
 2005bbc:	d9400017 	ldw	r5,0(sp)
 2005bc0:	8009883a 	mov	r4,r16
 2005bc4:	1039883a 	mov	fp,r2
 2005bc8:	2003c800 	call	2003c80 <__mulsi3>
 2005bcc:	d9c00517 	ldw	r7,20(sp)
 2005bd0:	d9400017 	ldw	r5,0(sp)
 2005bd4:	1021883a 	mov	r16,r2
 2005bd8:	3809883a 	mov	r4,r7
 2005bdc:	2003c800 	call	2003c80 <__mulsi3>
 2005be0:	b008d43a 	srli	r4,r22,16
 2005be4:	e085883a 	add	r2,fp,r2
 2005be8:	1109883a 	add	r4,r2,r4
 2005bec:	2700022e 	bgeu	r4,fp,2005bf8 <__divdf3+0x624>
 2005bf0:	00800074 	movhi	r2,1
 2005bf4:	80a1883a 	add	r16,r16,r2
 2005bf8:	200ad43a 	srli	r5,r4,16
 2005bfc:	2008943a 	slli	r4,r4,16
 2005c00:	b5bfffcc 	andi	r22,r22,65535
 2005c04:	8145883a 	add	r2,r16,r5
 2005c08:	2589883a 	add	r4,r4,r22
 2005c0c:	a8802c36 	bltu	r21,r2,2005cc0 <__divdf3+0x6ec>
 2005c10:	a880a426 	beq	r21,r2,2005ea4 <__divdf3+0x8d0>
 2005c14:	9cc00054 	ori	r19,r19,1
 2005c18:	9200ffc4 	addi	r8,r18,1023
 2005c1c:	023f270e 	bge	zero,r8,20058bc <__alt_mem_onchip_memory2_0+0xfdff58bc>
 2005c20:	988001cc 	andi	r2,r19,7
 2005c24:	10000726 	beq	r2,zero,2005c44 <__divdf3+0x670>
 2005c28:	990003cc 	andi	r4,r19,15
 2005c2c:	00800104 	movi	r2,4
 2005c30:	20800426 	beq	r4,r2,2005c44 <__divdf3+0x670>
 2005c34:	9885883a 	add	r2,r19,r2
 2005c38:	14e7803a 	cmpltu	r19,r2,r19
 2005c3c:	8ce3883a 	add	r17,r17,r19
 2005c40:	1027883a 	mov	r19,r2
 2005c44:	8880402c 	andhi	r2,r17,256
 2005c48:	10000426 	beq	r2,zero,2005c5c <__divdf3+0x688>
 2005c4c:	00bfc034 	movhi	r2,65280
 2005c50:	10bfffc4 	addi	r2,r2,-1
 2005c54:	92010004 	addi	r8,r18,1024
 2005c58:	88a2703a 	and	r17,r17,r2
 2005c5c:	0081ff84 	movi	r2,2046
 2005c60:	123eb616 	blt	r2,r8,200573c <__alt_mem_onchip_memory2_0+0xfdff573c>
 2005c64:	9826d0fa 	srli	r19,r19,3
 2005c68:	8804977a 	slli	r2,r17,29
 2005c6c:	8820927a 	slli	r16,r17,9
 2005c70:	4201ffcc 	andi	r8,r8,2047
 2005c74:	14e6b03a 	or	r19,r2,r19
 2005c78:	800ad33a 	srli	r5,r16,12
 2005c7c:	a180004c 	andi	r6,r20,1
 2005c80:	003eb206 	br	200574c <__alt_mem_onchip_memory2_0+0xfdff574c>
 2005c84:	008000c4 	movi	r2,3
 2005c88:	4080ac26 	beq	r8,r2,2005f3c <__divdf3+0x968>
 2005c8c:	00800044 	movi	r2,1
 2005c90:	4080591e 	bne	r8,r2,2005df8 <__divdf3+0x824>
 2005c94:	e00d883a 	mov	r6,fp
 2005c98:	0011883a 	mov	r8,zero
 2005c9c:	000b883a 	mov	r5,zero
 2005ca0:	0027883a 	mov	r19,zero
 2005ca4:	003ea906 	br	200574c <__alt_mem_onchip_memory2_0+0xfdff574c>
 2005ca8:	00800434 	movhi	r2,16
 2005cac:	89400234 	orhi	r5,r17,8
 2005cb0:	10bfffc4 	addi	r2,r2,-1
 2005cb4:	b00d883a 	mov	r6,r22
 2005cb8:	288a703a 	and	r5,r5,r2
 2005cbc:	003efd06 	br	20058b4 <__alt_mem_onchip_memory2_0+0xfdff58b4>
 2005cc0:	adcf883a 	add	r7,r21,r23
 2005cc4:	997fffc4 	addi	r5,r19,-1
 2005cc8:	3dc0412e 	bgeu	r7,r23,2005dd0 <__divdf3+0x7fc>
 2005ccc:	2827883a 	mov	r19,r5
 2005cd0:	38bfd01e 	bne	r7,r2,2005c14 <__alt_mem_onchip_memory2_0+0xfdff5c14>
 2005cd4:	d8c00117 	ldw	r3,4(sp)
 2005cd8:	193fce1e 	bne	r3,r4,2005c14 <__alt_mem_onchip_memory2_0+0xfdff5c14>
 2005cdc:	003fce06 	br	2005c18 <__alt_mem_onchip_memory2_0+0xfdff5c18>
 2005ce0:	d9800215 	stw	r6,8(sp)
 2005ce4:	d9c00515 	stw	r7,20(sp)
 2005ce8:	20076d40 	call	20076d4 <__clzsi2>
 2005cec:	10c00804 	addi	r3,r2,32
 2005cf0:	010009c4 	movi	r4,39
 2005cf4:	d9800217 	ldw	r6,8(sp)
 2005cf8:	d9c00517 	ldw	r7,20(sp)
 2005cfc:	20feb20e 	bge	r4,r3,20057c8 <__alt_mem_onchip_memory2_0+0xfdff57c8>
 2005d00:	117ffe04 	addi	r5,r2,-8
 2005d04:	a162983a 	sll	r17,r20,r5
 2005d08:	0027883a 	mov	r19,zero
 2005d0c:	003eb506 	br	20057e4 <__alt_mem_onchip_memory2_0+0xfdff57e4>
 2005d10:	3009883a 	mov	r4,r6
 2005d14:	d9800215 	stw	r6,8(sp)
 2005d18:	da000315 	stw	r8,12(sp)
 2005d1c:	da400415 	stw	r9,16(sp)
 2005d20:	20076d40 	call	20076d4 <__clzsi2>
 2005d24:	10c00804 	addi	r3,r2,32
 2005d28:	010009c4 	movi	r4,39
 2005d2c:	d9800217 	ldw	r6,8(sp)
 2005d30:	da000317 	ldw	r8,12(sp)
 2005d34:	da400417 	ldw	r9,16(sp)
 2005d38:	20fec10e 	bge	r4,r3,2005840 <__alt_mem_onchip_memory2_0+0xfdff5840>
 2005d3c:	10bffe04 	addi	r2,r2,-8
 2005d40:	a8a0983a 	sll	r16,r21,r2
 2005d44:	002b883a 	mov	r21,zero
 2005d48:	003ec406 	br	200585c <__alt_mem_onchip_memory2_0+0xfdff585c>
 2005d4c:	d8c00117 	ldw	r3,4(sp)
 2005d50:	b0ed883a 	add	r22,r22,r3
 2005d54:	b0c5803a 	cmpltu	r2,r22,r3
 2005d58:	15c5883a 	add	r2,r2,r23
 2005d5c:	11cf883a 	add	r7,r2,r7
 2005d60:	88bfffc4 	addi	r2,r17,-1
 2005d64:	b9c00d2e 	bgeu	r23,r7,2005d9c <__divdf3+0x7c8>
 2005d68:	39003f36 	bltu	r7,r4,2005e68 <__divdf3+0x894>
 2005d6c:	21c06a26 	beq	r4,r7,2005f18 <__divdf3+0x944>
 2005d70:	3909c83a 	sub	r4,r7,r4
 2005d74:	1023883a 	mov	r17,r2
 2005d78:	003f4f06 	br	2005ab8 <__alt_mem_onchip_memory2_0+0xfdff5ab8>
 2005d7c:	9d7ee536 	bltu	r19,r21,2005914 <__alt_mem_onchip_memory2_0+0xfdff5914>
 2005d80:	982ed07a 	srli	r23,r19,1
 2005d84:	880497fa 	slli	r2,r17,31
 2005d88:	8810d07a 	srli	r8,r17,1
 2005d8c:	982c97fa 	slli	r22,r19,31
 2005d90:	b884b03a 	or	r2,r23,r2
 2005d94:	d8800015 	stw	r2,0(sp)
 2005d98:	003ee206 	br	2005924 <__alt_mem_onchip_memory2_0+0xfdff5924>
 2005d9c:	3dfff41e 	bne	r7,r23,2005d70 <__alt_mem_onchip_memory2_0+0xfdff5d70>
 2005da0:	d8c00117 	ldw	r3,4(sp)
 2005da4:	b0fff02e 	bgeu	r22,r3,2005d68 <__alt_mem_onchip_memory2_0+0xfdff5d68>
 2005da8:	b909c83a 	sub	r4,r23,r4
 2005dac:	1023883a 	mov	r17,r2
 2005db0:	003f4106 	br	2005ab8 <__alt_mem_onchip_memory2_0+0xfdff5ab8>
 2005db4:	1021883a 	mov	r16,r2
 2005db8:	003f1106 	br	2005a00 <__alt_mem_onchip_memory2_0+0xfdff5a00>
 2005dbc:	1023883a 	mov	r17,r2
 2005dc0:	003ef706 	br	20059a0 <__alt_mem_onchip_memory2_0+0xfdff59a0>
 2005dc4:	b23fe136 	bltu	r22,r8,2005d4c <__alt_mem_onchip_memory2_0+0xfdff5d4c>
 2005dc8:	0009883a 	mov	r4,zero
 2005dcc:	003f3a06 	br	2005ab8 <__alt_mem_onchip_memory2_0+0xfdff5ab8>
 2005dd0:	38802c36 	bltu	r7,r2,2005e84 <__divdf3+0x8b0>
 2005dd4:	11c05326 	beq	r2,r7,2005f24 <__divdf3+0x950>
 2005dd8:	2827883a 	mov	r19,r5
 2005ddc:	003f8d06 	br	2005c14 <__alt_mem_onchip_memory2_0+0xfdff5c14>
 2005de0:	04ffffc4 	movi	r19,-1
 2005de4:	003f8c06 	br	2005c18 <__alt_mem_onchip_memory2_0+0xfdff5c18>
 2005de8:	1011883a 	mov	r8,r2
 2005dec:	003f4d06 	br	2005b24 <__alt_mem_onchip_memory2_0+0xfdff5b24>
 2005df0:	1013883a 	mov	r9,r2
 2005df4:	003f6406 	br	2005b88 <__alt_mem_onchip_memory2_0+0xfdff5b88>
 2005df8:	e029883a 	mov	r20,fp
 2005dfc:	003f8606 	br	2005c18 <__alt_mem_onchip_memory2_0+0xfdff5c18>
 2005e00:	008007c4 	movi	r2,31
 2005e04:	14002a16 	blt	r2,r16,2005eb0 <__divdf3+0x8dc>
 2005e08:	91410784 	addi	r5,r18,1054
 2005e0c:	9c0cd83a 	srl	r6,r19,r16
 2005e10:	8948983a 	sll	r4,r17,r5
 2005e14:	9944983a 	sll	r2,r19,r5
 2005e18:	8c20d83a 	srl	r16,r17,r16
 2005e1c:	3108b03a 	or	r4,r6,r4
 2005e20:	1004c03a 	cmpne	r2,r2,zero
 2005e24:	2084b03a 	or	r2,r4,r2
 2005e28:	110001cc 	andi	r4,r2,7
 2005e2c:	20000726 	beq	r4,zero,2005e4c <__divdf3+0x878>
 2005e30:	114003cc 	andi	r5,r2,15
 2005e34:	01000104 	movi	r4,4
 2005e38:	29000426 	beq	r5,r4,2005e4c <__divdf3+0x878>
 2005e3c:	11000104 	addi	r4,r2,4
 2005e40:	2085803a 	cmpltu	r2,r4,r2
 2005e44:	80a1883a 	add	r16,r16,r2
 2005e48:	2005883a 	mov	r2,r4
 2005e4c:	8100202c 	andhi	r4,r16,128
 2005e50:	20002d26 	beq	r4,zero,2005f08 <__divdf3+0x934>
 2005e54:	a180004c 	andi	r6,r20,1
 2005e58:	02000044 	movi	r8,1
 2005e5c:	000b883a 	mov	r5,zero
 2005e60:	0027883a 	mov	r19,zero
 2005e64:	003e3906 	br	200574c <__alt_mem_onchip_memory2_0+0xfdff574c>
 2005e68:	d8c00117 	ldw	r3,4(sp)
 2005e6c:	8c7fff84 	addi	r17,r17,-2
 2005e70:	b0ed883a 	add	r22,r22,r3
 2005e74:	b0c5803a 	cmpltu	r2,r22,r3
 2005e78:	15c5883a 	add	r2,r2,r23
 2005e7c:	11cf883a 	add	r7,r2,r7
 2005e80:	003f0c06 	br	2005ab4 <__alt_mem_onchip_memory2_0+0xfdff5ab4>
 2005e84:	d8c00117 	ldw	r3,4(sp)
 2005e88:	997fff84 	addi	r5,r19,-2
 2005e8c:	18d1883a 	add	r8,r3,r3
 2005e90:	40c7803a 	cmpltu	r3,r8,r3
 2005e94:	1dcd883a 	add	r6,r3,r23
 2005e98:	398f883a 	add	r7,r7,r6
 2005e9c:	da000115 	stw	r8,4(sp)
 2005ea0:	003f8a06 	br	2005ccc <__alt_mem_onchip_memory2_0+0xfdff5ccc>
 2005ea4:	203f861e 	bne	r4,zero,2005cc0 <__alt_mem_onchip_memory2_0+0xfdff5cc0>
 2005ea8:	d8000115 	stw	zero,4(sp)
 2005eac:	003f8906 	br	2005cd4 <__alt_mem_onchip_memory2_0+0xfdff5cd4>
 2005eb0:	00bef884 	movi	r2,-1054
 2005eb4:	1485c83a 	sub	r2,r2,r18
 2005eb8:	01000804 	movi	r4,32
 2005ebc:	8884d83a 	srl	r2,r17,r2
 2005ec0:	81001c26 	beq	r16,r4,2005f34 <__divdf3+0x960>
 2005ec4:	91010f84 	addi	r4,r18,1086
 2005ec8:	8908983a 	sll	r4,r17,r4
 2005ecc:	24c8b03a 	or	r4,r4,r19
 2005ed0:	2008c03a 	cmpne	r4,r4,zero
 2005ed4:	2084b03a 	or	r2,r4,r2
 2005ed8:	140001cc 	andi	r16,r2,7
 2005edc:	8000061e 	bne	r16,zero,2005ef8 <__divdf3+0x924>
 2005ee0:	000b883a 	mov	r5,zero
 2005ee4:	1004d0fa 	srli	r2,r2,3
 2005ee8:	a180004c 	andi	r6,r20,1
 2005eec:	0011883a 	mov	r8,zero
 2005ef0:	1426b03a 	or	r19,r2,r16
 2005ef4:	003e1506 	br	200574c <__alt_mem_onchip_memory2_0+0xfdff574c>
 2005ef8:	114003cc 	andi	r5,r2,15
 2005efc:	01000104 	movi	r4,4
 2005f00:	0021883a 	mov	r16,zero
 2005f04:	293fcd1e 	bne	r5,r4,2005e3c <__alt_mem_onchip_memory2_0+0xfdff5e3c>
 2005f08:	800a927a 	slli	r5,r16,9
 2005f0c:	8020977a 	slli	r16,r16,29
 2005f10:	280ad33a 	srli	r5,r5,12
 2005f14:	003ff306 	br	2005ee4 <__alt_mem_onchip_memory2_0+0xfdff5ee4>
 2005f18:	b23fd336 	bltu	r22,r8,2005e68 <__alt_mem_onchip_memory2_0+0xfdff5e68>
 2005f1c:	1023883a 	mov	r17,r2
 2005f20:	003fa906 	br	2005dc8 <__alt_mem_onchip_memory2_0+0xfdff5dc8>
 2005f24:	d8c00117 	ldw	r3,4(sp)
 2005f28:	193fd636 	bltu	r3,r4,2005e84 <__alt_mem_onchip_memory2_0+0xfdff5e84>
 2005f2c:	2827883a 	mov	r19,r5
 2005f30:	003f6806 	br	2005cd4 <__alt_mem_onchip_memory2_0+0xfdff5cd4>
 2005f34:	0009883a 	mov	r4,zero
 2005f38:	003fe406 	br	2005ecc <__alt_mem_onchip_memory2_0+0xfdff5ecc>
 2005f3c:	00800434 	movhi	r2,16
 2005f40:	89400234 	orhi	r5,r17,8
 2005f44:	10bfffc4 	addi	r2,r2,-1
 2005f48:	e00d883a 	mov	r6,fp
 2005f4c:	288a703a 	and	r5,r5,r2
 2005f50:	003e5806 	br	20058b4 <__alt_mem_onchip_memory2_0+0xfdff58b4>

02005f54 <__eqdf2>:
 2005f54:	2804d53a 	srli	r2,r5,20
 2005f58:	3806d53a 	srli	r3,r7,20
 2005f5c:	02000434 	movhi	r8,16
 2005f60:	423fffc4 	addi	r8,r8,-1
 2005f64:	1081ffcc 	andi	r2,r2,2047
 2005f68:	0241ffc4 	movi	r9,2047
 2005f6c:	2a14703a 	and	r10,r5,r8
 2005f70:	18c1ffcc 	andi	r3,r3,2047
 2005f74:	3a10703a 	and	r8,r7,r8
 2005f78:	280ad7fa 	srli	r5,r5,31
 2005f7c:	380ed7fa 	srli	r7,r7,31
 2005f80:	12400f26 	beq	r2,r9,2005fc0 <__eqdf2+0x6c>
 2005f84:	0241ffc4 	movi	r9,2047
 2005f88:	1a400326 	beq	r3,r9,2005f98 <__eqdf2+0x44>
 2005f8c:	10c00526 	beq	r2,r3,2005fa4 <__eqdf2+0x50>
 2005f90:	00800044 	movi	r2,1
 2005f94:	f800283a 	ret
 2005f98:	4192b03a 	or	r9,r8,r6
 2005f9c:	483ffc1e 	bne	r9,zero,2005f90 <__alt_mem_onchip_memory2_0+0xfdff5f90>
 2005fa0:	10fffb1e 	bne	r2,r3,2005f90 <__alt_mem_onchip_memory2_0+0xfdff5f90>
 2005fa4:	523ffa1e 	bne	r10,r8,2005f90 <__alt_mem_onchip_memory2_0+0xfdff5f90>
 2005fa8:	21bff91e 	bne	r4,r6,2005f90 <__alt_mem_onchip_memory2_0+0xfdff5f90>
 2005fac:	29c00826 	beq	r5,r7,2005fd0 <__eqdf2+0x7c>
 2005fb0:	103ff71e 	bne	r2,zero,2005f90 <__alt_mem_onchip_memory2_0+0xfdff5f90>
 2005fb4:	5104b03a 	or	r2,r10,r4
 2005fb8:	1004c03a 	cmpne	r2,r2,zero
 2005fbc:	f800283a 	ret
 2005fc0:	5112b03a 	or	r9,r10,r4
 2005fc4:	483fef26 	beq	r9,zero,2005f84 <__alt_mem_onchip_memory2_0+0xfdff5f84>
 2005fc8:	00800044 	movi	r2,1
 2005fcc:	f800283a 	ret
 2005fd0:	0005883a 	mov	r2,zero
 2005fd4:	f800283a 	ret

02005fd8 <__gedf2>:
 2005fd8:	2804d53a 	srli	r2,r5,20
 2005fdc:	3806d53a 	srli	r3,r7,20
 2005fe0:	02000434 	movhi	r8,16
 2005fe4:	423fffc4 	addi	r8,r8,-1
 2005fe8:	0241ffc4 	movi	r9,2047
 2005fec:	1081ffcc 	andi	r2,r2,2047
 2005ff0:	2a14703a 	and	r10,r5,r8
 2005ff4:	1a46703a 	and	r3,r3,r9
 2005ff8:	3a10703a 	and	r8,r7,r8
 2005ffc:	280ad7fa 	srli	r5,r5,31
 2006000:	380ed7fa 	srli	r7,r7,31
 2006004:	12400b26 	beq	r2,r9,2006034 <__gedf2+0x5c>
 2006008:	1a401626 	beq	r3,r9,2006064 <__gedf2+0x8c>
 200600c:	10000c1e 	bne	r2,zero,2006040 <__gedf2+0x68>
 2006010:	5112b03a 	or	r9,r10,r4
 2006014:	4813003a 	cmpeq	r9,r9,zero
 2006018:	4817883a 	mov	r11,r9
 200601c:	18000c1e 	bne	r3,zero,2006050 <__gedf2+0x78>
 2006020:	4198b03a 	or	r12,r8,r6
 2006024:	60000a1e 	bne	r12,zero,2006050 <__gedf2+0x78>
 2006028:	48001326 	beq	r9,zero,2006078 <__gedf2+0xa0>
 200602c:	0005883a 	mov	r2,zero
 2006030:	f800283a 	ret
 2006034:	5112b03a 	or	r9,r10,r4
 2006038:	4800191e 	bne	r9,zero,20060a0 <__gedf2+0xc8>
 200603c:	18800926 	beq	r3,r2,2006064 <__gedf2+0x8c>
 2006040:	18000b1e 	bne	r3,zero,2006070 <__gedf2+0x98>
 2006044:	4192b03a 	or	r9,r8,r6
 2006048:	0017883a 	mov	r11,zero
 200604c:	48000a26 	beq	r9,zero,2006078 <__gedf2+0xa0>
 2006050:	39c03fcc 	andi	r7,r7,255
 2006054:	58000726 	beq	r11,zero,2006074 <__gedf2+0x9c>
 2006058:	3800081e 	bne	r7,zero,200607c <__gedf2+0xa4>
 200605c:	00bfffc4 	movi	r2,-1
 2006060:	f800283a 	ret
 2006064:	4192b03a 	or	r9,r8,r6
 2006068:	48000d1e 	bne	r9,zero,20060a0 <__gedf2+0xc8>
 200606c:	103fe826 	beq	r2,zero,2006010 <__alt_mem_onchip_memory2_0+0xfdff6010>
 2006070:	39c03fcc 	andi	r7,r7,255
 2006074:	29c00326 	beq	r5,r7,2006084 <__gedf2+0xac>
 2006078:	283ff81e 	bne	r5,zero,200605c <__alt_mem_onchip_memory2_0+0xfdff605c>
 200607c:	00800044 	movi	r2,1
 2006080:	f800283a 	ret
 2006084:	18bffc16 	blt	r3,r2,2006078 <__alt_mem_onchip_memory2_0+0xfdff6078>
 2006088:	10c00316 	blt	r2,r3,2006098 <__gedf2+0xc0>
 200608c:	42bffa36 	bltu	r8,r10,2006078 <__alt_mem_onchip_memory2_0+0xfdff6078>
 2006090:	52000526 	beq	r10,r8,20060a8 <__gedf2+0xd0>
 2006094:	523fe52e 	bgeu	r10,r8,200602c <__alt_mem_onchip_memory2_0+0xfdff602c>
 2006098:	283ff026 	beq	r5,zero,200605c <__alt_mem_onchip_memory2_0+0xfdff605c>
 200609c:	003ff706 	br	200607c <__alt_mem_onchip_memory2_0+0xfdff607c>
 20060a0:	00bfff84 	movi	r2,-2
 20060a4:	f800283a 	ret
 20060a8:	313ff336 	bltu	r6,r4,2006078 <__alt_mem_onchip_memory2_0+0xfdff6078>
 20060ac:	21bfdf2e 	bgeu	r4,r6,200602c <__alt_mem_onchip_memory2_0+0xfdff602c>
 20060b0:	283fea26 	beq	r5,zero,200605c <__alt_mem_onchip_memory2_0+0xfdff605c>
 20060b4:	003ff106 	br	200607c <__alt_mem_onchip_memory2_0+0xfdff607c>

020060b8 <__ledf2>:
 20060b8:	2804d53a 	srli	r2,r5,20
 20060bc:	3810d53a 	srli	r8,r7,20
 20060c0:	00c00434 	movhi	r3,16
 20060c4:	18ffffc4 	addi	r3,r3,-1
 20060c8:	0241ffc4 	movi	r9,2047
 20060cc:	1081ffcc 	andi	r2,r2,2047
 20060d0:	28d4703a 	and	r10,r5,r3
 20060d4:	4250703a 	and	r8,r8,r9
 20060d8:	38c6703a 	and	r3,r7,r3
 20060dc:	280ad7fa 	srli	r5,r5,31
 20060e0:	380ed7fa 	srli	r7,r7,31
 20060e4:	12400b26 	beq	r2,r9,2006114 <__ledf2+0x5c>
 20060e8:	42401926 	beq	r8,r9,2006150 <__ledf2+0x98>
 20060ec:	10000c1e 	bne	r2,zero,2006120 <__ledf2+0x68>
 20060f0:	5112b03a 	or	r9,r10,r4
 20060f4:	4813003a 	cmpeq	r9,r9,zero
 20060f8:	4817883a 	mov	r11,r9
 20060fc:	40000f26 	beq	r8,zero,200613c <__ledf2+0x84>
 2006100:	39c03fcc 	andi	r7,r7,255
 2006104:	58001826 	beq	r11,zero,2006168 <__ledf2+0xb0>
 2006108:	38000a1e 	bne	r7,zero,2006134 <__ledf2+0x7c>
 200610c:	00bfffc4 	movi	r2,-1
 2006110:	f800283a 	ret
 2006114:	5112b03a 	or	r9,r10,r4
 2006118:	48000f1e 	bne	r9,zero,2006158 <__ledf2+0xa0>
 200611c:	40800c26 	beq	r8,r2,2006150 <__ledf2+0x98>
 2006120:	4000101e 	bne	r8,zero,2006164 <__ledf2+0xac>
 2006124:	1992b03a 	or	r9,r3,r6
 2006128:	0017883a 	mov	r11,zero
 200612c:	483ff41e 	bne	r9,zero,2006100 <__alt_mem_onchip_memory2_0+0xfdff6100>
 2006130:	283ff61e 	bne	r5,zero,200610c <__alt_mem_onchip_memory2_0+0xfdff610c>
 2006134:	00800044 	movi	r2,1
 2006138:	f800283a 	ret
 200613c:	1998b03a 	or	r12,r3,r6
 2006140:	603fef1e 	bne	r12,zero,2006100 <__alt_mem_onchip_memory2_0+0xfdff6100>
 2006144:	483ffa26 	beq	r9,zero,2006130 <__alt_mem_onchip_memory2_0+0xfdff6130>
 2006148:	0005883a 	mov	r2,zero
 200614c:	f800283a 	ret
 2006150:	1992b03a 	or	r9,r3,r6
 2006154:	48000226 	beq	r9,zero,2006160 <__ledf2+0xa8>
 2006158:	00800084 	movi	r2,2
 200615c:	f800283a 	ret
 2006160:	103fe326 	beq	r2,zero,20060f0 <__alt_mem_onchip_memory2_0+0xfdff60f0>
 2006164:	39c03fcc 	andi	r7,r7,255
 2006168:	29fff11e 	bne	r5,r7,2006130 <__alt_mem_onchip_memory2_0+0xfdff6130>
 200616c:	40bff016 	blt	r8,r2,2006130 <__alt_mem_onchip_memory2_0+0xfdff6130>
 2006170:	12000316 	blt	r2,r8,2006180 <__ledf2+0xc8>
 2006174:	1abfee36 	bltu	r3,r10,2006130 <__alt_mem_onchip_memory2_0+0xfdff6130>
 2006178:	50c00326 	beq	r10,r3,2006188 <__ledf2+0xd0>
 200617c:	50fff22e 	bgeu	r10,r3,2006148 <__alt_mem_onchip_memory2_0+0xfdff6148>
 2006180:	283fe226 	beq	r5,zero,200610c <__alt_mem_onchip_memory2_0+0xfdff610c>
 2006184:	003feb06 	br	2006134 <__alt_mem_onchip_memory2_0+0xfdff6134>
 2006188:	313fe936 	bltu	r6,r4,2006130 <__alt_mem_onchip_memory2_0+0xfdff6130>
 200618c:	21bfee2e 	bgeu	r4,r6,2006148 <__alt_mem_onchip_memory2_0+0xfdff6148>
 2006190:	283fde26 	beq	r5,zero,200610c <__alt_mem_onchip_memory2_0+0xfdff610c>
 2006194:	003fe706 	br	2006134 <__alt_mem_onchip_memory2_0+0xfdff6134>

02006198 <__muldf3>:
 2006198:	deffee04 	addi	sp,sp,-72
 200619c:	dd000c15 	stw	r20,48(sp)
 20061a0:	2828d53a 	srli	r20,r5,20
 20061a4:	dd400d15 	stw	r21,52(sp)
 20061a8:	282ad7fa 	srli	r21,r5,31
 20061ac:	dc000815 	stw	r16,32(sp)
 20061b0:	04000434 	movhi	r16,16
 20061b4:	ddc00f15 	stw	r23,60(sp)
 20061b8:	dcc00b15 	stw	r19,44(sp)
 20061bc:	dc800a15 	stw	r18,40(sp)
 20061c0:	843fffc4 	addi	r16,r16,-1
 20061c4:	dfc01115 	stw	ra,68(sp)
 20061c8:	df001015 	stw	fp,64(sp)
 20061cc:	dd800e15 	stw	r22,56(sp)
 20061d0:	dc400915 	stw	r17,36(sp)
 20061d4:	a501ffcc 	andi	r20,r20,2047
 20061d8:	2025883a 	mov	r18,r4
 20061dc:	202f883a 	mov	r23,r4
 20061e0:	2c20703a 	and	r16,r5,r16
 20061e4:	a827883a 	mov	r19,r21
 20061e8:	aa403fcc 	andi	r9,r21,255
 20061ec:	a0005926 	beq	r20,zero,2006354 <__muldf3+0x1bc>
 20061f0:	0081ffc4 	movi	r2,2047
 20061f4:	a0803426 	beq	r20,r2,20062c8 <__muldf3+0x130>
 20061f8:	84000434 	orhi	r16,r16,16
 20061fc:	2004d77a 	srli	r2,r4,29
 2006200:	802090fa 	slli	r16,r16,3
 2006204:	202e90fa 	slli	r23,r4,3
 2006208:	a53f0044 	addi	r20,r20,-1023
 200620c:	80a0b03a 	or	r16,r16,r2
 2006210:	000b883a 	mov	r5,zero
 2006214:	0039883a 	mov	fp,zero
 2006218:	3806d53a 	srli	r3,r7,20
 200621c:	382cd7fa 	srli	r22,r7,31
 2006220:	00800434 	movhi	r2,16
 2006224:	10bfffc4 	addi	r2,r2,-1
 2006228:	18c1ffcc 	andi	r3,r3,2047
 200622c:	3025883a 	mov	r18,r6
 2006230:	38a2703a 	and	r17,r7,r2
 2006234:	b2803fcc 	andi	r10,r22,255
 2006238:	18006426 	beq	r3,zero,20063cc <__muldf3+0x234>
 200623c:	0081ffc4 	movi	r2,2047
 2006240:	18805c26 	beq	r3,r2,20063b4 <__muldf3+0x21c>
 2006244:	8c400434 	orhi	r17,r17,16
 2006248:	3004d77a 	srli	r2,r6,29
 200624c:	882290fa 	slli	r17,r17,3
 2006250:	302490fa 	slli	r18,r6,3
 2006254:	18ff0044 	addi	r3,r3,-1023
 2006258:	88a2b03a 	or	r17,r17,r2
 200625c:	000f883a 	mov	r7,zero
 2006260:	394ab03a 	or	r5,r7,r5
 2006264:	280a90ba 	slli	r5,r5,2
 2006268:	00808034 	movhi	r2,512
 200626c:	1098a204 	addi	r2,r2,25224
 2006270:	288b883a 	add	r5,r5,r2
 2006274:	28800017 	ldw	r2,0(r5)
 2006278:	a0c7883a 	add	r3,r20,r3
 200627c:	b54cf03a 	xor	r6,r22,r21
 2006280:	1a000044 	addi	r8,r3,1
 2006284:	1000683a 	jmp	r2
 2006288:	020064cc 	andi	r8,zero,403
 200628c:	020064b8 	rdprs	r8,zero,402
 2006290:	020064b8 	rdprs	r8,zero,402
 2006294:	020064a4 	muli	r8,zero,402
 2006298:	020062e4 	muli	r8,zero,395
 200629c:	020062e4 	muli	r8,zero,395
 20062a0:	0200648c 	andi	r8,zero,402
 20062a4:	020064a4 	muli	r8,zero,402
 20062a8:	020062e4 	muli	r8,zero,395
 20062ac:	0200648c 	andi	r8,zero,402
 20062b0:	020062e4 	muli	r8,zero,395
 20062b4:	020064a4 	muli	r8,zero,402
 20062b8:	020062e8 	cmpgeui	r8,zero,395
 20062bc:	020062e8 	cmpgeui	r8,zero,395
 20062c0:	020062e8 	cmpgeui	r8,zero,395
 20062c4:	02006808 	cmpgei	r8,zero,416
 20062c8:	8104b03a 	or	r2,r16,r4
 20062cc:	10006c1e 	bne	r2,zero,2006480 <__muldf3+0x2e8>
 20062d0:	01400204 	movi	r5,8
 20062d4:	0021883a 	mov	r16,zero
 20062d8:	002f883a 	mov	r23,zero
 20062dc:	07000084 	movi	fp,2
 20062e0:	003fcd06 	br	2006218 <__alt_mem_onchip_memory2_0+0xfdff6218>
 20062e4:	3013883a 	mov	r9,r6
 20062e8:	00800084 	movi	r2,2
 20062ec:	e080501e 	bne	fp,r2,2006430 <__muldf3+0x298>
 20062f0:	4cc0004c 	andi	r19,r9,1
 20062f4:	0101ffc4 	movi	r4,2047
 20062f8:	0021883a 	mov	r16,zero
 20062fc:	002f883a 	mov	r23,zero
 2006300:	2008953a 	slli	r4,r4,20
 2006304:	98c03fcc 	andi	r3,r19,255
 2006308:	04400434 	movhi	r17,16
 200630c:	8c7fffc4 	addi	r17,r17,-1
 2006310:	180697fa 	slli	r3,r3,31
 2006314:	8460703a 	and	r16,r16,r17
 2006318:	8120b03a 	or	r16,r16,r4
 200631c:	80c6b03a 	or	r3,r16,r3
 2006320:	b805883a 	mov	r2,r23
 2006324:	dfc01117 	ldw	ra,68(sp)
 2006328:	df001017 	ldw	fp,64(sp)
 200632c:	ddc00f17 	ldw	r23,60(sp)
 2006330:	dd800e17 	ldw	r22,56(sp)
 2006334:	dd400d17 	ldw	r21,52(sp)
 2006338:	dd000c17 	ldw	r20,48(sp)
 200633c:	dcc00b17 	ldw	r19,44(sp)
 2006340:	dc800a17 	ldw	r18,40(sp)
 2006344:	dc400917 	ldw	r17,36(sp)
 2006348:	dc000817 	ldw	r16,32(sp)
 200634c:	dec01204 	addi	sp,sp,72
 2006350:	f800283a 	ret
 2006354:	8104b03a 	or	r2,r16,r4
 2006358:	10004426 	beq	r2,zero,200646c <__muldf3+0x2d4>
 200635c:	80014b26 	beq	r16,zero,200688c <__muldf3+0x6f4>
 2006360:	8009883a 	mov	r4,r16
 2006364:	d9800715 	stw	r6,28(sp)
 2006368:	d9c00215 	stw	r7,8(sp)
 200636c:	da400415 	stw	r9,16(sp)
 2006370:	20076d40 	call	20076d4 <__clzsi2>
 2006374:	d9800717 	ldw	r6,28(sp)
 2006378:	d9c00217 	ldw	r7,8(sp)
 200637c:	da400417 	ldw	r9,16(sp)
 2006380:	1007883a 	mov	r3,r2
 2006384:	01000a04 	movi	r4,40
 2006388:	1dfffe04 	addi	r23,r3,-8
 200638c:	20c9c83a 	sub	r4,r4,r3
 2006390:	85e0983a 	sll	r16,r16,r23
 2006394:	9108d83a 	srl	r4,r18,r4
 2006398:	95ee983a 	sll	r23,r18,r23
 200639c:	2420b03a 	or	r16,r4,r16
 20063a0:	053f0344 	movi	r20,-1011
 20063a4:	a0e9c83a 	sub	r20,r20,r3
 20063a8:	000b883a 	mov	r5,zero
 20063ac:	0039883a 	mov	fp,zero
 20063b0:	003f9906 	br	2006218 <__alt_mem_onchip_memory2_0+0xfdff6218>
 20063b4:	8984b03a 	or	r2,r17,r6
 20063b8:	10002a1e 	bne	r2,zero,2006464 <__muldf3+0x2cc>
 20063bc:	0023883a 	mov	r17,zero
 20063c0:	0025883a 	mov	r18,zero
 20063c4:	01c00084 	movi	r7,2
 20063c8:	003fa506 	br	2006260 <__alt_mem_onchip_memory2_0+0xfdff6260>
 20063cc:	8984b03a 	or	r2,r17,r6
 20063d0:	10002026 	beq	r2,zero,2006454 <__muldf3+0x2bc>
 20063d4:	88011c26 	beq	r17,zero,2006848 <__muldf3+0x6b0>
 20063d8:	8809883a 	mov	r4,r17
 20063dc:	d9400215 	stw	r5,8(sp)
 20063e0:	d9800715 	stw	r6,28(sp)
 20063e4:	da400415 	stw	r9,16(sp)
 20063e8:	da800315 	stw	r10,12(sp)
 20063ec:	20076d40 	call	20076d4 <__clzsi2>
 20063f0:	d9400217 	ldw	r5,8(sp)
 20063f4:	d9800717 	ldw	r6,28(sp)
 20063f8:	da400417 	ldw	r9,16(sp)
 20063fc:	da800317 	ldw	r10,12(sp)
 2006400:	1007883a 	mov	r3,r2
 2006404:	01000a04 	movi	r4,40
 2006408:	1cbffe04 	addi	r18,r3,-8
 200640c:	20c9c83a 	sub	r4,r4,r3
 2006410:	8ca2983a 	sll	r17,r17,r18
 2006414:	3108d83a 	srl	r4,r6,r4
 2006418:	34a4983a 	sll	r18,r6,r18
 200641c:	2462b03a 	or	r17,r4,r17
 2006420:	00bf0344 	movi	r2,-1011
 2006424:	10c7c83a 	sub	r3,r2,r3
 2006428:	000f883a 	mov	r7,zero
 200642c:	003f8c06 	br	2006260 <__alt_mem_onchip_memory2_0+0xfdff6260>
 2006430:	008000c4 	movi	r2,3
 2006434:	e0816d26 	beq	fp,r2,20069ec <__muldf3+0x854>
 2006438:	00800044 	movi	r2,1
 200643c:	e081321e 	bne	fp,r2,2006908 <__muldf3+0x770>
 2006440:	48a6703a 	and	r19,r9,r2
 2006444:	0009883a 	mov	r4,zero
 2006448:	0021883a 	mov	r16,zero
 200644c:	002f883a 	mov	r23,zero
 2006450:	003fab06 	br	2006300 <__alt_mem_onchip_memory2_0+0xfdff6300>
 2006454:	0023883a 	mov	r17,zero
 2006458:	0025883a 	mov	r18,zero
 200645c:	01c00044 	movi	r7,1
 2006460:	003f7f06 	br	2006260 <__alt_mem_onchip_memory2_0+0xfdff6260>
 2006464:	01c000c4 	movi	r7,3
 2006468:	003f7d06 	br	2006260 <__alt_mem_onchip_memory2_0+0xfdff6260>
 200646c:	01400104 	movi	r5,4
 2006470:	0021883a 	mov	r16,zero
 2006474:	002f883a 	mov	r23,zero
 2006478:	07000044 	movi	fp,1
 200647c:	003f6606 	br	2006218 <__alt_mem_onchip_memory2_0+0xfdff6218>
 2006480:	01400304 	movi	r5,12
 2006484:	070000c4 	movi	fp,3
 2006488:	003f6306 	br	2006218 <__alt_mem_onchip_memory2_0+0xfdff6218>
 200648c:	04000434 	movhi	r16,16
 2006490:	0027883a 	mov	r19,zero
 2006494:	843fffc4 	addi	r16,r16,-1
 2006498:	05ffffc4 	movi	r23,-1
 200649c:	0101ffc4 	movi	r4,2047
 20064a0:	003f9706 	br	2006300 <__alt_mem_onchip_memory2_0+0xfdff6300>
 20064a4:	8821883a 	mov	r16,r17
 20064a8:	902f883a 	mov	r23,r18
 20064ac:	5013883a 	mov	r9,r10
 20064b0:	3839883a 	mov	fp,r7
 20064b4:	003f8c06 	br	20062e8 <__alt_mem_onchip_memory2_0+0xfdff62e8>
 20064b8:	8821883a 	mov	r16,r17
 20064bc:	902f883a 	mov	r23,r18
 20064c0:	3013883a 	mov	r9,r6
 20064c4:	3839883a 	mov	fp,r7
 20064c8:	003f8706 	br	20062e8 <__alt_mem_onchip_memory2_0+0xfdff62e8>
 20064cc:	b82ad43a 	srli	r21,r23,16
 20064d0:	9038d43a 	srli	fp,r18,16
 20064d4:	bdffffcc 	andi	r23,r23,65535
 20064d8:	94bfffcc 	andi	r18,r18,65535
 20064dc:	9009883a 	mov	r4,r18
 20064e0:	b80b883a 	mov	r5,r23
 20064e4:	d8c00515 	stw	r3,20(sp)
 20064e8:	d9800715 	stw	r6,28(sp)
 20064ec:	da000615 	stw	r8,24(sp)
 20064f0:	2003c800 	call	2003c80 <__mulsi3>
 20064f4:	9009883a 	mov	r4,r18
 20064f8:	a80b883a 	mov	r5,r21
 20064fc:	1029883a 	mov	r20,r2
 2006500:	2003c800 	call	2003c80 <__mulsi3>
 2006504:	e009883a 	mov	r4,fp
 2006508:	a80b883a 	mov	r5,r21
 200650c:	102d883a 	mov	r22,r2
 2006510:	2003c800 	call	2003c80 <__mulsi3>
 2006514:	e009883a 	mov	r4,fp
 2006518:	b80b883a 	mov	r5,r23
 200651c:	1027883a 	mov	r19,r2
 2006520:	2003c800 	call	2003c80 <__mulsi3>
 2006524:	a008d43a 	srli	r4,r20,16
 2006528:	b085883a 	add	r2,r22,r2
 200652c:	d8c00517 	ldw	r3,20(sp)
 2006530:	110f883a 	add	r7,r2,r4
 2006534:	d9800717 	ldw	r6,28(sp)
 2006538:	da000617 	ldw	r8,24(sp)
 200653c:	3d80022e 	bgeu	r7,r22,2006548 <__muldf3+0x3b0>
 2006540:	00800074 	movhi	r2,1
 2006544:	98a7883a 	add	r19,r19,r2
 2006548:	3804943a 	slli	r2,r7,16
 200654c:	380ed43a 	srli	r7,r7,16
 2006550:	882cd43a 	srli	r22,r17,16
 2006554:	a53fffcc 	andi	r20,r20,65535
 2006558:	8c7fffcc 	andi	r17,r17,65535
 200655c:	1529883a 	add	r20,r2,r20
 2006560:	8809883a 	mov	r4,r17
 2006564:	b80b883a 	mov	r5,r23
 2006568:	d8c00515 	stw	r3,20(sp)
 200656c:	d9800715 	stw	r6,28(sp)
 2006570:	da000615 	stw	r8,24(sp)
 2006574:	d9c00015 	stw	r7,0(sp)
 2006578:	dd000115 	stw	r20,4(sp)
 200657c:	2003c800 	call	2003c80 <__mulsi3>
 2006580:	a80b883a 	mov	r5,r21
 2006584:	8809883a 	mov	r4,r17
 2006588:	d8800415 	stw	r2,16(sp)
 200658c:	2003c800 	call	2003c80 <__mulsi3>
 2006590:	a80b883a 	mov	r5,r21
 2006594:	b009883a 	mov	r4,r22
 2006598:	1029883a 	mov	r20,r2
 200659c:	2003c800 	call	2003c80 <__mulsi3>
 20065a0:	b009883a 	mov	r4,r22
 20065a4:	b80b883a 	mov	r5,r23
 20065a8:	102b883a 	mov	r21,r2
 20065ac:	2003c800 	call	2003c80 <__mulsi3>
 20065b0:	da400417 	ldw	r9,16(sp)
 20065b4:	a085883a 	add	r2,r20,r2
 20065b8:	d8c00517 	ldw	r3,20(sp)
 20065bc:	4808d43a 	srli	r4,r9,16
 20065c0:	d9800717 	ldw	r6,28(sp)
 20065c4:	da000617 	ldw	r8,24(sp)
 20065c8:	1109883a 	add	r4,r2,r4
 20065cc:	2500022e 	bgeu	r4,r20,20065d8 <__muldf3+0x440>
 20065d0:	00800074 	movhi	r2,1
 20065d4:	a8ab883a 	add	r21,r21,r2
 20065d8:	200e943a 	slli	r7,r4,16
 20065dc:	2004d43a 	srli	r2,r4,16
 20065e0:	802ed43a 	srli	r23,r16,16
 20065e4:	843fffcc 	andi	r16,r16,65535
 20065e8:	4d3fffcc 	andi	r20,r9,65535
 20065ec:	9009883a 	mov	r4,r18
 20065f0:	800b883a 	mov	r5,r16
 20065f4:	3d29883a 	add	r20,r7,r20
 20065f8:	d8c00515 	stw	r3,20(sp)
 20065fc:	d9800715 	stw	r6,28(sp)
 2006600:	da000615 	stw	r8,24(sp)
 2006604:	a8ab883a 	add	r21,r21,r2
 2006608:	2003c800 	call	2003c80 <__mulsi3>
 200660c:	9009883a 	mov	r4,r18
 2006610:	b80b883a 	mov	r5,r23
 2006614:	d8800315 	stw	r2,12(sp)
 2006618:	2003c800 	call	2003c80 <__mulsi3>
 200661c:	e009883a 	mov	r4,fp
 2006620:	b80b883a 	mov	r5,r23
 2006624:	1025883a 	mov	r18,r2
 2006628:	2003c800 	call	2003c80 <__mulsi3>
 200662c:	e009883a 	mov	r4,fp
 2006630:	800b883a 	mov	r5,r16
 2006634:	d8800215 	stw	r2,8(sp)
 2006638:	2003c800 	call	2003c80 <__mulsi3>
 200663c:	da800317 	ldw	r10,12(sp)
 2006640:	d9400017 	ldw	r5,0(sp)
 2006644:	9085883a 	add	r2,r18,r2
 2006648:	5008d43a 	srli	r4,r10,16
 200664c:	a153883a 	add	r9,r20,r5
 2006650:	d8c00517 	ldw	r3,20(sp)
 2006654:	1109883a 	add	r4,r2,r4
 2006658:	d9800717 	ldw	r6,28(sp)
 200665c:	da000617 	ldw	r8,24(sp)
 2006660:	dac00217 	ldw	r11,8(sp)
 2006664:	2480022e 	bgeu	r4,r18,2006670 <__muldf3+0x4d8>
 2006668:	00800074 	movhi	r2,1
 200666c:	5897883a 	add	r11,r11,r2
 2006670:	200e943a 	slli	r7,r4,16
 2006674:	2038d43a 	srli	fp,r4,16
 2006678:	52bfffcc 	andi	r10,r10,65535
 200667c:	3a8f883a 	add	r7,r7,r10
 2006680:	8809883a 	mov	r4,r17
 2006684:	800b883a 	mov	r5,r16
 2006688:	d8c00515 	stw	r3,20(sp)
 200668c:	d9800715 	stw	r6,28(sp)
 2006690:	d9c00215 	stw	r7,8(sp)
 2006694:	da000615 	stw	r8,24(sp)
 2006698:	da400415 	stw	r9,16(sp)
 200669c:	5f39883a 	add	fp,r11,fp
 20066a0:	2003c800 	call	2003c80 <__mulsi3>
 20066a4:	8809883a 	mov	r4,r17
 20066a8:	b80b883a 	mov	r5,r23
 20066ac:	1025883a 	mov	r18,r2
 20066b0:	2003c800 	call	2003c80 <__mulsi3>
 20066b4:	b009883a 	mov	r4,r22
 20066b8:	b80b883a 	mov	r5,r23
 20066bc:	d8800315 	stw	r2,12(sp)
 20066c0:	2003c800 	call	2003c80 <__mulsi3>
 20066c4:	b009883a 	mov	r4,r22
 20066c8:	800b883a 	mov	r5,r16
 20066cc:	1023883a 	mov	r17,r2
 20066d0:	2003c800 	call	2003c80 <__mulsi3>
 20066d4:	da800317 	ldw	r10,12(sp)
 20066d8:	9008d43a 	srli	r4,r18,16
 20066dc:	d8c00517 	ldw	r3,20(sp)
 20066e0:	5085883a 	add	r2,r10,r2
 20066e4:	1109883a 	add	r4,r2,r4
 20066e8:	d9800717 	ldw	r6,28(sp)
 20066ec:	d9c00217 	ldw	r7,8(sp)
 20066f0:	da000617 	ldw	r8,24(sp)
 20066f4:	da400417 	ldw	r9,16(sp)
 20066f8:	2280022e 	bgeu	r4,r10,2006704 <__muldf3+0x56c>
 20066fc:	00800074 	movhi	r2,1
 2006700:	88a3883a 	add	r17,r17,r2
 2006704:	2004943a 	slli	r2,r4,16
 2006708:	94bfffcc 	andi	r18,r18,65535
 200670c:	4ce7883a 	add	r19,r9,r19
 2006710:	14a5883a 	add	r18,r2,r18
 2006714:	9d29803a 	cmpltu	r20,r19,r20
 2006718:	9565883a 	add	r18,r18,r21
 200671c:	9505883a 	add	r2,r18,r20
 2006720:	99e7883a 	add	r19,r19,r7
 2006724:	99cf803a 	cmpltu	r7,r19,r7
 2006728:	e08b883a 	add	r5,fp,r2
 200672c:	2008d43a 	srli	r4,r4,16
 2006730:	29ef883a 	add	r23,r5,r7
 2006734:	1529803a 	cmpltu	r20,r2,r20
 2006738:	956b803a 	cmpltu	r21,r18,r21
 200673c:	b9cf803a 	cmpltu	r7,r23,r7
 2006740:	a564b03a 	or	r18,r20,r21
 2006744:	2f39803a 	cmpltu	fp,r5,fp
 2006748:	9125883a 	add	r18,r18,r4
 200674c:	3f38b03a 	or	fp,r7,fp
 2006750:	9725883a 	add	r18,r18,fp
 2006754:	9804927a 	slli	r2,r19,9
 2006758:	9463883a 	add	r17,r18,r17
 200675c:	d9000117 	ldw	r4,4(sp)
 2006760:	b820d5fa 	srli	r16,r23,23
 2006764:	8822927a 	slli	r17,r17,9
 2006768:	9826d5fa 	srli	r19,r19,23
 200676c:	1104b03a 	or	r2,r2,r4
 2006770:	b82e927a 	slli	r23,r23,9
 2006774:	1004c03a 	cmpne	r2,r2,zero
 2006778:	8c20b03a 	or	r16,r17,r16
 200677c:	14e6b03a 	or	r19,r2,r19
 2006780:	8080402c 	andhi	r2,r16,256
 2006784:	9deeb03a 	or	r23,r19,r23
 2006788:	10000726 	beq	r2,zero,20067a8 <__muldf3+0x610>
 200678c:	b804d07a 	srli	r2,r23,1
 2006790:	800697fa 	slli	r3,r16,31
 2006794:	bdc0004c 	andi	r23,r23,1
 2006798:	8020d07a 	srli	r16,r16,1
 200679c:	b8aeb03a 	or	r23,r23,r2
 20067a0:	b8eeb03a 	or	r23,r23,r3
 20067a4:	4007883a 	mov	r3,r8
 20067a8:	1900ffc4 	addi	r4,r3,1023
 20067ac:	01004d0e 	bge	zero,r4,20068e4 <__muldf3+0x74c>
 20067b0:	b88001cc 	andi	r2,r23,7
 20067b4:	10000726 	beq	r2,zero,20067d4 <__muldf3+0x63c>
 20067b8:	b94003cc 	andi	r5,r23,15
 20067bc:	00800104 	movi	r2,4
 20067c0:	28800426 	beq	r5,r2,20067d4 <__muldf3+0x63c>
 20067c4:	b885883a 	add	r2,r23,r2
 20067c8:	15ef803a 	cmpltu	r23,r2,r23
 20067cc:	85e1883a 	add	r16,r16,r23
 20067d0:	102f883a 	mov	r23,r2
 20067d4:	8080402c 	andhi	r2,r16,256
 20067d8:	10000426 	beq	r2,zero,20067ec <__muldf3+0x654>
 20067dc:	00bfc034 	movhi	r2,65280
 20067e0:	10bfffc4 	addi	r2,r2,-1
 20067e4:	19010004 	addi	r4,r3,1024
 20067e8:	80a0703a 	and	r16,r16,r2
 20067ec:	0081ff84 	movi	r2,2046
 20067f0:	1100340e 	bge	r2,r4,20068c4 <__muldf3+0x72c>
 20067f4:	34c0004c 	andi	r19,r6,1
 20067f8:	0101ffc4 	movi	r4,2047
 20067fc:	0021883a 	mov	r16,zero
 2006800:	002f883a 	mov	r23,zero
 2006804:	003ebe06 	br	2006300 <__alt_mem_onchip_memory2_0+0xfdff6300>
 2006808:	8080022c 	andhi	r2,r16,8
 200680c:	10000926 	beq	r2,zero,2006834 <__muldf3+0x69c>
 2006810:	8880022c 	andhi	r2,r17,8
 2006814:	1000071e 	bne	r2,zero,2006834 <__muldf3+0x69c>
 2006818:	00800434 	movhi	r2,16
 200681c:	8c000234 	orhi	r16,r17,8
 2006820:	10bfffc4 	addi	r2,r2,-1
 2006824:	b027883a 	mov	r19,r22
 2006828:	80a0703a 	and	r16,r16,r2
 200682c:	902f883a 	mov	r23,r18
 2006830:	003f1a06 	br	200649c <__alt_mem_onchip_memory2_0+0xfdff649c>
 2006834:	00800434 	movhi	r2,16
 2006838:	84000234 	orhi	r16,r16,8
 200683c:	10bfffc4 	addi	r2,r2,-1
 2006840:	80a0703a 	and	r16,r16,r2
 2006844:	003f1506 	br	200649c <__alt_mem_onchip_memory2_0+0xfdff649c>
 2006848:	3009883a 	mov	r4,r6
 200684c:	d9400215 	stw	r5,8(sp)
 2006850:	d9800715 	stw	r6,28(sp)
 2006854:	da400415 	stw	r9,16(sp)
 2006858:	da800315 	stw	r10,12(sp)
 200685c:	20076d40 	call	20076d4 <__clzsi2>
 2006860:	10c00804 	addi	r3,r2,32
 2006864:	010009c4 	movi	r4,39
 2006868:	d9400217 	ldw	r5,8(sp)
 200686c:	d9800717 	ldw	r6,28(sp)
 2006870:	da400417 	ldw	r9,16(sp)
 2006874:	da800317 	ldw	r10,12(sp)
 2006878:	20fee20e 	bge	r4,r3,2006404 <__alt_mem_onchip_memory2_0+0xfdff6404>
 200687c:	147ffe04 	addi	r17,r2,-8
 2006880:	9462983a 	sll	r17,r18,r17
 2006884:	0025883a 	mov	r18,zero
 2006888:	003ee506 	br	2006420 <__alt_mem_onchip_memory2_0+0xfdff6420>
 200688c:	d9800715 	stw	r6,28(sp)
 2006890:	d9c00215 	stw	r7,8(sp)
 2006894:	da400415 	stw	r9,16(sp)
 2006898:	20076d40 	call	20076d4 <__clzsi2>
 200689c:	10c00804 	addi	r3,r2,32
 20068a0:	010009c4 	movi	r4,39
 20068a4:	d9800717 	ldw	r6,28(sp)
 20068a8:	d9c00217 	ldw	r7,8(sp)
 20068ac:	da400417 	ldw	r9,16(sp)
 20068b0:	20feb40e 	bge	r4,r3,2006384 <__alt_mem_onchip_memory2_0+0xfdff6384>
 20068b4:	143ffe04 	addi	r16,r2,-8
 20068b8:	9420983a 	sll	r16,r18,r16
 20068bc:	002f883a 	mov	r23,zero
 20068c0:	003eb706 	br	20063a0 <__alt_mem_onchip_memory2_0+0xfdff63a0>
 20068c4:	8004977a 	slli	r2,r16,29
 20068c8:	b82ed0fa 	srli	r23,r23,3
 20068cc:	8020927a 	slli	r16,r16,9
 20068d0:	2101ffcc 	andi	r4,r4,2047
 20068d4:	15eeb03a 	or	r23,r2,r23
 20068d8:	8020d33a 	srli	r16,r16,12
 20068dc:	34c0004c 	andi	r19,r6,1
 20068e0:	003e8706 	br	2006300 <__alt_mem_onchip_memory2_0+0xfdff6300>
 20068e4:	00bf0084 	movi	r2,-1022
 20068e8:	10c5c83a 	sub	r2,r2,r3
 20068ec:	01000e04 	movi	r4,56
 20068f0:	2080080e 	bge	r4,r2,2006914 <__muldf3+0x77c>
 20068f4:	34c0004c 	andi	r19,r6,1
 20068f8:	0009883a 	mov	r4,zero
 20068fc:	0021883a 	mov	r16,zero
 2006900:	002f883a 	mov	r23,zero
 2006904:	003e7e06 	br	2006300 <__alt_mem_onchip_memory2_0+0xfdff6300>
 2006908:	4007883a 	mov	r3,r8
 200690c:	480d883a 	mov	r6,r9
 2006910:	003fa506 	br	20067a8 <__alt_mem_onchip_memory2_0+0xfdff67a8>
 2006914:	010007c4 	movi	r4,31
 2006918:	20801816 	blt	r4,r2,200697c <__muldf3+0x7e4>
 200691c:	18c10784 	addi	r3,r3,1054
 2006920:	80c8983a 	sll	r4,r16,r3
 2006924:	b88ad83a 	srl	r5,r23,r2
 2006928:	b8c6983a 	sll	r3,r23,r3
 200692c:	80a0d83a 	srl	r16,r16,r2
 2006930:	2908b03a 	or	r4,r5,r4
 2006934:	1804c03a 	cmpne	r2,r3,zero
 2006938:	2088b03a 	or	r4,r4,r2
 200693c:	208001cc 	andi	r2,r4,7
 2006940:	10000726 	beq	r2,zero,2006960 <__muldf3+0x7c8>
 2006944:	20c003cc 	andi	r3,r4,15
 2006948:	00800104 	movi	r2,4
 200694c:	18800426 	beq	r3,r2,2006960 <__muldf3+0x7c8>
 2006950:	20c00104 	addi	r3,r4,4
 2006954:	1905803a 	cmpltu	r2,r3,r4
 2006958:	80a1883a 	add	r16,r16,r2
 200695c:	1809883a 	mov	r4,r3
 2006960:	8080202c 	andhi	r2,r16,128
 2006964:	10001b26 	beq	r2,zero,20069d4 <__muldf3+0x83c>
 2006968:	34c0004c 	andi	r19,r6,1
 200696c:	01000044 	movi	r4,1
 2006970:	0021883a 	mov	r16,zero
 2006974:	002f883a 	mov	r23,zero
 2006978:	003e6106 	br	2006300 <__alt_mem_onchip_memory2_0+0xfdff6300>
 200697c:	013ef884 	movi	r4,-1054
 2006980:	20c9c83a 	sub	r4,r4,r3
 2006984:	01400804 	movi	r5,32
 2006988:	8108d83a 	srl	r4,r16,r4
 200698c:	11401526 	beq	r2,r5,20069e4 <__muldf3+0x84c>
 2006990:	18c10f84 	addi	r3,r3,1086
 2006994:	80e0983a 	sll	r16,r16,r3
 2006998:	85eeb03a 	or	r23,r16,r23
 200699c:	b804c03a 	cmpne	r2,r23,zero
 20069a0:	1108b03a 	or	r4,r2,r4
 20069a4:	20c001cc 	andi	r3,r4,7
 20069a8:	1800061e 	bne	r3,zero,20069c4 <__muldf3+0x82c>
 20069ac:	0021883a 	mov	r16,zero
 20069b0:	202ed0fa 	srli	r23,r4,3
 20069b4:	34c0004c 	andi	r19,r6,1
 20069b8:	0009883a 	mov	r4,zero
 20069bc:	b8eeb03a 	or	r23,r23,r3
 20069c0:	003e4f06 	br	2006300 <__alt_mem_onchip_memory2_0+0xfdff6300>
 20069c4:	20c003cc 	andi	r3,r4,15
 20069c8:	00800104 	movi	r2,4
 20069cc:	0021883a 	mov	r16,zero
 20069d0:	18bfdf1e 	bne	r3,r2,2006950 <__alt_mem_onchip_memory2_0+0xfdff6950>
 20069d4:	8004927a 	slli	r2,r16,9
 20069d8:	8006977a 	slli	r3,r16,29
 20069dc:	1020d33a 	srli	r16,r2,12
 20069e0:	003ff306 	br	20069b0 <__alt_mem_onchip_memory2_0+0xfdff69b0>
 20069e4:	0021883a 	mov	r16,zero
 20069e8:	003feb06 	br	2006998 <__alt_mem_onchip_memory2_0+0xfdff6998>
 20069ec:	00800434 	movhi	r2,16
 20069f0:	84000234 	orhi	r16,r16,8
 20069f4:	10bfffc4 	addi	r2,r2,-1
 20069f8:	4cc0004c 	andi	r19,r9,1
 20069fc:	80a0703a 	and	r16,r16,r2
 2006a00:	003ea606 	br	200649c <__alt_mem_onchip_memory2_0+0xfdff649c>

02006a04 <__subdf3>:
 2006a04:	00c00434 	movhi	r3,16
 2006a08:	18ffffc4 	addi	r3,r3,-1
 2006a0c:	defffb04 	addi	sp,sp,-20
 2006a10:	28d2703a 	and	r9,r5,r3
 2006a14:	3814d53a 	srli	r10,r7,20
 2006a18:	38c6703a 	and	r3,r7,r3
 2006a1c:	3004d77a 	srli	r2,r6,29
 2006a20:	dc800215 	stw	r18,8(sp)
 2006a24:	dc000015 	stw	r16,0(sp)
 2006a28:	2824d7fa 	srli	r18,r5,31
 2006a2c:	2820d53a 	srli	r16,r5,20
 2006a30:	481290fa 	slli	r9,r9,3
 2006a34:	200ad77a 	srli	r5,r4,29
 2006a38:	180690fa 	slli	r3,r3,3
 2006a3c:	dc400115 	stw	r17,4(sp)
 2006a40:	dfc00415 	stw	ra,16(sp)
 2006a44:	202290fa 	slli	r17,r4,3
 2006a48:	dcc00315 	stw	r19,12(sp)
 2006a4c:	5281ffcc 	andi	r10,r10,2047
 2006a50:	0101ffc4 	movi	r4,2047
 2006a54:	9011883a 	mov	r8,r18
 2006a58:	8401ffcc 	andi	r16,r16,2047
 2006a5c:	94803fcc 	andi	r18,r18,255
 2006a60:	494ab03a 	or	r5,r9,r5
 2006a64:	380ed7fa 	srli	r7,r7,31
 2006a68:	1886b03a 	or	r3,r3,r2
 2006a6c:	300c90fa 	slli	r6,r6,3
 2006a70:	51009026 	beq	r10,r4,2006cb4 <__subdf3+0x2b0>
 2006a74:	39c0005c 	xori	r7,r7,1
 2006a78:	8285c83a 	sub	r2,r16,r10
 2006a7c:	91c06f26 	beq	r18,r7,2006c3c <__subdf3+0x238>
 2006a80:	0080b10e 	bge	zero,r2,2006d48 <__subdf3+0x344>
 2006a84:	50002a1e 	bne	r10,zero,2006b30 <__subdf3+0x12c>
 2006a88:	1988b03a 	or	r4,r3,r6
 2006a8c:	2000941e 	bne	r4,zero,2006ce0 <__subdf3+0x2dc>
 2006a90:	888001cc 	andi	r2,r17,7
 2006a94:	10005b26 	beq	r2,zero,2006c04 <__subdf3+0x200>
 2006a98:	88c003cc 	andi	r3,r17,15
 2006a9c:	00800104 	movi	r2,4
 2006aa0:	18805826 	beq	r3,r2,2006c04 <__subdf3+0x200>
 2006aa4:	88c00104 	addi	r3,r17,4
 2006aa8:	1c63803a 	cmpltu	r17,r3,r17
 2006aac:	2c4b883a 	add	r5,r5,r17
 2006ab0:	2880202c 	andhi	r2,r5,128
 2006ab4:	9200004c 	andi	r8,r18,1
 2006ab8:	1823883a 	mov	r17,r3
 2006abc:	10005426 	beq	r2,zero,2006c10 <__subdf3+0x20c>
 2006ac0:	84000044 	addi	r16,r16,1
 2006ac4:	0081ffc4 	movi	r2,2047
 2006ac8:	8080bf26 	beq	r16,r2,2006dc8 <__subdf3+0x3c4>
 2006acc:	013fe034 	movhi	r4,65408
 2006ad0:	213fffc4 	addi	r4,r4,-1
 2006ad4:	290a703a 	and	r5,r5,r4
 2006ad8:	2804977a 	slli	r2,r5,29
 2006adc:	280a927a 	slli	r5,r5,9
 2006ae0:	8822d0fa 	srli	r17,r17,3
 2006ae4:	8401ffcc 	andi	r16,r16,2047
 2006ae8:	2808d33a 	srli	r4,r5,12
 2006aec:	1444b03a 	or	r2,r2,r17
 2006af0:	8401ffcc 	andi	r16,r16,2047
 2006af4:	800a953a 	slli	r5,r16,20
 2006af8:	40c03fcc 	andi	r3,r8,255
 2006afc:	04000434 	movhi	r16,16
 2006b00:	180697fa 	slli	r3,r3,31
 2006b04:	843fffc4 	addi	r16,r16,-1
 2006b08:	2420703a 	and	r16,r4,r16
 2006b0c:	8160b03a 	or	r16,r16,r5
 2006b10:	80c6b03a 	or	r3,r16,r3
 2006b14:	dfc00417 	ldw	ra,16(sp)
 2006b18:	dcc00317 	ldw	r19,12(sp)
 2006b1c:	dc800217 	ldw	r18,8(sp)
 2006b20:	dc400117 	ldw	r17,4(sp)
 2006b24:	dc000017 	ldw	r16,0(sp)
 2006b28:	dec00504 	addi	sp,sp,20
 2006b2c:	f800283a 	ret
 2006b30:	0101ffc4 	movi	r4,2047
 2006b34:	813fd626 	beq	r16,r4,2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006b38:	18c02034 	orhi	r3,r3,128
 2006b3c:	01000e04 	movi	r4,56
 2006b40:	2080a416 	blt	r4,r2,2006dd4 <__subdf3+0x3d0>
 2006b44:	010007c4 	movi	r4,31
 2006b48:	2080c716 	blt	r4,r2,2006e68 <__subdf3+0x464>
 2006b4c:	01000804 	movi	r4,32
 2006b50:	2089c83a 	sub	r4,r4,r2
 2006b54:	1910983a 	sll	r8,r3,r4
 2006b58:	308ed83a 	srl	r7,r6,r2
 2006b5c:	3108983a 	sll	r4,r6,r4
 2006b60:	1884d83a 	srl	r2,r3,r2
 2006b64:	41ccb03a 	or	r6,r8,r7
 2006b68:	2008c03a 	cmpne	r4,r4,zero
 2006b6c:	310cb03a 	or	r6,r6,r4
 2006b70:	898dc83a 	sub	r6,r17,r6
 2006b74:	89a3803a 	cmpltu	r17,r17,r6
 2006b78:	288bc83a 	sub	r5,r5,r2
 2006b7c:	2c4bc83a 	sub	r5,r5,r17
 2006b80:	3023883a 	mov	r17,r6
 2006b84:	2880202c 	andhi	r2,r5,128
 2006b88:	10006b26 	beq	r2,zero,2006d38 <__subdf3+0x334>
 2006b8c:	04c02034 	movhi	r19,128
 2006b90:	9cffffc4 	addi	r19,r19,-1
 2006b94:	2ce6703a 	and	r19,r5,r19
 2006b98:	98007c26 	beq	r19,zero,2006d8c <__subdf3+0x388>
 2006b9c:	9809883a 	mov	r4,r19
 2006ba0:	20076d40 	call	20076d4 <__clzsi2>
 2006ba4:	10fffe04 	addi	r3,r2,-8
 2006ba8:	010007c4 	movi	r4,31
 2006bac:	20c07d16 	blt	r4,r3,2006da4 <__subdf3+0x3a0>
 2006bb0:	01400a04 	movi	r5,40
 2006bb4:	2885c83a 	sub	r2,r5,r2
 2006bb8:	888ad83a 	srl	r5,r17,r2
 2006bbc:	98e6983a 	sll	r19,r19,r3
 2006bc0:	88e2983a 	sll	r17,r17,r3
 2006bc4:	2ce6b03a 	or	r19,r5,r19
 2006bc8:	1c007a16 	blt	r3,r16,2006db4 <__subdf3+0x3b0>
 2006bcc:	1c21c83a 	sub	r16,r3,r16
 2006bd0:	81400044 	addi	r5,r16,1
 2006bd4:	00c007c4 	movi	r3,31
 2006bd8:	19409616 	blt	r3,r5,2006e34 <__subdf3+0x430>
 2006bdc:	1c21c83a 	sub	r16,r3,r16
 2006be0:	8c08983a 	sll	r4,r17,r16
 2006be4:	8946d83a 	srl	r3,r17,r5
 2006be8:	9c20983a 	sll	r16,r19,r16
 2006bec:	2008c03a 	cmpne	r4,r4,zero
 2006bf0:	994ad83a 	srl	r5,r19,r5
 2006bf4:	1c06b03a 	or	r3,r3,r16
 2006bf8:	1922b03a 	or	r17,r3,r4
 2006bfc:	0021883a 	mov	r16,zero
 2006c00:	003fa306 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006c04:	2880202c 	andhi	r2,r5,128
 2006c08:	9200004c 	andi	r8,r18,1
 2006c0c:	103fac1e 	bne	r2,zero,2006ac0 <__alt_mem_onchip_memory2_0+0xfdff6ac0>
 2006c10:	2804977a 	slli	r2,r5,29
 2006c14:	8822d0fa 	srli	r17,r17,3
 2006c18:	00c1ffc4 	movi	r3,2047
 2006c1c:	280ad0fa 	srli	r5,r5,3
 2006c20:	1444b03a 	or	r2,r2,r17
 2006c24:	80c02726 	beq	r16,r3,2006cc4 <__subdf3+0x2c0>
 2006c28:	01000434 	movhi	r4,16
 2006c2c:	213fffc4 	addi	r4,r4,-1
 2006c30:	80e0703a 	and	r16,r16,r3
 2006c34:	2908703a 	and	r4,r5,r4
 2006c38:	003fad06 	br	2006af0 <__alt_mem_onchip_memory2_0+0xfdff6af0>
 2006c3c:	0080690e 	bge	zero,r2,2006de4 <__subdf3+0x3e0>
 2006c40:	50002f26 	beq	r10,zero,2006d00 <__subdf3+0x2fc>
 2006c44:	0101ffc4 	movi	r4,2047
 2006c48:	813f9126 	beq	r16,r4,2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006c4c:	18c02034 	orhi	r3,r3,128
 2006c50:	01000e04 	movi	r4,56
 2006c54:	2080b00e 	bge	r4,r2,2006f18 <__subdf3+0x514>
 2006c58:	198cb03a 	or	r6,r3,r6
 2006c5c:	300ec03a 	cmpne	r7,r6,zero
 2006c60:	0005883a 	mov	r2,zero
 2006c64:	3c4f883a 	add	r7,r7,r17
 2006c68:	3c63803a 	cmpltu	r17,r7,r17
 2006c6c:	114b883a 	add	r5,r2,r5
 2006c70:	2c4b883a 	add	r5,r5,r17
 2006c74:	3823883a 	mov	r17,r7
 2006c78:	2880202c 	andhi	r2,r5,128
 2006c7c:	10002e26 	beq	r2,zero,2006d38 <__subdf3+0x334>
 2006c80:	84000044 	addi	r16,r16,1
 2006c84:	0081ffc4 	movi	r2,2047
 2006c88:	8080de26 	beq	r16,r2,2007004 <__subdf3+0x600>
 2006c8c:	00bfe034 	movhi	r2,65408
 2006c90:	10bfffc4 	addi	r2,r2,-1
 2006c94:	288a703a 	and	r5,r5,r2
 2006c98:	880cd07a 	srli	r6,r17,1
 2006c9c:	280897fa 	slli	r4,r5,31
 2006ca0:	88c0004c 	andi	r3,r17,1
 2006ca4:	30e2b03a 	or	r17,r6,r3
 2006ca8:	280ad07a 	srli	r5,r5,1
 2006cac:	8922b03a 	or	r17,r17,r4
 2006cb0:	003f7706 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006cb4:	1984b03a 	or	r2,r3,r6
 2006cb8:	103f6e26 	beq	r2,zero,2006a74 <__alt_mem_onchip_memory2_0+0xfdff6a74>
 2006cbc:	39c03fcc 	andi	r7,r7,255
 2006cc0:	003f6d06 	br	2006a78 <__alt_mem_onchip_memory2_0+0xfdff6a78>
 2006cc4:	1146b03a 	or	r3,r2,r5
 2006cc8:	18003f26 	beq	r3,zero,2006dc8 <__subdf3+0x3c4>
 2006ccc:	00c00434 	movhi	r3,16
 2006cd0:	29000234 	orhi	r4,r5,8
 2006cd4:	18ffffc4 	addi	r3,r3,-1
 2006cd8:	20c8703a 	and	r4,r4,r3
 2006cdc:	003f8406 	br	2006af0 <__alt_mem_onchip_memory2_0+0xfdff6af0>
 2006ce0:	10bfffc4 	addi	r2,r2,-1
 2006ce4:	1000501e 	bne	r2,zero,2006e28 <__subdf3+0x424>
 2006ce8:	898fc83a 	sub	r7,r17,r6
 2006cec:	89e3803a 	cmpltu	r17,r17,r7
 2006cf0:	28cbc83a 	sub	r5,r5,r3
 2006cf4:	2c4bc83a 	sub	r5,r5,r17
 2006cf8:	3823883a 	mov	r17,r7
 2006cfc:	003fa106 	br	2006b84 <__alt_mem_onchip_memory2_0+0xfdff6b84>
 2006d00:	1988b03a 	or	r4,r3,r6
 2006d04:	203f6226 	beq	r4,zero,2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006d08:	10bfffc4 	addi	r2,r2,-1
 2006d0c:	10009b1e 	bne	r2,zero,2006f7c <__subdf3+0x578>
 2006d10:	344d883a 	add	r6,r6,r17
 2006d14:	3463803a 	cmpltu	r17,r6,r17
 2006d18:	194b883a 	add	r5,r3,r5
 2006d1c:	2c4b883a 	add	r5,r5,r17
 2006d20:	3023883a 	mov	r17,r6
 2006d24:	003fd406 	br	2006c78 <__alt_mem_onchip_memory2_0+0xfdff6c78>
 2006d28:	1106b03a 	or	r3,r2,r4
 2006d2c:	1800b426 	beq	r3,zero,2007000 <__subdf3+0x5fc>
 2006d30:	100b883a 	mov	r5,r2
 2006d34:	2023883a 	mov	r17,r4
 2006d38:	888001cc 	andi	r2,r17,7
 2006d3c:	103f561e 	bne	r2,zero,2006a98 <__alt_mem_onchip_memory2_0+0xfdff6a98>
 2006d40:	9200004c 	andi	r8,r18,1
 2006d44:	003fb206 	br	2006c10 <__alt_mem_onchip_memory2_0+0xfdff6c10>
 2006d48:	1000531e 	bne	r2,zero,2006e98 <__subdf3+0x494>
 2006d4c:	80800044 	addi	r2,r16,1
 2006d50:	1081ffcc 	andi	r2,r2,2047
 2006d54:	01000044 	movi	r4,1
 2006d58:	2080a00e 	bge	r4,r2,2006fdc <__subdf3+0x5d8>
 2006d5c:	8985c83a 	sub	r2,r17,r6
 2006d60:	8889803a 	cmpltu	r4,r17,r2
 2006d64:	28e7c83a 	sub	r19,r5,r3
 2006d68:	9927c83a 	sub	r19,r19,r4
 2006d6c:	9900202c 	andhi	r4,r19,128
 2006d70:	20006226 	beq	r4,zero,2006efc <__subdf3+0x4f8>
 2006d74:	3463c83a 	sub	r17,r6,r17
 2006d78:	194bc83a 	sub	r5,r3,r5
 2006d7c:	344d803a 	cmpltu	r6,r6,r17
 2006d80:	29a7c83a 	sub	r19,r5,r6
 2006d84:	3825883a 	mov	r18,r7
 2006d88:	983f841e 	bne	r19,zero,2006b9c <__alt_mem_onchip_memory2_0+0xfdff6b9c>
 2006d8c:	8809883a 	mov	r4,r17
 2006d90:	20076d40 	call	20076d4 <__clzsi2>
 2006d94:	10800804 	addi	r2,r2,32
 2006d98:	10fffe04 	addi	r3,r2,-8
 2006d9c:	010007c4 	movi	r4,31
 2006da0:	20ff830e 	bge	r4,r3,2006bb0 <__alt_mem_onchip_memory2_0+0xfdff6bb0>
 2006da4:	14fff604 	addi	r19,r2,-40
 2006da8:	8ce6983a 	sll	r19,r17,r19
 2006dac:	0023883a 	mov	r17,zero
 2006db0:	1c3f860e 	bge	r3,r16,2006bcc <__alt_mem_onchip_memory2_0+0xfdff6bcc>
 2006db4:	017fe034 	movhi	r5,65408
 2006db8:	297fffc4 	addi	r5,r5,-1
 2006dbc:	80e1c83a 	sub	r16,r16,r3
 2006dc0:	994a703a 	and	r5,r19,r5
 2006dc4:	003f3206 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006dc8:	0009883a 	mov	r4,zero
 2006dcc:	0005883a 	mov	r2,zero
 2006dd0:	003f4706 	br	2006af0 <__alt_mem_onchip_memory2_0+0xfdff6af0>
 2006dd4:	198cb03a 	or	r6,r3,r6
 2006dd8:	300cc03a 	cmpne	r6,r6,zero
 2006ddc:	0005883a 	mov	r2,zero
 2006de0:	003f6306 	br	2006b70 <__alt_mem_onchip_memory2_0+0xfdff6b70>
 2006de4:	10009d1e 	bne	r2,zero,200705c <__subdf3+0x658>
 2006de8:	81c00044 	addi	r7,r16,1
 2006dec:	3881ffcc 	andi	r2,r7,2047
 2006df0:	02400044 	movi	r9,1
 2006df4:	4880680e 	bge	r9,r2,2006f98 <__subdf3+0x594>
 2006df8:	0081ffc4 	movi	r2,2047
 2006dfc:	3880ae26 	beq	r7,r2,20070b8 <__subdf3+0x6b4>
 2006e00:	344d883a 	add	r6,r6,r17
 2006e04:	3463803a 	cmpltu	r17,r6,r17
 2006e08:	194b883a 	add	r5,r3,r5
 2006e0c:	2c4b883a 	add	r5,r5,r17
 2006e10:	282297fa 	slli	r17,r5,31
 2006e14:	300cd07a 	srli	r6,r6,1
 2006e18:	280ad07a 	srli	r5,r5,1
 2006e1c:	3821883a 	mov	r16,r7
 2006e20:	89a2b03a 	or	r17,r17,r6
 2006e24:	003f1a06 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006e28:	0101ffc4 	movi	r4,2047
 2006e2c:	813f431e 	bne	r16,r4,2006b3c <__alt_mem_onchip_memory2_0+0xfdff6b3c>
 2006e30:	003f1706 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006e34:	80bff844 	addi	r2,r16,-31
 2006e38:	00c00804 	movi	r3,32
 2006e3c:	9884d83a 	srl	r2,r19,r2
 2006e40:	28c05126 	beq	r5,r3,2006f88 <__subdf3+0x584>
 2006e44:	00c00fc4 	movi	r3,63
 2006e48:	1c21c83a 	sub	r16,r3,r16
 2006e4c:	9c26983a 	sll	r19,r19,r16
 2006e50:	9c62b03a 	or	r17,r19,r17
 2006e54:	8822c03a 	cmpne	r17,r17,zero
 2006e58:	88a2b03a 	or	r17,r17,r2
 2006e5c:	000b883a 	mov	r5,zero
 2006e60:	0021883a 	mov	r16,zero
 2006e64:	003fb406 	br	2006d38 <__alt_mem_onchip_memory2_0+0xfdff6d38>
 2006e68:	113ff804 	addi	r4,r2,-32
 2006e6c:	01c00804 	movi	r7,32
 2006e70:	1908d83a 	srl	r4,r3,r4
 2006e74:	11c04626 	beq	r2,r7,2006f90 <__subdf3+0x58c>
 2006e78:	01c01004 	movi	r7,64
 2006e7c:	3885c83a 	sub	r2,r7,r2
 2006e80:	1884983a 	sll	r2,r3,r2
 2006e84:	118cb03a 	or	r6,r2,r6
 2006e88:	300cc03a 	cmpne	r6,r6,zero
 2006e8c:	310cb03a 	or	r6,r6,r4
 2006e90:	0005883a 	mov	r2,zero
 2006e94:	003f3606 	br	2006b70 <__alt_mem_onchip_memory2_0+0xfdff6b70>
 2006e98:	80002b26 	beq	r16,zero,2006f48 <__subdf3+0x544>
 2006e9c:	0101ffc4 	movi	r4,2047
 2006ea0:	51006926 	beq	r10,r4,2007048 <__subdf3+0x644>
 2006ea4:	0085c83a 	sub	r2,zero,r2
 2006ea8:	29402034 	orhi	r5,r5,128
 2006eac:	01000e04 	movi	r4,56
 2006eb0:	20807d16 	blt	r4,r2,20070a8 <__subdf3+0x6a4>
 2006eb4:	010007c4 	movi	r4,31
 2006eb8:	2080d916 	blt	r4,r2,2007220 <__subdf3+0x81c>
 2006ebc:	01000804 	movi	r4,32
 2006ec0:	2089c83a 	sub	r4,r4,r2
 2006ec4:	2912983a 	sll	r9,r5,r4
 2006ec8:	8890d83a 	srl	r8,r17,r2
 2006ecc:	8908983a 	sll	r4,r17,r4
 2006ed0:	2884d83a 	srl	r2,r5,r2
 2006ed4:	4a22b03a 	or	r17,r9,r8
 2006ed8:	2008c03a 	cmpne	r4,r4,zero
 2006edc:	8922b03a 	or	r17,r17,r4
 2006ee0:	3463c83a 	sub	r17,r6,r17
 2006ee4:	1885c83a 	sub	r2,r3,r2
 2006ee8:	344d803a 	cmpltu	r6,r6,r17
 2006eec:	118bc83a 	sub	r5,r2,r6
 2006ef0:	5021883a 	mov	r16,r10
 2006ef4:	3825883a 	mov	r18,r7
 2006ef8:	003f2206 	br	2006b84 <__alt_mem_onchip_memory2_0+0xfdff6b84>
 2006efc:	9886b03a 	or	r3,r19,r2
 2006f00:	18001c1e 	bne	r3,zero,2006f74 <__subdf3+0x570>
 2006f04:	0011883a 	mov	r8,zero
 2006f08:	000b883a 	mov	r5,zero
 2006f0c:	0023883a 	mov	r17,zero
 2006f10:	0021883a 	mov	r16,zero
 2006f14:	003f3e06 	br	2006c10 <__alt_mem_onchip_memory2_0+0xfdff6c10>
 2006f18:	010007c4 	movi	r4,31
 2006f1c:	20803c16 	blt	r4,r2,2007010 <__subdf3+0x60c>
 2006f20:	01000804 	movi	r4,32
 2006f24:	2089c83a 	sub	r4,r4,r2
 2006f28:	1912983a 	sll	r9,r3,r4
 2006f2c:	308ed83a 	srl	r7,r6,r2
 2006f30:	3108983a 	sll	r4,r6,r4
 2006f34:	1884d83a 	srl	r2,r3,r2
 2006f38:	49ceb03a 	or	r7,r9,r7
 2006f3c:	2008c03a 	cmpne	r4,r4,zero
 2006f40:	390eb03a 	or	r7,r7,r4
 2006f44:	003f4706 	br	2006c64 <__alt_mem_onchip_memory2_0+0xfdff6c64>
 2006f48:	2c48b03a 	or	r4,r5,r17
 2006f4c:	20003e26 	beq	r4,zero,2007048 <__subdf3+0x644>
 2006f50:	0084303a 	nor	r2,zero,r2
 2006f54:	10003a1e 	bne	r2,zero,2007040 <__subdf3+0x63c>
 2006f58:	3463c83a 	sub	r17,r6,r17
 2006f5c:	194bc83a 	sub	r5,r3,r5
 2006f60:	344d803a 	cmpltu	r6,r6,r17
 2006f64:	298bc83a 	sub	r5,r5,r6
 2006f68:	5021883a 	mov	r16,r10
 2006f6c:	3825883a 	mov	r18,r7
 2006f70:	003f0406 	br	2006b84 <__alt_mem_onchip_memory2_0+0xfdff6b84>
 2006f74:	1023883a 	mov	r17,r2
 2006f78:	003f0706 	br	2006b98 <__alt_mem_onchip_memory2_0+0xfdff6b98>
 2006f7c:	0101ffc4 	movi	r4,2047
 2006f80:	813f331e 	bne	r16,r4,2006c50 <__alt_mem_onchip_memory2_0+0xfdff6c50>
 2006f84:	003ec206 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006f88:	0027883a 	mov	r19,zero
 2006f8c:	003fb006 	br	2006e50 <__alt_mem_onchip_memory2_0+0xfdff6e50>
 2006f90:	0005883a 	mov	r2,zero
 2006f94:	003fbb06 	br	2006e84 <__alt_mem_onchip_memory2_0+0xfdff6e84>
 2006f98:	2c44b03a 	or	r2,r5,r17
 2006f9c:	80008b1e 	bne	r16,zero,20071cc <__subdf3+0x7c8>
 2006fa0:	1000b526 	beq	r2,zero,2007278 <__subdf3+0x874>
 2006fa4:	1984b03a 	or	r2,r3,r6
 2006fa8:	103eb926 	beq	r2,zero,2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006fac:	3449883a 	add	r4,r6,r17
 2006fb0:	2463803a 	cmpltu	r17,r4,r17
 2006fb4:	194b883a 	add	r5,r3,r5
 2006fb8:	2c4b883a 	add	r5,r5,r17
 2006fbc:	2880202c 	andhi	r2,r5,128
 2006fc0:	2023883a 	mov	r17,r4
 2006fc4:	103f5c26 	beq	r2,zero,2006d38 <__alt_mem_onchip_memory2_0+0xfdff6d38>
 2006fc8:	00bfe034 	movhi	r2,65408
 2006fcc:	10bfffc4 	addi	r2,r2,-1
 2006fd0:	4821883a 	mov	r16,r9
 2006fd4:	288a703a 	and	r5,r5,r2
 2006fd8:	003ead06 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2006fdc:	2c44b03a 	or	r2,r5,r17
 2006fe0:	8000291e 	bne	r16,zero,2007088 <__subdf3+0x684>
 2006fe4:	10004f1e 	bne	r2,zero,2007124 <__subdf3+0x720>
 2006fe8:	1984b03a 	or	r2,r3,r6
 2006fec:	10000426 	beq	r2,zero,2007000 <__subdf3+0x5fc>
 2006ff0:	180b883a 	mov	r5,r3
 2006ff4:	3023883a 	mov	r17,r6
 2006ff8:	3825883a 	mov	r18,r7
 2006ffc:	003ea406 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2007000:	0011883a 	mov	r8,zero
 2007004:	000b883a 	mov	r5,zero
 2007008:	0023883a 	mov	r17,zero
 200700c:	003f0006 	br	2006c10 <__alt_mem_onchip_memory2_0+0xfdff6c10>
 2007010:	11fff804 	addi	r7,r2,-32
 2007014:	19c8d83a 	srl	r4,r3,r7
 2007018:	01c00804 	movi	r7,32
 200701c:	11c07e26 	beq	r2,r7,2007218 <__subdf3+0x814>
 2007020:	01c01004 	movi	r7,64
 2007024:	3885c83a 	sub	r2,r7,r2
 2007028:	1884983a 	sll	r2,r3,r2
 200702c:	118cb03a 	or	r6,r2,r6
 2007030:	300ec03a 	cmpne	r7,r6,zero
 2007034:	390eb03a 	or	r7,r7,r4
 2007038:	0005883a 	mov	r2,zero
 200703c:	003f0906 	br	2006c64 <__alt_mem_onchip_memory2_0+0xfdff6c64>
 2007040:	0101ffc4 	movi	r4,2047
 2007044:	513f991e 	bne	r10,r4,2006eac <__alt_mem_onchip_memory2_0+0xfdff6eac>
 2007048:	180b883a 	mov	r5,r3
 200704c:	3023883a 	mov	r17,r6
 2007050:	5021883a 	mov	r16,r10
 2007054:	3825883a 	mov	r18,r7
 2007058:	003e8d06 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 200705c:	80001a1e 	bne	r16,zero,20070c8 <__subdf3+0x6c4>
 2007060:	2c48b03a 	or	r4,r5,r17
 2007064:	20005526 	beq	r4,zero,20071bc <__subdf3+0x7b8>
 2007068:	0084303a 	nor	r2,zero,r2
 200706c:	1000511e 	bne	r2,zero,20071b4 <__subdf3+0x7b0>
 2007070:	89a3883a 	add	r17,r17,r6
 2007074:	194b883a 	add	r5,r3,r5
 2007078:	898d803a 	cmpltu	r6,r17,r6
 200707c:	298b883a 	add	r5,r5,r6
 2007080:	5021883a 	mov	r16,r10
 2007084:	003efc06 	br	2006c78 <__alt_mem_onchip_memory2_0+0xfdff6c78>
 2007088:	1000341e 	bne	r2,zero,200715c <__subdf3+0x758>
 200708c:	1984b03a 	or	r2,r3,r6
 2007090:	10006f26 	beq	r2,zero,2007250 <__subdf3+0x84c>
 2007094:	180b883a 	mov	r5,r3
 2007098:	3023883a 	mov	r17,r6
 200709c:	3825883a 	mov	r18,r7
 20070a0:	0401ffc4 	movi	r16,2047
 20070a4:	003e7a06 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 20070a8:	2c62b03a 	or	r17,r5,r17
 20070ac:	8822c03a 	cmpne	r17,r17,zero
 20070b0:	0005883a 	mov	r2,zero
 20070b4:	003f8a06 	br	2006ee0 <__alt_mem_onchip_memory2_0+0xfdff6ee0>
 20070b8:	3821883a 	mov	r16,r7
 20070bc:	000b883a 	mov	r5,zero
 20070c0:	0023883a 	mov	r17,zero
 20070c4:	003ed206 	br	2006c10 <__alt_mem_onchip_memory2_0+0xfdff6c10>
 20070c8:	0101ffc4 	movi	r4,2047
 20070cc:	51003b26 	beq	r10,r4,20071bc <__subdf3+0x7b8>
 20070d0:	0085c83a 	sub	r2,zero,r2
 20070d4:	29402034 	orhi	r5,r5,128
 20070d8:	01000e04 	movi	r4,56
 20070dc:	20806216 	blt	r4,r2,2007268 <__subdf3+0x864>
 20070e0:	010007c4 	movi	r4,31
 20070e4:	20806b16 	blt	r4,r2,2007294 <__subdf3+0x890>
 20070e8:	01000804 	movi	r4,32
 20070ec:	2089c83a 	sub	r4,r4,r2
 20070f0:	2912983a 	sll	r9,r5,r4
 20070f4:	888ed83a 	srl	r7,r17,r2
 20070f8:	8908983a 	sll	r4,r17,r4
 20070fc:	2884d83a 	srl	r2,r5,r2
 2007100:	49e2b03a 	or	r17,r9,r7
 2007104:	2008c03a 	cmpne	r4,r4,zero
 2007108:	8922b03a 	or	r17,r17,r4
 200710c:	89a3883a 	add	r17,r17,r6
 2007110:	10c5883a 	add	r2,r2,r3
 2007114:	898d803a 	cmpltu	r6,r17,r6
 2007118:	118b883a 	add	r5,r2,r6
 200711c:	5021883a 	mov	r16,r10
 2007120:	003ed506 	br	2006c78 <__alt_mem_onchip_memory2_0+0xfdff6c78>
 2007124:	1984b03a 	or	r2,r3,r6
 2007128:	103e5926 	beq	r2,zero,2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 200712c:	8989c83a 	sub	r4,r17,r6
 2007130:	8911803a 	cmpltu	r8,r17,r4
 2007134:	28c5c83a 	sub	r2,r5,r3
 2007138:	1205c83a 	sub	r2,r2,r8
 200713c:	1200202c 	andhi	r8,r2,128
 2007140:	403ef926 	beq	r8,zero,2006d28 <__alt_mem_onchip_memory2_0+0xfdff6d28>
 2007144:	3463c83a 	sub	r17,r6,r17
 2007148:	194bc83a 	sub	r5,r3,r5
 200714c:	344d803a 	cmpltu	r6,r6,r17
 2007150:	298bc83a 	sub	r5,r5,r6
 2007154:	3825883a 	mov	r18,r7
 2007158:	003e4d06 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 200715c:	1984b03a 	or	r2,r3,r6
 2007160:	10002b26 	beq	r2,zero,2007210 <__subdf3+0x80c>
 2007164:	2808d0fa 	srli	r4,r5,3
 2007168:	8822d0fa 	srli	r17,r17,3
 200716c:	280a977a 	slli	r5,r5,29
 2007170:	2080022c 	andhi	r2,r4,8
 2007174:	2c62b03a 	or	r17,r5,r17
 2007178:	10000826 	beq	r2,zero,200719c <__subdf3+0x798>
 200717c:	1810d0fa 	srli	r8,r3,3
 2007180:	4080022c 	andhi	r2,r8,8
 2007184:	1000051e 	bne	r2,zero,200719c <__subdf3+0x798>
 2007188:	300cd0fa 	srli	r6,r6,3
 200718c:	1804977a 	slli	r2,r3,29
 2007190:	4009883a 	mov	r4,r8
 2007194:	3825883a 	mov	r18,r7
 2007198:	11a2b03a 	or	r17,r2,r6
 200719c:	880ad77a 	srli	r5,r17,29
 20071a0:	200890fa 	slli	r4,r4,3
 20071a4:	882290fa 	slli	r17,r17,3
 20071a8:	0401ffc4 	movi	r16,2047
 20071ac:	290ab03a 	or	r5,r5,r4
 20071b0:	003e3706 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 20071b4:	0101ffc4 	movi	r4,2047
 20071b8:	513fc71e 	bne	r10,r4,20070d8 <__alt_mem_onchip_memory2_0+0xfdff70d8>
 20071bc:	180b883a 	mov	r5,r3
 20071c0:	3023883a 	mov	r17,r6
 20071c4:	5021883a 	mov	r16,r10
 20071c8:	003e3106 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 20071cc:	10002d26 	beq	r2,zero,2007284 <__subdf3+0x880>
 20071d0:	1984b03a 	or	r2,r3,r6
 20071d4:	10000e26 	beq	r2,zero,2007210 <__subdf3+0x80c>
 20071d8:	2808d0fa 	srli	r4,r5,3
 20071dc:	8822d0fa 	srli	r17,r17,3
 20071e0:	280a977a 	slli	r5,r5,29
 20071e4:	2080022c 	andhi	r2,r4,8
 20071e8:	2c62b03a 	or	r17,r5,r17
 20071ec:	103feb26 	beq	r2,zero,200719c <__alt_mem_onchip_memory2_0+0xfdff719c>
 20071f0:	180ed0fa 	srli	r7,r3,3
 20071f4:	3880022c 	andhi	r2,r7,8
 20071f8:	103fe81e 	bne	r2,zero,200719c <__alt_mem_onchip_memory2_0+0xfdff719c>
 20071fc:	300cd0fa 	srli	r6,r6,3
 2007200:	1804977a 	slli	r2,r3,29
 2007204:	3809883a 	mov	r4,r7
 2007208:	11a2b03a 	or	r17,r2,r6
 200720c:	003fe306 	br	200719c <__alt_mem_onchip_memory2_0+0xfdff719c>
 2007210:	0401ffc4 	movi	r16,2047
 2007214:	003e1e06 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2007218:	0005883a 	mov	r2,zero
 200721c:	003f8306 	br	200702c <__alt_mem_onchip_memory2_0+0xfdff702c>
 2007220:	113ff804 	addi	r4,r2,-32
 2007224:	02000804 	movi	r8,32
 2007228:	2908d83a 	srl	r4,r5,r4
 200722c:	12002526 	beq	r2,r8,20072c4 <__subdf3+0x8c0>
 2007230:	02001004 	movi	r8,64
 2007234:	4085c83a 	sub	r2,r8,r2
 2007238:	288a983a 	sll	r5,r5,r2
 200723c:	2c62b03a 	or	r17,r5,r17
 2007240:	8822c03a 	cmpne	r17,r17,zero
 2007244:	8922b03a 	or	r17,r17,r4
 2007248:	0005883a 	mov	r2,zero
 200724c:	003f2406 	br	2006ee0 <__alt_mem_onchip_memory2_0+0xfdff6ee0>
 2007250:	01402034 	movhi	r5,128
 2007254:	0011883a 	mov	r8,zero
 2007258:	297fffc4 	addi	r5,r5,-1
 200725c:	047ffe04 	movi	r17,-8
 2007260:	0401ffc4 	movi	r16,2047
 2007264:	003e6a06 	br	2006c10 <__alt_mem_onchip_memory2_0+0xfdff6c10>
 2007268:	2c62b03a 	or	r17,r5,r17
 200726c:	8822c03a 	cmpne	r17,r17,zero
 2007270:	0005883a 	mov	r2,zero
 2007274:	003fa506 	br	200710c <__alt_mem_onchip_memory2_0+0xfdff710c>
 2007278:	180b883a 	mov	r5,r3
 200727c:	3023883a 	mov	r17,r6
 2007280:	003e0306 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2007284:	180b883a 	mov	r5,r3
 2007288:	3023883a 	mov	r17,r6
 200728c:	0401ffc4 	movi	r16,2047
 2007290:	003dff06 	br	2006a90 <__alt_mem_onchip_memory2_0+0xfdff6a90>
 2007294:	113ff804 	addi	r4,r2,-32
 2007298:	01c00804 	movi	r7,32
 200729c:	2908d83a 	srl	r4,r5,r4
 20072a0:	11c00a26 	beq	r2,r7,20072cc <__subdf3+0x8c8>
 20072a4:	01c01004 	movi	r7,64
 20072a8:	3885c83a 	sub	r2,r7,r2
 20072ac:	288a983a 	sll	r5,r5,r2
 20072b0:	2c62b03a 	or	r17,r5,r17
 20072b4:	8822c03a 	cmpne	r17,r17,zero
 20072b8:	8922b03a 	or	r17,r17,r4
 20072bc:	0005883a 	mov	r2,zero
 20072c0:	003f9206 	br	200710c <__alt_mem_onchip_memory2_0+0xfdff710c>
 20072c4:	000b883a 	mov	r5,zero
 20072c8:	003fdc06 	br	200723c <__alt_mem_onchip_memory2_0+0xfdff723c>
 20072cc:	000b883a 	mov	r5,zero
 20072d0:	003ff706 	br	20072b0 <__alt_mem_onchip_memory2_0+0xfdff72b0>

020072d4 <__fixdfsi>:
 20072d4:	2806d53a 	srli	r3,r5,20
 20072d8:	00800434 	movhi	r2,16
 20072dc:	10bfffc4 	addi	r2,r2,-1
 20072e0:	18c1ffcc 	andi	r3,r3,2047
 20072e4:	0180ff84 	movi	r6,1022
 20072e8:	2884703a 	and	r2,r5,r2
 20072ec:	280ad7fa 	srli	r5,r5,31
 20072f0:	30c0130e 	bge	r6,r3,2007340 <__fixdfsi+0x6c>
 20072f4:	01810744 	movi	r6,1053
 20072f8:	30c00d16 	blt	r6,r3,2007330 <__fixdfsi+0x5c>
 20072fc:	01810cc4 	movi	r6,1075
 2007300:	30cdc83a 	sub	r6,r6,r3
 2007304:	01c007c4 	movi	r7,31
 2007308:	10800434 	orhi	r2,r2,16
 200730c:	39800e0e 	bge	r7,r6,2007348 <__fixdfsi+0x74>
 2007310:	010104c4 	movi	r4,1043
 2007314:	20c7c83a 	sub	r3,r4,r3
 2007318:	10c6d83a 	srl	r3,r2,r3
 200731c:	29403fcc 	andi	r5,r5,255
 2007320:	0145c83a 	sub	r2,zero,r5
 2007324:	1884f03a 	xor	r2,r3,r2
 2007328:	1145883a 	add	r2,r2,r5
 200732c:	f800283a 	ret
 2007330:	00a00034 	movhi	r2,32768
 2007334:	10bfffc4 	addi	r2,r2,-1
 2007338:	2885883a 	add	r2,r5,r2
 200733c:	f800283a 	ret
 2007340:	0005883a 	mov	r2,zero
 2007344:	f800283a 	ret
 2007348:	18fefb44 	addi	r3,r3,-1043
 200734c:	2188d83a 	srl	r4,r4,r6
 2007350:	10c6983a 	sll	r3,r2,r3
 2007354:	20c6b03a 	or	r3,r4,r3
 2007358:	003ff006 	br	200731c <__alt_mem_onchip_memory2_0+0xfdff731c>

0200735c <__floatsidf>:
 200735c:	defffd04 	addi	sp,sp,-12
 2007360:	dc400115 	stw	r17,4(sp)
 2007364:	dfc00215 	stw	ra,8(sp)
 2007368:	dc000015 	stw	r16,0(sp)
 200736c:	2023883a 	mov	r17,r4
 2007370:	20001426 	beq	r4,zero,20073c4 <__floatsidf+0x68>
 2007374:	2020d7fa 	srli	r16,r4,31
 2007378:	80000126 	beq	r16,zero,2007380 <__floatsidf+0x24>
 200737c:	0123c83a 	sub	r17,zero,r4
 2007380:	8809883a 	mov	r4,r17
 2007384:	20076d40 	call	20076d4 <__clzsi2>
 2007388:	01410784 	movi	r5,1054
 200738c:	00c00284 	movi	r3,10
 2007390:	288bc83a 	sub	r5,r5,r2
 2007394:	18801c16 	blt	r3,r2,2007408 <__floatsidf+0xac>
 2007398:	00c002c4 	movi	r3,11
 200739c:	1887c83a 	sub	r3,r3,r2
 20073a0:	88c8d83a 	srl	r4,r17,r3
 20073a4:	00c00434 	movhi	r3,16
 20073a8:	18ffffc4 	addi	r3,r3,-1
 20073ac:	10800544 	addi	r2,r2,21
 20073b0:	20c8703a 	and	r4,r4,r3
 20073b4:	8884983a 	sll	r2,r17,r2
 20073b8:	28c1ffcc 	andi	r3,r5,2047
 20073bc:	800d883a 	mov	r6,r16
 20073c0:	00000406 	br	20073d4 <__floatsidf+0x78>
 20073c4:	000d883a 	mov	r6,zero
 20073c8:	0007883a 	mov	r3,zero
 20073cc:	0009883a 	mov	r4,zero
 20073d0:	0005883a 	mov	r2,zero
 20073d4:	180a953a 	slli	r5,r3,20
 20073d8:	31803fcc 	andi	r6,r6,255
 20073dc:	00c00434 	movhi	r3,16
 20073e0:	300c97fa 	slli	r6,r6,31
 20073e4:	18ffffc4 	addi	r3,r3,-1
 20073e8:	20c6703a 	and	r3,r4,r3
 20073ec:	1946b03a 	or	r3,r3,r5
 20073f0:	1986b03a 	or	r3,r3,r6
 20073f4:	dfc00217 	ldw	ra,8(sp)
 20073f8:	dc400117 	ldw	r17,4(sp)
 20073fc:	dc000017 	ldw	r16,0(sp)
 2007400:	dec00304 	addi	sp,sp,12
 2007404:	f800283a 	ret
 2007408:	10fffd44 	addi	r3,r2,-11
 200740c:	88c8983a 	sll	r4,r17,r3
 2007410:	00800434 	movhi	r2,16
 2007414:	10bfffc4 	addi	r2,r2,-1
 2007418:	2088703a 	and	r4,r4,r2
 200741c:	28c1ffcc 	andi	r3,r5,2047
 2007420:	800d883a 	mov	r6,r16
 2007424:	0005883a 	mov	r2,zero
 2007428:	003fea06 	br	20073d4 <__alt_mem_onchip_memory2_0+0xfdff73d4>

0200742c <__extendsfdf2>:
 200742c:	200ad5fa 	srli	r5,r4,23
 2007430:	defffd04 	addi	sp,sp,-12
 2007434:	dc400115 	stw	r17,4(sp)
 2007438:	29403fcc 	andi	r5,r5,255
 200743c:	29800044 	addi	r6,r5,1
 2007440:	04402034 	movhi	r17,128
 2007444:	dc000015 	stw	r16,0(sp)
 2007448:	8c7fffc4 	addi	r17,r17,-1
 200744c:	dfc00215 	stw	ra,8(sp)
 2007450:	31803fcc 	andi	r6,r6,255
 2007454:	00800044 	movi	r2,1
 2007458:	8922703a 	and	r17,r17,r4
 200745c:	2020d7fa 	srli	r16,r4,31
 2007460:	1180110e 	bge	r2,r6,20074a8 <__extendsfdf2+0x7c>
 2007464:	880ed0fa 	srli	r7,r17,3
 2007468:	8822977a 	slli	r17,r17,29
 200746c:	2940e004 	addi	r5,r5,896
 2007470:	2941ffcc 	andi	r5,r5,2047
 2007474:	280c953a 	slli	r6,r5,20
 2007478:	01400434 	movhi	r5,16
 200747c:	800697fa 	slli	r3,r16,31
 2007480:	297fffc4 	addi	r5,r5,-1
 2007484:	394a703a 	and	r5,r7,r5
 2007488:	298ab03a 	or	r5,r5,r6
 200748c:	8805883a 	mov	r2,r17
 2007490:	28c6b03a 	or	r3,r5,r3
 2007494:	dfc00217 	ldw	ra,8(sp)
 2007498:	dc400117 	ldw	r17,4(sp)
 200749c:	dc000017 	ldw	r16,0(sp)
 20074a0:	dec00304 	addi	sp,sp,12
 20074a4:	f800283a 	ret
 20074a8:	2800111e 	bne	r5,zero,20074f0 <__extendsfdf2+0xc4>
 20074ac:	88001c26 	beq	r17,zero,2007520 <__extendsfdf2+0xf4>
 20074b0:	8809883a 	mov	r4,r17
 20074b4:	20076d40 	call	20076d4 <__clzsi2>
 20074b8:	00c00284 	movi	r3,10
 20074bc:	18801b16 	blt	r3,r2,200752c <__extendsfdf2+0x100>
 20074c0:	01c002c4 	movi	r7,11
 20074c4:	388fc83a 	sub	r7,r7,r2
 20074c8:	10c00544 	addi	r3,r2,21
 20074cc:	89ced83a 	srl	r7,r17,r7
 20074d0:	88e2983a 	sll	r17,r17,r3
 20074d4:	0180e244 	movi	r6,905
 20074d8:	308bc83a 	sub	r5,r6,r2
 20074dc:	01800434 	movhi	r6,16
 20074e0:	31bfffc4 	addi	r6,r6,-1
 20074e4:	398e703a 	and	r7,r7,r6
 20074e8:	2941ffcc 	andi	r5,r5,2047
 20074ec:	003fe006 	br	2007470 <__alt_mem_onchip_memory2_0+0xfdff7470>
 20074f0:	88000826 	beq	r17,zero,2007514 <__extendsfdf2+0xe8>
 20074f4:	880ed0fa 	srli	r7,r17,3
 20074f8:	00800434 	movhi	r2,16
 20074fc:	10bfffc4 	addi	r2,r2,-1
 2007500:	39c00234 	orhi	r7,r7,8
 2007504:	8822977a 	slli	r17,r17,29
 2007508:	388e703a 	and	r7,r7,r2
 200750c:	0141ffc4 	movi	r5,2047
 2007510:	003fd706 	br	2007470 <__alt_mem_onchip_memory2_0+0xfdff7470>
 2007514:	0141ffc4 	movi	r5,2047
 2007518:	000f883a 	mov	r7,zero
 200751c:	003fd406 	br	2007470 <__alt_mem_onchip_memory2_0+0xfdff7470>
 2007520:	000b883a 	mov	r5,zero
 2007524:	000f883a 	mov	r7,zero
 2007528:	003fd106 	br	2007470 <__alt_mem_onchip_memory2_0+0xfdff7470>
 200752c:	11fffd44 	addi	r7,r2,-11
 2007530:	89ce983a 	sll	r7,r17,r7
 2007534:	0023883a 	mov	r17,zero
 2007538:	003fe606 	br	20074d4 <__alt_mem_onchip_memory2_0+0xfdff74d4>

0200753c <__truncdfsf2>:
 200753c:	2810d53a 	srli	r8,r5,20
 2007540:	01c00434 	movhi	r7,16
 2007544:	39ffffc4 	addi	r7,r7,-1
 2007548:	29ce703a 	and	r7,r5,r7
 200754c:	380e90fa 	slli	r7,r7,3
 2007550:	4201ffcc 	andi	r8,r8,2047
 2007554:	200cd77a 	srli	r6,r4,29
 2007558:	42400044 	addi	r9,r8,1
 200755c:	4a41ffcc 	andi	r9,r9,2047
 2007560:	00800044 	movi	r2,1
 2007564:	398cb03a 	or	r6,r7,r6
 2007568:	280ad7fa 	srli	r5,r5,31
 200756c:	200e90fa 	slli	r7,r4,3
 2007570:	1240230e 	bge	r2,r9,2007600 <__truncdfsf2+0xc4>
 2007574:	40ff2004 	addi	r3,r8,-896
 2007578:	00803f84 	movi	r2,254
 200757c:	10c01516 	blt	r2,r3,20075d4 <__truncdfsf2+0x98>
 2007580:	00c02d0e 	bge	zero,r3,2007638 <__truncdfsf2+0xfc>
 2007584:	200891ba 	slli	r4,r4,6
 2007588:	300c90fa 	slli	r6,r6,3
 200758c:	380ed77a 	srli	r7,r7,29
 2007590:	2008c03a 	cmpne	r4,r4,zero
 2007594:	310cb03a 	or	r6,r6,r4
 2007598:	31ccb03a 	or	r6,r6,r7
 200759c:	308001cc 	andi	r2,r6,7
 20075a0:	10000426 	beq	r2,zero,20075b4 <__truncdfsf2+0x78>
 20075a4:	310003cc 	andi	r4,r6,15
 20075a8:	00800104 	movi	r2,4
 20075ac:	20800126 	beq	r4,r2,20075b4 <__truncdfsf2+0x78>
 20075b0:	31800104 	addi	r6,r6,4
 20075b4:	3081002c 	andhi	r2,r6,1024
 20075b8:	10002326 	beq	r2,zero,2007648 <__truncdfsf2+0x10c>
 20075bc:	18c00044 	addi	r3,r3,1
 20075c0:	00803fc4 	movi	r2,255
 20075c4:	18800326 	beq	r3,r2,20075d4 <__truncdfsf2+0x98>
 20075c8:	300c91ba 	slli	r6,r6,6
 20075cc:	300cd27a 	srli	r6,r6,9
 20075d0:	00000206 	br	20075dc <__truncdfsf2+0xa0>
 20075d4:	00ffffc4 	movi	r3,-1
 20075d8:	000d883a 	mov	r6,zero
 20075dc:	18c03fcc 	andi	r3,r3,255
 20075e0:	180895fa 	slli	r4,r3,23
 20075e4:	00c02034 	movhi	r3,128
 20075e8:	280a97fa 	slli	r5,r5,31
 20075ec:	18ffffc4 	addi	r3,r3,-1
 20075f0:	30c6703a 	and	r3,r6,r3
 20075f4:	1906b03a 	or	r3,r3,r4
 20075f8:	1944b03a 	or	r2,r3,r5
 20075fc:	f800283a 	ret
 2007600:	4000071e 	bne	r8,zero,2007620 <__truncdfsf2+0xe4>
 2007604:	31ccb03a 	or	r6,r6,r7
 2007608:	30000d1e 	bne	r6,zero,2007640 <__truncdfsf2+0x104>
 200760c:	0007883a 	mov	r3,zero
 2007610:	00802034 	movhi	r2,128
 2007614:	10bfffc4 	addi	r2,r2,-1
 2007618:	308c703a 	and	r6,r6,r2
 200761c:	003fef06 	br	20075dc <__alt_mem_onchip_memory2_0+0xfdff75dc>
 2007620:	31c8b03a 	or	r4,r6,r7
 2007624:	203feb26 	beq	r4,zero,20075d4 <__alt_mem_onchip_memory2_0+0xfdff75d4>
 2007628:	300c90fa 	slli	r6,r6,3
 200762c:	00c03fc4 	movi	r3,255
 2007630:	31808034 	orhi	r6,r6,512
 2007634:	003fd906 	br	200759c <__alt_mem_onchip_memory2_0+0xfdff759c>
 2007638:	00bffa44 	movi	r2,-23
 200763c:	1880090e 	bge	r3,r2,2007664 <__truncdfsf2+0x128>
 2007640:	01800144 	movi	r6,5
 2007644:	0007883a 	mov	r3,zero
 2007648:	00803fc4 	movi	r2,255
 200764c:	300cd0fa 	srli	r6,r6,3
 2007650:	18bfef1e 	bne	r3,r2,2007610 <__alt_mem_onchip_memory2_0+0xfdff7610>
 2007654:	303fdf26 	beq	r6,zero,20075d4 <__alt_mem_onchip_memory2_0+0xfdff75d4>
 2007658:	31801034 	orhi	r6,r6,64
 200765c:	00ffffc4 	movi	r3,-1
 2007660:	003feb06 	br	2007610 <__alt_mem_onchip_memory2_0+0xfdff7610>
 2007664:	0080e784 	movi	r2,926
 2007668:	1205c83a 	sub	r2,r2,r8
 200766c:	00c007c4 	movi	r3,31
 2007670:	31802034 	orhi	r6,r6,128
 2007674:	18800916 	blt	r3,r2,200769c <__truncdfsf2+0x160>
 2007678:	423f2084 	addi	r8,r8,-894
 200767c:	3a06983a 	sll	r3,r7,r8
 2007680:	3210983a 	sll	r8,r6,r8
 2007684:	388ed83a 	srl	r7,r7,r2
 2007688:	180cc03a 	cmpne	r6,r3,zero
 200768c:	418cb03a 	or	r6,r8,r6
 2007690:	31ccb03a 	or	r6,r6,r7
 2007694:	0007883a 	mov	r3,zero
 2007698:	003fc006 	br	200759c <__alt_mem_onchip_memory2_0+0xfdff759c>
 200769c:	00c0df84 	movi	r3,894
 20076a0:	1a07c83a 	sub	r3,r3,r8
 20076a4:	01000804 	movi	r4,32
 20076a8:	30c6d83a 	srl	r3,r6,r3
 20076ac:	11000726 	beq	r2,r4,20076cc <__truncdfsf2+0x190>
 20076b0:	423f2884 	addi	r8,r8,-862
 20076b4:	3210983a 	sll	r8,r6,r8
 20076b8:	41ceb03a 	or	r7,r8,r7
 20076bc:	380ec03a 	cmpne	r7,r7,zero
 20076c0:	38ccb03a 	or	r6,r7,r3
 20076c4:	0007883a 	mov	r3,zero
 20076c8:	003fb406 	br	200759c <__alt_mem_onchip_memory2_0+0xfdff759c>
 20076cc:	0011883a 	mov	r8,zero
 20076d0:	003ff906 	br	20076b8 <__alt_mem_onchip_memory2_0+0xfdff76b8>

020076d4 <__clzsi2>:
 20076d4:	00bfffd4 	movui	r2,65535
 20076d8:	11000b36 	bltu	r2,r4,2007708 <__clzsi2+0x34>
 20076dc:	00803fc4 	movi	r2,255
 20076e0:	1100122e 	bgeu	r2,r4,200772c <__clzsi2+0x58>
 20076e4:	00c00204 	movi	r3,8
 20076e8:	01400604 	movi	r5,24
 20076ec:	20c8d83a 	srl	r4,r4,r3
 20076f0:	00808074 	movhi	r2,513
 20076f4:	10a69f04 	addi	r2,r2,-25988
 20076f8:	1109883a 	add	r4,r2,r4
 20076fc:	20800003 	ldbu	r2,0(r4)
 2007700:	2885c83a 	sub	r2,r5,r2
 2007704:	f800283a 	ret
 2007708:	00804034 	movhi	r2,256
 200770c:	10bfffc4 	addi	r2,r2,-1
 2007710:	11000336 	bltu	r2,r4,2007720 <__clzsi2+0x4c>
 2007714:	00c00404 	movi	r3,16
 2007718:	180b883a 	mov	r5,r3
 200771c:	003ff306 	br	20076ec <__alt_mem_onchip_memory2_0+0xfdff76ec>
 2007720:	00c00604 	movi	r3,24
 2007724:	01400204 	movi	r5,8
 2007728:	003ff006 	br	20076ec <__alt_mem_onchip_memory2_0+0xfdff76ec>
 200772c:	0007883a 	mov	r3,zero
 2007730:	01400804 	movi	r5,32
 2007734:	003fed06 	br	20076ec <__alt_mem_onchip_memory2_0+0xfdff76ec>

02007738 <__errno>:
 2007738:	00808074 	movhi	r2,513
 200773c:	10a81b04 	addi	r2,r2,-24468
 2007740:	10800017 	ldw	r2,0(r2)
 2007744:	f800283a 	ret

02007748 <malloc>:
 2007748:	00808074 	movhi	r2,513
 200774c:	10a81b04 	addi	r2,r2,-24468
 2007750:	200b883a 	mov	r5,r4
 2007754:	11000017 	ldw	r4,0(r2)
 2007758:	20077701 	jmpi	2007770 <_malloc_r>

0200775c <free>:
 200775c:	00808074 	movhi	r2,513
 2007760:	10a81b04 	addi	r2,r2,-24468
 2007764:	200b883a 	mov	r5,r4
 2007768:	11000017 	ldw	r4,0(r2)
 200776c:	20087841 	jmpi	2008784 <_free_r>

02007770 <_malloc_r>:
 2007770:	defff604 	addi	sp,sp,-40
 2007774:	dfc00915 	stw	ra,36(sp)
 2007778:	df000815 	stw	fp,32(sp)
 200777c:	ddc00715 	stw	r23,28(sp)
 2007780:	dd800615 	stw	r22,24(sp)
 2007784:	dd400515 	stw	r21,20(sp)
 2007788:	dd000415 	stw	r20,16(sp)
 200778c:	dcc00315 	stw	r19,12(sp)
 2007790:	dc800215 	stw	r18,8(sp)
 2007794:	dc400115 	stw	r17,4(sp)
 2007798:	dc000015 	stw	r16,0(sp)
 200779c:	288002c4 	addi	r2,r5,11
 20077a0:	00c00584 	movi	r3,22
 20077a4:	1880042e 	bgeu	r3,r2,20077b8 <_malloc_r+0x48>
 20077a8:	047ffe04 	movi	r17,-8
 20077ac:	1462703a 	and	r17,r2,r17
 20077b0:	8800020e 	bge	r17,zero,20077bc <_malloc_r+0x4c>
 20077b4:	00000206 	br	20077c0 <_malloc_r+0x50>
 20077b8:	04400404 	movi	r17,16
 20077bc:	8940032e 	bgeu	r17,r5,20077cc <_malloc_r+0x5c>
 20077c0:	00800304 	movi	r2,12
 20077c4:	20800015 	stw	r2,0(r4)
 20077c8:	00017206 	br	2007d94 <_malloc_r+0x624>
 20077cc:	2027883a 	mov	r19,r4
 20077d0:	2008ee00 	call	2008ee0 <__malloc_lock>
 20077d4:	04808074 	movhi	r18,513
 20077d8:	00807dc4 	movi	r2,503
 20077dc:	94a71704 	addi	r18,r18,-25508
 20077e0:	14401536 	bltu	r2,r17,2007838 <_malloc_r+0xc8>
 20077e4:	8804d0fa 	srli	r2,r17,3
 20077e8:	1087883a 	add	r3,r2,r2
 20077ec:	18c7883a 	add	r3,r3,r3
 20077f0:	18c7883a 	add	r3,r3,r3
 20077f4:	90c7883a 	add	r3,r18,r3
 20077f8:	1c000317 	ldw	r16,12(r3)
 20077fc:	80c0031e 	bne	r16,r3,200780c <_malloc_r+0x9c>
 2007800:	80c00204 	addi	r3,r16,8
 2007804:	84000517 	ldw	r16,20(r16)
 2007808:	80c00926 	beq	r16,r3,2007830 <_malloc_r+0xc0>
 200780c:	80c00117 	ldw	r3,4(r16)
 2007810:	00bfff04 	movi	r2,-4
 2007814:	81000217 	ldw	r4,8(r16)
 2007818:	1884703a 	and	r2,r3,r2
 200781c:	80c00317 	ldw	r3,12(r16)
 2007820:	8085883a 	add	r2,r16,r2
 2007824:	20c00315 	stw	r3,12(r4)
 2007828:	19000215 	stw	r4,8(r3)
 200782c:	00002d06 	br	20078e4 <_malloc_r+0x174>
 2007830:	10800084 	addi	r2,r2,2
 2007834:	00003506 	br	200790c <_malloc_r+0x19c>
 2007838:	8804d27a 	srli	r2,r17,9
 200783c:	10001826 	beq	r2,zero,20078a0 <_malloc_r+0x130>
 2007840:	00c00104 	movi	r3,4
 2007844:	18800336 	bltu	r3,r2,2007854 <_malloc_r+0xe4>
 2007848:	8804d1ba 	srli	r2,r17,6
 200784c:	10800e04 	addi	r2,r2,56
 2007850:	00001606 	br	20078ac <_malloc_r+0x13c>
 2007854:	00c00504 	movi	r3,20
 2007858:	18800236 	bltu	r3,r2,2007864 <_malloc_r+0xf4>
 200785c:	108016c4 	addi	r2,r2,91
 2007860:	00001206 	br	20078ac <_malloc_r+0x13c>
 2007864:	00c01504 	movi	r3,84
 2007868:	18800336 	bltu	r3,r2,2007878 <_malloc_r+0x108>
 200786c:	8804d33a 	srli	r2,r17,12
 2007870:	10801b84 	addi	r2,r2,110
 2007874:	00000d06 	br	20078ac <_malloc_r+0x13c>
 2007878:	00c05504 	movi	r3,340
 200787c:	18800336 	bltu	r3,r2,200788c <_malloc_r+0x11c>
 2007880:	8804d3fa 	srli	r2,r17,15
 2007884:	10801dc4 	addi	r2,r2,119
 2007888:	00000806 	br	20078ac <_malloc_r+0x13c>
 200788c:	00c15504 	movi	r3,1364
 2007890:	18800536 	bltu	r3,r2,20078a8 <_malloc_r+0x138>
 2007894:	8804d4ba 	srli	r2,r17,18
 2007898:	10801f04 	addi	r2,r2,124
 200789c:	00000306 	br	20078ac <_malloc_r+0x13c>
 20078a0:	00800fc4 	movi	r2,63
 20078a4:	00000106 	br	20078ac <_malloc_r+0x13c>
 20078a8:	00801f84 	movi	r2,126
 20078ac:	1087883a 	add	r3,r2,r2
 20078b0:	18c7883a 	add	r3,r3,r3
 20078b4:	18c7883a 	add	r3,r3,r3
 20078b8:	90c7883a 	add	r3,r18,r3
 20078bc:	1c000317 	ldw	r16,12(r3)
 20078c0:	01bfff04 	movi	r6,-4
 20078c4:	01c003c4 	movi	r7,15
 20078c8:	00000906 	br	20078f0 <_malloc_r+0x180>
 20078cc:	28000716 	blt	r5,zero,20078ec <_malloc_r+0x17c>
 20078d0:	80800317 	ldw	r2,12(r16)
 20078d4:	80c00217 	ldw	r3,8(r16)
 20078d8:	18800315 	stw	r2,12(r3)
 20078dc:	10c00215 	stw	r3,8(r2)
 20078e0:	8105883a 	add	r2,r16,r4
 20078e4:	10c00117 	ldw	r3,4(r2)
 20078e8:	00013106 	br	2007db0 <_malloc_r+0x640>
 20078ec:	84000317 	ldw	r16,12(r16)
 20078f0:	80c00526 	beq	r16,r3,2007908 <_malloc_r+0x198>
 20078f4:	81000117 	ldw	r4,4(r16)
 20078f8:	2188703a 	and	r4,r4,r6
 20078fc:	244bc83a 	sub	r5,r4,r17
 2007900:	397ff20e 	bge	r7,r5,20078cc <__alt_mem_onchip_memory2_0+0xfdff78cc>
 2007904:	10bfffc4 	addi	r2,r2,-1
 2007908:	10800044 	addi	r2,r2,1
 200790c:	01008074 	movhi	r4,513
 2007910:	94000417 	ldw	r16,16(r18)
 2007914:	21271704 	addi	r4,r4,-25508
 2007918:	21800204 	addi	r6,r4,8
 200791c:	81805c26 	beq	r16,r6,2007a90 <_malloc_r+0x320>
 2007920:	81400117 	ldw	r5,4(r16)
 2007924:	00ffff04 	movi	r3,-4
 2007928:	01c003c4 	movi	r7,15
 200792c:	28c6703a 	and	r3,r5,r3
 2007930:	1c4bc83a 	sub	r5,r3,r17
 2007934:	3940060e 	bge	r7,r5,2007950 <_malloc_r+0x1e0>
 2007938:	88800054 	ori	r2,r17,1
 200793c:	8447883a 	add	r3,r16,r17
 2007940:	80800115 	stw	r2,4(r16)
 2007944:	20c00515 	stw	r3,20(r4)
 2007948:	20c00415 	stw	r3,16(r4)
 200794c:	00007706 	br	2007b2c <_malloc_r+0x3bc>
 2007950:	21800515 	stw	r6,20(r4)
 2007954:	21800415 	stw	r6,16(r4)
 2007958:	28000516 	blt	r5,zero,2007970 <_malloc_r+0x200>
 200795c:	80c7883a 	add	r3,r16,r3
 2007960:	18800117 	ldw	r2,4(r3)
 2007964:	10800054 	ori	r2,r2,1
 2007968:	18800115 	stw	r2,4(r3)
 200796c:	00011206 	br	2007db8 <_malloc_r+0x648>
 2007970:	01407fc4 	movi	r5,511
 2007974:	28c01136 	bltu	r5,r3,20079bc <_malloc_r+0x24c>
 2007978:	1806d0fa 	srli	r3,r3,3
 200797c:	01400044 	movi	r5,1
 2007980:	180fd0ba 	srai	r7,r3,2
 2007984:	18c7883a 	add	r3,r3,r3
 2007988:	18c7883a 	add	r3,r3,r3
 200798c:	29ce983a 	sll	r7,r5,r7
 2007990:	21400117 	ldw	r5,4(r4)
 2007994:	18c7883a 	add	r3,r3,r3
 2007998:	394ab03a 	or	r5,r7,r5
 200799c:	21400115 	stw	r5,4(r4)
 20079a0:	1909883a 	add	r4,r3,r4
 20079a4:	20c00217 	ldw	r3,8(r4)
 20079a8:	81000315 	stw	r4,12(r16)
 20079ac:	80c00215 	stw	r3,8(r16)
 20079b0:	24000215 	stw	r16,8(r4)
 20079b4:	1c000315 	stw	r16,12(r3)
 20079b8:	00003506 	br	2007a90 <_malloc_r+0x320>
 20079bc:	180ad27a 	srli	r5,r3,9
 20079c0:	01000104 	movi	r4,4
 20079c4:	21400336 	bltu	r4,r5,20079d4 <_malloc_r+0x264>
 20079c8:	180ad1ba 	srli	r5,r3,6
 20079cc:	29400e04 	addi	r5,r5,56
 20079d0:	00001406 	br	2007a24 <_malloc_r+0x2b4>
 20079d4:	01000504 	movi	r4,20
 20079d8:	21400236 	bltu	r4,r5,20079e4 <_malloc_r+0x274>
 20079dc:	294016c4 	addi	r5,r5,91
 20079e0:	00001006 	br	2007a24 <_malloc_r+0x2b4>
 20079e4:	01001504 	movi	r4,84
 20079e8:	21400336 	bltu	r4,r5,20079f8 <_malloc_r+0x288>
 20079ec:	180ad33a 	srli	r5,r3,12
 20079f0:	29401b84 	addi	r5,r5,110
 20079f4:	00000b06 	br	2007a24 <_malloc_r+0x2b4>
 20079f8:	01005504 	movi	r4,340
 20079fc:	21400336 	bltu	r4,r5,2007a0c <_malloc_r+0x29c>
 2007a00:	180ad3fa 	srli	r5,r3,15
 2007a04:	29401dc4 	addi	r5,r5,119
 2007a08:	00000606 	br	2007a24 <_malloc_r+0x2b4>
 2007a0c:	01015504 	movi	r4,1364
 2007a10:	21400336 	bltu	r4,r5,2007a20 <_malloc_r+0x2b0>
 2007a14:	180ad4ba 	srli	r5,r3,18
 2007a18:	29401f04 	addi	r5,r5,124
 2007a1c:	00000106 	br	2007a24 <_malloc_r+0x2b4>
 2007a20:	01401f84 	movi	r5,126
 2007a24:	2949883a 	add	r4,r5,r5
 2007a28:	2109883a 	add	r4,r4,r4
 2007a2c:	2109883a 	add	r4,r4,r4
 2007a30:	9109883a 	add	r4,r18,r4
 2007a34:	21c00217 	ldw	r7,8(r4)
 2007a38:	02008074 	movhi	r8,513
 2007a3c:	42271704 	addi	r8,r8,-25508
 2007a40:	3900081e 	bne	r7,r4,2007a64 <_malloc_r+0x2f4>
 2007a44:	280bd0ba 	srai	r5,r5,2
 2007a48:	00c00044 	movi	r3,1
 2007a4c:	194a983a 	sll	r5,r3,r5
 2007a50:	40c00117 	ldw	r3,4(r8)
 2007a54:	28cab03a 	or	r5,r5,r3
 2007a58:	41400115 	stw	r5,4(r8)
 2007a5c:	3807883a 	mov	r3,r7
 2007a60:	00000706 	br	2007a80 <_malloc_r+0x310>
 2007a64:	023fff04 	movi	r8,-4
 2007a68:	39400117 	ldw	r5,4(r7)
 2007a6c:	2a0a703a 	and	r5,r5,r8
 2007a70:	1940022e 	bgeu	r3,r5,2007a7c <_malloc_r+0x30c>
 2007a74:	39c00217 	ldw	r7,8(r7)
 2007a78:	393ffb1e 	bne	r7,r4,2007a68 <__alt_mem_onchip_memory2_0+0xfdff7a68>
 2007a7c:	38c00317 	ldw	r3,12(r7)
 2007a80:	80c00315 	stw	r3,12(r16)
 2007a84:	81c00215 	stw	r7,8(r16)
 2007a88:	1c000215 	stw	r16,8(r3)
 2007a8c:	3c000315 	stw	r16,12(r7)
 2007a90:	1007d0ba 	srai	r3,r2,2
 2007a94:	02000044 	movi	r8,1
 2007a98:	40d0983a 	sll	r8,r8,r3
 2007a9c:	90c00117 	ldw	r3,4(r18)
 2007aa0:	1a004d36 	bltu	r3,r8,2007bd8 <_malloc_r+0x468>
 2007aa4:	40c8703a 	and	r4,r8,r3
 2007aa8:	2000061e 	bne	r4,zero,2007ac4 <_malloc_r+0x354>
 2007aac:	013fff04 	movi	r4,-4
 2007ab0:	1104703a 	and	r2,r2,r4
 2007ab4:	4211883a 	add	r8,r8,r8
 2007ab8:	40c8703a 	and	r4,r8,r3
 2007abc:	10800104 	addi	r2,r2,4
 2007ac0:	203ffc26 	beq	r4,zero,2007ab4 <__alt_mem_onchip_memory2_0+0xfdff7ab4>
 2007ac4:	02bfff04 	movi	r10,-4
 2007ac8:	02c003c4 	movi	r11,15
 2007acc:	1087883a 	add	r3,r2,r2
 2007ad0:	18c7883a 	add	r3,r3,r3
 2007ad4:	18c7883a 	add	r3,r3,r3
 2007ad8:	90c7883a 	add	r3,r18,r3
 2007adc:	19c00304 	addi	r7,r3,12
 2007ae0:	1013883a 	mov	r9,r2
 2007ae4:	3b3ffd04 	addi	r12,r7,-12
 2007ae8:	3c000017 	ldw	r16,0(r7)
 2007aec:	00000106 	br	2007af4 <_malloc_r+0x384>
 2007af0:	84000317 	ldw	r16,12(r16)
 2007af4:	83001e26 	beq	r16,r12,2007b70 <_malloc_r+0x400>
 2007af8:	81000117 	ldw	r4,4(r16)
 2007afc:	2288703a 	and	r4,r4,r10
 2007b00:	244bc83a 	sub	r5,r4,r17
 2007b04:	5940100e 	bge	r11,r5,2007b48 <_malloc_r+0x3d8>
 2007b08:	88800054 	ori	r2,r17,1
 2007b0c:	80800115 	stw	r2,4(r16)
 2007b10:	81000217 	ldw	r4,8(r16)
 2007b14:	80800317 	ldw	r2,12(r16)
 2007b18:	8447883a 	add	r3,r16,r17
 2007b1c:	20800315 	stw	r2,12(r4)
 2007b20:	11000215 	stw	r4,8(r2)
 2007b24:	90c00515 	stw	r3,20(r18)
 2007b28:	90c00415 	stw	r3,16(r18)
 2007b2c:	28800054 	ori	r2,r5,1
 2007b30:	19800315 	stw	r6,12(r3)
 2007b34:	19800215 	stw	r6,8(r3)
 2007b38:	18800115 	stw	r2,4(r3)
 2007b3c:	1947883a 	add	r3,r3,r5
 2007b40:	19400015 	stw	r5,0(r3)
 2007b44:	00009c06 	br	2007db8 <_malloc_r+0x648>
 2007b48:	283fe916 	blt	r5,zero,2007af0 <__alt_mem_onchip_memory2_0+0xfdff7af0>
 2007b4c:	8105883a 	add	r2,r16,r4
 2007b50:	10c00117 	ldw	r3,4(r2)
 2007b54:	18c00054 	ori	r3,r3,1
 2007b58:	10c00115 	stw	r3,4(r2)
 2007b5c:	80800317 	ldw	r2,12(r16)
 2007b60:	80c00217 	ldw	r3,8(r16)
 2007b64:	18800315 	stw	r2,12(r3)
 2007b68:	10c00215 	stw	r3,8(r2)
 2007b6c:	00009206 	br	2007db8 <_malloc_r+0x648>
 2007b70:	4a400044 	addi	r9,r9,1
 2007b74:	490000cc 	andi	r4,r9,3
 2007b78:	39c00204 	addi	r7,r7,8
 2007b7c:	203fd91e 	bne	r4,zero,2007ae4 <__alt_mem_onchip_memory2_0+0xfdff7ae4>
 2007b80:	110000cc 	andi	r4,r2,3
 2007b84:	2000051e 	bne	r4,zero,2007b9c <_malloc_r+0x42c>
 2007b88:	90c00117 	ldw	r3,4(r18)
 2007b8c:	0204303a 	nor	r2,zero,r8
 2007b90:	10c4703a 	and	r2,r2,r3
 2007b94:	90800115 	stw	r2,4(r18)
 2007b98:	00000406 	br	2007bac <_malloc_r+0x43c>
 2007b9c:	193ffe04 	addi	r4,r3,-8
 2007ba0:	18c00017 	ldw	r3,0(r3)
 2007ba4:	10bfffc4 	addi	r2,r2,-1
 2007ba8:	193ff526 	beq	r3,r4,2007b80 <__alt_mem_onchip_memory2_0+0xfdff7b80>
 2007bac:	90800117 	ldw	r2,4(r18)
 2007bb0:	4211883a 	add	r8,r8,r8
 2007bb4:	12000836 	bltu	r2,r8,2007bd8 <_malloc_r+0x468>
 2007bb8:	40000726 	beq	r8,zero,2007bd8 <_malloc_r+0x468>
 2007bbc:	4086703a 	and	r3,r8,r2
 2007bc0:	1800031e 	bne	r3,zero,2007bd0 <_malloc_r+0x460>
 2007bc4:	4a400104 	addi	r9,r9,4
 2007bc8:	4211883a 	add	r8,r8,r8
 2007bcc:	003ffb06 	br	2007bbc <__alt_mem_onchip_memory2_0+0xfdff7bbc>
 2007bd0:	4805883a 	mov	r2,r9
 2007bd4:	003fbd06 	br	2007acc <__alt_mem_onchip_memory2_0+0xfdff7acc>
 2007bd8:	95c00217 	ldw	r23,8(r18)
 2007bdc:	00bfff04 	movi	r2,-4
 2007be0:	bd400117 	ldw	r21,4(r23)
 2007be4:	a8aa703a 	and	r21,r21,r2
 2007be8:	ac400336 	bltu	r21,r17,2007bf8 <_malloc_r+0x488>
 2007bec:	ac47c83a 	sub	r3,r21,r17
 2007bf0:	008003c4 	movi	r2,15
 2007bf4:	10c06916 	blt	r2,r3,2007d9c <_malloc_r+0x62c>
 2007bf8:	d0a15017 	ldw	r2,-31424(gp)
 2007bfc:	d0e00317 	ldw	r3,-32756(gp)
 2007c00:	05bfffc4 	movi	r22,-1
 2007c04:	bd61883a 	add	r16,r23,r21
 2007c08:	8885883a 	add	r2,r17,r2
 2007c0c:	1d80021e 	bne	r3,r22,2007c18 <_malloc_r+0x4a8>
 2007c10:	17000404 	addi	fp,r2,16
 2007c14:	00000306 	br	2007c24 <_malloc_r+0x4b4>
 2007c18:	108023c4 	addi	r2,r2,143
 2007c1c:	073fe004 	movi	fp,-128
 2007c20:	1738703a 	and	fp,r2,fp
 2007c24:	9809883a 	mov	r4,r19
 2007c28:	e00b883a 	mov	r5,fp
 2007c2c:	2007fa40 	call	2007fa4 <_sbrk_r>
 2007c30:	1029883a 	mov	r20,r2
 2007c34:	15804d26 	beq	r2,r22,2007d6c <_malloc_r+0x5fc>
 2007c38:	1400012e 	bgeu	r2,r16,2007c40 <_malloc_r+0x4d0>
 2007c3c:	bc804b1e 	bne	r23,r18,2007d6c <_malloc_r+0x5fc>
 2007c40:	05808074 	movhi	r22,513
 2007c44:	b5a97604 	addi	r22,r22,-23080
 2007c48:	b1000017 	ldw	r4,0(r22)
 2007c4c:	e109883a 	add	r4,fp,r4
 2007c50:	b1000015 	stw	r4,0(r22)
 2007c54:	a400071e 	bne	r20,r16,2007c74 <_malloc_r+0x504>
 2007c58:	a0801fcc 	andi	r2,r20,127
 2007c5c:	1000051e 	bne	r2,zero,2007c74 <_malloc_r+0x504>
 2007c60:	90c00217 	ldw	r3,8(r18)
 2007c64:	e545883a 	add	r2,fp,r21
 2007c68:	10800054 	ori	r2,r2,1
 2007c6c:	18800115 	stw	r2,4(r3)
 2007c70:	00003706 	br	2007d50 <_malloc_r+0x5e0>
 2007c74:	d0e00317 	ldw	r3,-32756(gp)
 2007c78:	00bfffc4 	movi	r2,-1
 2007c7c:	1880021e 	bne	r3,r2,2007c88 <_malloc_r+0x518>
 2007c80:	d5200315 	stw	r20,-32756(gp)
 2007c84:	00000306 	br	2007c94 <_malloc_r+0x524>
 2007c88:	a407c83a 	sub	r3,r20,r16
 2007c8c:	20c7883a 	add	r3,r4,r3
 2007c90:	b0c00015 	stw	r3,0(r22)
 2007c94:	a40001cc 	andi	r16,r20,7
 2007c98:	80000426 	beq	r16,zero,2007cac <_malloc_r+0x53c>
 2007c9c:	00c00204 	movi	r3,8
 2007ca0:	1c21c83a 	sub	r16,r3,r16
 2007ca4:	a429883a 	add	r20,r20,r16
 2007ca8:	00000106 	br	2007cb0 <_malloc_r+0x540>
 2007cac:	0021883a 	mov	r16,zero
 2007cb0:	a705883a 	add	r2,r20,fp
 2007cb4:	10801fcc 	andi	r2,r2,127
 2007cb8:	84002004 	addi	r16,r16,128
 2007cbc:	80a1c83a 	sub	r16,r16,r2
 2007cc0:	9809883a 	mov	r4,r19
 2007cc4:	800b883a 	mov	r5,r16
 2007cc8:	2007fa40 	call	2007fa4 <_sbrk_r>
 2007ccc:	00ffffc4 	movi	r3,-1
 2007cd0:	10c0021e 	bne	r2,r3,2007cdc <_malloc_r+0x56c>
 2007cd4:	a005883a 	mov	r2,r20
 2007cd8:	0021883a 	mov	r16,zero
 2007cdc:	b0c00017 	ldw	r3,0(r22)
 2007ce0:	1505c83a 	sub	r2,r2,r20
 2007ce4:	95000215 	stw	r20,8(r18)
 2007ce8:	80c7883a 	add	r3,r16,r3
 2007cec:	1421883a 	add	r16,r2,r16
 2007cf0:	84000054 	ori	r16,r16,1
 2007cf4:	b0c00015 	stw	r3,0(r22)
 2007cf8:	a4000115 	stw	r16,4(r20)
 2007cfc:	bc801426 	beq	r23,r18,2007d50 <_malloc_r+0x5e0>
 2007d00:	00c003c4 	movi	r3,15
 2007d04:	1d400336 	bltu	r3,r21,2007d14 <_malloc_r+0x5a4>
 2007d08:	00800044 	movi	r2,1
 2007d0c:	a0800115 	stw	r2,4(r20)
 2007d10:	00001606 	br	2007d6c <_malloc_r+0x5fc>
 2007d14:	00bffe04 	movi	r2,-8
 2007d18:	ad7ffd04 	addi	r21,r21,-12
 2007d1c:	a8aa703a 	and	r21,r21,r2
 2007d20:	b8800117 	ldw	r2,4(r23)
 2007d24:	01000144 	movi	r4,5
 2007d28:	1080004c 	andi	r2,r2,1
 2007d2c:	a884b03a 	or	r2,r21,r2
 2007d30:	b8800115 	stw	r2,4(r23)
 2007d34:	bd45883a 	add	r2,r23,r21
 2007d38:	11000115 	stw	r4,4(r2)
 2007d3c:	11000215 	stw	r4,8(r2)
 2007d40:	1d40032e 	bgeu	r3,r21,2007d50 <_malloc_r+0x5e0>
 2007d44:	9809883a 	mov	r4,r19
 2007d48:	b9400204 	addi	r5,r23,8
 2007d4c:	20087840 	call	2008784 <_free_r>
 2007d50:	b0800017 	ldw	r2,0(r22)
 2007d54:	d0e14f17 	ldw	r3,-31428(gp)
 2007d58:	1880012e 	bgeu	r3,r2,2007d60 <_malloc_r+0x5f0>
 2007d5c:	d0a14f15 	stw	r2,-31428(gp)
 2007d60:	d0e14e17 	ldw	r3,-31432(gp)
 2007d64:	1880012e 	bgeu	r3,r2,2007d6c <_malloc_r+0x5fc>
 2007d68:	d0a14e15 	stw	r2,-31432(gp)
 2007d6c:	90800217 	ldw	r2,8(r18)
 2007d70:	10c00117 	ldw	r3,4(r2)
 2007d74:	00bfff04 	movi	r2,-4
 2007d78:	1884703a 	and	r2,r3,r2
 2007d7c:	1447c83a 	sub	r3,r2,r17
 2007d80:	14400236 	bltu	r2,r17,2007d8c <_malloc_r+0x61c>
 2007d84:	008003c4 	movi	r2,15
 2007d88:	10c00416 	blt	r2,r3,2007d9c <_malloc_r+0x62c>
 2007d8c:	9809883a 	mov	r4,r19
 2007d90:	2008ee40 	call	2008ee4 <__malloc_unlock>
 2007d94:	0005883a 	mov	r2,zero
 2007d98:	00000a06 	br	2007dc4 <_malloc_r+0x654>
 2007d9c:	94000217 	ldw	r16,8(r18)
 2007da0:	88800054 	ori	r2,r17,1
 2007da4:	80800115 	stw	r2,4(r16)
 2007da8:	8445883a 	add	r2,r16,r17
 2007dac:	90800215 	stw	r2,8(r18)
 2007db0:	18c00054 	ori	r3,r3,1
 2007db4:	10c00115 	stw	r3,4(r2)
 2007db8:	9809883a 	mov	r4,r19
 2007dbc:	2008ee40 	call	2008ee4 <__malloc_unlock>
 2007dc0:	80800204 	addi	r2,r16,8
 2007dc4:	dfc00917 	ldw	ra,36(sp)
 2007dc8:	df000817 	ldw	fp,32(sp)
 2007dcc:	ddc00717 	ldw	r23,28(sp)
 2007dd0:	dd800617 	ldw	r22,24(sp)
 2007dd4:	dd400517 	ldw	r21,20(sp)
 2007dd8:	dd000417 	ldw	r20,16(sp)
 2007ddc:	dcc00317 	ldw	r19,12(sp)
 2007de0:	dc800217 	ldw	r18,8(sp)
 2007de4:	dc400117 	ldw	r17,4(sp)
 2007de8:	dc000017 	ldw	r16,0(sp)
 2007dec:	dec00a04 	addi	sp,sp,40
 2007df0:	f800283a 	ret

02007df4 <memcpy>:
 2007df4:	2005883a 	mov	r2,r4
 2007df8:	0007883a 	mov	r3,zero
 2007dfc:	19800626 	beq	r3,r6,2007e18 <memcpy+0x24>
 2007e00:	28c9883a 	add	r4,r5,r3
 2007e04:	21c00003 	ldbu	r7,0(r4)
 2007e08:	10c9883a 	add	r4,r2,r3
 2007e0c:	18c00044 	addi	r3,r3,1
 2007e10:	21c00005 	stb	r7,0(r4)
 2007e14:	003ff906 	br	2007dfc <__alt_mem_onchip_memory2_0+0xfdff7dfc>
 2007e18:	f800283a 	ret

02007e1c <_printf_r>:
 2007e1c:	defffd04 	addi	sp,sp,-12
 2007e20:	dfc00015 	stw	ra,0(sp)
 2007e24:	d9800115 	stw	r6,4(sp)
 2007e28:	d9c00215 	stw	r7,8(sp)
 2007e2c:	20c00217 	ldw	r3,8(r4)
 2007e30:	280d883a 	mov	r6,r5
 2007e34:	01408074 	movhi	r5,513
 2007e38:	29628304 	addi	r5,r5,-30196
 2007e3c:	19400115 	stw	r5,4(r3)
 2007e40:	21400217 	ldw	r5,8(r4)
 2007e44:	d9c00104 	addi	r7,sp,4
 2007e48:	20080d00 	call	20080d0 <___vfprintf_internal_r>
 2007e4c:	dfc00017 	ldw	ra,0(sp)
 2007e50:	dec00304 	addi	sp,sp,12
 2007e54:	f800283a 	ret

02007e58 <printf>:
 2007e58:	defffc04 	addi	sp,sp,-16
 2007e5c:	dfc00015 	stw	ra,0(sp)
 2007e60:	d9400115 	stw	r5,4(sp)
 2007e64:	d9800215 	stw	r6,8(sp)
 2007e68:	d9c00315 	stw	r7,12(sp)
 2007e6c:	00808074 	movhi	r2,513
 2007e70:	10a81b04 	addi	r2,r2,-24468
 2007e74:	10800017 	ldw	r2,0(r2)
 2007e78:	200b883a 	mov	r5,r4
 2007e7c:	01008074 	movhi	r4,513
 2007e80:	10c00217 	ldw	r3,8(r2)
 2007e84:	21228304 	addi	r4,r4,-30196
 2007e88:	d9800104 	addi	r6,sp,4
 2007e8c:	19000115 	stw	r4,4(r3)
 2007e90:	11000217 	ldw	r4,8(r2)
 2007e94:	200863c0 	call	200863c <__vfprintf_internal>
 2007e98:	dfc00017 	ldw	ra,0(sp)
 2007e9c:	dec00404 	addi	sp,sp,16
 2007ea0:	f800283a 	ret

02007ea4 <_puts_r>:
 2007ea4:	defffd04 	addi	sp,sp,-12
 2007ea8:	dc000015 	stw	r16,0(sp)
 2007eac:	2021883a 	mov	r16,r4
 2007eb0:	2809883a 	mov	r4,r5
 2007eb4:	dfc00215 	stw	ra,8(sp)
 2007eb8:	dc400115 	stw	r17,4(sp)
 2007ebc:	2823883a 	mov	r17,r5
 2007ec0:	2007ff40 	call	2007ff4 <strlen>
 2007ec4:	81400217 	ldw	r5,8(r16)
 2007ec8:	00c08074 	movhi	r3,513
 2007ecc:	18e28304 	addi	r3,r3,-30196
 2007ed0:	28c00115 	stw	r3,4(r5)
 2007ed4:	8009883a 	mov	r4,r16
 2007ed8:	880d883a 	mov	r6,r17
 2007edc:	100f883a 	mov	r7,r2
 2007ee0:	2008a0c0 	call	2008a0c <__sfvwrite_small_dev>
 2007ee4:	00ffffc4 	movi	r3,-1
 2007ee8:	10c00926 	beq	r2,r3,2007f10 <_puts_r+0x6c>
 2007eec:	81400217 	ldw	r5,8(r16)
 2007ef0:	01808074 	movhi	r6,513
 2007ef4:	8009883a 	mov	r4,r16
 2007ef8:	28800117 	ldw	r2,4(r5)
 2007efc:	31a5ea04 	addi	r6,r6,-26712
 2007f00:	01c00044 	movi	r7,1
 2007f04:	103ee83a 	callr	r2
 2007f08:	10bfffe0 	cmpeqi	r2,r2,-1
 2007f0c:	0085c83a 	sub	r2,zero,r2
 2007f10:	dfc00217 	ldw	ra,8(sp)
 2007f14:	dc400117 	ldw	r17,4(sp)
 2007f18:	dc000017 	ldw	r16,0(sp)
 2007f1c:	dec00304 	addi	sp,sp,12
 2007f20:	f800283a 	ret

02007f24 <puts>:
 2007f24:	00808074 	movhi	r2,513
 2007f28:	10a81b04 	addi	r2,r2,-24468
 2007f2c:	200b883a 	mov	r5,r4
 2007f30:	11000017 	ldw	r4,0(r2)
 2007f34:	2007ea41 	jmpi	2007ea4 <_puts_r>

02007f38 <srand>:
 2007f38:	d0a15104 	addi	r2,gp,-31420
 2007f3c:	11000015 	stw	r4,0(r2)
 2007f40:	10000115 	stw	zero,4(r2)
 2007f44:	f800283a 	ret

02007f48 <rand>:
 2007f48:	defffe04 	addi	sp,sp,-8
 2007f4c:	dc000015 	stw	r16,0(sp)
 2007f50:	d4215204 	addi	r16,gp,-31416
 2007f54:	d1215117 	ldw	r4,-31420(gp)
 2007f58:	81400017 	ldw	r5,0(r16)
 2007f5c:	01932574 	movhi	r6,19605
 2007f60:	01d614b4 	movhi	r7,22610
 2007f64:	319fcb44 	addi	r6,r6,32557
 2007f68:	39fd0b44 	addi	r7,r7,-3027
 2007f6c:	dfc00115 	stw	ra,4(sp)
 2007f70:	2008b640 	call	2008b64 <__muldi3>
 2007f74:	11000044 	addi	r4,r2,1
 2007f78:	2085803a 	cmpltu	r2,r4,r2
 2007f7c:	10c7883a 	add	r3,r2,r3
 2007f80:	00a00034 	movhi	r2,32768
 2007f84:	10bfffc4 	addi	r2,r2,-1
 2007f88:	1884703a 	and	r2,r3,r2
 2007f8c:	d1215115 	stw	r4,-31420(gp)
 2007f90:	80c00015 	stw	r3,0(r16)
 2007f94:	dfc00117 	ldw	ra,4(sp)
 2007f98:	dc000017 	ldw	r16,0(sp)
 2007f9c:	dec00204 	addi	sp,sp,8
 2007fa0:	f800283a 	ret

02007fa4 <_sbrk_r>:
 2007fa4:	defffd04 	addi	sp,sp,-12
 2007fa8:	dc000015 	stw	r16,0(sp)
 2007fac:	04008074 	movhi	r16,513
 2007fb0:	dc400115 	stw	r17,4(sp)
 2007fb4:	84296c04 	addi	r16,r16,-23120
 2007fb8:	2023883a 	mov	r17,r4
 2007fbc:	2809883a 	mov	r4,r5
 2007fc0:	dfc00215 	stw	ra,8(sp)
 2007fc4:	80000015 	stw	zero,0(r16)
 2007fc8:	2008ee80 	call	2008ee8 <sbrk>
 2007fcc:	00ffffc4 	movi	r3,-1
 2007fd0:	10c0031e 	bne	r2,r3,2007fe0 <_sbrk_r+0x3c>
 2007fd4:	80c00017 	ldw	r3,0(r16)
 2007fd8:	18000126 	beq	r3,zero,2007fe0 <_sbrk_r+0x3c>
 2007fdc:	88c00015 	stw	r3,0(r17)
 2007fe0:	dfc00217 	ldw	ra,8(sp)
 2007fe4:	dc400117 	ldw	r17,4(sp)
 2007fe8:	dc000017 	ldw	r16,0(sp)
 2007fec:	dec00304 	addi	sp,sp,12
 2007ff0:	f800283a 	ret

02007ff4 <strlen>:
 2007ff4:	2005883a 	mov	r2,r4
 2007ff8:	10c00007 	ldb	r3,0(r2)
 2007ffc:	18000226 	beq	r3,zero,2008008 <strlen+0x14>
 2008000:	10800044 	addi	r2,r2,1
 2008004:	003ffc06 	br	2007ff8 <__alt_mem_onchip_memory2_0+0xfdff7ff8>
 2008008:	1105c83a 	sub	r2,r2,r4
 200800c:	f800283a 	ret

02008010 <time>:
 2008010:	00808074 	movhi	r2,513
 2008014:	defffc04 	addi	sp,sp,-16
 2008018:	10a81b04 	addi	r2,r2,-24468
 200801c:	dc000215 	stw	r16,8(sp)
 2008020:	2021883a 	mov	r16,r4
 2008024:	11000017 	ldw	r4,0(r2)
 2008028:	d80b883a 	mov	r5,sp
 200802c:	000d883a 	mov	r6,zero
 2008030:	dfc00315 	stw	ra,12(sp)
 2008034:	2008ab80 	call	2008ab8 <_gettimeofday_r>
 2008038:	10000516 	blt	r2,zero,2008050 <time+0x40>
 200803c:	80000226 	beq	r16,zero,2008048 <time+0x38>
 2008040:	d8800017 	ldw	r2,0(sp)
 2008044:	80800015 	stw	r2,0(r16)
 2008048:	d8800017 	ldw	r2,0(sp)
 200804c:	00000106 	br	2008054 <time+0x44>
 2008050:	00bfffc4 	movi	r2,-1
 2008054:	dfc00317 	ldw	ra,12(sp)
 2008058:	dc000217 	ldw	r16,8(sp)
 200805c:	dec00404 	addi	sp,sp,16
 2008060:	f800283a 	ret

02008064 <print_repeat>:
 2008064:	defffb04 	addi	sp,sp,-20
 2008068:	dc800315 	stw	r18,12(sp)
 200806c:	dc400215 	stw	r17,8(sp)
 2008070:	dc000115 	stw	r16,4(sp)
 2008074:	dfc00415 	stw	ra,16(sp)
 2008078:	2025883a 	mov	r18,r4
 200807c:	2823883a 	mov	r17,r5
 2008080:	d9800005 	stb	r6,0(sp)
 2008084:	3821883a 	mov	r16,r7
 2008088:	04000a0e 	bge	zero,r16,20080b4 <print_repeat+0x50>
 200808c:	88800117 	ldw	r2,4(r17)
 2008090:	9009883a 	mov	r4,r18
 2008094:	880b883a 	mov	r5,r17
 2008098:	d80d883a 	mov	r6,sp
 200809c:	01c00044 	movi	r7,1
 20080a0:	103ee83a 	callr	r2
 20080a4:	843fffc4 	addi	r16,r16,-1
 20080a8:	103ff726 	beq	r2,zero,2008088 <__alt_mem_onchip_memory2_0+0xfdff8088>
 20080ac:	00bfffc4 	movi	r2,-1
 20080b0:	00000106 	br	20080b8 <print_repeat+0x54>
 20080b4:	0005883a 	mov	r2,zero
 20080b8:	dfc00417 	ldw	ra,16(sp)
 20080bc:	dc800317 	ldw	r18,12(sp)
 20080c0:	dc400217 	ldw	r17,8(sp)
 20080c4:	dc000117 	ldw	r16,4(sp)
 20080c8:	dec00504 	addi	sp,sp,20
 20080cc:	f800283a 	ret

020080d0 <___vfprintf_internal_r>:
 20080d0:	deffe304 	addi	sp,sp,-116
 20080d4:	d8c00804 	addi	r3,sp,32
 20080d8:	df001b15 	stw	fp,108(sp)
 20080dc:	ddc01a15 	stw	r23,104(sp)
 20080e0:	dd801915 	stw	r22,100(sp)
 20080e4:	dd401815 	stw	r21,96(sp)
 20080e8:	dd001715 	stw	r20,92(sp)
 20080ec:	dcc01615 	stw	r19,88(sp)
 20080f0:	dc801515 	stw	r18,84(sp)
 20080f4:	dc401415 	stw	r17,80(sp)
 20080f8:	dc001315 	stw	r16,76(sp)
 20080fc:	dfc01c15 	stw	ra,112(sp)
 2008100:	2029883a 	mov	r20,r4
 2008104:	2823883a 	mov	r17,r5
 2008108:	3839883a 	mov	fp,r7
 200810c:	d9800f15 	stw	r6,60(sp)
 2008110:	0021883a 	mov	r16,zero
 2008114:	d8000e15 	stw	zero,56(sp)
 2008118:	002f883a 	mov	r23,zero
 200811c:	002b883a 	mov	r21,zero
 2008120:	0027883a 	mov	r19,zero
 2008124:	0025883a 	mov	r18,zero
 2008128:	d8000c15 	stw	zero,48(sp)
 200812c:	d8000b15 	stw	zero,44(sp)
 2008130:	002d883a 	mov	r22,zero
 2008134:	d8c00915 	stw	r3,36(sp)
 2008138:	d8c00f17 	ldw	r3,60(sp)
 200813c:	19000003 	ldbu	r4,0(r3)
 2008140:	20803fcc 	andi	r2,r4,255
 2008144:	1080201c 	xori	r2,r2,128
 2008148:	10bfe004 	addi	r2,r2,-128
 200814c:	10012e26 	beq	r2,zero,2008608 <___vfprintf_internal_r+0x538>
 2008150:	01400044 	movi	r5,1
 2008154:	b1401426 	beq	r22,r5,20081a8 <___vfprintf_internal_r+0xd8>
 2008158:	2d800216 	blt	r5,r22,2008164 <___vfprintf_internal_r+0x94>
 200815c:	b0000626 	beq	r22,zero,2008178 <___vfprintf_internal_r+0xa8>
 2008160:	00012506 	br	20085f8 <___vfprintf_internal_r+0x528>
 2008164:	01400084 	movi	r5,2
 2008168:	b1401d26 	beq	r22,r5,20081e0 <___vfprintf_internal_r+0x110>
 200816c:	014000c4 	movi	r5,3
 2008170:	b1402b26 	beq	r22,r5,2008220 <___vfprintf_internal_r+0x150>
 2008174:	00012006 	br	20085f8 <___vfprintf_internal_r+0x528>
 2008178:	01400944 	movi	r5,37
 200817c:	11410d26 	beq	r2,r5,20085b4 <___vfprintf_internal_r+0x4e4>
 2008180:	88800117 	ldw	r2,4(r17)
 2008184:	d9000005 	stb	r4,0(sp)
 2008188:	880b883a 	mov	r5,r17
 200818c:	a009883a 	mov	r4,r20
 2008190:	d80d883a 	mov	r6,sp
 2008194:	01c00044 	movi	r7,1
 2008198:	103ee83a 	callr	r2
 200819c:	1000e81e 	bne	r2,zero,2008540 <___vfprintf_internal_r+0x470>
 20081a0:	84000044 	addi	r16,r16,1
 20081a4:	00011406 	br	20085f8 <___vfprintf_internal_r+0x528>
 20081a8:	01400c04 	movi	r5,48
 20081ac:	11410a26 	beq	r2,r5,20085d8 <___vfprintf_internal_r+0x508>
 20081b0:	01400944 	movi	r5,37
 20081b4:	11400a1e 	bne	r2,r5,20081e0 <___vfprintf_internal_r+0x110>
 20081b8:	d8800005 	stb	r2,0(sp)
 20081bc:	88800117 	ldw	r2,4(r17)
 20081c0:	a009883a 	mov	r4,r20
 20081c4:	880b883a 	mov	r5,r17
 20081c8:	d80d883a 	mov	r6,sp
 20081cc:	b00f883a 	mov	r7,r22
 20081d0:	103ee83a 	callr	r2
 20081d4:	1000da1e 	bne	r2,zero,2008540 <___vfprintf_internal_r+0x470>
 20081d8:	84000044 	addi	r16,r16,1
 20081dc:	00010506 	br	20085f4 <___vfprintf_internal_r+0x524>
 20081e0:	25bff404 	addi	r22,r4,-48
 20081e4:	b5803fcc 	andi	r22,r22,255
 20081e8:	00c00244 	movi	r3,9
 20081ec:	1d800936 	bltu	r3,r22,2008214 <___vfprintf_internal_r+0x144>
 20081f0:	00bfffc4 	movi	r2,-1
 20081f4:	90800426 	beq	r18,r2,2008208 <___vfprintf_internal_r+0x138>
 20081f8:	9009883a 	mov	r4,r18
 20081fc:	01400284 	movi	r5,10
 2008200:	2003c800 	call	2003c80 <__mulsi3>
 2008204:	00000106 	br	200820c <___vfprintf_internal_r+0x13c>
 2008208:	0005883a 	mov	r2,zero
 200820c:	15a5883a 	add	r18,r2,r22
 2008210:	0000f206 	br	20085dc <___vfprintf_internal_r+0x50c>
 2008214:	01400b84 	movi	r5,46
 2008218:	1140f426 	beq	r2,r5,20085ec <___vfprintf_internal_r+0x51c>
 200821c:	05800084 	movi	r22,2
 2008220:	213ff404 	addi	r4,r4,-48
 2008224:	20c03fcc 	andi	r3,r4,255
 2008228:	01000244 	movi	r4,9
 200822c:	20c00b36 	bltu	r4,r3,200825c <___vfprintf_internal_r+0x18c>
 2008230:	00bfffc4 	movi	r2,-1
 2008234:	98800626 	beq	r19,r2,2008250 <___vfprintf_internal_r+0x180>
 2008238:	9809883a 	mov	r4,r19
 200823c:	01400284 	movi	r5,10
 2008240:	d8c01115 	stw	r3,68(sp)
 2008244:	2003c800 	call	2003c80 <__mulsi3>
 2008248:	d8c01117 	ldw	r3,68(sp)
 200824c:	00000106 	br	2008254 <___vfprintf_internal_r+0x184>
 2008250:	0005883a 	mov	r2,zero
 2008254:	10e7883a 	add	r19,r2,r3
 2008258:	0000e706 	br	20085f8 <___vfprintf_internal_r+0x528>
 200825c:	01401b04 	movi	r5,108
 2008260:	1140e026 	beq	r2,r5,20085e4 <___vfprintf_internal_r+0x514>
 2008264:	013fffc4 	movi	r4,-1
 2008268:	99000226 	beq	r19,r4,2008274 <___vfprintf_internal_r+0x1a4>
 200826c:	d8000b15 	stw	zero,44(sp)
 2008270:	00000106 	br	2008278 <___vfprintf_internal_r+0x1a8>
 2008274:	04c00044 	movi	r19,1
 2008278:	01001a44 	movi	r4,105
 200827c:	11001626 	beq	r2,r4,20082d8 <___vfprintf_internal_r+0x208>
 2008280:	20800916 	blt	r4,r2,20082a8 <___vfprintf_internal_r+0x1d8>
 2008284:	010018c4 	movi	r4,99
 2008288:	11009626 	beq	r2,r4,20084e4 <___vfprintf_internal_r+0x414>
 200828c:	01001904 	movi	r4,100
 2008290:	11001126 	beq	r2,r4,20082d8 <___vfprintf_internal_r+0x208>
 2008294:	01001604 	movi	r4,88
 2008298:	1100d61e 	bne	r2,r4,20085f4 <___vfprintf_internal_r+0x524>
 200829c:	00c00044 	movi	r3,1
 20082a0:	d8c00e15 	stw	r3,56(sp)
 20082a4:	00001406 	br	20082f8 <___vfprintf_internal_r+0x228>
 20082a8:	01001cc4 	movi	r4,115
 20082ac:	1100a626 	beq	r2,r4,2008548 <___vfprintf_internal_r+0x478>
 20082b0:	20800416 	blt	r4,r2,20082c4 <___vfprintf_internal_r+0x1f4>
 20082b4:	01001bc4 	movi	r4,111
 20082b8:	1100ce1e 	bne	r2,r4,20085f4 <___vfprintf_internal_r+0x524>
 20082bc:	05400204 	movi	r21,8
 20082c0:	00000e06 	br	20082fc <___vfprintf_internal_r+0x22c>
 20082c4:	01001d44 	movi	r4,117
 20082c8:	11000c26 	beq	r2,r4,20082fc <___vfprintf_internal_r+0x22c>
 20082cc:	01001e04 	movi	r4,120
 20082d0:	11000926 	beq	r2,r4,20082f8 <___vfprintf_internal_r+0x228>
 20082d4:	0000c706 	br	20085f4 <___vfprintf_internal_r+0x524>
 20082d8:	e0800104 	addi	r2,fp,4
 20082dc:	b8000726 	beq	r23,zero,20082fc <___vfprintf_internal_r+0x22c>
 20082e0:	d8800d15 	stw	r2,52(sp)
 20082e4:	e7000017 	ldw	fp,0(fp)
 20082e8:	e000080e 	bge	fp,zero,200830c <___vfprintf_internal_r+0x23c>
 20082ec:	0739c83a 	sub	fp,zero,fp
 20082f0:	02000044 	movi	r8,1
 20082f4:	00000606 	br	2008310 <___vfprintf_internal_r+0x240>
 20082f8:	05400404 	movi	r21,16
 20082fc:	e0c00104 	addi	r3,fp,4
 2008300:	d8c00d15 	stw	r3,52(sp)
 2008304:	e7000017 	ldw	fp,0(fp)
 2008308:	002f883a 	mov	r23,zero
 200830c:	0011883a 	mov	r8,zero
 2008310:	002d883a 	mov	r22,zero
 2008314:	dd87883a 	add	r3,sp,r22
 2008318:	e0001a26 	beq	fp,zero,2008384 <___vfprintf_internal_r+0x2b4>
 200831c:	e009883a 	mov	r4,fp
 2008320:	a80b883a 	mov	r5,r21
 2008324:	d8c01115 	stw	r3,68(sp)
 2008328:	da001215 	stw	r8,72(sp)
 200832c:	2003c700 	call	2003c70 <__udivsi3>
 2008330:	a809883a 	mov	r4,r21
 2008334:	100b883a 	mov	r5,r2
 2008338:	d8801015 	stw	r2,64(sp)
 200833c:	2003c800 	call	2003c80 <__mulsi3>
 2008340:	e085c83a 	sub	r2,fp,r2
 2008344:	01000244 	movi	r4,9
 2008348:	d8c01117 	ldw	r3,68(sp)
 200834c:	d9801017 	ldw	r6,64(sp)
 2008350:	da001217 	ldw	r8,72(sp)
 2008354:	20800216 	blt	r4,r2,2008360 <___vfprintf_internal_r+0x290>
 2008358:	17000c04 	addi	fp,r2,48
 200835c:	00000506 	br	2008374 <___vfprintf_internal_r+0x2a4>
 2008360:	d9400e17 	ldw	r5,56(sp)
 2008364:	28000226 	beq	r5,zero,2008370 <___vfprintf_internal_r+0x2a0>
 2008368:	17000dc4 	addi	fp,r2,55
 200836c:	00000106 	br	2008374 <___vfprintf_internal_r+0x2a4>
 2008370:	170015c4 	addi	fp,r2,87
 2008374:	1f000005 	stb	fp,0(r3)
 2008378:	b5800044 	addi	r22,r22,1
 200837c:	3039883a 	mov	fp,r6
 2008380:	003fe406 	br	2008314 <__alt_mem_onchip_memory2_0+0xfdff8314>
 2008384:	1ec5c83a 	sub	r2,r3,sp
 2008388:	d8800a15 	stw	r2,40(sp)
 200838c:	9885c83a 	sub	r2,r19,r2
 2008390:	1839883a 	mov	fp,r3
 2008394:	00800e0e 	bge	zero,r2,20083d0 <___vfprintf_internal_r+0x300>
 2008398:	182d883a 	mov	r22,r3
 200839c:	1885883a 	add	r2,r3,r2
 20083a0:	01000c04 	movi	r4,48
 20083a4:	d9400917 	ldw	r5,36(sp)
 20083a8:	b007883a 	mov	r3,r22
 20083ac:	b140052e 	bgeu	r22,r5,20083c4 <___vfprintf_internal_r+0x2f4>
 20083b0:	b5800044 	addi	r22,r22,1
 20083b4:	19000005 	stb	r4,0(r3)
 20083b8:	b039883a 	mov	fp,r22
 20083bc:	b0bff91e 	bne	r22,r2,20083a4 <__alt_mem_onchip_memory2_0+0xfdff83a4>
 20083c0:	00000106 	br	20083c8 <___vfprintf_internal_r+0x2f8>
 20083c4:	b039883a 	mov	fp,r22
 20083c8:	b6edc83a 	sub	r22,r22,sp
 20083cc:	dd800a15 	stw	r22,40(sp)
 20083d0:	d8800a17 	ldw	r2,40(sp)
 20083d4:	1207883a 	add	r3,r2,r8
 20083d8:	90edc83a 	sub	r22,r18,r3
 20083dc:	d8c00b17 	ldw	r3,44(sp)
 20083e0:	18001726 	beq	r3,zero,2008440 <___vfprintf_internal_r+0x370>
 20083e4:	40000a26 	beq	r8,zero,2008410 <___vfprintf_internal_r+0x340>
 20083e8:	00800b44 	movi	r2,45
 20083ec:	d8800805 	stb	r2,32(sp)
 20083f0:	88800117 	ldw	r2,4(r17)
 20083f4:	a009883a 	mov	r4,r20
 20083f8:	880b883a 	mov	r5,r17
 20083fc:	d9800804 	addi	r6,sp,32
 2008400:	01c00044 	movi	r7,1
 2008404:	103ee83a 	callr	r2
 2008408:	10004d1e 	bne	r2,zero,2008540 <___vfprintf_internal_r+0x470>
 200840c:	84000044 	addi	r16,r16,1
 2008410:	0580070e 	bge	zero,r22,2008430 <___vfprintf_internal_r+0x360>
 2008414:	a009883a 	mov	r4,r20
 2008418:	880b883a 	mov	r5,r17
 200841c:	01800c04 	movi	r6,48
 2008420:	b00f883a 	mov	r7,r22
 2008424:	20080640 	call	2008064 <print_repeat>
 2008428:	1000451e 	bne	r2,zero,2008540 <___vfprintf_internal_r+0x470>
 200842c:	85a1883a 	add	r16,r16,r22
 2008430:	d9000a17 	ldw	r4,40(sp)
 2008434:	e007883a 	mov	r3,fp
 2008438:	272dc83a 	sub	r22,r4,fp
 200843c:	00002206 	br	20084c8 <___vfprintf_internal_r+0x3f8>
 2008440:	0580090e 	bge	zero,r22,2008468 <___vfprintf_internal_r+0x398>
 2008444:	a009883a 	mov	r4,r20
 2008448:	880b883a 	mov	r5,r17
 200844c:	01800804 	movi	r6,32
 2008450:	b00f883a 	mov	r7,r22
 2008454:	da001215 	stw	r8,72(sp)
 2008458:	20080640 	call	2008064 <print_repeat>
 200845c:	da001217 	ldw	r8,72(sp)
 2008460:	1000371e 	bne	r2,zero,2008540 <___vfprintf_internal_r+0x470>
 2008464:	85a1883a 	add	r16,r16,r22
 2008468:	403ff126 	beq	r8,zero,2008430 <__alt_mem_onchip_memory2_0+0xfdff8430>
 200846c:	00800b44 	movi	r2,45
 2008470:	d8800805 	stb	r2,32(sp)
 2008474:	88800117 	ldw	r2,4(r17)
 2008478:	a009883a 	mov	r4,r20
 200847c:	880b883a 	mov	r5,r17
 2008480:	d9800804 	addi	r6,sp,32
 2008484:	01c00044 	movi	r7,1
 2008488:	103ee83a 	callr	r2
 200848c:	10002c1e 	bne	r2,zero,2008540 <___vfprintf_internal_r+0x470>
 2008490:	84000044 	addi	r16,r16,1
 2008494:	003fe606 	br	2008430 <__alt_mem_onchip_memory2_0+0xfdff8430>
 2008498:	18ffffc4 	addi	r3,r3,-1
 200849c:	18800003 	ldbu	r2,0(r3)
 20084a0:	a009883a 	mov	r4,r20
 20084a4:	d8c01115 	stw	r3,68(sp)
 20084a8:	d8800805 	stb	r2,32(sp)
 20084ac:	88800117 	ldw	r2,4(r17)
 20084b0:	880b883a 	mov	r5,r17
 20084b4:	d9800804 	addi	r6,sp,32
 20084b8:	01c00044 	movi	r7,1
 20084bc:	103ee83a 	callr	r2
 20084c0:	d8c01117 	ldw	r3,68(sp)
 20084c4:	10001e1e 	bne	r2,zero,2008540 <___vfprintf_internal_r+0x470>
 20084c8:	80c5c83a 	sub	r2,r16,r3
 20084cc:	1d89883a 	add	r4,r3,r22
 20084d0:	e085883a 	add	r2,fp,r2
 20084d4:	013ff016 	blt	zero,r4,2008498 <__alt_mem_onchip_memory2_0+0xfdff8498>
 20084d8:	1021883a 	mov	r16,r2
 20084dc:	df000d17 	ldw	fp,52(sp)
 20084e0:	00004406 	br	20085f4 <___vfprintf_internal_r+0x524>
 20084e4:	01000044 	movi	r4,1
 20084e8:	2480080e 	bge	r4,r18,200850c <___vfprintf_internal_r+0x43c>
 20084ec:	95bfffc4 	addi	r22,r18,-1
 20084f0:	a009883a 	mov	r4,r20
 20084f4:	880b883a 	mov	r5,r17
 20084f8:	01800804 	movi	r6,32
 20084fc:	b00f883a 	mov	r7,r22
 2008500:	20080640 	call	2008064 <print_repeat>
 2008504:	10000e1e 	bne	r2,zero,2008540 <___vfprintf_internal_r+0x470>
 2008508:	85a1883a 	add	r16,r16,r22
 200850c:	e0800017 	ldw	r2,0(fp)
 2008510:	a009883a 	mov	r4,r20
 2008514:	880b883a 	mov	r5,r17
 2008518:	d8800005 	stb	r2,0(sp)
 200851c:	88800117 	ldw	r2,4(r17)
 2008520:	d80d883a 	mov	r6,sp
 2008524:	01c00044 	movi	r7,1
 2008528:	e5800104 	addi	r22,fp,4
 200852c:	103ee83a 	callr	r2
 2008530:	1000031e 	bne	r2,zero,2008540 <___vfprintf_internal_r+0x470>
 2008534:	84000044 	addi	r16,r16,1
 2008538:	b039883a 	mov	fp,r22
 200853c:	00002d06 	br	20085f4 <___vfprintf_internal_r+0x524>
 2008540:	00bfffc4 	movi	r2,-1
 2008544:	00003106 	br	200860c <___vfprintf_internal_r+0x53c>
 2008548:	e5800017 	ldw	r22,0(fp)
 200854c:	e0c00104 	addi	r3,fp,4
 2008550:	d8c00a15 	stw	r3,40(sp)
 2008554:	b009883a 	mov	r4,r22
 2008558:	2007ff40 	call	2007ff4 <strlen>
 200855c:	9091c83a 	sub	r8,r18,r2
 2008560:	1039883a 	mov	fp,r2
 2008564:	0200090e 	bge	zero,r8,200858c <___vfprintf_internal_r+0x4bc>
 2008568:	400f883a 	mov	r7,r8
 200856c:	a009883a 	mov	r4,r20
 2008570:	880b883a 	mov	r5,r17
 2008574:	01800804 	movi	r6,32
 2008578:	da001215 	stw	r8,72(sp)
 200857c:	20080640 	call	2008064 <print_repeat>
 2008580:	da001217 	ldw	r8,72(sp)
 2008584:	103fee1e 	bne	r2,zero,2008540 <__alt_mem_onchip_memory2_0+0xfdff8540>
 2008588:	8221883a 	add	r16,r16,r8
 200858c:	88800117 	ldw	r2,4(r17)
 2008590:	a009883a 	mov	r4,r20
 2008594:	880b883a 	mov	r5,r17
 2008598:	b00d883a 	mov	r6,r22
 200859c:	e00f883a 	mov	r7,fp
 20085a0:	103ee83a 	callr	r2
 20085a4:	103fe61e 	bne	r2,zero,2008540 <__alt_mem_onchip_memory2_0+0xfdff8540>
 20085a8:	8721883a 	add	r16,r16,fp
 20085ac:	df000a17 	ldw	fp,40(sp)
 20085b0:	00001006 	br	20085f4 <___vfprintf_internal_r+0x524>
 20085b4:	05c00044 	movi	r23,1
 20085b8:	04ffffc4 	movi	r19,-1
 20085bc:	d8000e15 	stw	zero,56(sp)
 20085c0:	05400284 	movi	r21,10
 20085c4:	9825883a 	mov	r18,r19
 20085c8:	d8000c15 	stw	zero,48(sp)
 20085cc:	d8000b15 	stw	zero,44(sp)
 20085d0:	b82d883a 	mov	r22,r23
 20085d4:	00000806 	br	20085f8 <___vfprintf_internal_r+0x528>
 20085d8:	dd800b15 	stw	r22,44(sp)
 20085dc:	05800084 	movi	r22,2
 20085e0:	00000506 	br	20085f8 <___vfprintf_internal_r+0x528>
 20085e4:	00c00044 	movi	r3,1
 20085e8:	d8c00c15 	stw	r3,48(sp)
 20085ec:	058000c4 	movi	r22,3
 20085f0:	00000106 	br	20085f8 <___vfprintf_internal_r+0x528>
 20085f4:	002d883a 	mov	r22,zero
 20085f8:	d8c00f17 	ldw	r3,60(sp)
 20085fc:	18c00044 	addi	r3,r3,1
 2008600:	d8c00f15 	stw	r3,60(sp)
 2008604:	003ecc06 	br	2008138 <__alt_mem_onchip_memory2_0+0xfdff8138>
 2008608:	8005883a 	mov	r2,r16
 200860c:	dfc01c17 	ldw	ra,112(sp)
 2008610:	df001b17 	ldw	fp,108(sp)
 2008614:	ddc01a17 	ldw	r23,104(sp)
 2008618:	dd801917 	ldw	r22,100(sp)
 200861c:	dd401817 	ldw	r21,96(sp)
 2008620:	dd001717 	ldw	r20,92(sp)
 2008624:	dcc01617 	ldw	r19,88(sp)
 2008628:	dc801517 	ldw	r18,84(sp)
 200862c:	dc401417 	ldw	r17,80(sp)
 2008630:	dc001317 	ldw	r16,76(sp)
 2008634:	dec01d04 	addi	sp,sp,116
 2008638:	f800283a 	ret

0200863c <__vfprintf_internal>:
 200863c:	2007883a 	mov	r3,r4
 2008640:	01008074 	movhi	r4,513
 2008644:	21281b04 	addi	r4,r4,-24468
 2008648:	21000017 	ldw	r4,0(r4)
 200864c:	2805883a 	mov	r2,r5
 2008650:	300f883a 	mov	r7,r6
 2008654:	180b883a 	mov	r5,r3
 2008658:	100d883a 	mov	r6,r2
 200865c:	20080d01 	jmpi	20080d0 <___vfprintf_internal_r>

02008660 <_malloc_trim_r>:
 2008660:	defffb04 	addi	sp,sp,-20
 2008664:	dcc00315 	stw	r19,12(sp)
 2008668:	04c08074 	movhi	r19,513
 200866c:	dc800215 	stw	r18,8(sp)
 2008670:	dc400115 	stw	r17,4(sp)
 2008674:	dc000015 	stw	r16,0(sp)
 2008678:	dfc00415 	stw	ra,16(sp)
 200867c:	2821883a 	mov	r16,r5
 2008680:	2025883a 	mov	r18,r4
 2008684:	9ce71704 	addi	r19,r19,-25508
 2008688:	2008ee00 	call	2008ee0 <__malloc_lock>
 200868c:	98800217 	ldw	r2,8(r19)
 2008690:	14400117 	ldw	r17,4(r2)
 2008694:	00bfff04 	movi	r2,-4
 2008698:	88a2703a 	and	r17,r17,r2
 200869c:	8c21c83a 	sub	r16,r17,r16
 20086a0:	84001bc4 	addi	r16,r16,111
 20086a4:	8020d1fa 	srli	r16,r16,7
 20086a8:	00801fc4 	movi	r2,127
 20086ac:	843fffc4 	addi	r16,r16,-1
 20086b0:	802091fa 	slli	r16,r16,7
 20086b4:	14000416 	blt	r2,r16,20086c8 <_malloc_trim_r+0x68>
 20086b8:	9009883a 	mov	r4,r18
 20086bc:	2008ee40 	call	2008ee4 <__malloc_unlock>
 20086c0:	0005883a 	mov	r2,zero
 20086c4:	00002806 	br	2008768 <_malloc_trim_r+0x108>
 20086c8:	9009883a 	mov	r4,r18
 20086cc:	000b883a 	mov	r5,zero
 20086d0:	2007fa40 	call	2007fa4 <_sbrk_r>
 20086d4:	98c00217 	ldw	r3,8(r19)
 20086d8:	1c47883a 	add	r3,r3,r17
 20086dc:	10fff61e 	bne	r2,r3,20086b8 <__alt_mem_onchip_memory2_0+0xfdff86b8>
 20086e0:	9009883a 	mov	r4,r18
 20086e4:	040bc83a 	sub	r5,zero,r16
 20086e8:	2007fa40 	call	2007fa4 <_sbrk_r>
 20086ec:	00ffffc4 	movi	r3,-1
 20086f0:	10c0111e 	bne	r2,r3,2008738 <_malloc_trim_r+0xd8>
 20086f4:	9009883a 	mov	r4,r18
 20086f8:	000b883a 	mov	r5,zero
 20086fc:	2007fa40 	call	2007fa4 <_sbrk_r>
 2008700:	99000217 	ldw	r4,8(r19)
 2008704:	014003c4 	movi	r5,15
 2008708:	1107c83a 	sub	r3,r2,r4
 200870c:	28ffea0e 	bge	r5,r3,20086b8 <__alt_mem_onchip_memory2_0+0xfdff86b8>
 2008710:	01408074 	movhi	r5,513
 2008714:	29681c04 	addi	r5,r5,-24464
 2008718:	29400017 	ldw	r5,0(r5)
 200871c:	18c00054 	ori	r3,r3,1
 2008720:	20c00115 	stw	r3,4(r4)
 2008724:	1145c83a 	sub	r2,r2,r5
 2008728:	01408074 	movhi	r5,513
 200872c:	29697604 	addi	r5,r5,-23080
 2008730:	28800015 	stw	r2,0(r5)
 2008734:	003fe006 	br	20086b8 <__alt_mem_onchip_memory2_0+0xfdff86b8>
 2008738:	98800217 	ldw	r2,8(r19)
 200873c:	8c23c83a 	sub	r17,r17,r16
 2008740:	00c08074 	movhi	r3,513
 2008744:	18e97604 	addi	r3,r3,-23080
 2008748:	8c400054 	ori	r17,r17,1
 200874c:	14400115 	stw	r17,4(r2)
 2008750:	18800017 	ldw	r2,0(r3)
 2008754:	9009883a 	mov	r4,r18
 2008758:	1421c83a 	sub	r16,r2,r16
 200875c:	1c000015 	stw	r16,0(r3)
 2008760:	2008ee40 	call	2008ee4 <__malloc_unlock>
 2008764:	00800044 	movi	r2,1
 2008768:	dfc00417 	ldw	ra,16(sp)
 200876c:	dcc00317 	ldw	r19,12(sp)
 2008770:	dc800217 	ldw	r18,8(sp)
 2008774:	dc400117 	ldw	r17,4(sp)
 2008778:	dc000017 	ldw	r16,0(sp)
 200877c:	dec00504 	addi	sp,sp,20
 2008780:	f800283a 	ret

02008784 <_free_r>:
 2008784:	2800a026 	beq	r5,zero,2008a08 <_free_r+0x284>
 2008788:	defffd04 	addi	sp,sp,-12
 200878c:	dc400115 	stw	r17,4(sp)
 2008790:	dc000015 	stw	r16,0(sp)
 2008794:	2823883a 	mov	r17,r5
 2008798:	2021883a 	mov	r16,r4
 200879c:	dfc00215 	stw	ra,8(sp)
 20087a0:	2008ee00 	call	2008ee0 <__malloc_lock>
 20087a4:	8a3fff17 	ldw	r8,-4(r17)
 20087a8:	00bfff84 	movi	r2,-2
 20087ac:	893ffe04 	addi	r4,r17,-8
 20087b0:	4084703a 	and	r2,r8,r2
 20087b4:	208d883a 	add	r6,r4,r2
 20087b8:	31400117 	ldw	r5,4(r6)
 20087bc:	00ffff04 	movi	r3,-4
 20087c0:	28c6703a 	and	r3,r5,r3
 20087c4:	01408074 	movhi	r5,513
 20087c8:	29671704 	addi	r5,r5,-25508
 20087cc:	2a400217 	ldw	r9,8(r5)
 20087d0:	280f883a 	mov	r7,r5
 20087d4:	4140004c 	andi	r5,r8,1
 20087d8:	32401b1e 	bne	r6,r9,2008848 <_free_r+0xc4>
 20087dc:	1885883a 	add	r2,r3,r2
 20087e0:	2800071e 	bne	r5,zero,2008800 <_free_r+0x7c>
 20087e4:	88fffe17 	ldw	r3,-8(r17)
 20087e8:	20c9c83a 	sub	r4,r4,r3
 20087ec:	21400217 	ldw	r5,8(r4)
 20087f0:	10c5883a 	add	r2,r2,r3
 20087f4:	20c00317 	ldw	r3,12(r4)
 20087f8:	28c00315 	stw	r3,12(r5)
 20087fc:	19400215 	stw	r5,8(r3)
 2008800:	10c00054 	ori	r3,r2,1
 2008804:	20c00115 	stw	r3,4(r4)
 2008808:	00c08074 	movhi	r3,513
 200880c:	18e81d04 	addi	r3,r3,-24460
 2008810:	18c00017 	ldw	r3,0(r3)
 2008814:	39000215 	stw	r4,8(r7)
 2008818:	10c00536 	bltu	r2,r3,2008830 <_free_r+0xac>
 200881c:	00808074 	movhi	r2,513
 2008820:	10a96904 	addi	r2,r2,-23132
 2008824:	11400017 	ldw	r5,0(r2)
 2008828:	8009883a 	mov	r4,r16
 200882c:	20086600 	call	2008660 <_malloc_trim_r>
 2008830:	8009883a 	mov	r4,r16
 2008834:	dfc00217 	ldw	ra,8(sp)
 2008838:	dc400117 	ldw	r17,4(sp)
 200883c:	dc000017 	ldw	r16,0(sp)
 2008840:	dec00304 	addi	sp,sp,12
 2008844:	2008ee41 	jmpi	2008ee4 <__malloc_unlock>
 2008848:	30c00115 	stw	r3,4(r6)
 200884c:	2800091e 	bne	r5,zero,2008874 <_free_r+0xf0>
 2008850:	897ffe17 	ldw	r5,-8(r17)
 2008854:	3a000204 	addi	r8,r7,8
 2008858:	2149c83a 	sub	r4,r4,r5
 200885c:	1145883a 	add	r2,r2,r5
 2008860:	21400217 	ldw	r5,8(r4)
 2008864:	2a000526 	beq	r5,r8,200887c <_free_r+0xf8>
 2008868:	22000317 	ldw	r8,12(r4)
 200886c:	2a000315 	stw	r8,12(r5)
 2008870:	41400215 	stw	r5,8(r8)
 2008874:	000b883a 	mov	r5,zero
 2008878:	00000106 	br	2008880 <_free_r+0xfc>
 200887c:	01400044 	movi	r5,1
 2008880:	30d1883a 	add	r8,r6,r3
 2008884:	42000117 	ldw	r8,4(r8)
 2008888:	4200004c 	andi	r8,r8,1
 200888c:	4000101e 	bne	r8,zero,20088d0 <_free_r+0x14c>
 2008890:	10c5883a 	add	r2,r2,r3
 2008894:	28000a1e 	bne	r5,zero,20088c0 <_free_r+0x13c>
 2008898:	30c00217 	ldw	r3,8(r6)
 200889c:	02008074 	movhi	r8,513
 20088a0:	42271904 	addi	r8,r8,-25500
 20088a4:	1a00061e 	bne	r3,r8,20088c0 <_free_r+0x13c>
 20088a8:	39000515 	stw	r4,20(r7)
 20088ac:	39000415 	stw	r4,16(r7)
 20088b0:	20c00315 	stw	r3,12(r4)
 20088b4:	20c00215 	stw	r3,8(r4)
 20088b8:	01400044 	movi	r5,1
 20088bc:	00000406 	br	20088d0 <_free_r+0x14c>
 20088c0:	30c00317 	ldw	r3,12(r6)
 20088c4:	31800217 	ldw	r6,8(r6)
 20088c8:	30c00315 	stw	r3,12(r6)
 20088cc:	19800215 	stw	r6,8(r3)
 20088d0:	10c00054 	ori	r3,r2,1
 20088d4:	20c00115 	stw	r3,4(r4)
 20088d8:	2087883a 	add	r3,r4,r2
 20088dc:	18800015 	stw	r2,0(r3)
 20088e0:	283fd31e 	bne	r5,zero,2008830 <__alt_mem_onchip_memory2_0+0xfdff8830>
 20088e4:	00c07fc4 	movi	r3,511
 20088e8:	18801036 	bltu	r3,r2,200892c <_free_r+0x1a8>
 20088ec:	1006d0fa 	srli	r3,r2,3
 20088f0:	00800044 	movi	r2,1
 20088f4:	180bd0ba 	srai	r5,r3,2
 20088f8:	18c7883a 	add	r3,r3,r3
 20088fc:	18c7883a 	add	r3,r3,r3
 2008900:	114a983a 	sll	r5,r2,r5
 2008904:	38800117 	ldw	r2,4(r7)
 2008908:	18c7883a 	add	r3,r3,r3
 200890c:	2884b03a 	or	r2,r5,r2
 2008910:	38800115 	stw	r2,4(r7)
 2008914:	38c5883a 	add	r2,r7,r3
 2008918:	10c00217 	ldw	r3,8(r2)
 200891c:	20800315 	stw	r2,12(r4)
 2008920:	20c00215 	stw	r3,8(r4)
 2008924:	11000215 	stw	r4,8(r2)
 2008928:	00003506 	br	2008a00 <_free_r+0x27c>
 200892c:	1006d27a 	srli	r3,r2,9
 2008930:	01400104 	movi	r5,4
 2008934:	28c00336 	bltu	r5,r3,2008944 <_free_r+0x1c0>
 2008938:	1006d1ba 	srli	r3,r2,6
 200893c:	18c00e04 	addi	r3,r3,56
 2008940:	00001406 	br	2008994 <_free_r+0x210>
 2008944:	01400504 	movi	r5,20
 2008948:	28c00236 	bltu	r5,r3,2008954 <_free_r+0x1d0>
 200894c:	18c016c4 	addi	r3,r3,91
 2008950:	00001006 	br	2008994 <_free_r+0x210>
 2008954:	01401504 	movi	r5,84
 2008958:	28c00336 	bltu	r5,r3,2008968 <_free_r+0x1e4>
 200895c:	1006d33a 	srli	r3,r2,12
 2008960:	18c01b84 	addi	r3,r3,110
 2008964:	00000b06 	br	2008994 <_free_r+0x210>
 2008968:	01405504 	movi	r5,340
 200896c:	28c00336 	bltu	r5,r3,200897c <_free_r+0x1f8>
 2008970:	1006d3fa 	srli	r3,r2,15
 2008974:	18c01dc4 	addi	r3,r3,119
 2008978:	00000606 	br	2008994 <_free_r+0x210>
 200897c:	01415504 	movi	r5,1364
 2008980:	28c00336 	bltu	r5,r3,2008990 <_free_r+0x20c>
 2008984:	1006d4ba 	srli	r3,r2,18
 2008988:	18c01f04 	addi	r3,r3,124
 200898c:	00000106 	br	2008994 <_free_r+0x210>
 2008990:	00c01f84 	movi	r3,126
 2008994:	18cd883a 	add	r6,r3,r3
 2008998:	318d883a 	add	r6,r6,r6
 200899c:	318d883a 	add	r6,r6,r6
 20089a0:	398b883a 	add	r5,r7,r6
 20089a4:	29800217 	ldw	r6,8(r5)
 20089a8:	02008074 	movhi	r8,513
 20089ac:	42271704 	addi	r8,r8,-25508
 20089b0:	3140081e 	bne	r6,r5,20089d4 <_free_r+0x250>
 20089b4:	1807d0ba 	srai	r3,r3,2
 20089b8:	00800044 	movi	r2,1
 20089bc:	10c6983a 	sll	r3,r2,r3
 20089c0:	40800117 	ldw	r2,4(r8)
 20089c4:	1886b03a 	or	r3,r3,r2
 20089c8:	40c00115 	stw	r3,4(r8)
 20089cc:	3007883a 	mov	r3,r6
 20089d0:	00000806 	br	20089f4 <_free_r+0x270>
 20089d4:	3007883a 	mov	r3,r6
 20089d8:	01ffff04 	movi	r7,-4
 20089dc:	19800117 	ldw	r6,4(r3)
 20089e0:	31cc703a 	and	r6,r6,r7
 20089e4:	1180022e 	bgeu	r2,r6,20089f0 <_free_r+0x26c>
 20089e8:	18c00217 	ldw	r3,8(r3)
 20089ec:	197ffb1e 	bne	r3,r5,20089dc <__alt_mem_onchip_memory2_0+0xfdff89dc>
 20089f0:	19800317 	ldw	r6,12(r3)
 20089f4:	21800315 	stw	r6,12(r4)
 20089f8:	20c00215 	stw	r3,8(r4)
 20089fc:	31000215 	stw	r4,8(r6)
 2008a00:	19000315 	stw	r4,12(r3)
 2008a04:	003f8a06 	br	2008830 <__alt_mem_onchip_memory2_0+0xfdff8830>
 2008a08:	f800283a 	ret

02008a0c <__sfvwrite_small_dev>:
 2008a0c:	2880000b 	ldhu	r2,0(r5)
 2008a10:	defffa04 	addi	sp,sp,-24
 2008a14:	dc000015 	stw	r16,0(sp)
 2008a18:	dfc00515 	stw	ra,20(sp)
 2008a1c:	dd000415 	stw	r20,16(sp)
 2008a20:	dcc00315 	stw	r19,12(sp)
 2008a24:	dc800215 	stw	r18,8(sp)
 2008a28:	dc400115 	stw	r17,4(sp)
 2008a2c:	1080020c 	andi	r2,r2,8
 2008a30:	2821883a 	mov	r16,r5
 2008a34:	10001726 	beq	r2,zero,2008a94 <__sfvwrite_small_dev+0x88>
 2008a38:	2880008f 	ldh	r2,2(r5)
 2008a3c:	10001216 	blt	r2,zero,2008a88 <__sfvwrite_small_dev+0x7c>
 2008a40:	2027883a 	mov	r19,r4
 2008a44:	3025883a 	mov	r18,r6
 2008a48:	3823883a 	mov	r17,r7
 2008a4c:	05010004 	movi	r20,1024
 2008a50:	04400b0e 	bge	zero,r17,2008a80 <__sfvwrite_small_dev+0x74>
 2008a54:	8140008f 	ldh	r5,2(r16)
 2008a58:	880f883a 	mov	r7,r17
 2008a5c:	a440010e 	bge	r20,r17,2008a64 <__sfvwrite_small_dev+0x58>
 2008a60:	01c10004 	movi	r7,1024
 2008a64:	9809883a 	mov	r4,r19
 2008a68:	900d883a 	mov	r6,r18
 2008a6c:	2008b0c0 	call	2008b0c <_write_r>
 2008a70:	0080050e 	bge	zero,r2,2008a88 <__sfvwrite_small_dev+0x7c>
 2008a74:	88a3c83a 	sub	r17,r17,r2
 2008a78:	90a5883a 	add	r18,r18,r2
 2008a7c:	003ff406 	br	2008a50 <__alt_mem_onchip_memory2_0+0xfdff8a50>
 2008a80:	0005883a 	mov	r2,zero
 2008a84:	00000406 	br	2008a98 <__sfvwrite_small_dev+0x8c>
 2008a88:	8080000b 	ldhu	r2,0(r16)
 2008a8c:	10801014 	ori	r2,r2,64
 2008a90:	8080000d 	sth	r2,0(r16)
 2008a94:	00bfffc4 	movi	r2,-1
 2008a98:	dfc00517 	ldw	ra,20(sp)
 2008a9c:	dd000417 	ldw	r20,16(sp)
 2008aa0:	dcc00317 	ldw	r19,12(sp)
 2008aa4:	dc800217 	ldw	r18,8(sp)
 2008aa8:	dc400117 	ldw	r17,4(sp)
 2008aac:	dc000017 	ldw	r16,0(sp)
 2008ab0:	dec00604 	addi	sp,sp,24
 2008ab4:	f800283a 	ret

02008ab8 <_gettimeofday_r>:
 2008ab8:	defffd04 	addi	sp,sp,-12
 2008abc:	dc000015 	stw	r16,0(sp)
 2008ac0:	04008074 	movhi	r16,513
 2008ac4:	dc400115 	stw	r17,4(sp)
 2008ac8:	84296c04 	addi	r16,r16,-23120
 2008acc:	2023883a 	mov	r17,r4
 2008ad0:	2809883a 	mov	r4,r5
 2008ad4:	300b883a 	mov	r5,r6
 2008ad8:	dfc00215 	stw	ra,8(sp)
 2008adc:	80000015 	stw	zero,0(r16)
 2008ae0:	2008c700 	call	2008c70 <gettimeofday>
 2008ae4:	00ffffc4 	movi	r3,-1
 2008ae8:	10c0031e 	bne	r2,r3,2008af8 <_gettimeofday_r+0x40>
 2008aec:	80c00017 	ldw	r3,0(r16)
 2008af0:	18000126 	beq	r3,zero,2008af8 <_gettimeofday_r+0x40>
 2008af4:	88c00015 	stw	r3,0(r17)
 2008af8:	dfc00217 	ldw	ra,8(sp)
 2008afc:	dc400117 	ldw	r17,4(sp)
 2008b00:	dc000017 	ldw	r16,0(sp)
 2008b04:	dec00304 	addi	sp,sp,12
 2008b08:	f800283a 	ret

02008b0c <_write_r>:
 2008b0c:	defffd04 	addi	sp,sp,-12
 2008b10:	dc000015 	stw	r16,0(sp)
 2008b14:	04008074 	movhi	r16,513
 2008b18:	dc400115 	stw	r17,4(sp)
 2008b1c:	84296c04 	addi	r16,r16,-23120
 2008b20:	2023883a 	mov	r17,r4
 2008b24:	2809883a 	mov	r4,r5
 2008b28:	300b883a 	mov	r5,r6
 2008b2c:	380d883a 	mov	r6,r7
 2008b30:	dfc00215 	stw	ra,8(sp)
 2008b34:	80000015 	stw	zero,0(r16)
 2008b38:	20090200 	call	2009020 <write>
 2008b3c:	00ffffc4 	movi	r3,-1
 2008b40:	10c0031e 	bne	r2,r3,2008b50 <_write_r+0x44>
 2008b44:	80c00017 	ldw	r3,0(r16)
 2008b48:	18000126 	beq	r3,zero,2008b50 <_write_r+0x44>
 2008b4c:	88c00015 	stw	r3,0(r17)
 2008b50:	dfc00217 	ldw	ra,8(sp)
 2008b54:	dc400117 	ldw	r17,4(sp)
 2008b58:	dc000017 	ldw	r16,0(sp)
 2008b5c:	dec00304 	addi	sp,sp,12
 2008b60:	f800283a 	ret

02008b64 <__muldi3>:
 2008b64:	defff604 	addi	sp,sp,-40
 2008b68:	dd800615 	stw	r22,24(sp)
 2008b6c:	dd400515 	stw	r21,20(sp)
 2008b70:	25bfffcc 	andi	r22,r4,65535
 2008b74:	357fffcc 	andi	r21,r6,65535
 2008b78:	dc400115 	stw	r17,4(sp)
 2008b7c:	2022d43a 	srli	r17,r4,16
 2008b80:	dcc00315 	stw	r19,12(sp)
 2008b84:	dc800215 	stw	r18,8(sp)
 2008b88:	2027883a 	mov	r19,r4
 2008b8c:	2825883a 	mov	r18,r5
 2008b90:	a809883a 	mov	r4,r21
 2008b94:	b00b883a 	mov	r5,r22
 2008b98:	dfc00915 	stw	ra,36(sp)
 2008b9c:	df000815 	stw	fp,32(sp)
 2008ba0:	ddc00715 	stw	r23,28(sp)
 2008ba4:	3839883a 	mov	fp,r7
 2008ba8:	302ed43a 	srli	r23,r6,16
 2008bac:	dd000415 	stw	r20,16(sp)
 2008bb0:	dc000015 	stw	r16,0(sp)
 2008bb4:	3029883a 	mov	r20,r6
 2008bb8:	2003c800 	call	2003c80 <__mulsi3>
 2008bbc:	a809883a 	mov	r4,r21
 2008bc0:	880b883a 	mov	r5,r17
 2008bc4:	1021883a 	mov	r16,r2
 2008bc8:	2003c800 	call	2003c80 <__mulsi3>
 2008bcc:	880b883a 	mov	r5,r17
 2008bd0:	b809883a 	mov	r4,r23
 2008bd4:	102b883a 	mov	r21,r2
 2008bd8:	2003c800 	call	2003c80 <__mulsi3>
 2008bdc:	b809883a 	mov	r4,r23
 2008be0:	b00b883a 	mov	r5,r22
 2008be4:	1023883a 	mov	r17,r2
 2008be8:	2003c800 	call	2003c80 <__mulsi3>
 2008bec:	8012d43a 	srli	r9,r16,16
 2008bf0:	a885883a 	add	r2,r21,r2
 2008bf4:	1251883a 	add	r8,r2,r9
 2008bf8:	4540022e 	bgeu	r8,r21,2008c04 <__muldi3+0xa0>
 2008bfc:	00800074 	movhi	r2,1
 2008c00:	88a3883a 	add	r17,r17,r2
 2008c04:	4006d43a 	srli	r3,r8,16
 2008c08:	4010943a 	slli	r8,r8,16
 2008c0c:	9809883a 	mov	r4,r19
 2008c10:	e00b883a 	mov	r5,fp
 2008c14:	843fffcc 	andi	r16,r16,65535
 2008c18:	88e3883a 	add	r17,r17,r3
 2008c1c:	4421883a 	add	r16,r8,r16
 2008c20:	2003c800 	call	2003c80 <__mulsi3>
 2008c24:	a009883a 	mov	r4,r20
 2008c28:	900b883a 	mov	r5,r18
 2008c2c:	1027883a 	mov	r19,r2
 2008c30:	2003c800 	call	2003c80 <__mulsi3>
 2008c34:	9885883a 	add	r2,r19,r2
 2008c38:	1447883a 	add	r3,r2,r17
 2008c3c:	8005883a 	mov	r2,r16
 2008c40:	dfc00917 	ldw	ra,36(sp)
 2008c44:	df000817 	ldw	fp,32(sp)
 2008c48:	ddc00717 	ldw	r23,28(sp)
 2008c4c:	dd800617 	ldw	r22,24(sp)
 2008c50:	dd400517 	ldw	r21,20(sp)
 2008c54:	dd000417 	ldw	r20,16(sp)
 2008c58:	dcc00317 	ldw	r19,12(sp)
 2008c5c:	dc800217 	ldw	r18,8(sp)
 2008c60:	dc400117 	ldw	r17,4(sp)
 2008c64:	dc000017 	ldw	r16,0(sp)
 2008c68:	dec00a04 	addi	sp,sp,40
 2008c6c:	f800283a 	ret

02008c70 <gettimeofday>:
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2008c70:	00808074 	movhi	r2,513
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 2008c74:	defffb04 	addi	sp,sp,-20
 2008c78:	10a97404 	addi	r2,r2,-23088
 2008c7c:	dcc00315 	stw	r19,12(sp)
 2008c80:	14c00017 	ldw	r19,0(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2008c84:	00808074 	movhi	r2,513
 2008c88:	10a97504 	addi	r2,r2,-23084
 2008c8c:	dc800215 	stw	r18,8(sp)
 2008c90:	14800017 	ldw	r18,0(r2)
 2008c94:	dfc00415 	stw	ra,16(sp)
 2008c98:	dc400115 	stw	r17,4(sp)
 2008c9c:	dc000015 	stw	r16,0(sp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 2008ca0:	90003c26 	beq	r18,zero,2008d94 <gettimeofday+0x124>
 2008ca4:	2021883a 	mov	r16,r4
 2008ca8:	2823883a 	mov	r17,r5
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 2008cac:	9809883a 	mov	r4,r19
 2008cb0:	900b883a 	mov	r5,r18
 2008cb4:	2003c700 	call	2003c70 <__udivsi3>
 2008cb8:	d0e15417 	ldw	r3,-31408(gp)
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 2008cbc:	010003f4 	movhi	r4,15
 2008cc0:	21109004 	addi	r4,r4,16960
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 2008cc4:	10c5883a 	add	r2,r2,r3
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 2008cc8:	900b883a 	mov	r5,r18
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 2008ccc:	80800015 	stw	r2,0(r16)
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 2008cd0:	2003c700 	call	2003c70 <__udivsi3>
 2008cd4:	1009883a 	mov	r4,r2
 2008cd8:	000b883a 	mov	r5,zero
 2008cdc:	980d883a 	mov	r6,r19
 2008ce0:	000f883a 	mov	r7,zero
 2008ce4:	2008b640 	call	2008b64 <__muldi3>
 2008ce8:	018003f4 	movhi	r6,15
 2008cec:	1009883a 	mov	r4,r2
 2008cf0:	180b883a 	mov	r5,r3
 2008cf4:	31909004 	addi	r6,r6,16960
 2008cf8:	000f883a 	mov	r7,zero
 2008cfc:	20090f40 	call	20090f4 <__umoddi3>
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 2008d00:	d0e15404 	addi	r3,gp,-31408
 2008d04:	18c00117 	ldw	r3,4(r3)
          break;
      }
      else
      {
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
 2008d08:	010003f4 	movhi	r4,15
 2008d0c:	21109004 	addi	r4,r4,16960
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 2008d10:	1885883a 	add	r2,r3,r2
 2008d14:	80800115 	stw	r2,4(r16)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 2008d18:	80800117 	ldw	r2,4(r16)
 2008d1c:	1000040e 	bge	r2,zero,2008d30 <gettimeofday+0xc0>
      if (ptimeval->tv_sec <= 0)
 2008d20:	80c00017 	ldw	r3,0(r16)
 2008d24:	00c00716 	blt	zero,r3,2008d44 <gettimeofday+0xd4>
      {
          ptimeval->tv_sec = 0;
 2008d28:	80000015 	stw	zero,0(r16)
          ptimeval->tv_usec = 0;
 2008d2c:	80000115 	stw	zero,4(r16)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 2008d30:	010003f4 	movhi	r4,15
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
 2008d34:	017ffc74 	movhi	r5,65521
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 2008d38:	21108fc4 	addi	r4,r4,16959
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
 2008d3c:	296f7004 	addi	r5,r5,-16960
 2008d40:	00000506 	br	2008d58 <gettimeofday+0xe8>
          ptimeval->tv_usec = 0;
          break;
      }
      else
      {
          ptimeval->tv_sec--;
 2008d44:	18ffffc4 	addi	r3,r3,-1
          ptimeval->tv_usec += ALT_US;
 2008d48:	1105883a 	add	r2,r2,r4
          ptimeval->tv_usec = 0;
          break;
      }
      else
      {
          ptimeval->tv_sec--;
 2008d4c:	80c00015 	stw	r3,0(r16)
          ptimeval->tv_usec += ALT_US;
 2008d50:	80800115 	stw	r2,4(r16)
 2008d54:	003ff006 	br	2008d18 <__alt_mem_onchip_memory2_0+0xfdff8d18>
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 2008d58:	80800117 	ldw	r2,4(r16)
 2008d5c:	2080060e 	bge	r4,r2,2008d78 <gettimeofday+0x108>
      ptimeval->tv_sec++;
 2008d60:	80c00017 	ldw	r3,0(r16)
      ptimeval->tv_usec -= ALT_US;
 2008d64:	1145883a 	add	r2,r2,r5
 2008d68:	80800115 	stw	r2,4(r16)
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
      ptimeval->tv_sec++;
 2008d6c:	18c00044 	addi	r3,r3,1
 2008d70:	80c00015 	stw	r3,0(r16)
 2008d74:	003ff806 	br	2008d58 <__alt_mem_onchip_memory2_0+0xfdff8d58>
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 2008d78:	88000826 	beq	r17,zero,2008d9c <gettimeofday+0x12c>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 2008d7c:	d0a15617 	ldw	r2,-31400(gp)
 2008d80:	88800015 	stw	r2,0(r17)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 2008d84:	d0a15604 	addi	r2,gp,-31400
 2008d88:	10800117 	ldw	r2,4(r2)
 2008d8c:	88800115 	stw	r2,4(r17)
 2008d90:	00000206 	br	2008d9c <gettimeofday+0x12c>
    }

    return 0;
  }

  return -ENOTSUP;
 2008d94:	00bfde84 	movi	r2,-134
 2008d98:	00000106 	br	2008da0 <gettimeofday+0x130>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    }

    return 0;
 2008d9c:	0005883a 	mov	r2,zero
  }

  return -ENOTSUP;
}
 2008da0:	dfc00417 	ldw	ra,16(sp)
 2008da4:	dcc00317 	ldw	r19,12(sp)
 2008da8:	dc800217 	ldw	r18,8(sp)
 2008dac:	dc400117 	ldw	r17,4(sp)
 2008db0:	dc000017 	ldw	r16,0(sp)
 2008db4:	dec00504 	addi	sp,sp,20
 2008db8:	f800283a 	ret

02008dbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2008dbc:	deffff04 	addi	sp,sp,-4
 2008dc0:	01008074 	movhi	r4,513
 2008dc4:	01408074 	movhi	r5,513
 2008dc8:	dfc00015 	stw	ra,0(sp)
 2008dcc:	2126df04 	addi	r4,r4,-25732
 2008dd0:	29682304 	addi	r5,r5,-24436

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2008dd4:	2140061e 	bne	r4,r5,2008df0 <alt_load+0x34>
 2008dd8:	01008034 	movhi	r4,512
 2008ddc:	01408034 	movhi	r5,512
 2008de0:	21000804 	addi	r4,r4,32
 2008de4:	29400804 	addi	r5,r5,32
 2008de8:	2140141e 	bne	r4,r5,2008e3c <alt_load+0x80>
 2008dec:	00000d06 	br	2008e24 <alt_load+0x68>
 2008df0:	00c08074 	movhi	r3,513
 2008df4:	18e82304 	addi	r3,r3,-24436
 2008df8:	00bfff04 	movi	r2,-4
 2008dfc:	1907c83a 	sub	r3,r3,r4
 2008e00:	1886703a 	and	r3,r3,r2
 2008e04:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2008e08:	10fff326 	beq	r2,r3,2008dd8 <__alt_mem_onchip_memory2_0+0xfdff8dd8>
 2008e0c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 2008e10:	39c00017 	ldw	r7,0(r7)
 2008e14:	110d883a 	add	r6,r2,r4
 2008e18:	10800104 	addi	r2,r2,4
 2008e1c:	31c00015 	stw	r7,0(r6)
 2008e20:	003ff906 	br	2008e08 <__alt_mem_onchip_memory2_0+0xfdff8e08>
 2008e24:	01008074 	movhi	r4,513
 2008e28:	01408074 	movhi	r5,513
 2008e2c:	2125c404 	addi	r4,r4,-26864
 2008e30:	2965c404 	addi	r5,r5,-26864

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2008e34:	2140121e 	bne	r4,r5,2008e80 <alt_load+0xc4>
 2008e38:	00000d06 	br	2008e70 <alt_load+0xb4>
 2008e3c:	00c08034 	movhi	r3,512
 2008e40:	18c00804 	addi	r3,r3,32
 2008e44:	00bfff04 	movi	r2,-4
 2008e48:	1907c83a 	sub	r3,r3,r4
 2008e4c:	1886703a 	and	r3,r3,r2
 2008e50:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2008e54:	10fff326 	beq	r2,r3,2008e24 <__alt_mem_onchip_memory2_0+0xfdff8e24>
 2008e58:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 2008e5c:	39c00017 	ldw	r7,0(r7)
 2008e60:	110d883a 	add	r6,r2,r4
 2008e64:	10800104 	addi	r2,r2,4
 2008e68:	31c00015 	stw	r7,0(r6)
 2008e6c:	003ff906 	br	2008e54 <__alt_mem_onchip_memory2_0+0xfdff8e54>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2008e70:	20090e40 	call	20090e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 2008e74:	dfc00017 	ldw	ra,0(sp)
 2008e78:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 2008e7c:	20090e81 	jmpi	20090e8 <alt_icache_flush_all>
 2008e80:	00c08074 	movhi	r3,513
 2008e84:	18e6df04 	addi	r3,r3,-25732
 2008e88:	00bfff04 	movi	r2,-4
 2008e8c:	1907c83a 	sub	r3,r3,r4
 2008e90:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2008e94:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2008e98:	10fff526 	beq	r2,r3,2008e70 <__alt_mem_onchip_memory2_0+0xfdff8e70>
 2008e9c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 2008ea0:	39c00017 	ldw	r7,0(r7)
 2008ea4:	110d883a 	add	r6,r2,r4
 2008ea8:	10800104 	addi	r2,r2,4
 2008eac:	31c00015 	stw	r7,0(r6)
 2008eb0:	003ff906 	br	2008e98 <__alt_mem_onchip_memory2_0+0xfdff8e98>

02008eb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2008eb4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2008eb8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2008ebc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2008ec0:	200908c0 	call	200908c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2008ec4:	20090ac0 	call	20090ac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2008ec8:	d1215a17 	ldw	r4,-31384(gp)
 2008ecc:	d1615917 	ldw	r5,-31388(gp)
 2008ed0:	d1a15817 	ldw	r6,-31392(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2008ed4:	dfc00017 	ldw	ra,0(sp)
 2008ed8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2008edc:	20015e41 	jmpi	20015e4 <main>

02008ee0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2008ee0:	f800283a 	ret

02008ee4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2008ee4:	f800283a 	ret

02008ee8 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008ee8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008eec:	00bfff84 	movi	r2,-2
 2008ef0:	2884703a 	and	r2,r5,r2
 2008ef4:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2008ef8:	d0a00517 	ldw	r2,-32748(gp)
 2008efc:	00ffff04 	movi	r3,-4
 2008f00:	108000c4 	addi	r2,r2,3
 2008f04:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2008f08:	00c10034 	movhi	r3,1024
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2008f0c:	d0a00515 	stw	r2,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2008f10:	1109883a 	add	r4,r2,r4
 2008f14:	18c00004 	addi	r3,r3,0
 2008f18:	1900032e 	bgeu	r3,r4,2008f28 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008f1c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2008f20:	00bfffc4 	movi	r2,-1
 2008f24:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 2008f28:	d1200515 	stw	r4,-32748(gp)
 2008f2c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 2008f30:	f800283a 	ret

02008f34 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008f34:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008f38:	00bfff84 	movi	r2,-2
 2008f3c:	1884703a 	and	r2,r3,r2
 2008f40:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2008f44:	21400117 	ldw	r5,4(r4)
 2008f48:	20800017 	ldw	r2,0(r4)
 2008f4c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
 2008f50:	21400117 	ldw	r5,4(r4)
 2008f54:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2008f58:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
 2008f5c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008f60:	1801703a 	wrctl	status,r3
 2008f64:	f800283a 	ret

02008f68 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2008f68:	d0a15b17 	ldw	r2,-31380(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2008f6c:	defffb04 	addi	sp,sp,-20
 2008f70:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2008f74:	d4200617 	ldw	r16,-32744(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2008f78:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2008f7c:	dc800215 	stw	r18,8(sp)
 2008f80:	dc400115 	stw	r17,4(sp)
 2008f84:	dfc00415 	stw	ra,16(sp)
 2008f88:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2008f8c:	d0a15b15 	stw	r2,-31380(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2008f90:	d4600604 	addi	r17,gp,-32744
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
 2008f94:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2008f98:	84401a26 	beq	r16,r17,2009004 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2008f9c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 2008fa0:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2008fa4:	10000326 	beq	r2,zero,2008fb4 <alt_tick+0x4c>
 2008fa8:	d0a15b17 	ldw	r2,-31380(gp)
 2008fac:	1000011e 	bne	r2,zero,2008fb4 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
 2008fb0:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2008fb4:	d0e15b17 	ldw	r3,-31380(gp)
 2008fb8:	80800217 	ldw	r2,8(r16)
 2008fbc:	18800f36 	bltu	r3,r2,2008ffc <alt_tick+0x94>
 2008fc0:	80800403 	ldbu	r2,16(r16)
 2008fc4:	10000d1e 	bne	r2,zero,2008ffc <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
 2008fc8:	80800317 	ldw	r2,12(r16)
 2008fcc:	81000517 	ldw	r4,20(r16)
 2008fd0:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2008fd4:	1000031e 	bne	r2,zero,2008fe4 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
 2008fd8:	8009883a 	mov	r4,r16
 2008fdc:	2008f340 	call	2008f34 <alt_alarm_stop>
 2008fe0:	00000606 	br	2008ffc <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
 2008fe4:	80c00217 	ldw	r3,8(r16)
 2008fe8:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2008fec:	d0e15b17 	ldw	r3,-31380(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 2008ff0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2008ff4:	10c0012e 	bgeu	r2,r3,2008ffc <alt_tick+0x94>
        {
          alarm->rollover = 1;
 2008ff8:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2008ffc:	9821883a 	mov	r16,r19
 2009000:	003fe506 	br	2008f98 <__alt_mem_onchip_memory2_0+0xfdff8f98>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2009004:	dfc00417 	ldw	ra,16(sp)
 2009008:	dcc00317 	ldw	r19,12(sp)
 200900c:	dc800217 	ldw	r18,8(sp)
 2009010:	dc400117 	ldw	r17,4(sp)
 2009014:	dc000017 	ldw	r16,0(sp)
 2009018:	dec00504 	addi	sp,sp,20
 200901c:	f800283a 	ret

02009020 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 2009020:	00800044 	movi	r2,1
 2009024:	20800226 	beq	r4,r2,2009030 <write+0x10>
 2009028:	00800084 	movi	r2,2
 200902c:	2080041e 	bne	r4,r2,2009040 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 2009030:	01008074 	movhi	r4,513
 2009034:	21282104 	addi	r4,r4,-24444
 2009038:	000f883a 	mov	r7,zero
 200903c:	20090b01 	jmpi	20090b0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 2009040:	00808074 	movhi	r2,513
 2009044:	10a82204 	addi	r2,r2,-24440
 2009048:	10800017 	ldw	r2,0(r2)
 200904c:	10000926 	beq	r2,zero,2009074 <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2009050:	deffff04 	addi	sp,sp,-4
 2009054:	dfc00015 	stw	ra,0(sp)
 2009058:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 200905c:	00c01444 	movi	r3,81
 2009060:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 2009064:	00bfffc4 	movi	r2,-1
 2009068:	dfc00017 	ldw	ra,0(sp)
 200906c:	dec00104 	addi	sp,sp,4
 2009070:	f800283a 	ret
 2009074:	00808074 	movhi	r2,513
 2009078:	10a96c04 	addi	r2,r2,-23120
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 200907c:	00c01444 	movi	r3,81
 2009080:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 2009084:	00bfffc4 	movi	r2,-1
 2009088:	f800283a 	ret

0200908c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200908c:	deffff04 	addi	sp,sp,-4
 2009090:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 2009094:	20090ec0 	call	20090ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2009098:	00800044 	movi	r2,1
 200909c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20090a0:	dfc00017 	ldw	ra,0(sp)
 20090a4:	dec00104 	addi	sp,sp,4
 20090a8:	f800283a 	ret

020090ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20090ac:	f800283a 	ret

020090b0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 20090b0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20090b4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 20090b8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20090bc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 20090c0:	2980072e 	bgeu	r5,r6,20090e0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20090c4:	38c00037 	ldwio	r3,0(r7)
 20090c8:	18ffffec 	andhi	r3,r3,65535
 20090cc:	183ffc26 	beq	r3,zero,20090c0 <__alt_mem_onchip_memory2_0+0xfdff90c0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 20090d0:	28c00007 	ldb	r3,0(r5)
 20090d4:	20c00035 	stwio	r3,0(r4)
 20090d8:	29400044 	addi	r5,r5,1
 20090dc:	003ff806 	br	20090c0 <__alt_mem_onchip_memory2_0+0xfdff90c0>

  return count;
}
 20090e0:	f800283a 	ret

020090e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 20090e4:	f800283a 	ret

020090e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20090e8:	f800283a 	ret

020090ec <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 20090ec:	000170fa 	wrctl	ienable,zero
 20090f0:	f800283a 	ret

020090f4 <__umoddi3>:
 20090f4:	defff404 	addi	sp,sp,-48
 20090f8:	dd800815 	stw	r22,32(sp)
 20090fc:	dc400315 	stw	r17,12(sp)
 2009100:	dc000215 	stw	r16,8(sp)
 2009104:	dfc00b15 	stw	ra,44(sp)
 2009108:	df000a15 	stw	fp,40(sp)
 200910c:	ddc00915 	stw	r23,36(sp)
 2009110:	dd400715 	stw	r21,28(sp)
 2009114:	dd000615 	stw	r20,24(sp)
 2009118:	dcc00515 	stw	r19,20(sp)
 200911c:	dc800415 	stw	r18,16(sp)
 2009120:	2021883a 	mov	r16,r4
 2009124:	2823883a 	mov	r17,r5
 2009128:	282d883a 	mov	r22,r5
 200912c:	38003c1e 	bne	r7,zero,2009220 <__umoddi3+0x12c>
 2009130:	3027883a 	mov	r19,r6
 2009134:	2029883a 	mov	r20,r4
 2009138:	2980522e 	bgeu	r5,r6,2009284 <__umoddi3+0x190>
 200913c:	00bfffd4 	movui	r2,65535
 2009140:	1180a436 	bltu	r2,r6,20093d4 <__umoddi3+0x2e0>
 2009144:	00803fc4 	movi	r2,255
 2009148:	11815e2e 	bgeu	r2,r6,20096c4 <__umoddi3+0x5d0>
 200914c:	01400204 	movi	r5,8
 2009150:	2805883a 	mov	r2,r5
 2009154:	314ad83a 	srl	r5,r6,r5
 2009158:	00c08074 	movhi	r3,513
 200915c:	18e69f04 	addi	r3,r3,-25988
 2009160:	194b883a 	add	r5,r3,r5
 2009164:	29000003 	ldbu	r4,0(r5)
 2009168:	2089883a 	add	r4,r4,r2
 200916c:	00800804 	movi	r2,32
 2009170:	1105c83a 	sub	r2,r2,r4
 2009174:	10010c26 	beq	r2,zero,20095a8 <__umoddi3+0x4b4>
 2009178:	88a2983a 	sll	r17,r17,r2
 200917c:	8108d83a 	srl	r4,r16,r4
 2009180:	30a6983a 	sll	r19,r6,r2
 2009184:	80a8983a 	sll	r20,r16,r2
 2009188:	1025883a 	mov	r18,r2
 200918c:	892cb03a 	or	r22,r17,r4
 2009190:	9822d43a 	srli	r17,r19,16
 2009194:	b009883a 	mov	r4,r22
 2009198:	9d7fffcc 	andi	r21,r19,65535
 200919c:	880b883a 	mov	r5,r17
 20091a0:	2003c780 	call	2003c78 <__umodsi3>
 20091a4:	b009883a 	mov	r4,r22
 20091a8:	880b883a 	mov	r5,r17
 20091ac:	102f883a 	mov	r23,r2
 20091b0:	2003c700 	call	2003c70 <__udivsi3>
 20091b4:	1009883a 	mov	r4,r2
 20091b8:	a80b883a 	mov	r5,r21
 20091bc:	2003c800 	call	2003c80 <__mulsi3>
 20091c0:	b82e943a 	slli	r23,r23,16
 20091c4:	a008d43a 	srli	r4,r20,16
 20091c8:	b906b03a 	or	r3,r23,r4
 20091cc:	1880042e 	bgeu	r3,r2,20091e0 <__umoddi3+0xec>
 20091d0:	1cc7883a 	add	r3,r3,r19
 20091d4:	1cc00236 	bltu	r3,r19,20091e0 <__umoddi3+0xec>
 20091d8:	1880012e 	bgeu	r3,r2,20091e0 <__umoddi3+0xec>
 20091dc:	1cc7883a 	add	r3,r3,r19
 20091e0:	18a1c83a 	sub	r16,r3,r2
 20091e4:	8009883a 	mov	r4,r16
 20091e8:	880b883a 	mov	r5,r17
 20091ec:	2003c780 	call	2003c78 <__umodsi3>
 20091f0:	8009883a 	mov	r4,r16
 20091f4:	880b883a 	mov	r5,r17
 20091f8:	102d883a 	mov	r22,r2
 20091fc:	2003c700 	call	2003c70 <__udivsi3>
 2009200:	1009883a 	mov	r4,r2
 2009204:	a80b883a 	mov	r5,r21
 2009208:	b02c943a 	slli	r22,r22,16
 200920c:	2003c800 	call	2003c80 <__mulsi3>
 2009210:	a13fffcc 	andi	r4,r20,65535
 2009214:	b106b03a 	or	r3,r22,r4
 2009218:	1880572e 	bgeu	r3,r2,2009378 <__umoddi3+0x284>
 200921c:	00005206 	br	2009368 <__umoddi3+0x274>
 2009220:	29c05936 	bltu	r5,r7,2009388 <__umoddi3+0x294>
 2009224:	00bfffd4 	movui	r2,65535
 2009228:	11c0652e 	bgeu	r2,r7,20093c0 <__umoddi3+0x2cc>
 200922c:	00804034 	movhi	r2,256
 2009230:	10bfffc4 	addi	r2,r2,-1
 2009234:	11c1172e 	bgeu	r2,r7,2009694 <__umoddi3+0x5a0>
 2009238:	01400604 	movi	r5,24
 200923c:	282b883a 	mov	r21,r5
 2009240:	394ad83a 	srl	r5,r7,r5
 2009244:	00c08074 	movhi	r3,513
 2009248:	18e69f04 	addi	r3,r3,-25988
 200924c:	194b883a 	add	r5,r3,r5
 2009250:	28800003 	ldbu	r2,0(r5)
 2009254:	00c00804 	movi	r3,32
 2009258:	156b883a 	add	r21,r2,r21
 200925c:	1d69c83a 	sub	r20,r3,r21
 2009260:	a000671e 	bne	r20,zero,2009400 <__umoddi3+0x30c>
 2009264:	3c400136 	bltu	r7,r17,200926c <__umoddi3+0x178>
 2009268:	81812336 	bltu	r16,r6,20096f8 <__umoddi3+0x604>
 200926c:	8185c83a 	sub	r2,r16,r6
 2009270:	89e3c83a 	sub	r17,r17,r7
 2009274:	8087803a 	cmpltu	r3,r16,r2
 2009278:	88edc83a 	sub	r22,r17,r3
 200927c:	b007883a 	mov	r3,r22
 2009280:	00004306 	br	2009390 <__umoddi3+0x29c>
 2009284:	3000041e 	bne	r6,zero,2009298 <__umoddi3+0x1a4>
 2009288:	01000044 	movi	r4,1
 200928c:	000b883a 	mov	r5,zero
 2009290:	2003c700 	call	2003c70 <__udivsi3>
 2009294:	1027883a 	mov	r19,r2
 2009298:	00bfffd4 	movui	r2,65535
 200929c:	14c0532e 	bgeu	r2,r19,20093ec <__umoddi3+0x2f8>
 20092a0:	00804034 	movhi	r2,256
 20092a4:	10bfffc4 	addi	r2,r2,-1
 20092a8:	14c1032e 	bgeu	r2,r19,20096b8 <__umoddi3+0x5c4>
 20092ac:	00800604 	movi	r2,24
 20092b0:	1007883a 	mov	r3,r2
 20092b4:	9884d83a 	srl	r2,r19,r2
 20092b8:	01008074 	movhi	r4,513
 20092bc:	21269f04 	addi	r4,r4,-25988
 20092c0:	2085883a 	add	r2,r4,r2
 20092c4:	11000003 	ldbu	r4,0(r2)
 20092c8:	00800804 	movi	r2,32
 20092cc:	20c7883a 	add	r3,r4,r3
 20092d0:	10c5c83a 	sub	r2,r2,r3
 20092d4:	1000b61e 	bne	r2,zero,20095b0 <__umoddi3+0x4bc>
 20092d8:	982ad43a 	srli	r21,r19,16
 20092dc:	8ce3c83a 	sub	r17,r17,r19
 20092e0:	9dbfffcc 	andi	r22,r19,65535
 20092e4:	0025883a 	mov	r18,zero
 20092e8:	8809883a 	mov	r4,r17
 20092ec:	a80b883a 	mov	r5,r21
 20092f0:	2003c780 	call	2003c78 <__umodsi3>
 20092f4:	8809883a 	mov	r4,r17
 20092f8:	a80b883a 	mov	r5,r21
 20092fc:	102f883a 	mov	r23,r2
 2009300:	2003c700 	call	2003c70 <__udivsi3>
 2009304:	1009883a 	mov	r4,r2
 2009308:	b00b883a 	mov	r5,r22
 200930c:	2003c800 	call	2003c80 <__mulsi3>
 2009310:	b82e943a 	slli	r23,r23,16
 2009314:	a008d43a 	srli	r4,r20,16
 2009318:	b906b03a 	or	r3,r23,r4
 200931c:	1880032e 	bgeu	r3,r2,200932c <__umoddi3+0x238>
 2009320:	1cc7883a 	add	r3,r3,r19
 2009324:	1cc00136 	bltu	r3,r19,200932c <__umoddi3+0x238>
 2009328:	1880f136 	bltu	r3,r2,20096f0 <__umoddi3+0x5fc>
 200932c:	18a1c83a 	sub	r16,r3,r2
 2009330:	8009883a 	mov	r4,r16
 2009334:	a80b883a 	mov	r5,r21
 2009338:	2003c780 	call	2003c78 <__umodsi3>
 200933c:	8009883a 	mov	r4,r16
 2009340:	a80b883a 	mov	r5,r21
 2009344:	1023883a 	mov	r17,r2
 2009348:	2003c700 	call	2003c70 <__udivsi3>
 200934c:	1009883a 	mov	r4,r2
 2009350:	b00b883a 	mov	r5,r22
 2009354:	8822943a 	slli	r17,r17,16
 2009358:	2003c800 	call	2003c80 <__mulsi3>
 200935c:	a13fffcc 	andi	r4,r20,65535
 2009360:	8906b03a 	or	r3,r17,r4
 2009364:	1880042e 	bgeu	r3,r2,2009378 <__umoddi3+0x284>
 2009368:	1cc7883a 	add	r3,r3,r19
 200936c:	1cc00236 	bltu	r3,r19,2009378 <__umoddi3+0x284>
 2009370:	1880012e 	bgeu	r3,r2,2009378 <__umoddi3+0x284>
 2009374:	1cc7883a 	add	r3,r3,r19
 2009378:	1887c83a 	sub	r3,r3,r2
 200937c:	1c84d83a 	srl	r2,r3,r18
 2009380:	0007883a 	mov	r3,zero
 2009384:	00000206 	br	2009390 <__umoddi3+0x29c>
 2009388:	2005883a 	mov	r2,r4
 200938c:	2807883a 	mov	r3,r5
 2009390:	dfc00b17 	ldw	ra,44(sp)
 2009394:	df000a17 	ldw	fp,40(sp)
 2009398:	ddc00917 	ldw	r23,36(sp)
 200939c:	dd800817 	ldw	r22,32(sp)
 20093a0:	dd400717 	ldw	r21,28(sp)
 20093a4:	dd000617 	ldw	r20,24(sp)
 20093a8:	dcc00517 	ldw	r19,20(sp)
 20093ac:	dc800417 	ldw	r18,16(sp)
 20093b0:	dc400317 	ldw	r17,12(sp)
 20093b4:	dc000217 	ldw	r16,8(sp)
 20093b8:	dec00c04 	addi	sp,sp,48
 20093bc:	f800283a 	ret
 20093c0:	00803fc4 	movi	r2,255
 20093c4:	11c0b02e 	bgeu	r2,r7,2009688 <__umoddi3+0x594>
 20093c8:	01400204 	movi	r5,8
 20093cc:	282b883a 	mov	r21,r5
 20093d0:	003f9b06 	br	2009240 <__alt_mem_onchip_memory2_0+0xfdff9240>
 20093d4:	00804034 	movhi	r2,256
 20093d8:	10bfffc4 	addi	r2,r2,-1
 20093dc:	1180b02e 	bgeu	r2,r6,20096a0 <__umoddi3+0x5ac>
 20093e0:	01400604 	movi	r5,24
 20093e4:	2805883a 	mov	r2,r5
 20093e8:	003f5a06 	br	2009154 <__alt_mem_onchip_memory2_0+0xfdff9154>
 20093ec:	00803fc4 	movi	r2,255
 20093f0:	14c0ae2e 	bgeu	r2,r19,20096ac <__umoddi3+0x5b8>
 20093f4:	00800204 	movi	r2,8
 20093f8:	1007883a 	mov	r3,r2
 20093fc:	003fad06 	br	20092b4 <__alt_mem_onchip_memory2_0+0xfdff92b4>
 2009400:	3d0a983a 	sll	r5,r7,r20
 2009404:	356cd83a 	srl	r22,r6,r21
 2009408:	8d78d83a 	srl	fp,r17,r21
 200940c:	8d10983a 	sll	r8,r17,r20
 2009410:	2dacb03a 	or	r22,r5,r22
 2009414:	b02ed43a 	srli	r23,r22,16
 2009418:	8564d83a 	srl	r18,r16,r21
 200941c:	e009883a 	mov	r4,fp
 2009420:	b80b883a 	mov	r5,r23
 2009424:	44a4b03a 	or	r18,r8,r18
 2009428:	3526983a 	sll	r19,r6,r20
 200942c:	2003c780 	call	2003c78 <__umodsi3>
 2009430:	e009883a 	mov	r4,fp
 2009434:	b80b883a 	mov	r5,r23
 2009438:	b47fffcc 	andi	r17,r22,65535
 200943c:	d8800015 	stw	r2,0(sp)
 2009440:	2003c700 	call	2003c70 <__udivsi3>
 2009444:	1009883a 	mov	r4,r2
 2009448:	880b883a 	mov	r5,r17
 200944c:	1039883a 	mov	fp,r2
 2009450:	2003c800 	call	2003c80 <__mulsi3>
 2009454:	d9800017 	ldw	r6,0(sp)
 2009458:	9008d43a 	srli	r4,r18,16
 200945c:	8520983a 	sll	r16,r16,r20
 2009460:	300c943a 	slli	r6,r6,16
 2009464:	3106b03a 	or	r3,r6,r4
 2009468:	1880042e 	bgeu	r3,r2,200947c <__umoddi3+0x388>
 200946c:	1d87883a 	add	r3,r3,r22
 2009470:	e13fffc4 	addi	r4,fp,-1
 2009474:	1d809a2e 	bgeu	r3,r22,20096e0 <__umoddi3+0x5ec>
 2009478:	2039883a 	mov	fp,r4
 200947c:	1887c83a 	sub	r3,r3,r2
 2009480:	1809883a 	mov	r4,r3
 2009484:	b80b883a 	mov	r5,r23
 2009488:	d8c00115 	stw	r3,4(sp)
 200948c:	2003c780 	call	2003c78 <__umodsi3>
 2009490:	d8c00117 	ldw	r3,4(sp)
 2009494:	b80b883a 	mov	r5,r23
 2009498:	d8800015 	stw	r2,0(sp)
 200949c:	1809883a 	mov	r4,r3
 20094a0:	2003c700 	call	2003c70 <__udivsi3>
 20094a4:	880b883a 	mov	r5,r17
 20094a8:	1009883a 	mov	r4,r2
 20094ac:	102f883a 	mov	r23,r2
 20094b0:	2003c800 	call	2003c80 <__mulsi3>
 20094b4:	d9800017 	ldw	r6,0(sp)
 20094b8:	947fffcc 	andi	r17,r18,65535
 20094bc:	300c943a 	slli	r6,r6,16
 20094c0:	3464b03a 	or	r18,r6,r17
 20094c4:	9080042e 	bgeu	r18,r2,20094d8 <__umoddi3+0x3e4>
 20094c8:	95a5883a 	add	r18,r18,r22
 20094cc:	b8ffffc4 	addi	r3,r23,-1
 20094d0:	95807f2e 	bgeu	r18,r22,20096d0 <__umoddi3+0x5dc>
 20094d4:	182f883a 	mov	r23,r3
 20094d8:	e038943a 	slli	fp,fp,16
 20094dc:	980cd43a 	srli	r6,r19,16
 20094e0:	98ffffcc 	andi	r3,r19,65535
 20094e4:	bf38b03a 	or	fp,r23,fp
 20094e8:	e02ed43a 	srli	r23,fp,16
 20094ec:	e73fffcc 	andi	fp,fp,65535
 20094f0:	180b883a 	mov	r5,r3
 20094f4:	e009883a 	mov	r4,fp
 20094f8:	d9800015 	stw	r6,0(sp)
 20094fc:	d8c00115 	stw	r3,4(sp)
 2009500:	90a5c83a 	sub	r18,r18,r2
 2009504:	2003c800 	call	2003c80 <__mulsi3>
 2009508:	d8c00117 	ldw	r3,4(sp)
 200950c:	b809883a 	mov	r4,r23
 2009510:	1023883a 	mov	r17,r2
 2009514:	180b883a 	mov	r5,r3
 2009518:	2003c800 	call	2003c80 <__mulsi3>
 200951c:	d9800017 	ldw	r6,0(sp)
 2009520:	b809883a 	mov	r4,r23
 2009524:	d8800115 	stw	r2,4(sp)
 2009528:	300b883a 	mov	r5,r6
 200952c:	302f883a 	mov	r23,r6
 2009530:	2003c800 	call	2003c80 <__mulsi3>
 2009534:	e009883a 	mov	r4,fp
 2009538:	b80b883a 	mov	r5,r23
 200953c:	d8800015 	stw	r2,0(sp)
 2009540:	2003c800 	call	2003c80 <__mulsi3>
 2009544:	d8c00117 	ldw	r3,4(sp)
 2009548:	880cd43a 	srli	r6,r17,16
 200954c:	d9c00017 	ldw	r7,0(sp)
 2009550:	1885883a 	add	r2,r3,r2
 2009554:	118d883a 	add	r6,r2,r6
 2009558:	30c0022e 	bgeu	r6,r3,2009564 <__umoddi3+0x470>
 200955c:	00800074 	movhi	r2,1
 2009560:	388f883a 	add	r7,r7,r2
 2009564:	3006d43a 	srli	r3,r6,16
 2009568:	300c943a 	slli	r6,r6,16
 200956c:	8c7fffcc 	andi	r17,r17,65535
 2009570:	38c7883a 	add	r3,r7,r3
 2009574:	3463883a 	add	r17,r6,r17
 2009578:	90c03d36 	bltu	r18,r3,2009670 <__umoddi3+0x57c>
 200957c:	90c06026 	beq	r18,r3,2009700 <__umoddi3+0x60c>
 2009580:	90c9c83a 	sub	r4,r18,r3
 2009584:	880f883a 	mov	r7,r17
 2009588:	81cfc83a 	sub	r7,r16,r7
 200958c:	81c7803a 	cmpltu	r3,r16,r7
 2009590:	20c7c83a 	sub	r3,r4,r3
 2009594:	1d44983a 	sll	r2,r3,r21
 2009598:	3d0ed83a 	srl	r7,r7,r20
 200959c:	1d06d83a 	srl	r3,r3,r20
 20095a0:	11c4b03a 	or	r2,r2,r7
 20095a4:	003f7a06 	br	2009390 <__alt_mem_onchip_memory2_0+0xfdff9390>
 20095a8:	0025883a 	mov	r18,zero
 20095ac:	003ef806 	br	2009190 <__alt_mem_onchip_memory2_0+0xfdff9190>
 20095b0:	98a6983a 	sll	r19,r19,r2
 20095b4:	88e8d83a 	srl	r20,r17,r3
 20095b8:	80c6d83a 	srl	r3,r16,r3
 20095bc:	982ad43a 	srli	r21,r19,16
 20095c0:	88a2983a 	sll	r17,r17,r2
 20095c4:	a009883a 	mov	r4,r20
 20095c8:	a80b883a 	mov	r5,r21
 20095cc:	88eeb03a 	or	r23,r17,r3
 20095d0:	1025883a 	mov	r18,r2
 20095d4:	2003c780 	call	2003c78 <__umodsi3>
 20095d8:	a009883a 	mov	r4,r20
 20095dc:	a80b883a 	mov	r5,r21
 20095e0:	1023883a 	mov	r17,r2
 20095e4:	9dbfffcc 	andi	r22,r19,65535
 20095e8:	2003c700 	call	2003c70 <__udivsi3>
 20095ec:	1009883a 	mov	r4,r2
 20095f0:	b00b883a 	mov	r5,r22
 20095f4:	2003c800 	call	2003c80 <__mulsi3>
 20095f8:	8822943a 	slli	r17,r17,16
 20095fc:	b808d43a 	srli	r4,r23,16
 2009600:	84a8983a 	sll	r20,r16,r18
 2009604:	8906b03a 	or	r3,r17,r4
 2009608:	1880042e 	bgeu	r3,r2,200961c <__umoddi3+0x528>
 200960c:	1cc7883a 	add	r3,r3,r19
 2009610:	1cc00236 	bltu	r3,r19,200961c <__umoddi3+0x528>
 2009614:	1880012e 	bgeu	r3,r2,200961c <__umoddi3+0x528>
 2009618:	1cc7883a 	add	r3,r3,r19
 200961c:	18a1c83a 	sub	r16,r3,r2
 2009620:	8009883a 	mov	r4,r16
 2009624:	a80b883a 	mov	r5,r21
 2009628:	2003c780 	call	2003c78 <__umodsi3>
 200962c:	8009883a 	mov	r4,r16
 2009630:	a80b883a 	mov	r5,r21
 2009634:	1039883a 	mov	fp,r2
 2009638:	2003c700 	call	2003c70 <__udivsi3>
 200963c:	1009883a 	mov	r4,r2
 2009640:	b00b883a 	mov	r5,r22
 2009644:	2003c800 	call	2003c80 <__mulsi3>
 2009648:	e006943a 	slli	r3,fp,16
 200964c:	b93fffcc 	andi	r4,r23,65535
 2009650:	1906b03a 	or	r3,r3,r4
 2009654:	1880042e 	bgeu	r3,r2,2009668 <__umoddi3+0x574>
 2009658:	1cc7883a 	add	r3,r3,r19
 200965c:	1cc00236 	bltu	r3,r19,2009668 <__umoddi3+0x574>
 2009660:	1880012e 	bgeu	r3,r2,2009668 <__umoddi3+0x574>
 2009664:	1cc7883a 	add	r3,r3,r19
 2009668:	18a3c83a 	sub	r17,r3,r2
 200966c:	003f1e06 	br	20092e8 <__alt_mem_onchip_memory2_0+0xfdff92e8>
 2009670:	8ccfc83a 	sub	r7,r17,r19
 2009674:	1d89c83a 	sub	r4,r3,r22
 2009678:	89e3803a 	cmpltu	r17,r17,r7
 200967c:	2463c83a 	sub	r17,r4,r17
 2009680:	9449c83a 	sub	r4,r18,r17
 2009684:	003fc006 	br	2009588 <__alt_mem_onchip_memory2_0+0xfdff9588>
 2009688:	000b883a 	mov	r5,zero
 200968c:	002b883a 	mov	r21,zero
 2009690:	003eeb06 	br	2009240 <__alt_mem_onchip_memory2_0+0xfdff9240>
 2009694:	01400404 	movi	r5,16
 2009698:	282b883a 	mov	r21,r5
 200969c:	003ee806 	br	2009240 <__alt_mem_onchip_memory2_0+0xfdff9240>
 20096a0:	01400404 	movi	r5,16
 20096a4:	2805883a 	mov	r2,r5
 20096a8:	003eaa06 	br	2009154 <__alt_mem_onchip_memory2_0+0xfdff9154>
 20096ac:	0005883a 	mov	r2,zero
 20096b0:	0007883a 	mov	r3,zero
 20096b4:	003eff06 	br	20092b4 <__alt_mem_onchip_memory2_0+0xfdff92b4>
 20096b8:	00800404 	movi	r2,16
 20096bc:	1007883a 	mov	r3,r2
 20096c0:	003efc06 	br	20092b4 <__alt_mem_onchip_memory2_0+0xfdff92b4>
 20096c4:	000b883a 	mov	r5,zero
 20096c8:	0005883a 	mov	r2,zero
 20096cc:	003ea106 	br	2009154 <__alt_mem_onchip_memory2_0+0xfdff9154>
 20096d0:	90bf802e 	bgeu	r18,r2,20094d4 <__alt_mem_onchip_memory2_0+0xfdff94d4>
 20096d4:	bdffff84 	addi	r23,r23,-2
 20096d8:	95a5883a 	add	r18,r18,r22
 20096dc:	003f7e06 	br	20094d8 <__alt_mem_onchip_memory2_0+0xfdff94d8>
 20096e0:	18bf652e 	bgeu	r3,r2,2009478 <__alt_mem_onchip_memory2_0+0xfdff9478>
 20096e4:	e73fff84 	addi	fp,fp,-2
 20096e8:	1d87883a 	add	r3,r3,r22
 20096ec:	003f6306 	br	200947c <__alt_mem_onchip_memory2_0+0xfdff947c>
 20096f0:	1cc7883a 	add	r3,r3,r19
 20096f4:	003f0d06 	br	200932c <__alt_mem_onchip_memory2_0+0xfdff932c>
 20096f8:	8005883a 	mov	r2,r16
 20096fc:	003edf06 	br	200927c <__alt_mem_onchip_memory2_0+0xfdff927c>
 2009700:	847fdb36 	bltu	r16,r17,2009670 <__alt_mem_onchip_memory2_0+0xfdff9670>
 2009704:	880f883a 	mov	r7,r17
 2009708:	0009883a 	mov	r4,zero
 200970c:	003f9e06 	br	2009588 <__alt_mem_onchip_memory2_0+0xfdff9588>
